package glib;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.TypedPointer;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.cpp.CPPRuntime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>GLib</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GLib") 
@Runtime(CPPRuntime.class) 
public class GLibLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:5</i>
	 */
	public enum GThreadError implements IntValuedEnum<GThreadError > {
		/** Resource temporarily unavailable */
		G_THREAD_ERROR_AGAIN(0);
		GThreadError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GThreadError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GThreadError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:44</i>
	 */
	public enum GOnceStatus implements IntValuedEnum<GOnceStatus > {
		G_ONCE_STATUS_NOTCALLED(0),
		G_ONCE_STATUS_PROGRESS(1),
		G_ONCE_STATUS_READY(2);
		GOnceStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GOnceStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GOnceStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:24</i>
	 */
	public enum GBookmarkFileError implements IntValuedEnum<GBookmarkFileError > {
		G_BOOKMARK_FILE_ERROR_INVALID_URI(0),
		G_BOOKMARK_FILE_ERROR_INVALID_VALUE(1),
		G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED(2),
		G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND(3),
		G_BOOKMARK_FILE_ERROR_READ(4),
		G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING(5),
		G_BOOKMARK_FILE_ERROR_WRITE(6),
		G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND(7);
		GBookmarkFileError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GBookmarkFileError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GBookmarkFileError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:18</i>
	 */
	public enum GChecksumType implements IntValuedEnum<GChecksumType > {
		G_CHECKSUM_MD5(0),
		G_CHECKSUM_SHA1(1),
		G_CHECKSUM_SHA256(2),
		G_CHECKSUM_SHA512(3);
		GChecksumType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GChecksumType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GChecksumType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:19</i>
	 */
	public enum GConvertError implements IntValuedEnum<GConvertError > {
		G_CONVERT_ERROR_NO_CONVERSION(0),
		G_CONVERT_ERROR_ILLEGAL_SEQUENCE(1),
		G_CONVERT_ERROR_FAILED(2),
		G_CONVERT_ERROR_PARTIAL_INPUT(3),
		G_CONVERT_ERROR_BAD_URI(4),
		G_CONVERT_ERROR_NOT_ABSOLUTE_PATH(5);
		GConvertError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GConvertError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GConvertError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:10</i>
	 */
	public enum GDateDMY implements IntValuedEnum<GDateDMY > {
		G_DATE_DAY(0),
		G_DATE_MONTH(1),
		G_DATE_YEAR(2);
		GDateDMY(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDateDMY > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDateDMY > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:21</i>
	 */
	public enum GDateWeekday implements IntValuedEnum<GDateWeekday > {
		G_DATE_BAD_WEEKDAY(0),
		G_DATE_MONDAY(1),
		G_DATE_TUESDAY(2),
		G_DATE_WEDNESDAY(3),
		G_DATE_THURSDAY(4),
		G_DATE_FRIDAY(5),
		G_DATE_SATURDAY(6),
		G_DATE_SUNDAY(7);
		GDateWeekday(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDateWeekday > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDateWeekday > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:36</i>
	 */
	public enum GDateMonth implements IntValuedEnum<GDateMonth > {
		G_DATE_BAD_MONTH(0),
		G_DATE_JANUARY(1),
		G_DATE_FEBRUARY(2),
		G_DATE_MARCH(3),
		G_DATE_APRIL(4),
		G_DATE_MAY(5),
		G_DATE_JUNE(6),
		G_DATE_JULY(7),
		G_DATE_AUGUST(8),
		G_DATE_SEPTEMBER(9),
		G_DATE_OCTOBER(10),
		G_DATE_NOVEMBER(11),
		G_DATE_DECEMBER(12);
		GDateMonth(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDateMonth > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDateMonth > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:18</i>
	 */
	public enum GTimeType implements IntValuedEnum<GTimeType > {
		G_TIME_TYPE_STANDARD(0),
		G_TIME_TYPE_DAYLIGHT(1),
		G_TIME_TYPE_UNIVERSAL(2);
		GTimeType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTimeType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTimeType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:27</i>
	 */
	public enum GFileError implements IntValuedEnum<GFileError > {
		G_FILE_ERROR_EXIST(0),
		G_FILE_ERROR_ISDIR(1),
		G_FILE_ERROR_ACCES(2),
		G_FILE_ERROR_NAMETOOLONG(3),
		G_FILE_ERROR_NOENT(4),
		G_FILE_ERROR_NOTDIR(5),
		G_FILE_ERROR_NXIO(6),
		G_FILE_ERROR_NODEV(7),
		G_FILE_ERROR_ROFS(8),
		G_FILE_ERROR_TXTBSY(9),
		G_FILE_ERROR_FAULT(10),
		G_FILE_ERROR_LOOP(11),
		G_FILE_ERROR_NOSPC(12),
		G_FILE_ERROR_NOMEM(13),
		G_FILE_ERROR_MFILE(14),
		G_FILE_ERROR_NFILE(15),
		G_FILE_ERROR_BADF(16),
		G_FILE_ERROR_INVAL(17),
		G_FILE_ERROR_PIPE(18),
		G_FILE_ERROR_AGAIN(19),
		G_FILE_ERROR_INTR(20),
		G_FILE_ERROR_IO(21),
		G_FILE_ERROR_PERM(22),
		G_FILE_ERROR_NOSYS(23),
		G_FILE_ERROR_FAILED(24);
		GFileError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GFileError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GFileError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:39</i>
	 */
	public enum GFileTest implements IntValuedEnum<GFileTest > {
		G_FILE_TEST_IS_REGULAR(1 << 0),
		G_FILE_TEST_IS_SYMLINK(1 << 1),
		G_FILE_TEST_IS_DIR(1 << 2),
		G_FILE_TEST_IS_EXECUTABLE(1 << 3),
		G_FILE_TEST_EXISTS(1 << 4);
		GFileTest(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GFileTest > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GFileTest > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:10</i>
	 */
	public enum GTraverseFlags implements IntValuedEnum<GTraverseFlags > {
		G_TRAVERSE_LEAVES(1 << 0),
		G_TRAVERSE_NON_LEAVES(1 << 1),
		G_TRAVERSE_ALL(1 << 0 | 1 << 1),
		G_TRAVERSE_MASK(0x03),
		G_TRAVERSE_LEAFS(1 << 0),
		G_TRAVERSE_NON_LEAFS(1 << 1);
		GTraverseFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTraverseFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTraverseFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:17</i>
	 */
	public enum GTraverseType implements IntValuedEnum<GTraverseType > {
		G_IN_ORDER(0),
		G_PRE_ORDER(1),
		G_POST_ORDER(2),
		G_LEVEL_ORDER(3);
		GTraverseType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTraverseType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTraverseType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:15</i>
	 */
	public enum GHookFlagMask implements IntValuedEnum<GHookFlagMask > {
		G_HOOK_FLAG_ACTIVE(1 << 0),
		G_HOOK_FLAG_IN_CALL(1 << 1),
		G_HOOK_FLAG_MASK(0x0f);
		GHookFlagMask(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GHookFlagMask > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GHookFlagMask > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:8</i>
	 */
	public enum GIOCondition implements IntValuedEnum<GIOCondition > {
		G_IO_IN(1),
		G_IO_OUT(4),
		G_IO_PRI(2),
		G_IO_ERR(8),
		G_IO_HUP(16),
		G_IO_NVAL(32);
		GIOCondition(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GIOCondition > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GIOCondition > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:105</i>
	 */
	public enum GUnicodeType implements IntValuedEnum<GUnicodeType > {
		G_UNICODE_CONTROL(0),
		G_UNICODE_FORMAT(1),
		G_UNICODE_UNASSIGNED(2),
		G_UNICODE_PRIVATE_USE(3),
		G_UNICODE_SURROGATE(4),
		G_UNICODE_LOWERCASE_LETTER(5),
		G_UNICODE_MODIFIER_LETTER(6),
		G_UNICODE_OTHER_LETTER(7),
		G_UNICODE_TITLECASE_LETTER(8),
		G_UNICODE_UPPERCASE_LETTER(9),
		G_UNICODE_SPACING_MARK(10),
		G_UNICODE_ENCLOSING_MARK(11),
		G_UNICODE_NON_SPACING_MARK(12),
		G_UNICODE_DECIMAL_NUMBER(13),
		G_UNICODE_LETTER_NUMBER(14),
		G_UNICODE_OTHER_NUMBER(15),
		G_UNICODE_CONNECT_PUNCTUATION(16),
		G_UNICODE_DASH_PUNCTUATION(17),
		G_UNICODE_CLOSE_PUNCTUATION(18),
		G_UNICODE_FINAL_PUNCTUATION(19),
		G_UNICODE_INITIAL_PUNCTUATION(20),
		G_UNICODE_OTHER_PUNCTUATION(21),
		G_UNICODE_OPEN_PUNCTUATION(22),
		G_UNICODE_CURRENCY_SYMBOL(23),
		G_UNICODE_MODIFIER_SYMBOL(24),
		G_UNICODE_MATH_SYMBOL(25),
		G_UNICODE_OTHER_SYMBOL(26),
		G_UNICODE_LINE_SEPARATOR(27),
		G_UNICODE_PARAGRAPH_SEPARATOR(28),
		G_UNICODE_SPACE_SEPARATOR(29);
		GUnicodeType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GUnicodeType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GUnicodeType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:194</i>
	 */
	public enum GUnicodeBreakType implements IntValuedEnum<GUnicodeBreakType > {
		G_UNICODE_BREAK_MANDATORY(0),
		G_UNICODE_BREAK_CARRIAGE_RETURN(1),
		G_UNICODE_BREAK_LINE_FEED(2),
		G_UNICODE_BREAK_COMBINING_MARK(3),
		G_UNICODE_BREAK_SURROGATE(4),
		G_UNICODE_BREAK_ZERO_WIDTH_SPACE(5),
		G_UNICODE_BREAK_INSEPARABLE(6),
		G_UNICODE_BREAK_NON_BREAKING_GLUE(7),
		G_UNICODE_BREAK_CONTINGENT(8),
		G_UNICODE_BREAK_SPACE(9),
		G_UNICODE_BREAK_AFTER(10),
		G_UNICODE_BREAK_BEFORE(11),
		G_UNICODE_BREAK_BEFORE_AND_AFTER(12),
		G_UNICODE_BREAK_HYPHEN(13),
		G_UNICODE_BREAK_NON_STARTER(14),
		G_UNICODE_BREAK_OPEN_PUNCTUATION(15),
		G_UNICODE_BREAK_CLOSE_PUNCTUATION(16),
		G_UNICODE_BREAK_QUOTATION(17),
		G_UNICODE_BREAK_EXCLAMATION(18),
		G_UNICODE_BREAK_IDEOGRAPHIC(19),
		G_UNICODE_BREAK_NUMERIC(20),
		G_UNICODE_BREAK_INFIX_SEPARATOR(21),
		G_UNICODE_BREAK_SYMBOL(22),
		G_UNICODE_BREAK_ALPHABETIC(23),
		G_UNICODE_BREAK_PREFIX(24),
		G_UNICODE_BREAK_POSTFIX(25),
		G_UNICODE_BREAK_COMPLEX_CONTEXT(26),
		G_UNICODE_BREAK_AMBIGUOUS(27),
		G_UNICODE_BREAK_UNKNOWN(28),
		G_UNICODE_BREAK_NEXT_LINE(29),
		G_UNICODE_BREAK_WORD_JOINER(30),
		G_UNICODE_BREAK_HANGUL_L_JAMO(31),
		G_UNICODE_BREAK_HANGUL_V_JAMO(32),
		G_UNICODE_BREAK_HANGUL_T_JAMO(33),
		G_UNICODE_BREAK_HANGUL_LV_SYLLABLE(34),
		G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE(35),
		G_UNICODE_BREAK_CLOSE_PARANTHESIS(36),
		G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER(37),
		G_UNICODE_BREAK_HEBREW_LETTER(38),
		G_UNICODE_BREAK_REGIONAL_INDICATOR(39);
		GUnicodeBreakType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GUnicodeBreakType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GUnicodeBreakType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:435</i>
	 */
	public enum GUnicodeScript implements IntValuedEnum<GUnicodeScript > {
		G_UNICODE_SCRIPT_INVALID_CODE(-1),
		/** Zyyy */
		G_UNICODE_SCRIPT_COMMON(0),
		/** Zinh (Qaai) */
		G_UNICODE_SCRIPT_INHERITED(1),
		/** Arab */
		G_UNICODE_SCRIPT_ARABIC(2),
		/** Armn */
		G_UNICODE_SCRIPT_ARMENIAN(3),
		/** Beng */
		G_UNICODE_SCRIPT_BENGALI(4),
		/** Bopo */
		G_UNICODE_SCRIPT_BOPOMOFO(5),
		/** Cher */
		G_UNICODE_SCRIPT_CHEROKEE(6),
		/** Copt (Qaac) */
		G_UNICODE_SCRIPT_COPTIC(7),
		/** Cyrl (Cyrs) */
		G_UNICODE_SCRIPT_CYRILLIC(8),
		/** Dsrt */
		G_UNICODE_SCRIPT_DESERET(9),
		/** Deva */
		G_UNICODE_SCRIPT_DEVANAGARI(10),
		/** Ethi */
		G_UNICODE_SCRIPT_ETHIOPIC(11),
		/** Geor (Geon, Geoa) */
		G_UNICODE_SCRIPT_GEORGIAN(12),
		/** Goth */
		G_UNICODE_SCRIPT_GOTHIC(13),
		/** Grek */
		G_UNICODE_SCRIPT_GREEK(14),
		/** Gujr */
		G_UNICODE_SCRIPT_GUJARATI(15),
		/** Guru */
		G_UNICODE_SCRIPT_GURMUKHI(16),
		/** Hani */
		G_UNICODE_SCRIPT_HAN(17),
		/** Hang */
		G_UNICODE_SCRIPT_HANGUL(18),
		/** Hebr */
		G_UNICODE_SCRIPT_HEBREW(19),
		/** Hira */
		G_UNICODE_SCRIPT_HIRAGANA(20),
		/** Knda */
		G_UNICODE_SCRIPT_KANNADA(21),
		/** Kana */
		G_UNICODE_SCRIPT_KATAKANA(22),
		/** Khmr */
		G_UNICODE_SCRIPT_KHMER(23),
		/** Laoo */
		G_UNICODE_SCRIPT_LAO(24),
		/** Latn (Latf, Latg) */
		G_UNICODE_SCRIPT_LATIN(25),
		/** Mlym */
		G_UNICODE_SCRIPT_MALAYALAM(26),
		/** Mong */
		G_UNICODE_SCRIPT_MONGOLIAN(27),
		/** Mymr */
		G_UNICODE_SCRIPT_MYANMAR(28),
		/** Ogam */
		G_UNICODE_SCRIPT_OGHAM(29),
		/** Ital */
		G_UNICODE_SCRIPT_OLD_ITALIC(30),
		/** Orya */
		G_UNICODE_SCRIPT_ORIYA(31),
		/** Runr */
		G_UNICODE_SCRIPT_RUNIC(32),
		/** Sinh */
		G_UNICODE_SCRIPT_SINHALA(33),
		/** Syrc (Syrj, Syrn, Syre) */
		G_UNICODE_SCRIPT_SYRIAC(34),
		/** Taml */
		G_UNICODE_SCRIPT_TAMIL(35),
		/** Telu */
		G_UNICODE_SCRIPT_TELUGU(36),
		/** Thaa */
		G_UNICODE_SCRIPT_THAANA(37),
		/** Thai */
		G_UNICODE_SCRIPT_THAI(38),
		/** Tibt */
		G_UNICODE_SCRIPT_TIBETAN(39),
		/** Cans */
		G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL(40),
		/** Yiii */
		G_UNICODE_SCRIPT_YI(41),
		/** Tglg */
		G_UNICODE_SCRIPT_TAGALOG(42),
		/** Hano */
		G_UNICODE_SCRIPT_HANUNOO(43),
		/** Buhd */
		G_UNICODE_SCRIPT_BUHID(44),
		/** Tagb */
		G_UNICODE_SCRIPT_TAGBANWA(45),
		/**
		 * Unicode-4.0 additions<br>
		 * Brai
		 */
		G_UNICODE_SCRIPT_BRAILLE(46),
		/** Cprt */
		G_UNICODE_SCRIPT_CYPRIOT(47),
		/** Limb */
		G_UNICODE_SCRIPT_LIMBU(48),
		/** Osma */
		G_UNICODE_SCRIPT_OSMANYA(49),
		/** Shaw */
		G_UNICODE_SCRIPT_SHAVIAN(50),
		/** Linb */
		G_UNICODE_SCRIPT_LINEAR_B(51),
		/** Tale */
		G_UNICODE_SCRIPT_TAI_LE(52),
		/** Ugar */
		G_UNICODE_SCRIPT_UGARITIC(53),
		/**
		 * Unicode-4.1 additions<br>
		 * Talu
		 */
		G_UNICODE_SCRIPT_NEW_TAI_LUE(54),
		/** Bugi */
		G_UNICODE_SCRIPT_BUGINESE(55),
		/** Glag */
		G_UNICODE_SCRIPT_GLAGOLITIC(56),
		/** Tfng */
		G_UNICODE_SCRIPT_TIFINAGH(57),
		/** Sylo */
		G_UNICODE_SCRIPT_SYLOTI_NAGRI(58),
		/** Xpeo */
		G_UNICODE_SCRIPT_OLD_PERSIAN(59),
		/** Khar */
		G_UNICODE_SCRIPT_KHAROSHTHI(60),
		/**
		 * Unicode-5.0 additions<br>
		 * Zzzz
		 */
		G_UNICODE_SCRIPT_UNKNOWN(61),
		/** Bali */
		G_UNICODE_SCRIPT_BALINESE(62),
		/** Xsux */
		G_UNICODE_SCRIPT_CUNEIFORM(63),
		/** Phnx */
		G_UNICODE_SCRIPT_PHOENICIAN(64),
		/** Phag */
		G_UNICODE_SCRIPT_PHAGS_PA(65),
		/** Nkoo */
		G_UNICODE_SCRIPT_NKO(66),
		/**
		 * Unicode-5.1 additions<br>
		 * Kali
		 */
		G_UNICODE_SCRIPT_KAYAH_LI(67),
		/** Lepc */
		G_UNICODE_SCRIPT_LEPCHA(68),
		/** Rjng */
		G_UNICODE_SCRIPT_REJANG(69),
		/** Sund */
		G_UNICODE_SCRIPT_SUNDANESE(70),
		/** Saur */
		G_UNICODE_SCRIPT_SAURASHTRA(71),
		/** Cham */
		G_UNICODE_SCRIPT_CHAM(72),
		/** Olck */
		G_UNICODE_SCRIPT_OL_CHIKI(73),
		/** Vaii */
		G_UNICODE_SCRIPT_VAI(74),
		/** Cari */
		G_UNICODE_SCRIPT_CARIAN(75),
		/** Lyci */
		G_UNICODE_SCRIPT_LYCIAN(76),
		/** Lydi */
		G_UNICODE_SCRIPT_LYDIAN(77),
		/**
		 * Unicode-5.2 additions<br>
		 * Avst
		 */
		G_UNICODE_SCRIPT_AVESTAN(78),
		/** Bamu */
		G_UNICODE_SCRIPT_BAMUM(79),
		/** Egyp */
		G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS(80),
		/** Armi */
		G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC(81),
		/** Phli */
		G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI(82),
		/** Prti */
		G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN(83),
		/** Java */
		G_UNICODE_SCRIPT_JAVANESE(84),
		/** Kthi */
		G_UNICODE_SCRIPT_KAITHI(85),
		/** Lisu */
		G_UNICODE_SCRIPT_LISU(86),
		/** Mtei */
		G_UNICODE_SCRIPT_MEETEI_MAYEK(87),
		/** Sarb */
		G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN(88),
		/** Orkh */
		G_UNICODE_SCRIPT_OLD_TURKIC(89),
		/** Samr */
		G_UNICODE_SCRIPT_SAMARITAN(90),
		/** Lana */
		G_UNICODE_SCRIPT_TAI_THAM(91),
		/** Tavt */
		G_UNICODE_SCRIPT_TAI_VIET(92),
		/**
		 * Unicode-6.0 additions<br>
		 * Batk
		 */
		G_UNICODE_SCRIPT_BATAK(93),
		/** Brah */
		G_UNICODE_SCRIPT_BRAHMI(94),
		/** Mand */
		G_UNICODE_SCRIPT_MANDAIC(95),
		/**
		 * Unicode-6.1 additions<br>
		 * Cakm
		 */
		G_UNICODE_SCRIPT_CHAKMA(96),
		/** Merc */
		G_UNICODE_SCRIPT_MEROITIC_CURSIVE(97),
		/** Mero */
		G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS(98),
		/** Plrd */
		G_UNICODE_SCRIPT_MIAO(99),
		/** Shrd */
		G_UNICODE_SCRIPT_SHARADA(100),
		/** Sora */
		G_UNICODE_SCRIPT_SORA_SOMPENG(101),
		/** Takr */
		G_UNICODE_SCRIPT_TAKRI(102);
		GUnicodeScript(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GUnicodeScript > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GUnicodeScript > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:625</i>
	 */
	public enum GNormalizeMode implements IntValuedEnum<GNormalizeMode > {
		G_NORMALIZE_DEFAULT(0),
		G_NORMALIZE_NFD(0),
		G_NORMALIZE_DEFAULT_COMPOSE((0 + 1)),
		G_NORMALIZE_NFC(0 + 1),
		G_NORMALIZE_ALL((0 + 1 + 1)),
		G_NORMALIZE_NFKD(0 + 1 + 1),
		G_NORMALIZE_ALL_COMPOSE((0 + 1 + 1 + 1)),
		G_NORMALIZE_NFKC(0 + 1 + 1 + 1);
		GNormalizeMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GNormalizeMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GNormalizeMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:62</i>
	 */
	public enum GUserDirectory implements IntValuedEnum<GUserDirectory > {
		G_USER_DIRECTORY_DESKTOP(0),
		G_USER_DIRECTORY_DOCUMENTS(1),
		G_USER_DIRECTORY_DOWNLOAD(2),
		G_USER_DIRECTORY_MUSIC(3),
		G_USER_DIRECTORY_PICTURES(4),
		G_USER_DIRECTORY_PUBLIC_SHARE(5),
		G_USER_DIRECTORY_TEMPLATES(6),
		G_USER_DIRECTORY_VIDEOS(7),
		G_USER_N_DIRECTORIES(8);
		GUserDirectory(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GUserDirectory > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GUserDirectory > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:92</i>
	 */
	public enum GFormatSizeFlags implements IntValuedEnum<GFormatSizeFlags > {
		G_FORMAT_SIZE_DEFAULT(0),
		G_FORMAT_SIZE_LONG_FORMAT(1 << 0),
		G_FORMAT_SIZE_IEC_UNITS(1 << 1);
		GFormatSizeFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GFormatSizeFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GFormatSizeFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:8</i>
	 */
	public enum GIOError implements IntValuedEnum<GIOError > {
		G_IO_ERROR_NONE(0),
		G_IO_ERROR_AGAIN(1),
		G_IO_ERROR_INVAL(2),
		G_IO_ERROR_UNKNOWN(3);
		GIOError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GIOError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GIOError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:21</i>
	 */
	public enum GIOChannelError implements IntValuedEnum<GIOChannelError > {
		/** Derived from errno */
		G_IO_CHANNEL_ERROR_FBIG(0),
		G_IO_CHANNEL_ERROR_INVAL(1),
		G_IO_CHANNEL_ERROR_IO(2),
		G_IO_CHANNEL_ERROR_ISDIR(3),
		G_IO_CHANNEL_ERROR_NOSPC(4),
		G_IO_CHANNEL_ERROR_NXIO(5),
		G_IO_CHANNEL_ERROR_OVERFLOW(6),
		G_IO_CHANNEL_ERROR_PIPE(7),
		/** Other */
		G_IO_CHANNEL_ERROR_FAILED(8);
		GIOChannelError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GIOChannelError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GIOChannelError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:27</i>
	 */
	public enum GIOStatus implements IntValuedEnum<GIOStatus > {
		G_IO_STATUS_ERROR(0),
		G_IO_STATUS_NORMAL(1),
		G_IO_STATUS_EOF(2),
		G_IO_STATUS_AGAIN(3);
		GIOStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GIOStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GIOStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:32</i>
	 */
	public enum GSeekType implements IntValuedEnum<GSeekType > {
		G_SEEK_CUR(0),
		G_SEEK_SET(1),
		G_SEEK_END(2);
		GSeekType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GSeekType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GSeekType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:43</i>
	 */
	public enum GIOFlags implements IntValuedEnum<GIOFlags > {
		G_IO_FLAG_APPEND(1 << 0),
		G_IO_FLAG_NONBLOCK(1 << 1),
		/** Read only flag */
		G_IO_FLAG_IS_READABLE(1 << 2),
		/** Read only flag */
		G_IO_FLAG_IS_WRITABLE(1 << 3),
		/** Misspelling in 2.29.10 and earlier */
		G_IO_FLAG_IS_WRITEABLE(1 << 3),
		/** Read only flag */
		G_IO_FLAG_IS_SEEKABLE(1 << 4),
		G_IO_FLAG_MASK((1 << 5) - 1),
		G_IO_FLAG_GET_MASK((1 << 5) - 1),
		G_IO_FLAG_SET_MASK(1 << 0 | 1 << 1);
		GIOFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GIOFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GIOFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:8</i>
	 */
	public enum GKeyFileError implements IntValuedEnum<GKeyFileError > {
		G_KEY_FILE_ERROR_UNKNOWN_ENCODING(0),
		G_KEY_FILE_ERROR_PARSE(1),
		G_KEY_FILE_ERROR_NOT_FOUND(2),
		G_KEY_FILE_ERROR_KEY_NOT_FOUND(3),
		G_KEY_FILE_ERROR_GROUP_NOT_FOUND(4),
		G_KEY_FILE_ERROR_INVALID_VALUE(5);
		GKeyFileError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GKeyFileError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GKeyFileError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:16</i>
	 */
	public enum GKeyFileFlags implements IntValuedEnum<GKeyFileFlags > {
		G_KEY_FILE_NONE(0),
		G_KEY_FILE_KEEP_COMMENTS(1 << 0),
		G_KEY_FILE_KEEP_TRANSLATIONS(1 << 1);
		GKeyFileFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GKeyFileFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GKeyFileFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:28</i>
	 */
	public enum GMarkupError implements IntValuedEnum<GMarkupError > {
		G_MARKUP_ERROR_BAD_UTF8(0),
		G_MARKUP_ERROR_EMPTY(1),
		G_MARKUP_ERROR_PARSE(2),
		/**
		 * The following are primarily intended for specific GMarkupParser<br>
		 * implementations to set.
		 */
		G_MARKUP_ERROR_UNKNOWN_ELEMENT(3),
		G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE(4),
		G_MARKUP_ERROR_INVALID_CONTENT(5),
		G_MARKUP_ERROR_MISSING_ATTRIBUTE(6);
		GMarkupError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GMarkupError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GMarkupError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:50</i>
	 */
	public enum GMarkupParseFlags implements IntValuedEnum<GMarkupParseFlags > {
		G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG(1 << 0),
		G_MARKUP_TREAT_CDATA_AS_TEXT(1 << 1),
		G_MARKUP_PREFIX_ERROR_POSITION(1 << 2);
		GMarkupParseFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GMarkupParseFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GMarkupParseFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:149</i>
	 */
	public enum GMarkupCollectType implements IntValuedEnum<GMarkupCollectType > {
		G_MARKUP_COLLECT_INVALID(0),
		G_MARKUP_COLLECT_STRING(1),
		G_MARKUP_COLLECT_STRDUP(2),
		G_MARKUP_COLLECT_BOOLEAN(3),
		G_MARKUP_COLLECT_TRISTATE(4),
		G_MARKUP_COLLECT_OPTIONAL((1 << 16));
		GMarkupCollectType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GMarkupCollectType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GMarkupCollectType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:19</i>
	 */
	public enum GLogLevelFlags implements IntValuedEnum<GLogLevelFlags > {
		/** log flags */
		G_LOG_FLAG_RECURSION(1 << 0),
		G_LOG_FLAG_FATAL(1 << 1),
		/**
		 * GLib log levels<br>
		 * always fatal
		 */
		G_LOG_LEVEL_ERROR(1 << 2),
		G_LOG_LEVEL_CRITICAL(1 << 3),
		G_LOG_LEVEL_WARNING(1 << 4),
		G_LOG_LEVEL_MESSAGE(1 << 5),
		G_LOG_LEVEL_INFO(1 << 6),
		G_LOG_LEVEL_DEBUG(1 << 7),
		G_LOG_LEVEL_MASK(~(1 << 0 | 1 << 1));
		GLogLevelFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GLogLevelFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GLogLevelFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/goption.h:54</i>
	 */
	public enum GOptionFlags implements IntValuedEnum<GOptionFlags > {
		G_OPTION_FLAG_HIDDEN(1 << 0),
		G_OPTION_FLAG_IN_MAIN(1 << 1),
		G_OPTION_FLAG_REVERSE(1 << 2),
		G_OPTION_FLAG_NO_ARG(1 << 3),
		G_OPTION_FLAG_FILENAME(1 << 4),
		G_OPTION_FLAG_OPTIONAL_ARG(1 << 5),
		G_OPTION_FLAG_NOALIAS(1 << 6);
		GOptionFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GOptionFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GOptionFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/goption.h:90</i>
	 */
	public enum GOptionArg implements IntValuedEnum<GOptionArg > {
		G_OPTION_ARG_NONE(0),
		G_OPTION_ARG_STRING(1),
		G_OPTION_ARG_INT(2),
		G_OPTION_ARG_CALLBACK(3),
		G_OPTION_ARG_FILENAME(4),
		G_OPTION_ARG_STRING_ARRAY(5),
		G_OPTION_ARG_FILENAME_ARRAY(6),
		G_OPTION_ARG_DOUBLE(7),
		G_OPTION_ARG_INT64(8);
		GOptionArg(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GOptionArg > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GOptionArg > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/goption.h:148</i>
	 */
	public enum GOptionError implements IntValuedEnum<GOptionError > {
		G_OPTION_ERROR_UNKNOWN_OPTION(0),
		G_OPTION_ERROR_BAD_VALUE(1),
		G_OPTION_ERROR_FAILED(2);
		GOptionError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GOptionError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GOptionError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:165</i>
	 */
	public enum GRegexError implements IntValuedEnum<GRegexError > {
		G_REGEX_ERROR_COMPILE(0),
		G_REGEX_ERROR_OPTIMIZE(1),
		G_REGEX_ERROR_REPLACE(2),
		G_REGEX_ERROR_MATCH(3),
		G_REGEX_ERROR_INTERNAL(4),
		/** These are the error codes from PCRE + 100 */
		G_REGEX_ERROR_STRAY_BACKSLASH(101),
		G_REGEX_ERROR_MISSING_CONTROL_CHAR(102),
		G_REGEX_ERROR_UNRECOGNIZED_ESCAPE(103),
		G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER(104),
		G_REGEX_ERROR_QUANTIFIER_TOO_BIG(105),
		G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS(106),
		G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS(107),
		G_REGEX_ERROR_RANGE_OUT_OF_ORDER(108),
		G_REGEX_ERROR_NOTHING_TO_REPEAT(109),
		G_REGEX_ERROR_UNRECOGNIZED_CHARACTER(112),
		G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS(113),
		G_REGEX_ERROR_UNMATCHED_PARENTHESIS(114),
		G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE(115),
		G_REGEX_ERROR_UNTERMINATED_COMMENT(118),
		G_REGEX_ERROR_EXPRESSION_TOO_LARGE(120),
		G_REGEX_ERROR_MEMORY_ERROR(121),
		G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND(125),
		G_REGEX_ERROR_MALFORMED_CONDITION(126),
		G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES(127),
		G_REGEX_ERROR_ASSERTION_EXPECTED(128),
		G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME(130),
		G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED(131),
		G_REGEX_ERROR_HEX_CODE_TOO_LARGE(134),
		G_REGEX_ERROR_INVALID_CONDITION(135),
		G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND(136),
		G_REGEX_ERROR_INFINITE_LOOP(140),
		G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR(142),
		G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME(143),
		G_REGEX_ERROR_MALFORMED_PROPERTY(146),
		G_REGEX_ERROR_UNKNOWN_PROPERTY(147),
		G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG(148),
		G_REGEX_ERROR_TOO_MANY_SUBPATTERNS(149),
		G_REGEX_ERROR_INVALID_OCTAL_VALUE(151),
		G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE(154),
		G_REGEX_ERROR_DEFINE_REPETION(155),
		G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS(156),
		G_REGEX_ERROR_MISSING_BACK_REFERENCE(157),
		G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE(158),
		G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN(159),
		G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB(160),
		G_REGEX_ERROR_NUMBER_TOO_BIG(161),
		G_REGEX_ERROR_MISSING_SUBPATTERN_NAME(162),
		G_REGEX_ERROR_MISSING_DIGIT(163),
		G_REGEX_ERROR_INVALID_DATA_CHARACTER(164),
		G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME(165),
		G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED(166),
		G_REGEX_ERROR_INVALID_CONTROL_CHAR(168),
		G_REGEX_ERROR_MISSING_NAME(169),
		G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS(171),
		G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES(172),
		G_REGEX_ERROR_NAME_TOO_LONG(175),
		G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE(176);
		GRegexError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GRegexError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GRegexError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:191</i>
	 */
	public enum GRegexCompileFlags implements IntValuedEnum<GRegexCompileFlags > {
		G_REGEX_CASELESS(1 << 0),
		G_REGEX_MULTILINE(1 << 1),
		G_REGEX_DOTALL(1 << 2),
		G_REGEX_EXTENDED(1 << 3),
		G_REGEX_ANCHORED(1 << 4),
		G_REGEX_DOLLAR_ENDONLY(1 << 5),
		G_REGEX_UNGREEDY(1 << 9),
		G_REGEX_RAW(1 << 11),
		G_REGEX_NO_AUTO_CAPTURE(1 << 12),
		G_REGEX_OPTIMIZE(1 << 13),
		G_REGEX_FIRSTLINE(1 << 18),
		G_REGEX_DUPNAMES(1 << 19),
		G_REGEX_NEWLINE_CR(1 << 20),
		G_REGEX_NEWLINE_LF(1 << 21),
		G_REGEX_NEWLINE_CRLF(1 << 20 | 1 << 21),
		G_REGEX_NEWLINE_ANYCRLF(1 << 20 | 1 << 22),
		G_REGEX_BSR_ANYCRLF(1 << 23),
		G_REGEX_JAVASCRIPT_COMPAT(1 << 25);
		GRegexCompileFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GRegexCompileFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GRegexCompileFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:212</i>
	 */
	public enum GRegexMatchFlags implements IntValuedEnum<GRegexMatchFlags > {
		G_REGEX_MATCH_ANCHORED(1 << 4),
		G_REGEX_MATCH_NOTBOL(1 << 7),
		G_REGEX_MATCH_NOTEOL(1 << 8),
		G_REGEX_MATCH_NOTEMPTY(1 << 10),
		G_REGEX_MATCH_PARTIAL(1 << 15),
		G_REGEX_MATCH_NEWLINE_CR(1 << 20),
		G_REGEX_MATCH_NEWLINE_LF(1 << 21),
		G_REGEX_MATCH_NEWLINE_CRLF(1 << 20 | 1 << 21),
		G_REGEX_MATCH_NEWLINE_ANY(1 << 22),
		G_REGEX_MATCH_NEWLINE_ANYCRLF(1 << 20 | 1 << 22),
		G_REGEX_MATCH_BSR_ANYCRLF(1 << 23),
		G_REGEX_MATCH_BSR_ANY(1 << 24),
		G_REGEX_MATCH_PARTIAL_SOFT(1 << 15),
		G_REGEX_MATCH_PARTIAL_HARD(1 << 27),
		G_REGEX_MATCH_NOTEMPTY_ATSTART(1 << 28);
		GRegexMatchFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GRegexMatchFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GRegexMatchFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:15</i>
	 */
	public enum GErrorType implements IntValuedEnum<GErrorType > {
		G_ERR_UNKNOWN(0),
		G_ERR_UNEXP_EOF(1),
		G_ERR_UNEXP_EOF_IN_STRING(2),
		G_ERR_UNEXP_EOF_IN_COMMENT(3),
		G_ERR_NON_DIGIT_IN_CONST(4),
		G_ERR_DIGIT_RADIX(5),
		G_ERR_FLOAT_RADIX(6),
		G_ERR_FLOAT_MALFORMED(7);
		GErrorType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GErrorType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GErrorType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:43</i>
	 */
	public enum GTokenType implements IntValuedEnum<GTokenType > {
		G_TOKEN_EOF(0),
		G_TOKEN_LEFT_PAREN('('),
		G_TOKEN_RIGHT_PAREN(')'),
		G_TOKEN_LEFT_CURLY('{'),
		G_TOKEN_RIGHT_CURLY('}'),
		G_TOKEN_LEFT_BRACE('['),
		G_TOKEN_RIGHT_BRACE(']'),
		G_TOKEN_EQUAL_SIGN('='),
		G_TOKEN_COMMA(','),
		G_TOKEN_NONE(256),
		G_TOKEN_ERROR(257),
		G_TOKEN_CHAR(258),
		G_TOKEN_BINARY(259),
		G_TOKEN_OCTAL(260),
		G_TOKEN_INT(261),
		G_TOKEN_HEX(262),
		G_TOKEN_FLOAT(263),
		G_TOKEN_STRING(264),
		G_TOKEN_SYMBOL(265),
		G_TOKEN_IDENTIFIER(266),
		G_TOKEN_IDENTIFIER_NULL(267),
		G_TOKEN_COMMENT_SINGLE(268),
		G_TOKEN_COMMENT_MULTI(269),
		/** < private > */
		G_TOKEN_LAST(270);
		GTokenType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTokenType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTokenType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gshell.h:7</i>
	 */
	public enum GShellError implements IntValuedEnum<GShellError > {
		/** mismatched or otherwise mangled quoting */
		G_SHELL_ERROR_BAD_QUOTING(0),
		/** string to be parsed was empty */
		G_SHELL_ERROR_EMPTY_STRING(1),
		G_SHELL_ERROR_FAILED(2);
		GShellError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GShellError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GShellError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:22</i>
	 */
	public enum GSliceConfig implements IntValuedEnum<GSliceConfig > {
		G_SLICE_CONFIG_ALWAYS_MALLOC(1),
		G_SLICE_CONFIG_BYPASS_MAGAZINES(2),
		G_SLICE_CONFIG_WORKING_SET_MSECS(3),
		G_SLICE_CONFIG_COLOR_INCREMENT(4),
		G_SLICE_CONFIG_CHUNK_SIZES(5),
		G_SLICE_CONFIG_CONTENTION_COUNTER(6);
		GSliceConfig(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GSliceConfig > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GSliceConfig > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:51</i>
	 */
	public enum GSpawnError implements IntValuedEnum<GSpawnError > {
		/** fork failed due to lack of memory */
		G_SPAWN_ERROR_FORK(0),
		/** read or select on pipes failed */
		G_SPAWN_ERROR_READ(1),
		/** changing to working dir failed */
		G_SPAWN_ERROR_CHDIR(2),
		/** execv() returned EACCES */
		G_SPAWN_ERROR_ACCES(3),
		/** execv() returned EPERM */
		G_SPAWN_ERROR_PERM(4),
		/** execv() returned E2BIG */
		G_SPAWN_ERROR_TOO_BIG(5),
		G_SPAWN_ERROR_2BIG(5),
		/** execv() returned ENOEXEC */
		G_SPAWN_ERROR_NOEXEC((5 + 1)),
		/** ""  "" ENAMETOOLONG */
		G_SPAWN_ERROR_NAMETOOLONG((5 + 2)),
		/** ""  "" ENOENT */
		G_SPAWN_ERROR_NOENT((5 + 3)),
		/** ""  "" ENOMEM */
		G_SPAWN_ERROR_NOMEM((5 + 4)),
		/** ""  "" ENOTDIR */
		G_SPAWN_ERROR_NOTDIR((5 + 5)),
		/** ""  "" ELOOP */
		G_SPAWN_ERROR_LOOP((5 + 6)),
		/** ""  "" ETXTBUSY */
		G_SPAWN_ERROR_TXTBUSY((5 + 7)),
		/** ""  "" EIO */
		G_SPAWN_ERROR_IO((5 + 8)),
		/** ""  "" ENFILE */
		G_SPAWN_ERROR_NFILE((5 + 9)),
		/** ""  "" EMFLE */
		G_SPAWN_ERROR_MFILE((5 + 10)),
		/** ""  "" EINVAL */
		G_SPAWN_ERROR_INVAL((5 + 11)),
		/** ""  "" EISDIR */
		G_SPAWN_ERROR_ISDIR((5 + 12)),
		/** ""  "" ELIBBAD */
		G_SPAWN_ERROR_LIBBAD((5 + 13)),
		/**
		 * other fatal failure, error->message<br>
		 * should explain
		 */
		G_SPAWN_ERROR_FAILED((5 + 14));
		GSpawnError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GSpawnError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GSpawnError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:123</i>
	 */
	public enum GSpawnFlags implements IntValuedEnum<GSpawnFlags > {
		G_SPAWN_DEFAULT(0),
		G_SPAWN_LEAVE_DESCRIPTORS_OPEN(1 << 0),
		G_SPAWN_DO_NOT_REAP_CHILD(1 << 1),
		/** look for argv[0] in the path i.e. use execvp() */
		G_SPAWN_SEARCH_PATH(1 << 2),
		/** Dump output to /dev/null */
		G_SPAWN_STDOUT_TO_DEV_NULL(1 << 3),
		G_SPAWN_STDERR_TO_DEV_NULL(1 << 4),
		G_SPAWN_CHILD_INHERITS_STDIN(1 << 5),
		G_SPAWN_FILE_AND_ARGV_ZERO(1 << 6),
		G_SPAWN_SEARCH_PATH_FROM_ENVP(1 << 7);
		GSpawnFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GSpawnFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GSpawnFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:14</i>
	 */
	public enum GAsciiType implements IntValuedEnum<GAsciiType > {
		G_ASCII_ALNUM(1 << 0),
		G_ASCII_ALPHA(1 << 1),
		G_ASCII_CNTRL(1 << 2),
		G_ASCII_DIGIT(1 << 3),
		G_ASCII_GRAPH(1 << 4),
		G_ASCII_LOWER(1 << 5),
		G_ASCII_PRINT(1 << 6),
		G_ASCII_PUNCT(1 << 7),
		G_ASCII_SPACE(1 << 8),
		G_ASCII_UPPER(1 << 9),
		G_ASCII_XDIGIT(1 << 10);
		GAsciiType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GAsciiType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GAsciiType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:78</i>
	 */
	public enum GTestTrapFlags implements IntValuedEnum<GTestTrapFlags > {
		G_TEST_TRAP_SILENCE_STDOUT(1 << 7),
		G_TEST_TRAP_SILENCE_STDERR(1 << 8),
		G_TEST_TRAP_INHERIT_STDIN(1 << 9);
		GTestTrapFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTestTrapFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTestTrapFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:85</i>
	 */
	public enum GTestSubprocessFlags implements IntValuedEnum<GTestSubprocessFlags > {
		G_TEST_SUBPROCESS_INHERIT_STDIN(1 << 0),
		G_TEST_SUBPROCESS_INHERIT_STDOUT(1 << 1),
		G_TEST_SUBPROCESS_INHERIT_STDERR(1 << 2);
		GTestSubprocessFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTestSubprocessFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTestSubprocessFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:156</i>
	 */
	public enum GTestLogType implements IntValuedEnum<GTestLogType > {
		G_TEST_LOG_NONE(0),
		/** s:msg */
		G_TEST_LOG_ERROR(1),
		/** s:binaryname s:seed */
		G_TEST_LOG_START_BINARY(2),
		/** s:testpath */
		G_TEST_LOG_LIST_CASE(3),
		/** s:testpath */
		G_TEST_LOG_SKIP_CASE(4),
		/** s:testpath */
		G_TEST_LOG_START_CASE(5),
		/** d:status d:nforks d:elapsed */
		G_TEST_LOG_STOP_CASE(6),
		/** s:blurb d:result */
		G_TEST_LOG_MIN_RESULT(7),
		/** s:blurb d:result */
		G_TEST_LOG_MAX_RESULT(8),
		/** s:blurb */
		G_TEST_LOG_MESSAGE(9),
		G_TEST_LOG_START_SUITE(10),
		G_TEST_LOG_STOP_SUITE(11);
		GTestLogType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTestLogType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTestLogType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:201</i>
	 */
	public enum GTestFileType implements IntValuedEnum<GTestFileType > {
		G_TEST_DIST(0),
		G_TEST_BUILT(1);
		GTestFileType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTestFileType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTestFileType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:21</i>
	 */
	public enum GVariantClass implements IntValuedEnum<GVariantClass > {
		G_VARIANT_CLASS_BOOLEAN('b'),
		G_VARIANT_CLASS_BYTE('y'),
		G_VARIANT_CLASS_INT16('n'),
		G_VARIANT_CLASS_UINT16('q'),
		G_VARIANT_CLASS_INT32('i'),
		G_VARIANT_CLASS_UINT32('u'),
		G_VARIANT_CLASS_INT64('x'),
		G_VARIANT_CLASS_UINT64('t'),
		G_VARIANT_CLASS_HANDLE('h'),
		G_VARIANT_CLASS_DOUBLE('d'),
		G_VARIANT_CLASS_STRING('s'),
		G_VARIANT_CLASS_OBJECT_PATH('o'),
		G_VARIANT_CLASS_SIGNATURE('g'),
		G_VARIANT_CLASS_VARIANT('v'),
		G_VARIANT_CLASS_MAYBE('m'),
		G_VARIANT_CLASS_ARRAY('a'),
		G_VARIANT_CLASS_TUPLE('('),
		G_VARIANT_CLASS_DICT_ENTRY('{');
		GVariantClass(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GVariantClass > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GVariantClass > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:223</i>
	 */
	public enum GVariantParseError implements IntValuedEnum<GVariantParseError > {
		G_VARIANT_PARSE_ERROR_FAILED(0),
		G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED(1),
		G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE(2),
		G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED(3),
		G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END(4),
		G_VARIANT_PARSE_ERROR_INVALID_CHARACTER(5),
		G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING(6),
		G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH(7),
		G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE(8),
		G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING(9),
		G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE(10),
		G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE(11),
		G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG(12),
		G_VARIANT_PARSE_ERROR_TYPE_ERROR(13),
		G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN(14),
		G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD(15),
		G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT(16),
		G_VARIANT_PARSE_ERROR_VALUE_EXPECTED(17);
		GVariantParseError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GVariantParseError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GVariantParseError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/** <i>native declaration : glib-2.0/glib/gurifuncs.h</i> */
	public static final String G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = (String)"!$&'()*+,;=";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_TRY_EXEC = (String)"TryExec";
	/** <i>native declaration : glib-2.0/glib/gscanner.h</i> */
	public static final String G_CSET_A_2_Z = (String)"ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_DICTIONARY = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("a{?*}").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gscanner.h</i> */
	public static final String G_CSET_LATINS = (String)"\337\340\341\342\343\344\345\346";
	/** <i>native declaration : glib-2.0/glib/gscanner.h</i> */
	public static final String G_CSET_LATINC = (String)"\300\301\302\303\304\305\306";
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_TUPLE = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("r").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gstrfuncs.h</i> */
	public static final int G_ASCII_DTOSTR_BUF_SIZE = (int)(29 + 10);
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_BYTESTRING = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("ay").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_VARIANT = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("v").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gmessages.h</i> */
	public static final Pointer<Byte > G_LOG_DOMAIN = (Pointer<Byte >)(Pointer.pointerToAddress(0, byte.class));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_HANDLE = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("h").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_UNIT = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("()").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_CUR_STABLE = (int)((2) << 16 | (38) << 8);
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_ACTIONS = (String)"Actions";
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_MAX_ALLOWED = (int)((2) << 16 | (38) << 8);
	/** <i>native declaration : glib-2.0/glib/gstrfuncs.h</i> */
	public static final String G_STR_DELIMITERS = (String)"_-|> <.";
	/** <i>native declaration : glib-2.0/glib/gpoll.h</i> */
	public static final String G_POLLFD_FORMAT = (String)"%d";
	/** <i>native declaration : glib-2.0/glib/gdate.h</i> */
	public static final int G_DATE_BAD_DAY = (int)0;
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final int G_IEEE754_DOUBLE_BIAS = (int)(1023);
	/** <i>native declaration : glib-2.0/glib/gfileutils.h</i> */
	public static final String G_DIR_SEPARATOR_S = (String)"/";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = (String)"StartupWMClass";
	/** <i>native declaration : glib-2.0/glib/gtimer.h</i> */
	public static final int G_USEC_PER_SEC = (int)1000000;
	/** <i>native declaration : glib-2.0/glib/gdataset.h</i> */
	public static final int G_DATALIST_FLAGS_MASK = (int)0x3;
	/**
	 * define<br>
	 * Conversion Error : { 0, 0, 0 }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:0</i><br>
	 * { 0, 0, 0 }
	 */
	/** <i>native declaration : glib-2.0/glib/gmessages.h</i> */
	public static final int G_LOG_LEVEL_USER_SHIFT = (int)(8);
	/** <i>native declaration : glib-2.0/glib/gmem.h</i> */
	public static final int G_MEM_ALIGN = (int)4;
	/** <i>native declaration : glib-2.0/glib/gmacros.h</i> */
	public static final int G_ANALYZER_ANALYZING = (int)0;
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY = (String)"NoDisplay";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_ICON = (String)"Icon";
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_PI_4 = (double)0.78539816339744830961566084581987572104929234984378;
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_PI_2 = (double)1.5707963267948966192313216916397514420985846996876;
	/**
	 * define<br>
	 * Conversion Error : (!(0))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:0</i><br>
	 * (!(0))
	 */
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final int G_IEEE754_FLOAT_BIAS = (int)(127);
	/** <i>native declaration : glib-2.0/glib/gscanner.h</i> */
	public static final String G_CSET_DIGITS = (String)"0123456789";
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final int G_LITTLE_ENDIAN = (int)1234;
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_INT32 = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("i").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_INT16 = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("n").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_BASIC = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("?").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE = (String)"DBusActivatable";
	/** <i>native declaration : glib-2.0/glib/gmacros.h</i> */
	public static final String G_STRLOC = (String)"<no file>";
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_INT64 = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("x").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gscanner.h</i> */
	public static final String G_CSET_a_2_z = (String)"abcdefghijklmnopqrstuvwxyz";
	/** <i>native declaration : glib-2.0/glib/gurifuncs.h</i> */
	public static final String G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT = (String)"!$&'()*+,;=";
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_SQRT2 = (double)1.4142135623730950488016887242096980785696718753769;
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_LN2 = (double)0.69314718055994530941723212145817656807550013436026;
	/** <i>native declaration : glib-2.0/glib/gdate.h</i> */
	public static final int G_DATE_BAD_YEAR = (int)0;
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_VARDICT = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("a{sv}").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gurifuncs.h</i> */
	public static final String G_URI_RESERVED_CHARS_ALLOWED_IN_PATH = (String)"!$&'()*+,;=";
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_BYTESTRING_ARRAY = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("aay").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_PREV_STABLE = (int)((2) << 16 | (38 - 2) << 8);
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static final int G_PRIORITY_DEFAULT = (int)0;
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_TYPE = (String)"Type";
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static final int G_PRIORITY_HIGH_IDLE = (int)100;
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME = (String)"GenericName";
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_STRING_ARRAY = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("as").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_HIDDEN = (String)"Hidden";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_MIME_TYPE = (String)"MimeType";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_GROUP = (String)"Desktop Entry";
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static final int G_PRIORITY_DEFAULT_IDLE = (int)200;
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static final int G_PRIORITY_LOW = (int)300;
	/** <i>native declaration : glib-2.0/glib/gfileutils.h</i> */
	public static final char G_DIR_SEPARATOR = (char)'/';
	/** <i>native declaration : glib-2.0/glib/gmacros.h</i> */
	public static final String G_GNUC_FUNCTION = (String)"";
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_LOG_2_BASE_10 = (double)(0.30102999566398119521);
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_DOUBLE = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("d").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static final int G_PRIORITY_HIGH = (int)-100;
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_MAYBE = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("m*").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_OBJECT_PATH = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("o").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gurifuncs.h</i> */
	public static final String G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO = (String)"!$&'()*+,;=";
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static final int G_SOURCE_REMOVE = (int)(0);
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_UINT16 = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("q").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/goption.h</i> */
	public static final String G_OPTION_REMAINING = (String)"";
	/** <i>native declaration : glib-2.0/glib/gmacros.h</i> */
	public static final String G_GNUC_PRETTY_FUNCTION = (String)"";
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_E = (double)2.7182818284590452353602874713526624977572470937000;
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_UINT32 = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("u").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_ANY = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("*").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_DICT_ENTRY = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("{?*}").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_EXEC = (String)"Exec";
	/** <i>native declaration : glib-2.0/glib/gmacros.h</i> */
	public static final int FALSE = (int)(0);
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_UINT64 = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("t").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_TYPE_DIRECTORY = (String)"Directory";
	/** <i>native declaration : glib-2.0/glib/ghook.h</i> */
	public static final int G_HOOK_FLAG_USER_SHIFT = (int)(4);
	/** <i>native declaration : glib-2.0/glib/gdate.h</i> */
	public static final int G_DATE_BAD_JULIAN = (int)0;
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_OBJECT_PATH_ARRAY = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("ao").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_STRING = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("s").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final int G_BIG_ENDIAN = (int)4321;
	/** <i>native declaration : glib-2.0/glib/gfileutils.h</i> */
	public static final char G_SEARCHPATH_SEPARATOR = (char)':';
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_ARRAY = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("a*").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_VERSION = (String)"Version";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_TYPE_LINK = (String)"Link";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = (String)"StartupNotify";
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_BYTE = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("y").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = (String)"OnlyShowIn";
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_MIN_REQUIRED = (int)((2) << 16 | (38) << 8);
	/** <i>native declaration : glib-2.0/glib/gunicode.h</i> */
	public static final int G_UNICHAR_MAX_DECOMPOSITION_LENGTH = (int)18;
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_COMMENT = (String)"Comment";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_TYPE_APPLICATION = (String)"Application";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = (String)"NotShowIn";
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_BOOLEAN = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("b").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GLibLibrary.GVariantType > G_VARIANT_TYPE_SIGNATURE = (Pointer<GLibLibrary.GVariantType >)(Pointer.pointerToCString("g").as(GLibLibrary.GVariantType.class));
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_TERMINAL = (String)"Terminal";
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_PI = (double)3.1415926535897932384626433832795028841971693993751;
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_PATH = (String)"Path";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_URL = (String)"URL";
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_2_38 = (int)((2) << 16 | (38) << 8);
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_2_36 = (int)((2) << 16 | (36) << 8);
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_2_30 = (int)((2) << 16 | (30) << 8);
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_2_34 = (int)((2) << 16 | (34) << 8);
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_2_32 = (int)((2) << 16 | (32) << 8);
	/** <i>native declaration : glib-2.0/glib/gfileutils.h</i> */
	public static final String G_SEARCHPATH_SEPARATOR_S = (String)":";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_CATEGORIES = (String)"Categories";
	/** <i>native declaration : glib-2.0/glib/gurifuncs.h</i> */
	public static final String G_URI_RESERVED_CHARS_GENERIC_DELIMITERS = (String)":/?#[]@";
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final int G_PDP_ENDIAN = (int)3412;
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_NAME = (String)"Name";
	/**
	 * define<br>
	 * Conversion Error : (!(0))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : glib-2.0/glib/gmacros.h:0</i><br>
	 * (!(0))
	 */
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_2_26 = (int)((2) << 16 | (26) << 8);
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_2_28 = (int)((2) << 16 | (28) << 8);
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_LN10 = (double)2.3025850929940456840179914546843642076011014886288;
	/** <i>native declaration : glib-2.0/glib/gtypes.h:14</i> */
	public static abstract class GCompareFunc extends Callback<GCompareFunc > {
		public final int apply(Pointer<? > a, Pointer<? > b) {
			return apply(Pointer.getPeer(a), Pointer.getPeer(b));
		}
		public abstract int apply(@Ptr long a, @Ptr long b);
	};
	/** <i>native declaration : glib-2.0/glib/gtypes.h:15</i> */
	public static abstract class GCompareDataFunc extends Callback<GCompareDataFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtypes.h</i><br>
		 * gint GCompareDataFunc(gconstpointer a, gconstpointer b, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtypes.h</i><br>
		 * gint GCompareDataFunc(gconstpointer a, gconstpointer b, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gtypes.h:16</i> */
	public static abstract class GEqualFunc extends Callback<GEqualFunc > {
		public final GLibLibrary.gboolean apply(Pointer<? > a, Pointer<? > b) {
			return apply(Pointer.getPeer(a), Pointer.getPeer(b));
		}
		public abstract GLibLibrary.gboolean apply(@Ptr long a, @Ptr long b);
	};
	/** <i>native declaration : glib-2.0/glib/gtypes.h:17</i> */
	public static abstract class GDestroyNotify extends Callback<GDestroyNotify > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtypes.h</i><br>
		 * void GDestroyNotify(gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtypes.h</i><br>
		 * void GDestroyNotify(gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gtypes.h:18</i> */
	public static abstract class GFunc extends Callback<GFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtypes.h</i><br>
		 * void GFunc(gpointer data, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtypes.h</i><br>
		 * void GFunc(gpointer data, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gtypes.h:19</i> */
	public static abstract class GHashFunc extends Callback<GHashFunc > {
		public final int apply(Pointer<? > key) {
			return apply(Pointer.getPeer(key));
		}
		public abstract int apply(@Ptr long key);
	};
	/** <i>native declaration : glib-2.0/glib/gtypes.h:20</i> */
	public static abstract class GHFunc extends Callback<GHFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtypes.h</i><br>
		 * void GHFunc(gpointer key, gpointer value, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtypes.h</i><br>
		 * void GHFunc(gpointer key, gpointer value, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gtypes.h:28</i> */
	public static abstract class GFreeFunc extends Callback<GFreeFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtypes.h</i><br>
		 * void GFreeFunc(gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtypes.h</i><br>
		 * void GFreeFunc(gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gtypes.h:41</i> */
	public static abstract class GTranslateFunc extends Callback<GTranslateFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtypes.h</i><br>
		 * const gchar* GTranslateFunc(const gchar* str, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtypes.h</i><br>
		 * const gchar* GTranslateFunc(const gchar* str, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gthread.h:6</i> */
	public static abstract class gpointer extends Callback<gpointer > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gthread.h</i><br>
		 * gpointer_callback gpointer(* GThreadFunc);<br>
		 * Conversion Error : gpointer_callback (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gthread.h</i><br>
		 * gpointer_callback gpointer(* GThreadFunc);<br>
		 * Conversion Error : gpointer_callback (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gthread.h:127</i> */
	public static abstract class gpointer_callback extends Callback<gpointer_callback > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gthread.h</i><br>
		 * int gpointer_callback(gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gthread.h</i><br>
		 * int gpointer_callback(gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gdataset.h:2</i> */
	public static abstract class GDataForeachFunc extends Callback<GDataForeachFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gdataset.h</i><br>
		 * void GDataForeachFunc(GQuark key_id, gpointer data, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gdataset.h</i><br>
		 * void GDataForeachFunc(GQuark key_id, gpointer data, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gdataset.h:14</i> */
	public static abstract class GDuplicateFunc extends Callback<GDuplicateFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gdataset.h</i><br>
		 * gpointer GDuplicateFunc(gpointer data, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gdataset.h</i><br>
		 * gpointer GDuplicateFunc(gpointer data, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gnode.h:18</i> */
	public static abstract class gboolean extends Callback<gboolean > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gnode.h</i><br>
		 * gboolean_callback gboolean(* GNodeTraverseFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gnode.h</i><br>
		 * gboolean_callback gboolean(* GNodeTraverseFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gnode.h:19</i> */
	public static abstract class GNodeForeachFunc extends Callback<GNodeForeachFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gnode.h</i><br>
		 * void GNodeForeachFunc(GNode* node, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gnode.h</i><br>
		 * void GNodeForeachFunc(GNode* node, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gnode.h:29</i> */
	public static abstract class GCopyFunc extends Callback<GCopyFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gnode.h</i><br>
		 * gpointer GCopyFunc(gconstpointer src, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gnode.h</i><br>
		 * gpointer GCopyFunc(gconstpointer src, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gnode.h:102</i> */
	public static abstract class gboolean_callback extends Callback<gboolean_callback > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gnode.h</i><br>
		 * int gboolean_callback(GNode* node, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gnode.h</i><br>
		 * int gboolean_callback(GNode* node, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/ghash.h:2</i> */
	public static abstract class gboolean2 extends Callback<gboolean2 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghash.h</i><br>
		 * gboolean_callback gboolean(* GHRFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghash.h</i><br>
		 * gboolean_callback gboolean(* GHRFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/ghash.h:92</i> */
	public static abstract class gboolean_callback2 extends Callback<gboolean_callback2 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghash.h</i><br>
		 * int gboolean_callback(gpointer key, gpointer value, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghash.h</i><br>
		 * int gboolean_callback(gpointer key, gpointer value, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/ghook.h:4</i> */
	public static abstract class GHookCompareFunc extends Callback<GHookCompareFunc > {
		public final int apply(Pointer<GHook > new_hook, Pointer<GHook > sibling) {
			return apply(Pointer.getPeer(new_hook), Pointer.getPeer(sibling));
		}
		public abstract int apply(@Ptr long new_hook, @Ptr long sibling);
	};
	/** <i>native declaration : glib-2.0/glib/ghook.h:5</i> */
	public static abstract class gboolean3 extends Callback<gboolean3 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghook.h</i><br>
		 * gboolean_callback gboolean(* GHookFindFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghook.h</i><br>
		 * gboolean_callback gboolean(* GHookFindFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/ghook.h:6</i> */
	public static abstract class GHookMarshaller extends Callback<GHookMarshaller > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghook.h</i><br>
		 * void GHookMarshaller(GHook* hook, gpointer marshal_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghook.h</i><br>
		 * void GHookMarshaller(GHook* hook, gpointer marshal_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/ghook.h:7</i> */
	public static abstract class GHookCheckMarshaller extends Callback<GHookCheckMarshaller > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghook.h</i><br>
		 * gboolean GHookCheckMarshaller(GHook* hook, gpointer marshal_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghook.h</i><br>
		 * gboolean GHookCheckMarshaller(GHook* hook, gpointer marshal_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/ghook.h:8</i> */
	public static abstract class GHookFunc extends Callback<GHookFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghook.h</i><br>
		 * void GHookFunc(gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghook.h</i><br>
		 * void GHookFunc(gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/ghook.h:9</i> */
	public static abstract class GHookCheckFunc extends Callback<GHookCheckFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghook.h</i><br>
		 * gboolean GHookCheckFunc(gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghook.h</i><br>
		 * gboolean GHookCheckFunc(gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/ghook.h:10</i> */
	public static abstract class GHookFinalizeFunc extends Callback<GHookFinalizeFunc > {
		public final void apply(Pointer<GHookList > hook_list, Pointer<GHook > hook) {
			apply(Pointer.getPeer(hook_list), Pointer.getPeer(hook));
		}
		public abstract void apply(@Ptr long hook_list, @Ptr long hook);
	};
	/** <i>native declaration : glib-2.0/glib/ghook.h:105</i> */
	public static abstract class gboolean_callback3 extends Callback<gboolean_callback3 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghook.h</i><br>
		 * int gboolean_callback(GHook* hook, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/ghook.h</i><br>
		 * int gboolean_callback(GHook* hook, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gpoll.h:39</i> */
	public static abstract class GPollFunc extends Callback<GPollFunc > {
		public final int apply(Pointer<GPollFD > ufds, int nfsd, int timeout_) {
			return apply(Pointer.getPeer(ufds), nfsd, timeout_);
		}
		public abstract int apply(@Ptr long ufds, int nfsd, int timeout_);
	};
	/**
	 * GSourceFunc:<br>
	 * @user_data: data passed to the function, set when the source was<br>
	 *     created with one of the above functions<br>
	 * * Specifies the type of function passed to g_timeout_add(),<br>
	 * g_timeout_add_full(), g_idle_add(), and g_idle_add_full().<br>
	 * * Returns: %FALSE if the source should be removed. #G_SOURCE_CONTINUE and<br>
	 * #G_SOURCE_REMOVE are more memorable names for the return value.<br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:93</i>
	 */
	public static abstract class gboolean4 extends Callback<gboolean4 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gmain.h</i><br>
		 * gboolean_callback gboolean(* GSourceFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gmain.h</i><br>
		 * gboolean_callback gboolean(* GSourceFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gmain.h:104</i> */
	public static abstract class GChildWatchFunc extends Callback<GChildWatchFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gmain.h</i><br>
		 * void GChildWatchFunc(GPid pid, gint status, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gmain.h</i><br>
		 * void GChildWatchFunc(GPid pid, gint status, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gmain.h:134</i> */
	public static abstract class GSourceDummyMarshal extends Callback<GSourceDummyMarshal > {
		public abstract void apply();
	};
	/** <i>native declaration : glib-2.0/glib/gmain.h:353</i> */
	public static abstract class gboolean_callback4 extends Callback<gboolean_callback4 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gmain.h</i><br>
		 * int gboolean_callback(gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gmain.h</i><br>
		 * int gboolean_callback(gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gutils.h:105</i> */
	public static abstract class GVoidFunc extends Callback<GVoidFunc > {
		public abstract void apply();
	};
	/** <i>native declaration : glib-2.0/glib/giochannel.h:67</i> */
	public static abstract class gboolean5 extends Callback<gboolean5 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/giochannel.h</i><br>
		 * gboolean_callback gboolean(* GIOFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/giochannel.h</i><br>
		 * gboolean_callback gboolean(* GIOFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/giochannel.h:181</i> */
	public static abstract class gboolean_callback5 extends Callback<gboolean_callback5 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/giochannel.h</i><br>
		 * int gboolean_callback(GIOChannel* source, GIOCondition condition, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/giochannel.h</i><br>
		 * int gboolean_callback(GIOChannel* source, GIOCondition condition, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gmessages.h:20</i> */
	public static abstract class GLogFunc extends Callback<GLogFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gmessages.h</i><br>
		 * void GLogFunc(const gchar* log_domain, GLogLevelFlags log_level, const gchar* message, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gmessages.h</i><br>
		 * void GLogFunc(const gchar* log_domain, GLogLevelFlags log_level, const gchar* message, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gmessages.h:60</i> */
	public static abstract class GPrintFunc extends Callback<GPrintFunc > {
		public final void apply(Pointer<Byte > string) {
			apply(Pointer.getPeer(string));
		}
		public abstract void apply(@Ptr long string);
	};
	/**
	 * GOptionArgFunc:<br>
	 * @option_name: The name of the option being parsed. This will be either a <br>
	 *  single dash followed by a single letter (for a short name) or two dashes<br>
	 *  followed by a long option name.<br>
	 * @value: The value to be parsed.<br>
	 * @data: User data added to the #GOptionGroup containing the option when it<br>
	 *  was created with g_option_group_new()<br>
	 * @error: A return location for errors. The error code %G_OPTION_ERROR_FAILED<br>
	 *  is intended to be used for errors in #GOptionArgFunc callbacks.<br>
	 * <br>
	 * The type of function to be passed as callback for %G_OPTION_ARG_CALLBACK<br>
	 * options.<br>
	 * <br>
	 * Returns: %TRUE if the option was successfully parsed, %FALSE if an error <br>
	 *  occurred, in which case @error should be set with g_set_error()<br>
	 * <i>native declaration : glib-2.0/glib/goption.h:108</i>
	 */
	public static abstract class gboolean6 extends Callback<gboolean6 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/goption.h</i><br>
		 * gboolean_callback gboolean(* GOptionArgFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/goption.h</i><br>
		 * gboolean_callback gboolean(* GOptionArgFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/goption.h:122</i> */
	public static abstract class GOptionParseFunc extends Callback<GOptionParseFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/goption.h</i><br>
		 * gboolean GOptionParseFunc(GOptionContext* context, GOptionGroup* group, gpointer data, GError** error);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/goption.h</i><br>
		 * gboolean GOptionParseFunc(GOptionContext* context, GOptionGroup* group, gpointer data, GError** error);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/goption.h:133</i> */
	public static abstract class GOptionErrorFunc extends Callback<GOptionErrorFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/goption.h</i><br>
		 * void GOptionErrorFunc(GOptionContext* context, GOptionGroup* group, gpointer data, GError** error);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/goption.h</i><br>
		 * void GOptionErrorFunc(GOptionContext* context, GOptionGroup* group, gpointer data, GError** error);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/goption.h:275</i> */
	public static abstract class gboolean_callback6 extends Callback<gboolean_callback6 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/goption.h</i><br>
		 * int gboolean_callback(const gchar* option_name, const gchar* value, gpointer data, GError** error);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/goption.h</i><br>
		 * int gboolean_callback(const gchar* option_name, const gchar* value, gpointer data, GError** error);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/**
	 * GRegexEvalCallback:<br>
	 * @match_info: the #GMatchInfo generated by the match.<br>
	 *     Use g_match_info_get_regex() and g_match_info_get_string() if you<br>
	 *     need the #GRegex or the matched string.<br>
	 * @result: a #GString containing the new string<br>
	 * @user_data: user data passed to g_regex_replace_eval()<br>
	 * * Specifies the type of the function passed to g_regex_replace_eval().<br>
	 * It is called for each occurrence of the pattern in the string passed<br>
	 * to g_regex_replace_eval(), and it should append the replacement to<br>
	 * @result.<br>
	 * * Returns: %FALSE to continue the replacement process, %TRUE to stop it<br>
	 * * Since: 2.14<br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:235</i>
	 */
	public static abstract class gboolean7 extends Callback<gboolean7 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gregex.h</i><br>
		 * gboolean_callback gboolean(* GRegexEvalCallback);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gregex.h</i><br>
		 * gboolean_callback gboolean(* GRegexEvalCallback);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gregex.h:328</i> */
	public static abstract class gboolean_callback7 extends Callback<gboolean_callback7 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gregex.h</i><br>
		 * int gboolean_callback(const GMatchInfo* match_info, GString* result, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gregex.h</i><br>
		 * int gboolean_callback(const GMatchInfo* match_info, GString* result, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gscanner.h:4</i> */
	public static abstract class GScannerMsgFunc extends Callback<GScannerMsgFunc > {
		public final void apply(Pointer<GScanner > scanner, Pointer<Byte > message, GLibLibrary.gboolean error) {
			apply(Pointer.getPeer(scanner), Pointer.getPeer(message), error);
		}
		public abstract void apply(@Ptr long scanner, @Ptr long message, GLibLibrary.gboolean error);
	};
	/** <i>native declaration : glib-2.0/glib/gsequence.h:3</i> */
	public static abstract class GSequenceIterCompareFunc extends Callback<GSequenceIterCompareFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gsequence.h</i><br>
		 * gint GSequenceIterCompareFunc(GSequenceIter* a, GSequenceIter* b, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gsequence.h</i><br>
		 * gint GSequenceIterCompareFunc(GSequenceIter* a, GSequenceIter* b, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gspawn.h:83</i> */
	public static abstract class GSpawnChildSetupFunc extends Callback<GSpawnChildSetupFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gspawn.h</i><br>
		 * void GSpawnChildSetupFunc(gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gspawn.h</i><br>
		 * void GSpawnChildSetupFunc(gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gtestutils.h:3</i> */
	public static abstract class GTestFunc extends Callback<GTestFunc > {
		public abstract void apply();
	};
	/** <i>native declaration : glib-2.0/glib/gtestutils.h:4</i> */
	public static abstract class GTestDataFunc extends Callback<GTestDataFunc > {
		public final void apply(Pointer<? > user_data) {
			apply(Pointer.getPeer(user_data));
		}
		public abstract void apply(@Ptr long user_data);
	};
	/** <i>native declaration : glib-2.0/glib/gtestutils.h:5</i> */
	public static abstract class GTestFixtureFunc extends Callback<GTestFixtureFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtestutils.h</i><br>
		 * void GTestFixtureFunc(gpointer fixture, gconstpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtestutils.h</i><br>
		 * void GTestFixtureFunc(gpointer fixture, gconstpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/**
	 * GTestLogFatalFunc:<br>
	 * @log_domain: the log domain of the message<br>
	 * @log_level: the log level of the message (including the fatal and recursion flags)<br>
	 * @message: the message to process<br>
	 * @user_data: user data, set in g_test_log_set_fatal_handler()<br>
	 * * Specifies the prototype of fatal log handler functions.<br>
	 * * Return value: %TRUE if the program should abort, %FALSE otherwise<br>
	 * * Since: 2.22<br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:191</i>
	 */
	public static abstract class gboolean8 extends Callback<gboolean8 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtestutils.h</i><br>
		 * gboolean_callback gboolean(* GTestLogFatalFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtestutils.h</i><br>
		 * gboolean_callback gboolean(* GTestLogFatalFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gtestutils.h:208</i> */
	public static abstract class gboolean_callback8 extends Callback<gboolean_callback8 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtestutils.h</i><br>
		 * int gboolean_callback(const gchar* log_domain, GLogLevelFlags log_level, const gchar* message, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtestutils.h</i><br>
		 * int gboolean_callback(const gchar* log_domain, GLogLevelFlags log_level, const gchar* message, gpointer user_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gtree.h:2</i> */
	public static abstract class gboolean9 extends Callback<gboolean9 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtree.h</i><br>
		 * gboolean_callback gboolean(* GTraverseFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtree.h</i><br>
		 * gboolean_callback gboolean(* GTraverseFunc);<br>
		 * Conversion Error : gboolean_callback (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gtree.h:40</i> */
	public static abstract class gboolean_callback9 extends Callback<gboolean_callback9 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtree.h</i><br>
		 * int gboolean_callback(gpointer key, gpointer value, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gtree.h</i><br>
		 * int gboolean_callback(gpointer key, gpointer value, gpointer data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/**
	 * Original signature : <code>GArray* g_array_new(gboolean, gboolean, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:18</i>
	 */
	public static Pointer<GArray > g_array_new(GLibLibrary.gboolean zero_terminated, GLibLibrary.gboolean clear_, int element_size) {
		return Pointer.pointerToAddress(g_array_new$2(zero_terminated, clear_, element_size), GArray.class);
	}
	@Ptr 
	protected native static long g_array_new$2(GLibLibrary.gboolean zero_terminated, GLibLibrary.gboolean clear_, int element_size);
	/**
	 * Original signature : <code>GArray* g_array_sized_new(gboolean, gboolean, guint, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:20</i>
	 */
	public static Pointer<GArray > g_array_sized_new(GLibLibrary.gboolean zero_terminated, GLibLibrary.gboolean clear_, int element_size, int reserved_size) {
		return Pointer.pointerToAddress(g_array_sized_new$2(zero_terminated, clear_, element_size, reserved_size), GArray.class);
	}
	@Ptr 
	protected native static long g_array_sized_new$2(GLibLibrary.gboolean zero_terminated, GLibLibrary.gboolean clear_, int element_size, int reserved_size);
	/**
	 * Original signature : <code>gchar* g_array_free(GArray*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:22</i>
	 */
	public static Pointer<Byte > g_array_free(Pointer<GArray > array, GLibLibrary.gboolean free_segment) {
		return Pointer.pointerToAddress(g_array_free(Pointer.getPeer(array), free_segment), Byte.class);
	}
	@Ptr 
	protected native static long g_array_free(@Ptr long array, GLibLibrary.gboolean free_segment);
	/**
	 * Original signature : <code>GArray* g_array_ref(GArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:24</i>
	 */
	public static Pointer<GArray > g_array_ref(Pointer<GArray > array) {
		return Pointer.pointerToAddress(g_array_ref(Pointer.getPeer(array)), GArray.class);
	}
	@Ptr 
	protected native static long g_array_ref(@Ptr long array);
	/**
	 * Original signature : <code>void g_array_unref(GArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:26</i>
	 */
	public static void g_array_unref(Pointer<GArray > array) {
		g_array_unref(Pointer.getPeer(array));
	}
	protected native static void g_array_unref(@Ptr long array);
	/**
	 * Original signature : <code>guint g_array_get_element_size(GArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:28</i>
	 */
	public static int g_array_get_element_size(Pointer<GArray > array) {
		return g_array_get_element_size(Pointer.getPeer(array));
	}
	protected native static int g_array_get_element_size(@Ptr long array);
	/**
	 * Original signature : <code>GArray* g_array_append_vals(GArray*, gconstpointer, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:30</i>
	 */
	public static Pointer<GArray > g_array_append_vals(Pointer<GArray > array, Pointer<? > data, int len) {
		return Pointer.pointerToAddress(g_array_append_vals(Pointer.getPeer(array), Pointer.getPeer(data), len), GArray.class);
	}
	@Ptr 
	protected native static long g_array_append_vals(@Ptr long array, @Ptr long data, int len);
	/**
	 * Original signature : <code>GArray* g_array_prepend_vals(GArray*, gconstpointer, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:32</i>
	 */
	public static Pointer<GArray > g_array_prepend_vals(Pointer<GArray > array, Pointer<? > data, int len) {
		return Pointer.pointerToAddress(g_array_prepend_vals(Pointer.getPeer(array), Pointer.getPeer(data), len), GArray.class);
	}
	@Ptr 
	protected native static long g_array_prepend_vals(@Ptr long array, @Ptr long data, int len);
	/**
	 * Original signature : <code>GArray* g_array_insert_vals(GArray*, guint, gconstpointer, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:34</i>
	 */
	public static Pointer<GArray > g_array_insert_vals(Pointer<GArray > array, int index_, Pointer<? > data, int len) {
		return Pointer.pointerToAddress(g_array_insert_vals(Pointer.getPeer(array), index_, Pointer.getPeer(data), len), GArray.class);
	}
	@Ptr 
	protected native static long g_array_insert_vals(@Ptr long array, int index_, @Ptr long data, int len);
	/**
	 * Original signature : <code>GArray* g_array_set_size(GArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:36</i>
	 */
	public static Pointer<GArray > g_array_set_size(Pointer<GArray > array, int length) {
		return Pointer.pointerToAddress(g_array_set_size(Pointer.getPeer(array), length), GArray.class);
	}
	@Ptr 
	protected native static long g_array_set_size(@Ptr long array, int length);
	/**
	 * Original signature : <code>GArray* g_array_remove_index(GArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:38</i>
	 */
	public static Pointer<GArray > g_array_remove_index(Pointer<GArray > array, int index_) {
		return Pointer.pointerToAddress(g_array_remove_index(Pointer.getPeer(array), index_), GArray.class);
	}
	@Ptr 
	protected native static long g_array_remove_index(@Ptr long array, int index_);
	/**
	 * Original signature : <code>GArray* g_array_remove_index_fast(GArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:40</i>
	 */
	public static Pointer<GArray > g_array_remove_index_fast(Pointer<GArray > array, int index_) {
		return Pointer.pointerToAddress(g_array_remove_index_fast(Pointer.getPeer(array), index_), GArray.class);
	}
	@Ptr 
	protected native static long g_array_remove_index_fast(@Ptr long array, int index_);
	/**
	 * Original signature : <code>GArray* g_array_remove_range(GArray*, guint, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:42</i>
	 */
	public static Pointer<GArray > g_array_remove_range(Pointer<GArray > array, int index_, int length) {
		return Pointer.pointerToAddress(g_array_remove_range(Pointer.getPeer(array), index_, length), GArray.class);
	}
	@Ptr 
	protected native static long g_array_remove_range(@Ptr long array, int index_, int length);
	/**
	 * Original signature : <code>void g_array_sort(GArray*, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:44</i>
	 */
	public static void g_array_sort(Pointer<GArray > array, Pointer<GLibLibrary.GCompareFunc > compare_func) {
		g_array_sort(Pointer.getPeer(array), Pointer.getPeer(compare_func));
	}
	protected native static void g_array_sort(@Ptr long array, @Ptr long compare_func);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_array_sort_with_data(GArray*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:46</i><br>
	 * Original signature : <code>void g_array_sort_with_data(GArray*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_array_sort_with_data(GArray* array, GCompareDataFunc compare_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_array_sort_with_data(GArray*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:46</i><br>
	 * Original signature : <code>void g_array_sort_with_data(GArray*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_array_sort_with_data(GArray* array, GCompareDataFunc compare_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_array_set_clear_func(GArray*, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:48</i>
	 */
	public static void g_array_set_clear_func(Pointer<GArray > array, Pointer<GLibLibrary.GDestroyNotify > clear_func) {
		g_array_set_clear_func(Pointer.getPeer(array), Pointer.getPeer(clear_func));
	}
	protected native static void g_array_set_clear_func(@Ptr long array, @Ptr long clear_func);
	/**
	 * Original signature : <code>GPtrArray* g_ptr_array_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:50</i>
	 */
	public static Pointer<GPtrArray > g_ptr_array_new() {
		return Pointer.pointerToAddress(g_ptr_array_new$2(), GPtrArray.class);
	}
	@Ptr 
	protected native static long g_ptr_array_new$2();
	/**
	 * Original signature : <code>GPtrArray* g_ptr_array_new_with_free_func(GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:52</i>
	 */
	public static Pointer<GPtrArray > g_ptr_array_new_with_free_func(Pointer<GLibLibrary.GDestroyNotify > element_free_func) {
		return Pointer.pointerToAddress(g_ptr_array_new_with_free_func(Pointer.getPeer(element_free_func)), GPtrArray.class);
	}
	@Ptr 
	protected native static long g_ptr_array_new_with_free_func(@Ptr long element_free_func);
	/**
	 * Original signature : <code>GPtrArray* g_ptr_array_sized_new(guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:54</i>
	 */
	public static Pointer<GPtrArray > g_ptr_array_sized_new(int reserved_size) {
		return Pointer.pointerToAddress(g_ptr_array_sized_new$2(reserved_size), GPtrArray.class);
	}
	@Ptr 
	protected native static long g_ptr_array_sized_new$2(int reserved_size);
	/**
	 * Original signature : <code>GPtrArray* g_ptr_array_new_full(guint, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:56</i>
	 */
	public static Pointer<GPtrArray > g_ptr_array_new_full(int reserved_size, Pointer<GLibLibrary.GDestroyNotify > element_free_func) {
		return Pointer.pointerToAddress(g_ptr_array_new_full(reserved_size, Pointer.getPeer(element_free_func)), GPtrArray.class);
	}
	@Ptr 
	protected native static long g_ptr_array_new_full(int reserved_size, @Ptr long element_free_func);
	/**
	 * Original signature : <code>gpointer* g_ptr_array_free(GPtrArray*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:58</i>
	 */
	public static Pointer g_ptr_array_free(Pointer<GPtrArray > array, GLibLibrary.gboolean free_seg) {
		return Pointer.pointerToAddress(g_ptr_array_free(Pointer.getPeer(array), free_seg));
	}
	@Ptr 
	protected native static long g_ptr_array_free(@Ptr long array, GLibLibrary.gboolean free_seg);
	/**
	 * Original signature : <code>GPtrArray* g_ptr_array_ref(GPtrArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:60</i>
	 */
	public static Pointer<GPtrArray > g_ptr_array_ref(Pointer<GPtrArray > array) {
		return Pointer.pointerToAddress(g_ptr_array_ref(Pointer.getPeer(array)), GPtrArray.class);
	}
	@Ptr 
	protected native static long g_ptr_array_ref(@Ptr long array);
	/**
	 * Original signature : <code>void g_ptr_array_unref(GPtrArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:62</i>
	 */
	public static void g_ptr_array_unref(Pointer<GPtrArray > array) {
		g_ptr_array_unref(Pointer.getPeer(array));
	}
	protected native static void g_ptr_array_unref(@Ptr long array);
	/**
	 * Original signature : <code>void g_ptr_array_set_free_func(GPtrArray*, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:64</i>
	 */
	public static void g_ptr_array_set_free_func(Pointer<GPtrArray > array, Pointer<GLibLibrary.GDestroyNotify > element_free_func) {
		g_ptr_array_set_free_func(Pointer.getPeer(array), Pointer.getPeer(element_free_func));
	}
	protected native static void g_ptr_array_set_free_func(@Ptr long array, @Ptr long element_free_func);
	/**
	 * Original signature : <code>void g_ptr_array_set_size(GPtrArray*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:66</i>
	 */
	public static void g_ptr_array_set_size(Pointer<GPtrArray > array, int length) {
		g_ptr_array_set_size(Pointer.getPeer(array), length);
	}
	protected native static void g_ptr_array_set_size(@Ptr long array, int length);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_ptr_array_remove_index(GPtrArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:68</i><br>
	 * Original signature : <code>gpointer g_ptr_array_remove_index(GPtrArray*, guint)</code> * /<br>
	 * extern gpointer g_ptr_array_remove_index(GPtrArray* array, guint index_);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_ptr_array_remove_index(GPtrArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:68</i><br>
	 * Original signature : <code>gpointer g_ptr_array_remove_index(GPtrArray*, guint)</code> * /<br>
	 * extern gpointer g_ptr_array_remove_index(GPtrArray* array, guint index_);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_ptr_array_remove_index_fast(GPtrArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:70</i><br>
	 * Original signature : <code>gpointer g_ptr_array_remove_index_fast(GPtrArray*, guint)</code> * /<br>
	 * extern gpointer g_ptr_array_remove_index_fast(GPtrArray* array, guint index_);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_ptr_array_remove_index_fast(GPtrArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:70</i><br>
	 * Original signature : <code>gpointer g_ptr_array_remove_index_fast(GPtrArray*, guint)</code> * /<br>
	 * extern gpointer g_ptr_array_remove_index_fast(GPtrArray* array, guint index_);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_ptr_array_remove(GPtrArray*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:72</i><br>
	 * Original signature : <code>gboolean g_ptr_array_remove(GPtrArray*, gpointer)</code> * /<br>
	 * extern gboolean g_ptr_array_remove(GPtrArray* array, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_ptr_array_remove(GPtrArray*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:72</i><br>
	 * Original signature : <code>gboolean g_ptr_array_remove(GPtrArray*, gpointer)</code> * /<br>
	 * extern gboolean g_ptr_array_remove(GPtrArray* array, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_ptr_array_remove_fast(GPtrArray*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:74</i><br>
	 * Original signature : <code>gboolean g_ptr_array_remove_fast(GPtrArray*, gpointer)</code> * /<br>
	 * extern gboolean g_ptr_array_remove_fast(GPtrArray* array, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_ptr_array_remove_fast(GPtrArray*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:74</i><br>
	 * Original signature : <code>gboolean g_ptr_array_remove_fast(GPtrArray*, gpointer)</code> * /<br>
	 * extern gboolean g_ptr_array_remove_fast(GPtrArray* array, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_ptr_array_remove_range(GPtrArray*, guint, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:76</i>
	 */
	public static void g_ptr_array_remove_range(Pointer<GPtrArray > array, int index_, int length) {
		g_ptr_array_remove_range(Pointer.getPeer(array), index_, length);
	}
	protected native static void g_ptr_array_remove_range(@Ptr long array, int index_, int length);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_ptr_array_add(GPtrArray*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:78</i><br>
	 * Original signature : <code>void g_ptr_array_add(GPtrArray*, gpointer)</code> * /<br>
	 * extern void g_ptr_array_add(GPtrArray* array, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_ptr_array_add(GPtrArray*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:78</i><br>
	 * Original signature : <code>void g_ptr_array_add(GPtrArray*, gpointer)</code> * /<br>
	 * extern void g_ptr_array_add(GPtrArray* array, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_ptr_array_sort(GPtrArray*, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:80</i>
	 */
	public static void g_ptr_array_sort(Pointer<GPtrArray > array, Pointer<GLibLibrary.GCompareFunc > compare_func) {
		g_ptr_array_sort(Pointer.getPeer(array), Pointer.getPeer(compare_func));
	}
	protected native static void g_ptr_array_sort(@Ptr long array, @Ptr long compare_func);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_ptr_array_sort_with_data(GPtrArray*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:82</i><br>
	 * Original signature : <code>void g_ptr_array_sort_with_data(GPtrArray*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_ptr_array_sort_with_data(GPtrArray* array, GCompareDataFunc compare_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_ptr_array_sort_with_data(GPtrArray*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:82</i><br>
	 * Original signature : <code>void g_ptr_array_sort_with_data(GPtrArray*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_ptr_array_sort_with_data(GPtrArray* array, GCompareDataFunc compare_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_ptr_array_foreach(GPtrArray*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:84</i><br>
	 * Original signature : <code>void g_ptr_array_foreach(GPtrArray*, GFunc, gpointer)</code> * /<br>
	 * extern void g_ptr_array_foreach(GPtrArray* array, GFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_ptr_array_foreach(GPtrArray*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:84</i><br>
	 * Original signature : <code>void g_ptr_array_foreach(GPtrArray*, GFunc, gpointer)</code> * /<br>
	 * extern void g_ptr_array_foreach(GPtrArray* array, GFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GByteArray* g_byte_array_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:86</i>
	 */
	public static Pointer<GByteArray > g_byte_array_new() {
		return Pointer.pointerToAddress(g_byte_array_new$2(), GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_new$2();
	/**
	 * Original signature : <code>GByteArray* g_byte_array_new_take(guint8*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:88</i>
	 */
	public static Pointer<GByteArray > g_byte_array_new_take(Pointer<Byte > data, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_byte_array_new_take(Pointer.getPeer(data), len), GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_new_take(@Ptr long data, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_sized_new(guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:90</i>
	 */
	public static Pointer<GByteArray > g_byte_array_sized_new(int reserved_size) {
		return Pointer.pointerToAddress(g_byte_array_sized_new$2(reserved_size), GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_sized_new$2(int reserved_size);
	/**
	 * Original signature : <code>guint8* g_byte_array_free(GByteArray*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:92</i>
	 */
	public static Pointer<Byte > g_byte_array_free(Pointer<GByteArray > array, GLibLibrary.gboolean free_segment) {
		return Pointer.pointerToAddress(g_byte_array_free(Pointer.getPeer(array), free_segment), Byte.class);
	}
	@Ptr 
	protected native static long g_byte_array_free(@Ptr long array, GLibLibrary.gboolean free_segment);
	/**
	 * Original signature : <code>GBytes* g_byte_array_free_to_bytes(GByteArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:94</i>
	 */
	public static Pointer<GLibLibrary.GBytes > g_byte_array_free_to_bytes(Pointer<GByteArray > array) {
		return Pointer.pointerToAddress(g_byte_array_free_to_bytes(Pointer.getPeer(array)), GLibLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_byte_array_free_to_bytes(@Ptr long array);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_ref(GByteArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:96</i>
	 */
	public static Pointer<GByteArray > g_byte_array_ref(Pointer<GByteArray > array) {
		return Pointer.pointerToAddress(g_byte_array_ref(Pointer.getPeer(array)), GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_ref(@Ptr long array);
	/**
	 * Original signature : <code>void g_byte_array_unref(GByteArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:98</i>
	 */
	public static void g_byte_array_unref(Pointer<GByteArray > array) {
		g_byte_array_unref(Pointer.getPeer(array));
	}
	protected native static void g_byte_array_unref(@Ptr long array);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_append(GByteArray*, const guint8*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:100</i>
	 */
	public static Pointer<GByteArray > g_byte_array_append(Pointer<GByteArray > array, Pointer<Byte > data, int len) {
		return Pointer.pointerToAddress(g_byte_array_append(Pointer.getPeer(array), Pointer.getPeer(data), len), GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_append(@Ptr long array, @Ptr long data, int len);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_prepend(GByteArray*, const guint8*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:102</i>
	 */
	public static Pointer<GByteArray > g_byte_array_prepend(Pointer<GByteArray > array, Pointer<Byte > data, int len) {
		return Pointer.pointerToAddress(g_byte_array_prepend(Pointer.getPeer(array), Pointer.getPeer(data), len), GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_prepend(@Ptr long array, @Ptr long data, int len);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_set_size(GByteArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:104</i>
	 */
	public static Pointer<GByteArray > g_byte_array_set_size(Pointer<GByteArray > array, int length) {
		return Pointer.pointerToAddress(g_byte_array_set_size(Pointer.getPeer(array), length), GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_set_size(@Ptr long array, int length);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_remove_index(GByteArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:106</i>
	 */
	public static Pointer<GByteArray > g_byte_array_remove_index(Pointer<GByteArray > array, int index_) {
		return Pointer.pointerToAddress(g_byte_array_remove_index(Pointer.getPeer(array), index_), GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_remove_index(@Ptr long array, int index_);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_remove_index_fast(GByteArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:108</i>
	 */
	public static Pointer<GByteArray > g_byte_array_remove_index_fast(Pointer<GByteArray > array, int index_) {
		return Pointer.pointerToAddress(g_byte_array_remove_index_fast(Pointer.getPeer(array), index_), GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_remove_index_fast(@Ptr long array, int index_);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_remove_range(GByteArray*, guint, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:110</i>
	 */
	public static Pointer<GByteArray > g_byte_array_remove_range(Pointer<GByteArray > array, int index_, int length) {
		return Pointer.pointerToAddress(g_byte_array_remove_range(Pointer.getPeer(array), index_, length), GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_remove_range(@Ptr long array, int index_, int length);
	/**
	 * Original signature : <code>void g_byte_array_sort(GByteArray*, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:112</i>
	 */
	public static void g_byte_array_sort(Pointer<GByteArray > array, Pointer<GLibLibrary.GCompareFunc > compare_func) {
		g_byte_array_sort(Pointer.getPeer(array), Pointer.getPeer(compare_func));
	}
	protected native static void g_byte_array_sort(@Ptr long array, @Ptr long compare_func);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_byte_array_sort_with_data(GByteArray*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:114</i><br>
	 * Original signature : <code>void g_byte_array_sort_with_data(GByteArray*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_byte_array_sort_with_data(GByteArray* array, GCompareDataFunc compare_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_byte_array_sort_with_data(GByteArray*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:114</i><br>
	 * Original signature : <code>void g_byte_array_sort_with_data(GByteArray*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_byte_array_sort_with_data(GByteArray* array, GCompareDataFunc compare_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Quarks (string<->id association)<br>
	 * Original signature : <code>GQuark g_quark_try_string(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gquark.h:6</i>
	 */
	public static int g_quark_try_string(Pointer<Byte > string) {
		return g_quark_try_string(Pointer.getPeer(string));
	}
	protected native static int g_quark_try_string(@Ptr long string);
	/**
	 * Original signature : <code>GQuark g_quark_from_static_string(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gquark.h:8</i>
	 */
	public static int g_quark_from_static_string(Pointer<Byte > string) {
		return g_quark_from_static_string(Pointer.getPeer(string));
	}
	protected native static int g_quark_from_static_string(@Ptr long string);
	/**
	 * Original signature : <code>GQuark g_quark_from_string(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gquark.h:10</i>
	 */
	public static int g_quark_from_string(Pointer<Byte > string) {
		return g_quark_from_string(Pointer.getPeer(string));
	}
	protected native static int g_quark_from_string(@Ptr long string);
	/**
	 * Original signature : <code>gchar* g_quark_to_string(GQuark)</code><br>
	 * <i>native declaration : glib-2.0/glib/gquark.h:12</i>
	 */
	public static Pointer<Byte > g_quark_to_string(int quark) {
		return Pointer.pointerToAddress(g_quark_to_string$2(quark), Byte.class);
	}
	@Ptr 
	protected native static long g_quark_to_string$2(int quark);
	/**
	 * Original signature : <code>gchar* g_intern_string(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gquark.h:14</i>
	 */
	public static Pointer<Byte > g_intern_string(Pointer<Byte > string) {
		return Pointer.pointerToAddress(g_intern_string(Pointer.getPeer(string)), Byte.class);
	}
	@Ptr 
	protected native static long g_intern_string(@Ptr long string);
	/**
	 * Original signature : <code>gchar* g_intern_static_string(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gquark.h:16</i>
	 */
	public static Pointer<Byte > g_intern_static_string(Pointer<Byte > string) {
		return Pointer.pointerToAddress(g_intern_static_string(Pointer.getPeer(string)), Byte.class);
	}
	@Ptr 
	protected native static long g_intern_static_string(@Ptr long string);
	/**
	 * Original signature : <code>GError* g_error_new(GQuark, gint, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:16</i>
	 */
	public static Pointer<GError > g_error_new(int domain, int code, Pointer<Byte > format, Object... varArgs1) {
		return Pointer.pointerToAddress(g_error_new(domain, code, Pointer.getPeer(format), varArgs1), GError.class);
	}
	@Ptr 
	protected native static long g_error_new(int domain, int code, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>GError* g_error_new_literal(GQuark, gint, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:18</i>
	 */
	public static Pointer<GError > g_error_new_literal(int domain, int code, Pointer<Byte > message) {
		return Pointer.pointerToAddress(g_error_new_literal(domain, code, Pointer.getPeer(message)), GError.class);
	}
	@Ptr 
	protected native static long g_error_new_literal(int domain, int code, @Ptr long message);
	/**
	 * Original signature : <code>GError* g_error_new_valist(GQuark, gint, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:20</i>
	 */
	public static Pointer<GError > g_error_new_valist(int domain, int code, Pointer<Byte > format, Object... args) {
		return Pointer.pointerToAddress(g_error_new_valist(domain, code, Pointer.getPeer(format), args), GError.class);
	}
	@Ptr 
	protected native static long g_error_new_valist(int domain, int code, @Ptr long format, Object... args);
	/**
	 * Original signature : <code>void g_error_free(GError*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:22</i>
	 */
	public static void g_error_free(Pointer<GError > error) {
		g_error_free(Pointer.getPeer(error));
	}
	protected native static void g_error_free(@Ptr long error);
	/**
	 * Original signature : <code>GError* g_error_copy(const GError*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:24</i>
	 */
	public static Pointer<GError > g_error_copy(Pointer<GError > error) {
		return Pointer.pointerToAddress(g_error_copy(Pointer.getPeer(error)), GError.class);
	}
	@Ptr 
	protected native static long g_error_copy(@Ptr long error);
	/**
	 * Original signature : <code>gboolean g_error_matches(const GError*, GQuark, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:26</i>
	 */
	public static GLibLibrary.gboolean g_error_matches(Pointer<GError > error, int domain, int code) {
		return g_error_matches(Pointer.getPeer(error), domain, code);
	}
	protected native static GLibLibrary.gboolean g_error_matches(@Ptr long error, int domain, int code);
	/**
	 * if (err) *err = g_error_new(domain, code, format, ...), also has<br>
	 * some sanity checks.<br>
	 * Original signature : <code>void g_set_error(GError**, GQuark, gint, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:32</i>
	 */
	public static void g_set_error(Pointer<Pointer<GError > > err, int domain, int code, Pointer<Byte > format, Object... varArgs1) {
		g_set_error(Pointer.getPeer(err), domain, code, Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_set_error(@Ptr long err, int domain, int code, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>void g_set_error_literal(GError**, GQuark, gint, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:34</i>
	 */
	public static void g_set_error_literal(Pointer<Pointer<GError > > err, int domain, int code, Pointer<Byte > message) {
		g_set_error_literal(Pointer.getPeer(err), domain, code, Pointer.getPeer(message));
	}
	protected native static void g_set_error_literal(@Ptr long err, int domain, int code, @Ptr long message);
	/**
	 * if (dest) *dest = src; also has some sanity checks.<br>
	 * Original signature : <code>void g_propagate_error(GError**, GError*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:39</i>
	 */
	public static void g_propagate_error(Pointer<Pointer<GError > > dest, Pointer<GError > src) {
		g_propagate_error(Pointer.getPeer(dest), Pointer.getPeer(src));
	}
	protected native static void g_propagate_error(@Ptr long dest, @Ptr long src);
	/**
	 * if (err && *err) { g_error_free(*err); *err = NULL; }<br>
	 * Original signature : <code>void g_clear_error(GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:44</i>
	 */
	public static void g_clear_error(Pointer<Pointer<GError > > err) {
		g_clear_error(Pointer.getPeer(err));
	}
	protected native static void g_clear_error(@Ptr long err);
	/**
	 * if (err) prefix the formatted string to the ->message<br>
	 * Original signature : <code>void g_prefix_error(GError**, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:49</i>
	 */
	public static void g_prefix_error(Pointer<Pointer<GError > > err, Pointer<Byte > format, Object... varArgs1) {
		g_prefix_error(Pointer.getPeer(err), Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_prefix_error(@Ptr long err, @Ptr long format, Object... varArgs1);
	/**
	 * g_propagate_error then g_error_prefix on dest<br>
	 * Original signature : <code>void g_propagate_prefixed_error(GError**, GError*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:54</i>
	 */
	public static void g_propagate_prefixed_error(Pointer<Pointer<GError > > dest, Pointer<GError > src, Pointer<Byte > format, Object... varArgs1) {
		g_propagate_prefixed_error(Pointer.getPeer(dest), Pointer.getPeer(src), Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_propagate_prefixed_error(@Ptr long dest, @Ptr long src, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>GQuark g_thread_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:2</i>
	 */
	public static native int g_thread_error_quark();
	/**
	 * Original signature : <code>GThread* g_thread_ref(GThread*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:50</i>
	 */
	public static Pointer g_thread_ref(Pointer thread) {
		return Pointer.pointerToAddress(g_thread_ref(Pointer.getPeer(thread)));
	}
	@Ptr 
	protected native static long g_thread_ref(@Ptr long thread);
	/**
	 * Original signature : <code>void g_thread_unref(GThread*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:52</i>
	 */
	public static void g_thread_unref(Pointer thread) {
		g_thread_unref(Pointer.getPeer(thread));
	}
	protected native static void g_thread_unref(@Ptr long thread);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GThread* g_thread_new(const gchar*, GThreadFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:54</i><br>
	 * Original signature : <code>GThread* g_thread_new(const gchar*, GThreadFunc, gpointer)</code> * /<br>
	 * extern GThread* g_thread_new(const gchar* name, GThreadFunc func, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GThread* g_thread_new(const gchar*, GThreadFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:54</i><br>
	 * Original signature : <code>GThread* g_thread_new(const gchar*, GThreadFunc, gpointer)</code> * /<br>
	 * extern GThread* g_thread_new(const gchar* name, GThreadFunc func, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GThread* g_thread_try_new(const gchar*, GThreadFunc, gpointer, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:56</i><br>
	 * Original signature : <code>GThread* g_thread_try_new(const gchar*, GThreadFunc, gpointer, GError**)</code> * /<br>
	 * extern GThread* g_thread_try_new(const gchar* name, GThreadFunc func, gpointer data, GError** error);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GThread* g_thread_try_new(const gchar*, GThreadFunc, gpointer, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:56</i><br>
	 * Original signature : <code>GThread* g_thread_try_new(const gchar*, GThreadFunc, gpointer, GError**)</code> * /<br>
	 * extern GThread* g_thread_try_new(const gchar* name, GThreadFunc func, gpointer data, GError** error);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GThread* g_thread_self()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:58</i>
	 */
	public static Pointer g_thread_self() {
		return Pointer.pointerToAddress(g_thread_self$2());
	}
	@Ptr 
	protected native static long g_thread_self$2();
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_thread_exit(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:60</i><br>
	 * Original signature : <code>void g_thread_exit(gpointer)</code> * /<br>
	 * extern void g_thread_exit(gpointer retval);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_thread_exit(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:60</i><br>
	 * Original signature : <code>void g_thread_exit(gpointer)</code> * /<br>
	 * extern void g_thread_exit(gpointer retval);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_thread_join(GThread*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:62</i><br>
	 * Original signature : <code>gpointer g_thread_join(GThread*)</code> * /<br>
	 * extern gpointer g_thread_join(GThread* thread);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_thread_join(GThread*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:62</i><br>
	 * Original signature : <code>gpointer g_thread_join(GThread*)</code> * /<br>
	 * extern gpointer g_thread_join(GThread* thread);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_thread_yield()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:64</i>
	 */
	public static native void g_thread_yield();
	/**
	 * Original signature : <code>void g_mutex_init(GMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:66</i>
	 */
	public static void g_mutex_init(Pointer<GMutex > mutex) {
		g_mutex_init(Pointer.getPeer(mutex));
	}
	protected native static void g_mutex_init(@Ptr long mutex);
	/**
	 * Original signature : <code>void g_mutex_clear(GMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:68</i>
	 */
	public static void g_mutex_clear(Pointer<GMutex > mutex) {
		g_mutex_clear(Pointer.getPeer(mutex));
	}
	protected native static void g_mutex_clear(@Ptr long mutex);
	/**
	 * Original signature : <code>void g_mutex_lock(GMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:70</i>
	 */
	public static void g_mutex_lock(Pointer<GMutex > mutex) {
		g_mutex_lock(Pointer.getPeer(mutex));
	}
	protected native static void g_mutex_lock(@Ptr long mutex);
	/**
	 * Original signature : <code>gboolean g_mutex_trylock(GMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:72</i>
	 */
	public static GLibLibrary.gboolean g_mutex_trylock(Pointer<GMutex > mutex) {
		return g_mutex_trylock(Pointer.getPeer(mutex));
	}
	protected native static GLibLibrary.gboolean g_mutex_trylock(@Ptr long mutex);
	/**
	 * Original signature : <code>void g_mutex_unlock(GMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:74</i>
	 */
	public static void g_mutex_unlock(Pointer<GMutex > mutex) {
		g_mutex_unlock(Pointer.getPeer(mutex));
	}
	protected native static void g_mutex_unlock(@Ptr long mutex);
	/**
	 * Original signature : <code>void g_rw_lock_init(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:76</i>
	 */
	public static void g_rw_lock_init(Pointer<GRWLock > rw_lock) {
		g_rw_lock_init(Pointer.getPeer(rw_lock));
	}
	protected native static void g_rw_lock_init(@Ptr long rw_lock);
	/**
	 * Original signature : <code>void g_rw_lock_clear(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:78</i>
	 */
	public static void g_rw_lock_clear(Pointer<GRWLock > rw_lock) {
		g_rw_lock_clear(Pointer.getPeer(rw_lock));
	}
	protected native static void g_rw_lock_clear(@Ptr long rw_lock);
	/**
	 * Original signature : <code>void g_rw_lock_writer_lock(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:80</i>
	 */
	public static void g_rw_lock_writer_lock(Pointer<GRWLock > rw_lock) {
		g_rw_lock_writer_lock(Pointer.getPeer(rw_lock));
	}
	protected native static void g_rw_lock_writer_lock(@Ptr long rw_lock);
	/**
	 * Original signature : <code>gboolean g_rw_lock_writer_trylock(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:82</i>
	 */
	public static GLibLibrary.gboolean g_rw_lock_writer_trylock(Pointer<GRWLock > rw_lock) {
		return g_rw_lock_writer_trylock(Pointer.getPeer(rw_lock));
	}
	protected native static GLibLibrary.gboolean g_rw_lock_writer_trylock(@Ptr long rw_lock);
	/**
	 * Original signature : <code>void g_rw_lock_writer_unlock(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:84</i>
	 */
	public static void g_rw_lock_writer_unlock(Pointer<GRWLock > rw_lock) {
		g_rw_lock_writer_unlock(Pointer.getPeer(rw_lock));
	}
	protected native static void g_rw_lock_writer_unlock(@Ptr long rw_lock);
	/**
	 * Original signature : <code>void g_rw_lock_reader_lock(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:86</i>
	 */
	public static void g_rw_lock_reader_lock(Pointer<GRWLock > rw_lock) {
		g_rw_lock_reader_lock(Pointer.getPeer(rw_lock));
	}
	protected native static void g_rw_lock_reader_lock(@Ptr long rw_lock);
	/**
	 * Original signature : <code>gboolean g_rw_lock_reader_trylock(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:88</i>
	 */
	public static GLibLibrary.gboolean g_rw_lock_reader_trylock(Pointer<GRWLock > rw_lock) {
		return g_rw_lock_reader_trylock(Pointer.getPeer(rw_lock));
	}
	protected native static GLibLibrary.gboolean g_rw_lock_reader_trylock(@Ptr long rw_lock);
	/**
	 * Original signature : <code>void g_rw_lock_reader_unlock(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:90</i>
	 */
	public static void g_rw_lock_reader_unlock(Pointer<GRWLock > rw_lock) {
		g_rw_lock_reader_unlock(Pointer.getPeer(rw_lock));
	}
	protected native static void g_rw_lock_reader_unlock(@Ptr long rw_lock);
	/**
	 * Original signature : <code>void g_rec_mutex_init(GRecMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:92</i>
	 */
	public static void g_rec_mutex_init(Pointer<GRecMutex > rec_mutex) {
		g_rec_mutex_init(Pointer.getPeer(rec_mutex));
	}
	protected native static void g_rec_mutex_init(@Ptr long rec_mutex);
	/**
	 * Original signature : <code>void g_rec_mutex_clear(GRecMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:94</i>
	 */
	public static void g_rec_mutex_clear(Pointer<GRecMutex > rec_mutex) {
		g_rec_mutex_clear(Pointer.getPeer(rec_mutex));
	}
	protected native static void g_rec_mutex_clear(@Ptr long rec_mutex);
	/**
	 * Original signature : <code>void g_rec_mutex_lock(GRecMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:96</i>
	 */
	public static void g_rec_mutex_lock(Pointer<GRecMutex > rec_mutex) {
		g_rec_mutex_lock(Pointer.getPeer(rec_mutex));
	}
	protected native static void g_rec_mutex_lock(@Ptr long rec_mutex);
	/**
	 * Original signature : <code>gboolean g_rec_mutex_trylock(GRecMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:98</i>
	 */
	public static GLibLibrary.gboolean g_rec_mutex_trylock(Pointer<GRecMutex > rec_mutex) {
		return g_rec_mutex_trylock(Pointer.getPeer(rec_mutex));
	}
	protected native static GLibLibrary.gboolean g_rec_mutex_trylock(@Ptr long rec_mutex);
	/**
	 * Original signature : <code>void g_rec_mutex_unlock(GRecMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:100</i>
	 */
	public static void g_rec_mutex_unlock(Pointer<GRecMutex > rec_mutex) {
		g_rec_mutex_unlock(Pointer.getPeer(rec_mutex));
	}
	protected native static void g_rec_mutex_unlock(@Ptr long rec_mutex);
	/**
	 * Original signature : <code>void g_cond_init(GCond*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:102</i>
	 */
	public static void g_cond_init(Pointer<GCond > cond) {
		g_cond_init(Pointer.getPeer(cond));
	}
	protected native static void g_cond_init(@Ptr long cond);
	/**
	 * Original signature : <code>void g_cond_clear(GCond*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:104</i>
	 */
	public static void g_cond_clear(Pointer<GCond > cond) {
		g_cond_clear(Pointer.getPeer(cond));
	}
	protected native static void g_cond_clear(@Ptr long cond);
	/**
	 * Original signature : <code>void g_cond_wait(GCond*, GMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:106</i>
	 */
	public static void g_cond_wait(Pointer<GCond > cond, Pointer<GMutex > mutex) {
		g_cond_wait(Pointer.getPeer(cond), Pointer.getPeer(mutex));
	}
	protected native static void g_cond_wait(@Ptr long cond, @Ptr long mutex);
	/**
	 * Original signature : <code>void g_cond_signal(GCond*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:108</i>
	 */
	public static void g_cond_signal(Pointer<GCond > cond) {
		g_cond_signal(Pointer.getPeer(cond));
	}
	protected native static void g_cond_signal(@Ptr long cond);
	/**
	 * Original signature : <code>void g_cond_broadcast(GCond*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:110</i>
	 */
	public static void g_cond_broadcast(Pointer<GCond > cond) {
		g_cond_broadcast(Pointer.getPeer(cond));
	}
	protected native static void g_cond_broadcast(@Ptr long cond);
	/**
	 * Original signature : <code>gboolean g_cond_wait_until(GCond*, GMutex*, gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:112</i>
	 */
	public static GLibLibrary.gboolean g_cond_wait_until(Pointer<GCond > cond, Pointer<GMutex > mutex, long end_time) {
		return g_cond_wait_until(Pointer.getPeer(cond), Pointer.getPeer(mutex), end_time);
	}
	protected native static GLibLibrary.gboolean g_cond_wait_until(@Ptr long cond, @Ptr long mutex, long end_time);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_private_get(GPrivate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:114</i><br>
	 * Original signature : <code>gpointer g_private_get(GPrivate*)</code> * /<br>
	 * extern gpointer g_private_get(GPrivate* key);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_private_get(GPrivate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:114</i><br>
	 * Original signature : <code>gpointer g_private_get(GPrivate*)</code> * /<br>
	 * extern gpointer g_private_get(GPrivate* key);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_private_set(GPrivate*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:116</i><br>
	 * Original signature : <code>void g_private_set(GPrivate*, gpointer)</code> * /<br>
	 * extern void g_private_set(GPrivate* key, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_private_set(GPrivate*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:116</i><br>
	 * Original signature : <code>void g_private_set(GPrivate*, gpointer)</code> * /<br>
	 * extern void g_private_set(GPrivate* key, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_private_replace(GPrivate*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:118</i><br>
	 * Original signature : <code>void g_private_replace(GPrivate*, gpointer)</code> * /<br>
	 * extern void g_private_replace(GPrivate* key, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_private_replace(GPrivate*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:118</i><br>
	 * Original signature : <code>void g_private_replace(GPrivate*, gpointer)</code> * /<br>
	 * extern void g_private_replace(GPrivate* key, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_once_impl(GOnce*, GThreadFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:120</i><br>
	 * Original signature : <code>gpointer g_once_impl(GOnce*, GThreadFunc, gpointer)</code> * /<br>
	 * extern gpointer g_once_impl(GOnce* once, GThreadFunc func, gpointer arg);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_once_impl(GOnce*, GThreadFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:120</i><br>
	 * Original signature : <code>gpointer g_once_impl(GOnce*, GThreadFunc, gpointer)</code> * /<br>
	 * extern gpointer g_once_impl(GOnce* once, GThreadFunc func, gpointer arg);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gboolean g_once_init_enter(volatile void*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:122</i>
	 */
	public static GLibLibrary.gboolean g_once_init_enter(Pointer<? > location) {
		return g_once_init_enter(Pointer.getPeer(location));
	}
	protected native static GLibLibrary.gboolean g_once_init_enter(@Ptr long location);
	/**
	 * Original signature : <code>void g_once_init_leave(volatile void*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:124</i>
	 */
	public static void g_once_init_leave(Pointer<? > location, @org.bridj.ann.CLong long result) {
		g_once_init_leave(Pointer.getPeer(location), result);
	}
	protected native static void g_once_init_leave(@Ptr long location, @org.bridj.ann.CLong long result);
	/**
	 * Original signature : <code>guint g_get_num_processors()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:126</i>
	 */
	public static native int g_get_num_processors();
	/**
	 * Original signature : <code>GAsyncQueue* g_async_queue_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:3</i>
	 */
	public static Pointer<GLibLibrary.GAsyncQueue > g_async_queue_new() {
		return Pointer.pointerToAddress(g_async_queue_new$2(), GLibLibrary.GAsyncQueue.class);
	}
	@Ptr 
	protected native static long g_async_queue_new$2();
	/**
	 * Original signature : <code>GAsyncQueue* g_async_queue_new_full(GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:5</i>
	 */
	public static Pointer<GLibLibrary.GAsyncQueue > g_async_queue_new_full(Pointer<GLibLibrary.GDestroyNotify > item_free_func) {
		return Pointer.pointerToAddress(g_async_queue_new_full(Pointer.getPeer(item_free_func)), GLibLibrary.GAsyncQueue.class);
	}
	@Ptr 
	protected native static long g_async_queue_new_full(@Ptr long item_free_func);
	/**
	 * Original signature : <code>void g_async_queue_lock(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:7</i>
	 */
	public static void g_async_queue_lock(Pointer<GLibLibrary.GAsyncQueue > queue) {
		g_async_queue_lock(Pointer.getPeer(queue));
	}
	protected native static void g_async_queue_lock(@Ptr long queue);
	/**
	 * Original signature : <code>void g_async_queue_unlock(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:9</i>
	 */
	public static void g_async_queue_unlock(Pointer<GLibLibrary.GAsyncQueue > queue) {
		g_async_queue_unlock(Pointer.getPeer(queue));
	}
	protected native static void g_async_queue_unlock(@Ptr long queue);
	/**
	 * Original signature : <code>GAsyncQueue* g_async_queue_ref(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:11</i>
	 */
	public static Pointer<GLibLibrary.GAsyncQueue > g_async_queue_ref(Pointer<GLibLibrary.GAsyncQueue > queue) {
		return Pointer.pointerToAddress(g_async_queue_ref(Pointer.getPeer(queue)), GLibLibrary.GAsyncQueue.class);
	}
	@Ptr 
	protected native static long g_async_queue_ref(@Ptr long queue);
	/**
	 * Original signature : <code>void g_async_queue_unref(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:13</i>
	 */
	public static void g_async_queue_unref(Pointer<GLibLibrary.GAsyncQueue > queue) {
		g_async_queue_unref(Pointer.getPeer(queue));
	}
	protected native static void g_async_queue_unref(@Ptr long queue);
	/**
	 * Original signature : <code>void g_async_queue_ref_unlocked(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:15</i>
	 */
	public static void g_async_queue_ref_unlocked(Pointer<GLibLibrary.GAsyncQueue > queue) {
		g_async_queue_ref_unlocked(Pointer.getPeer(queue));
	}
	protected native static void g_async_queue_ref_unlocked(@Ptr long queue);
	/**
	 * Original signature : <code>void g_async_queue_unref_and_unlock(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:17</i>
	 */
	public static void g_async_queue_unref_and_unlock(Pointer<GLibLibrary.GAsyncQueue > queue) {
		g_async_queue_unref_and_unlock(Pointer.getPeer(queue));
	}
	protected native static void g_async_queue_unref_and_unlock(@Ptr long queue);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_async_queue_push(GAsyncQueue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:19</i><br>
	 * Original signature : <code>void g_async_queue_push(GAsyncQueue*, gpointer)</code> * /<br>
	 * extern void g_async_queue_push(GAsyncQueue* queue, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_async_queue_push(GAsyncQueue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:19</i><br>
	 * Original signature : <code>void g_async_queue_push(GAsyncQueue*, gpointer)</code> * /<br>
	 * extern void g_async_queue_push(GAsyncQueue* queue, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_async_queue_push_unlocked(GAsyncQueue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:21</i><br>
	 * Original signature : <code>void g_async_queue_push_unlocked(GAsyncQueue*, gpointer)</code> * /<br>
	 * extern void g_async_queue_push_unlocked(GAsyncQueue* queue, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_async_queue_push_unlocked(GAsyncQueue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:21</i><br>
	 * Original signature : <code>void g_async_queue_push_unlocked(GAsyncQueue*, gpointer)</code> * /<br>
	 * extern void g_async_queue_push_unlocked(GAsyncQueue* queue, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_async_queue_push_sorted(GAsyncQueue*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:23</i><br>
	 * Original signature : <code>void g_async_queue_push_sorted(GAsyncQueue*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_async_queue_push_sorted(GAsyncQueue* queue, gpointer data, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_async_queue_push_sorted(GAsyncQueue*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:23</i><br>
	 * Original signature : <code>void g_async_queue_push_sorted(GAsyncQueue*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_async_queue_push_sorted(GAsyncQueue* queue, gpointer data, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_async_queue_push_sorted_unlocked(GAsyncQueue*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:25</i><br>
	 * Original signature : <code>void g_async_queue_push_sorted_unlocked(GAsyncQueue*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_async_queue_push_sorted_unlocked(GAsyncQueue* queue, gpointer data, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_async_queue_push_sorted_unlocked(GAsyncQueue*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:25</i><br>
	 * Original signature : <code>void g_async_queue_push_sorted_unlocked(GAsyncQueue*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_async_queue_push_sorted_unlocked(GAsyncQueue* queue, gpointer data, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_pop(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:27</i><br>
	 * Original signature : <code>gpointer g_async_queue_pop(GAsyncQueue*)</code> * /<br>
	 * extern gpointer g_async_queue_pop(GAsyncQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_pop(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:27</i><br>
	 * Original signature : <code>gpointer g_async_queue_pop(GAsyncQueue*)</code> * /<br>
	 * extern gpointer g_async_queue_pop(GAsyncQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_pop_unlocked(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:29</i><br>
	 * Original signature : <code>gpointer g_async_queue_pop_unlocked(GAsyncQueue*)</code> * /<br>
	 * extern gpointer g_async_queue_pop_unlocked(GAsyncQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_pop_unlocked(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:29</i><br>
	 * Original signature : <code>gpointer g_async_queue_pop_unlocked(GAsyncQueue*)</code> * /<br>
	 * extern gpointer g_async_queue_pop_unlocked(GAsyncQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_try_pop(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:31</i><br>
	 * Original signature : <code>gpointer g_async_queue_try_pop(GAsyncQueue*)</code> * /<br>
	 * extern gpointer g_async_queue_try_pop(GAsyncQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_try_pop(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:31</i><br>
	 * Original signature : <code>gpointer g_async_queue_try_pop(GAsyncQueue*)</code> * /<br>
	 * extern gpointer g_async_queue_try_pop(GAsyncQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_try_pop_unlocked(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:33</i><br>
	 * Original signature : <code>gpointer g_async_queue_try_pop_unlocked(GAsyncQueue*)</code> * /<br>
	 * extern gpointer g_async_queue_try_pop_unlocked(GAsyncQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_try_pop_unlocked(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:33</i><br>
	 * Original signature : <code>gpointer g_async_queue_try_pop_unlocked(GAsyncQueue*)</code> * /<br>
	 * extern gpointer g_async_queue_try_pop_unlocked(GAsyncQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_timeout_pop(GAsyncQueue*, guint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:35</i><br>
	 * Original signature : <code>gpointer g_async_queue_timeout_pop(GAsyncQueue*, guint64)</code> * /<br>
	 * extern gpointer g_async_queue_timeout_pop(GAsyncQueue* queue, guint64 timeout);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_timeout_pop(GAsyncQueue*, guint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:35</i><br>
	 * Original signature : <code>gpointer g_async_queue_timeout_pop(GAsyncQueue*, guint64)</code> * /<br>
	 * extern gpointer g_async_queue_timeout_pop(GAsyncQueue* queue, guint64 timeout);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_timeout_pop_unlocked(GAsyncQueue*, guint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:37</i><br>
	 * Original signature : <code>gpointer g_async_queue_timeout_pop_unlocked(GAsyncQueue*, guint64)</code> * /<br>
	 * extern gpointer g_async_queue_timeout_pop_unlocked(GAsyncQueue* queue, guint64 timeout);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_timeout_pop_unlocked(GAsyncQueue*, guint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:37</i><br>
	 * Original signature : <code>gpointer g_async_queue_timeout_pop_unlocked(GAsyncQueue*, guint64)</code> * /<br>
	 * extern gpointer g_async_queue_timeout_pop_unlocked(GAsyncQueue* queue, guint64 timeout);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gint g_async_queue_length(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:39</i>
	 */
	public static int g_async_queue_length(Pointer<GLibLibrary.GAsyncQueue > queue) {
		return g_async_queue_length(Pointer.getPeer(queue));
	}
	protected native static int g_async_queue_length(@Ptr long queue);
	/**
	 * Original signature : <code>gint g_async_queue_length_unlocked(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:41</i>
	 */
	public static int g_async_queue_length_unlocked(Pointer<GLibLibrary.GAsyncQueue > queue) {
		return g_async_queue_length_unlocked(Pointer.getPeer(queue));
	}
	protected native static int g_async_queue_length_unlocked(@Ptr long queue);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_async_queue_sort(GAsyncQueue*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:43</i><br>
	 * Original signature : <code>void g_async_queue_sort(GAsyncQueue*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_async_queue_sort(GAsyncQueue* queue, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_async_queue_sort(GAsyncQueue*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:43</i><br>
	 * Original signature : <code>void g_async_queue_sort(GAsyncQueue*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_async_queue_sort(GAsyncQueue* queue, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_async_queue_sort_unlocked(GAsyncQueue*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:45</i><br>
	 * Original signature : <code>void g_async_queue_sort_unlocked(GAsyncQueue*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_async_queue_sort_unlocked(GAsyncQueue* queue, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_async_queue_sort_unlocked(GAsyncQueue*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:45</i><br>
	 * Original signature : <code>void g_async_queue_sort_unlocked(GAsyncQueue*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_async_queue_sort_unlocked(GAsyncQueue* queue, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_timed_pop(GAsyncQueue*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:47</i><br>
	 * Original signature : <code>gpointer g_async_queue_timed_pop(GAsyncQueue*, GTimeVal*)</code> * /<br>
	 * extern gpointer g_async_queue_timed_pop(GAsyncQueue* queue, GTimeVal* end_time);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_timed_pop(GAsyncQueue*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:47</i><br>
	 * Original signature : <code>gpointer g_async_queue_timed_pop(GAsyncQueue*, GTimeVal*)</code> * /<br>
	 * extern gpointer g_async_queue_timed_pop(GAsyncQueue* queue, GTimeVal* end_time);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_timed_pop_unlocked(GAsyncQueue*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:49</i><br>
	 * Original signature : <code>gpointer g_async_queue_timed_pop_unlocked(GAsyncQueue*, GTimeVal*)</code> * /<br>
	 * extern gpointer g_async_queue_timed_pop_unlocked(GAsyncQueue* queue, GTimeVal* end_time);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_async_queue_timed_pop_unlocked(GAsyncQueue*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:49</i><br>
	 * Original signature : <code>gpointer g_async_queue_timed_pop_unlocked(GAsyncQueue*, GTimeVal*)</code> * /<br>
	 * extern gpointer g_async_queue_timed_pop_unlocked(GAsyncQueue* queue, GTimeVal* end_time);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_on_error_query(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbacktrace.h:2</i>
	 */
	public static void g_on_error_query(Pointer<Byte > prg_name) {
		g_on_error_query(Pointer.getPeer(prg_name));
	}
	protected native static void g_on_error_query(@Ptr long prg_name);
	/**
	 * Original signature : <code>void g_on_error_stack_trace(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbacktrace.h:4</i>
	 */
	public static void g_on_error_stack_trace(Pointer<Byte > prg_name) {
		g_on_error_stack_trace(Pointer.getPeer(prg_name));
	}
	protected native static void g_on_error_stack_trace(@Ptr long prg_name);
	/**
	 * Original signature : <code>gsize g_base64_encode_step(const guchar*, gsize, gboolean, gchar*, gint*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbase64.h:2</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_base64_encode_step(Pointer<Byte > in, @org.bridj.ann.CLong long len, GLibLibrary.gboolean break_lines, Pointer<Byte > out, Pointer<Integer > state, Pointer<Integer > save) {
		return g_base64_encode_step(Pointer.getPeer(in), len, break_lines, Pointer.getPeer(out), Pointer.getPeer(state), Pointer.getPeer(save));
	}
	@org.bridj.ann.CLong 
	protected native static long g_base64_encode_step(@Ptr long in, @org.bridj.ann.CLong long len, GLibLibrary.gboolean break_lines, @Ptr long out, @Ptr long state, @Ptr long save);
	/**
	 * Original signature : <code>gsize g_base64_encode_close(gboolean, gchar*, gint*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbase64.h:4</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_base64_encode_close(GLibLibrary.gboolean break_lines, Pointer<Byte > out, Pointer<Integer > state, Pointer<Integer > save) {
		return g_base64_encode_close(break_lines, Pointer.getPeer(out), Pointer.getPeer(state), Pointer.getPeer(save));
	}
	@org.bridj.ann.CLong 
	protected native static long g_base64_encode_close(GLibLibrary.gboolean break_lines, @Ptr long out, @Ptr long state, @Ptr long save);
	/**
	 * Original signature : <code>gchar* g_base64_encode(const guchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbase64.h:6</i>
	 */
	public static Pointer<Byte > g_base64_encode(Pointer<Byte > data, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_base64_encode(Pointer.getPeer(data), len), Byte.class);
	}
	@Ptr 
	protected native static long g_base64_encode(@Ptr long data, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>gsize g_base64_decode_step(const gchar*, gsize, guchar*, gint*, guint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbase64.h:8</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_base64_decode_step(Pointer<Byte > in, @org.bridj.ann.CLong long len, Pointer<Byte > out, Pointer<Integer > state, Pointer<Integer > save) {
		return g_base64_decode_step(Pointer.getPeer(in), len, Pointer.getPeer(out), Pointer.getPeer(state), Pointer.getPeer(save));
	}
	@org.bridj.ann.CLong 
	protected native static long g_base64_decode_step(@Ptr long in, @org.bridj.ann.CLong long len, @Ptr long out, @Ptr long state, @Ptr long save);
	/**
	 * Original signature : <code>guchar* g_base64_decode(const gchar*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbase64.h:10</i>
	 */
	public static Pointer<Byte > g_base64_decode(Pointer<Byte > text, Pointer<org.bridj.CLong > out_len) {
		return Pointer.pointerToAddress(g_base64_decode(Pointer.getPeer(text), Pointer.getPeer(out_len)), Byte.class);
	}
	@Ptr 
	protected native static long g_base64_decode(@Ptr long text, @Ptr long out_len);
	/**
	 * Original signature : <code>guchar* g_base64_decode_inplace(gchar*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbase64.h:12</i>
	 */
	public static Pointer<Byte > g_base64_decode_inplace(Pointer<Byte > text, Pointer<org.bridj.CLong > out_len) {
		return Pointer.pointerToAddress(g_base64_decode_inplace(Pointer.getPeer(text), Pointer.getPeer(out_len)), Byte.class);
	}
	@Ptr 
	protected native static long g_base64_decode_inplace(@Ptr long text, @Ptr long out_len);
	/**
	 * Original signature : <code>void g_bit_lock(volatile gint*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbitlock.h:2</i>
	 */
	public static void g_bit_lock(Pointer<Integer > address, int lock_bit) {
		g_bit_lock(Pointer.getPeer(address), lock_bit);
	}
	protected native static void g_bit_lock(@Ptr long address, int lock_bit);
	/**
	 * Original signature : <code>gboolean g_bit_trylock(volatile gint*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbitlock.h:4</i>
	 */
	public static GLibLibrary.gboolean g_bit_trylock(Pointer<Integer > address, int lock_bit) {
		return g_bit_trylock(Pointer.getPeer(address), lock_bit);
	}
	protected native static GLibLibrary.gboolean g_bit_trylock(@Ptr long address, int lock_bit);
	/**
	 * Original signature : <code>void g_bit_unlock(volatile gint*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbitlock.h:6</i>
	 */
	public static void g_bit_unlock(Pointer<Integer > address, int lock_bit) {
		g_bit_unlock(Pointer.getPeer(address), lock_bit);
	}
	protected native static void g_bit_unlock(@Ptr long address, int lock_bit);
	/**
	 * Original signature : <code>void g_pointer_bit_lock(volatile void*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbitlock.h:8</i>
	 */
	public static void g_pointer_bit_lock(Pointer<? > address, int lock_bit) {
		g_pointer_bit_lock(Pointer.getPeer(address), lock_bit);
	}
	protected native static void g_pointer_bit_lock(@Ptr long address, int lock_bit);
	/**
	 * Original signature : <code>gboolean g_pointer_bit_trylock(volatile void*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbitlock.h:10</i>
	 */
	public static GLibLibrary.gboolean g_pointer_bit_trylock(Pointer<? > address, int lock_bit) {
		return g_pointer_bit_trylock(Pointer.getPeer(address), lock_bit);
	}
	protected native static GLibLibrary.gboolean g_pointer_bit_trylock(@Ptr long address, int lock_bit);
	/**
	 * Original signature : <code>void g_pointer_bit_unlock(volatile void*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbitlock.h:12</i>
	 */
	public static void g_pointer_bit_unlock(Pointer<? > address, int lock_bit) {
		g_pointer_bit_unlock(Pointer.getPeer(address), lock_bit);
	}
	protected native static void g_pointer_bit_unlock(@Ptr long address, int lock_bit);
	/**
	 * Original signature : <code>GQuark g_bookmark_file_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:26</i>
	 */
	public static native int g_bookmark_file_error_quark();
	/**
	 * Original signature : <code>GBookmarkFile* g_bookmark_file_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:34</i>
	 */
	public static Pointer<GLibLibrary.GBookmarkFile > g_bookmark_file_new() {
		return Pointer.pointerToAddress(g_bookmark_file_new$2(), GLibLibrary.GBookmarkFile.class);
	}
	@Ptr 
	protected native static long g_bookmark_file_new$2();
	/**
	 * Original signature : <code>void g_bookmark_file_free(GBookmarkFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:36</i>
	 */
	public static void g_bookmark_file_free(Pointer<GLibLibrary.GBookmarkFile > bookmark) {
		g_bookmark_file_free(Pointer.getPeer(bookmark));
	}
	protected native static void g_bookmark_file_free(@Ptr long bookmark);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_load_from_file(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:38</i>
	 */
	public static GLibLibrary.gboolean g_bookmark_file_load_from_file(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > filename, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_load_from_file(Pointer.getPeer(bookmark), Pointer.getPeer(filename), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_bookmark_file_load_from_file(@Ptr long bookmark, @Ptr long filename, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_load_from_data(GBookmarkFile*, const gchar*, gsize, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:40</i>
	 */
	public static GLibLibrary.gboolean g_bookmark_file_load_from_data(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > data, @org.bridj.ann.CLong long length, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_load_from_data(Pointer.getPeer(bookmark), Pointer.getPeer(data), length, Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_bookmark_file_load_from_data(@Ptr long bookmark, @Ptr long data, @org.bridj.ann.CLong long length, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_load_from_data_dirs(GBookmarkFile*, const gchar*, gchar**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:42</i>
	 */
	public static GLibLibrary.gboolean g_bookmark_file_load_from_data_dirs(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > file, Pointer<Pointer<Byte > > full_path, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_load_from_data_dirs(Pointer.getPeer(bookmark), Pointer.getPeer(file), Pointer.getPeer(full_path), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_bookmark_file_load_from_data_dirs(@Ptr long bookmark, @Ptr long file, @Ptr long full_path, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_bookmark_file_to_data(GBookmarkFile*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:44</i>
	 */
	public static Pointer<Byte > g_bookmark_file_to_data(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<org.bridj.CLong > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_to_data(Pointer.getPeer(bookmark), Pointer.getPeer(length), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_bookmark_file_to_data(@Ptr long bookmark, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_to_file(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:46</i>
	 */
	public static GLibLibrary.gboolean g_bookmark_file_to_file(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > filename, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_to_file(Pointer.getPeer(bookmark), Pointer.getPeer(filename), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_bookmark_file_to_file(@Ptr long bookmark, @Ptr long filename, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_title(GBookmarkFile*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:48</i>
	 */
	public static void g_bookmark_file_set_title(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Byte > title) {
		g_bookmark_file_set_title(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(title));
	}
	protected native static void g_bookmark_file_set_title(@Ptr long bookmark, @Ptr long uri, @Ptr long title);
	/**
	 * Original signature : <code>gchar* g_bookmark_file_get_title(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:50</i>
	 */
	public static Pointer<Byte > g_bookmark_file_get_title(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_get_title(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_bookmark_file_get_title(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_description(GBookmarkFile*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:52</i>
	 */
	public static void g_bookmark_file_set_description(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Byte > description) {
		g_bookmark_file_set_description(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(description));
	}
	protected native static void g_bookmark_file_set_description(@Ptr long bookmark, @Ptr long uri, @Ptr long description);
	/**
	 * Original signature : <code>gchar* g_bookmark_file_get_description(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:54</i>
	 */
	public static Pointer<Byte > g_bookmark_file_get_description(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_get_description(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_bookmark_file_get_description(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_mime_type(GBookmarkFile*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:56</i>
	 */
	public static void g_bookmark_file_set_mime_type(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Byte > mime_type) {
		g_bookmark_file_set_mime_type(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(mime_type));
	}
	protected native static void g_bookmark_file_set_mime_type(@Ptr long bookmark, @Ptr long uri, @Ptr long mime_type);
	/**
	 * Original signature : <code>gchar* g_bookmark_file_get_mime_type(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:58</i>
	 */
	public static Pointer<Byte > g_bookmark_file_get_mime_type(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_get_mime_type(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_bookmark_file_get_mime_type(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_groups(GBookmarkFile*, const gchar*, const gchar**, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:60</i>
	 */
	public static void g_bookmark_file_set_groups(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Pointer<Byte > > groups, @org.bridj.ann.CLong long length) {
		g_bookmark_file_set_groups(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(groups), length);
	}
	protected native static void g_bookmark_file_set_groups(@Ptr long bookmark, @Ptr long uri, @Ptr long groups, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>void g_bookmark_file_add_group(GBookmarkFile*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:62</i>
	 */
	public static void g_bookmark_file_add_group(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Byte > group) {
		g_bookmark_file_add_group(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(group));
	}
	protected native static void g_bookmark_file_add_group(@Ptr long bookmark, @Ptr long uri, @Ptr long group);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_has_group(GBookmarkFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:64</i>
	 */
	public static GLibLibrary.gboolean g_bookmark_file_has_group(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Byte > group, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_has_group(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(group), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_bookmark_file_has_group(@Ptr long bookmark, @Ptr long uri, @Ptr long group, @Ptr long error);
	/**
	 * Original signature : <code>gchar** g_bookmark_file_get_groups(GBookmarkFile*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:66</i>
	 */
	public static Pointer<Pointer<Byte > > g_bookmark_file_get_groups(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<org.bridj.CLong > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_get_groups(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(length), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_bookmark_file_get_groups(@Ptr long bookmark, @Ptr long uri, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_add_application(GBookmarkFile*, const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:68</i>
	 */
	public static void g_bookmark_file_add_application(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Byte > name, Pointer<Byte > exec) {
		g_bookmark_file_add_application(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(name), Pointer.getPeer(exec));
	}
	protected native static void g_bookmark_file_add_application(@Ptr long bookmark, @Ptr long uri, @Ptr long name, @Ptr long exec);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_has_application(GBookmarkFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:70</i>
	 */
	public static GLibLibrary.gboolean g_bookmark_file_has_application(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Byte > name, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_has_application(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(name), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_bookmark_file_has_application(@Ptr long bookmark, @Ptr long uri, @Ptr long name, @Ptr long error);
	/**
	 * Original signature : <code>gchar** g_bookmark_file_get_applications(GBookmarkFile*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:72</i>
	 */
	public static Pointer<Pointer<Byte > > g_bookmark_file_get_applications(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<org.bridj.CLong > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_get_applications(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(length), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_bookmark_file_get_applications(@Ptr long bookmark, @Ptr long uri, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_set_app_info(GBookmarkFile*, const gchar*, const gchar*, const gchar*, gint, time_t, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:74</i>
	 */
	public static GLibLibrary.gboolean g_bookmark_file_set_app_info(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Byte > name, Pointer<Byte > exec, int count, @org.bridj.ann.CLong long stamp, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_set_app_info(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(name), Pointer.getPeer(exec), count, stamp, Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_bookmark_file_set_app_info(@Ptr long bookmark, @Ptr long uri, @Ptr long name, @Ptr long exec, int count, @org.bridj.ann.CLong long stamp, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_get_app_info(GBookmarkFile*, const gchar*, const gchar*, gchar**, guint*, time_t*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:76</i>
	 */
	public static GLibLibrary.gboolean g_bookmark_file_get_app_info(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Byte > name, Pointer<Pointer<Byte > > exec, Pointer<Integer > count, Pointer<org.bridj.CLong > stamp, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_get_app_info(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(name), Pointer.getPeer(exec), Pointer.getPeer(count), Pointer.getPeer(stamp), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_bookmark_file_get_app_info(@Ptr long bookmark, @Ptr long uri, @Ptr long name, @Ptr long exec, @Ptr long count, @Ptr long stamp, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_is_private(GBookmarkFile*, const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:78</i>
	 */
	public static void g_bookmark_file_set_is_private(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, GLibLibrary.gboolean is_private) {
		g_bookmark_file_set_is_private(Pointer.getPeer(bookmark), Pointer.getPeer(uri), is_private);
	}
	protected native static void g_bookmark_file_set_is_private(@Ptr long bookmark, @Ptr long uri, GLibLibrary.gboolean is_private);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_get_is_private(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:80</i>
	 */
	public static GLibLibrary.gboolean g_bookmark_file_get_is_private(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_get_is_private(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_bookmark_file_get_is_private(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_icon(GBookmarkFile*, const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:82</i>
	 */
	public static void g_bookmark_file_set_icon(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Byte > href, Pointer<Byte > mime_type) {
		g_bookmark_file_set_icon(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(href), Pointer.getPeer(mime_type));
	}
	protected native static void g_bookmark_file_set_icon(@Ptr long bookmark, @Ptr long uri, @Ptr long href, @Ptr long mime_type);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_get_icon(GBookmarkFile*, const gchar*, gchar**, gchar**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:84</i>
	 */
	public static GLibLibrary.gboolean g_bookmark_file_get_icon(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Pointer<Byte > > href, Pointer<Pointer<Byte > > mime_type, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_get_icon(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(href), Pointer.getPeer(mime_type), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_bookmark_file_get_icon(@Ptr long bookmark, @Ptr long uri, @Ptr long href, @Ptr long mime_type, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_added(GBookmarkFile*, const gchar*, time_t)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:86</i>
	 */
	public static void g_bookmark_file_set_added(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, @org.bridj.ann.CLong long added) {
		g_bookmark_file_set_added(Pointer.getPeer(bookmark), Pointer.getPeer(uri), added);
	}
	protected native static void g_bookmark_file_set_added(@Ptr long bookmark, @Ptr long uri, @org.bridj.ann.CLong long added);
	/**
	 * Original signature : <code>time_t g_bookmark_file_get_added(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:88</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_bookmark_file_get_added(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_get_added(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_bookmark_file_get_added(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_modified(GBookmarkFile*, const gchar*, time_t)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:90</i>
	 */
	public static void g_bookmark_file_set_modified(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, @org.bridj.ann.CLong long modified) {
		g_bookmark_file_set_modified(Pointer.getPeer(bookmark), Pointer.getPeer(uri), modified);
	}
	protected native static void g_bookmark_file_set_modified(@Ptr long bookmark, @Ptr long uri, @org.bridj.ann.CLong long modified);
	/**
	 * Original signature : <code>time_t g_bookmark_file_get_modified(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:92</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_bookmark_file_get_modified(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_get_modified(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_bookmark_file_get_modified(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_visited(GBookmarkFile*, const gchar*, time_t)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:94</i>
	 */
	public static void g_bookmark_file_set_visited(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, @org.bridj.ann.CLong long visited) {
		g_bookmark_file_set_visited(Pointer.getPeer(bookmark), Pointer.getPeer(uri), visited);
	}
	protected native static void g_bookmark_file_set_visited(@Ptr long bookmark, @Ptr long uri, @org.bridj.ann.CLong long visited);
	/**
	 * Original signature : <code>time_t g_bookmark_file_get_visited(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:96</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_bookmark_file_get_visited(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_get_visited(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_bookmark_file_get_visited(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_has_item(GBookmarkFile*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:98</i>
	 */
	public static GLibLibrary.gboolean g_bookmark_file_has_item(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri) {
		return g_bookmark_file_has_item(Pointer.getPeer(bookmark), Pointer.getPeer(uri));
	}
	protected native static GLibLibrary.gboolean g_bookmark_file_has_item(@Ptr long bookmark, @Ptr long uri);
	/**
	 * Original signature : <code>gint g_bookmark_file_get_size(GBookmarkFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:100</i>
	 */
	public static int g_bookmark_file_get_size(Pointer<GLibLibrary.GBookmarkFile > bookmark) {
		return g_bookmark_file_get_size(Pointer.getPeer(bookmark));
	}
	protected native static int g_bookmark_file_get_size(@Ptr long bookmark);
	/**
	 * Original signature : <code>gchar** g_bookmark_file_get_uris(GBookmarkFile*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:102</i>
	 */
	public static Pointer<Pointer<Byte > > g_bookmark_file_get_uris(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<org.bridj.CLong > length) {
		return Pointer.pointerToAddress(g_bookmark_file_get_uris(Pointer.getPeer(bookmark), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_bookmark_file_get_uris(@Ptr long bookmark, @Ptr long length);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_remove_group(GBookmarkFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:104</i>
	 */
	public static GLibLibrary.gboolean g_bookmark_file_remove_group(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Byte > group, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_remove_group(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(group), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_bookmark_file_remove_group(@Ptr long bookmark, @Ptr long uri, @Ptr long group, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_remove_application(GBookmarkFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:106</i>
	 */
	public static GLibLibrary.gboolean g_bookmark_file_remove_application(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Byte > name, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_remove_application(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(name), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_bookmark_file_remove_application(@Ptr long bookmark, @Ptr long uri, @Ptr long name, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_remove_item(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:108</i>
	 */
	public static GLibLibrary.gboolean g_bookmark_file_remove_item(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > uri, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_remove_item(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_bookmark_file_remove_item(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_move_item(GBookmarkFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:110</i>
	 */
	public static GLibLibrary.gboolean g_bookmark_file_move_item(Pointer<GLibLibrary.GBookmarkFile > bookmark, Pointer<Byte > old_uri, Pointer<Byte > new_uri, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_move_item(Pointer.getPeer(bookmark), Pointer.getPeer(old_uri), Pointer.getPeer(new_uri), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_bookmark_file_move_item(@Ptr long bookmark, @Ptr long old_uri, @Ptr long new_uri, @Ptr long error);
	/**
	 * Original signature : <code>GBytes* g_bytes_new(gconstpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:2</i>
	 */
	public static Pointer<GLibLibrary.GBytes > g_bytes_new(Pointer<? > data, @org.bridj.ann.CLong long size) {
		return Pointer.pointerToAddress(g_bytes_new(Pointer.getPeer(data), size), GLibLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_bytes_new(@Ptr long data, @org.bridj.ann.CLong long size);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GBytes* g_bytes_new_take(gpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:4</i><br>
	 * Original signature : <code>GBytes* g_bytes_new_take(gpointer, gsize)</code> * /<br>
	 * extern GBytes* g_bytes_new_take(gpointer data, gsize size);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GBytes* g_bytes_new_take(gpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:4</i><br>
	 * Original signature : <code>GBytes* g_bytes_new_take(gpointer, gsize)</code> * /<br>
	 * extern GBytes* g_bytes_new_take(gpointer data, gsize size);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GBytes* g_bytes_new_static(gconstpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:6</i>
	 */
	public static Pointer<GLibLibrary.GBytes > g_bytes_new_static(Pointer<? > data, @org.bridj.ann.CLong long size) {
		return Pointer.pointerToAddress(g_bytes_new_static(Pointer.getPeer(data), size), GLibLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_bytes_new_static(@Ptr long data, @org.bridj.ann.CLong long size);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GBytes* g_bytes_new_with_free_func(gconstpointer, gsize, GDestroyNotify, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:8</i><br>
	 * Original signature : <code>GBytes* g_bytes_new_with_free_func(gconstpointer, gsize, GDestroyNotify, gpointer)</code> * /<br>
	 * extern GBytes* g_bytes_new_with_free_func(gconstpointer data, gsize size, GDestroyNotify free_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GBytes* g_bytes_new_with_free_func(gconstpointer, gsize, GDestroyNotify, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:8</i><br>
	 * Original signature : <code>GBytes* g_bytes_new_with_free_func(gconstpointer, gsize, GDestroyNotify, gpointer)</code> * /<br>
	 * extern GBytes* g_bytes_new_with_free_func(gconstpointer data, gsize size, GDestroyNotify free_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GBytes* g_bytes_new_from_bytes(GBytes*, gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:10</i>
	 */
	public static Pointer<GLibLibrary.GBytes > g_bytes_new_from_bytes(Pointer<GLibLibrary.GBytes > bytes, @org.bridj.ann.CLong long offset, @org.bridj.ann.CLong long length) {
		return Pointer.pointerToAddress(g_bytes_new_from_bytes(Pointer.getPeer(bytes), offset, length), GLibLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_bytes_new_from_bytes(@Ptr long bytes, @org.bridj.ann.CLong long offset, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>gconstpointer g_bytes_get_data(GBytes*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:12</i>
	 */
	public static Pointer<? > g_bytes_get_data(Pointer<GLibLibrary.GBytes > bytes, Pointer<org.bridj.CLong > size) {
		return Pointer.pointerToAddress(g_bytes_get_data(Pointer.getPeer(bytes), Pointer.getPeer(size)));
	}
	@Ptr 
	protected native static long g_bytes_get_data(@Ptr long bytes, @Ptr long size);
	/**
	 * Original signature : <code>gsize g_bytes_get_size(GBytes*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:14</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_bytes_get_size(Pointer<GLibLibrary.GBytes > bytes) {
		return g_bytes_get_size(Pointer.getPeer(bytes));
	}
	@org.bridj.ann.CLong 
	protected native static long g_bytes_get_size(@Ptr long bytes);
	/**
	 * Original signature : <code>GBytes* g_bytes_ref(GBytes*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:16</i>
	 */
	public static Pointer<GLibLibrary.GBytes > g_bytes_ref(Pointer<GLibLibrary.GBytes > bytes) {
		return Pointer.pointerToAddress(g_bytes_ref(Pointer.getPeer(bytes)), GLibLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_bytes_ref(@Ptr long bytes);
	/**
	 * Original signature : <code>void g_bytes_unref(GBytes*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:18</i>
	 */
	public static void g_bytes_unref(Pointer<GLibLibrary.GBytes > bytes) {
		g_bytes_unref(Pointer.getPeer(bytes));
	}
	protected native static void g_bytes_unref(@Ptr long bytes);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_bytes_unref_to_data(GBytes*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:20</i><br>
	 * Original signature : <code>gpointer g_bytes_unref_to_data(GBytes*, gsize*)</code> * /<br>
	 * extern gpointer g_bytes_unref_to_data(GBytes* bytes, gsize* size);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_bytes_unref_to_data(GBytes*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:20</i><br>
	 * Original signature : <code>gpointer g_bytes_unref_to_data(GBytes*, gsize*)</code> * /<br>
	 * extern gpointer g_bytes_unref_to_data(GBytes* bytes, gsize* size);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GByteArray* g_bytes_unref_to_array(GBytes*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:22</i>
	 */
	public static Pointer<GByteArray > g_bytes_unref_to_array(Pointer<GLibLibrary.GBytes > bytes) {
		return Pointer.pointerToAddress(g_bytes_unref_to_array(Pointer.getPeer(bytes)), GByteArray.class);
	}
	@Ptr 
	protected native static long g_bytes_unref_to_array(@Ptr long bytes);
	/**
	 * Original signature : <code>guint g_bytes_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:24</i>
	 */
	public static int g_bytes_hash(Pointer<? > bytes) {
		return g_bytes_hash(Pointer.getPeer(bytes));
	}
	protected native static int g_bytes_hash(@Ptr long bytes);
	/**
	 * Original signature : <code>gboolean g_bytes_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:26</i>
	 */
	public static GLibLibrary.gboolean g_bytes_equal(Pointer<? > bytes1, Pointer<? > bytes2) {
		return g_bytes_equal(Pointer.getPeer(bytes1), Pointer.getPeer(bytes2));
	}
	protected native static GLibLibrary.gboolean g_bytes_equal(@Ptr long bytes1, @Ptr long bytes2);
	/**
	 * Original signature : <code>gint g_bytes_compare(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:28</i>
	 */
	public static int g_bytes_compare(Pointer<? > bytes1, Pointer<? > bytes2) {
		return g_bytes_compare(Pointer.getPeer(bytes1), Pointer.getPeer(bytes2));
	}
	protected native static int g_bytes_compare(@Ptr long bytes1, @Ptr long bytes2);
	/**
	 * Original signature : <code>gboolean g_get_charset(const char**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gcharset.h:2</i>
	 */
	public static GLibLibrary.gboolean g_get_charset(Pointer<Pointer<Byte > > charset) {
		return g_get_charset(Pointer.getPeer(charset));
	}
	protected native static GLibLibrary.gboolean g_get_charset(@Ptr long charset);
	/**
	 * Original signature : <code>gchar* g_get_codeset()</code><br>
	 * <i>native declaration : glib-2.0/glib/gcharset.h:4</i>
	 */
	public static Pointer<Byte > g_get_codeset() {
		return Pointer.pointerToAddress(g_get_codeset$2(), Byte.class);
	}
	@Ptr 
	protected native static long g_get_codeset$2();
	/**
	 * Original signature : <code>const gchar** g_get_language_names()</code><br>
	 * <i>native declaration : glib-2.0/glib/gcharset.h:6</i>
	 */
	public static Pointer<Pointer<Byte > > g_get_language_names() {
		return Pointer.pointerToAddress(g_get_language_names$2(), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_get_language_names$2();
	/**
	 * Original signature : <code>gchar** g_get_locale_variants(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gcharset.h:8</i>
	 */
	public static Pointer<Pointer<Byte > > g_get_locale_variants(Pointer<Byte > locale) {
		return Pointer.pointerToAddress(g_get_locale_variants(Pointer.getPeer(locale)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_get_locale_variants(@Ptr long locale);
	/**
	 * Original signature : <code>gssize g_checksum_type_get_length(GChecksumType)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:28</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_checksum_type_get_length(IntValuedEnum<GLibLibrary.GChecksumType > checksum_type) {
		return g_checksum_type_get_length((int)checksum_type.value());
	}
	@org.bridj.ann.CLong 
	protected native static long g_checksum_type_get_length(int checksum_type);
	/**
	 * Original signature : <code>GChecksum* g_checksum_new(GChecksumType)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:30</i>
	 */
	public static Pointer<GLibLibrary.GChecksum > g_checksum_new(IntValuedEnum<GLibLibrary.GChecksumType > checksum_type) {
		return Pointer.pointerToAddress(g_checksum_new((int)checksum_type.value()), GLibLibrary.GChecksum.class);
	}
	@Ptr 
	protected native static long g_checksum_new(int checksum_type);
	/**
	 * Original signature : <code>void g_checksum_reset(GChecksum*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:32</i>
	 */
	public static void g_checksum_reset(Pointer<GLibLibrary.GChecksum > checksum) {
		g_checksum_reset(Pointer.getPeer(checksum));
	}
	protected native static void g_checksum_reset(@Ptr long checksum);
	/**
	 * Original signature : <code>GChecksum* g_checksum_copy(const GChecksum*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:34</i>
	 */
	public static Pointer<GLibLibrary.GChecksum > g_checksum_copy(Pointer<GLibLibrary.GChecksum > checksum) {
		return Pointer.pointerToAddress(g_checksum_copy(Pointer.getPeer(checksum)), GLibLibrary.GChecksum.class);
	}
	@Ptr 
	protected native static long g_checksum_copy(@Ptr long checksum);
	/**
	 * Original signature : <code>void g_checksum_free(GChecksum*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:36</i>
	 */
	public static void g_checksum_free(Pointer<GLibLibrary.GChecksum > checksum) {
		g_checksum_free(Pointer.getPeer(checksum));
	}
	protected native static void g_checksum_free(@Ptr long checksum);
	/**
	 * Original signature : <code>void g_checksum_update(GChecksum*, const guchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:38</i>
	 */
	public static void g_checksum_update(Pointer<GLibLibrary.GChecksum > checksum, Pointer<Byte > data, @org.bridj.ann.CLong long length) {
		g_checksum_update(Pointer.getPeer(checksum), Pointer.getPeer(data), length);
	}
	protected native static void g_checksum_update(@Ptr long checksum, @Ptr long data, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>gchar* g_checksum_get_string(GChecksum*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:40</i>
	 */
	public static Pointer<Byte > g_checksum_get_string(Pointer<GLibLibrary.GChecksum > checksum) {
		return Pointer.pointerToAddress(g_checksum_get_string(Pointer.getPeer(checksum)), Byte.class);
	}
	@Ptr 
	protected native static long g_checksum_get_string(@Ptr long checksum);
	/**
	 * Original signature : <code>void g_checksum_get_digest(GChecksum*, guint8*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:42</i>
	 */
	public static void g_checksum_get_digest(Pointer<GLibLibrary.GChecksum > checksum, Pointer<Byte > buffer, Pointer<org.bridj.CLong > digest_len) {
		g_checksum_get_digest(Pointer.getPeer(checksum), Pointer.getPeer(buffer), Pointer.getPeer(digest_len));
	}
	protected native static void g_checksum_get_digest(@Ptr long checksum, @Ptr long buffer, @Ptr long digest_len);
	/**
	 * Original signature : <code>gchar* g_compute_checksum_for_data(GChecksumType, const guchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:44</i>
	 */
	public static Pointer<Byte > g_compute_checksum_for_data(IntValuedEnum<GLibLibrary.GChecksumType > checksum_type, Pointer<Byte > data, @org.bridj.ann.CLong long length) {
		return Pointer.pointerToAddress(g_compute_checksum_for_data((int)checksum_type.value(), Pointer.getPeer(data), length), Byte.class);
	}
	@Ptr 
	protected native static long g_compute_checksum_for_data(int checksum_type, @Ptr long data, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>gchar* g_compute_checksum_for_string(GChecksumType, const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:46</i>
	 */
	public static Pointer<Byte > g_compute_checksum_for_string(IntValuedEnum<GLibLibrary.GChecksumType > checksum_type, Pointer<Byte > str, @org.bridj.ann.CLong long length) {
		return Pointer.pointerToAddress(g_compute_checksum_for_string((int)checksum_type.value(), Pointer.getPeer(str), length), Byte.class);
	}
	@Ptr 
	protected native static long g_compute_checksum_for_string(int checksum_type, @Ptr long str, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>gchar* g_compute_checksum_for_bytes(GChecksumType, GBytes*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:48</i>
	 */
	public static Pointer<Byte > g_compute_checksum_for_bytes(IntValuedEnum<GLibLibrary.GChecksumType > checksum_type, Pointer<GLibLibrary.GBytes > data) {
		return Pointer.pointerToAddress(g_compute_checksum_for_bytes((int)checksum_type.value(), Pointer.getPeer(data)), Byte.class);
	}
	@Ptr 
	protected native static long g_compute_checksum_for_bytes(int checksum_type, @Ptr long data);
	/**
	 * Original signature : <code>GQuark g_convert_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:21</i>
	 */
	public static native int g_convert_error_quark();
	/**
	 * Original signature : <code>GIConv g_iconv_open(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:30</i>
	 */
	public static GLibLibrary.GIConv g_iconv_open(Pointer<Byte > to_codeset, Pointer<Byte > from_codeset) {
		return new GLibLibrary.GIConv(g_iconv_open(Pointer.getPeer(to_codeset), Pointer.getPeer(from_codeset)));
	}
	@Ptr 
	protected native static long g_iconv_open(@Ptr long to_codeset, @Ptr long from_codeset);
	/**
	 * Original signature : <code>gsize g_iconv(GIConv, gchar**, gsize*, gchar**, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:32</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_iconv(GLibLibrary.GIConv converter, Pointer<Pointer<Byte > > inbuf, Pointer<org.bridj.CLong > inbytes_left, Pointer<Pointer<Byte > > outbuf, Pointer<org.bridj.CLong > outbytes_left) {
		return g_iconv(Pointer.getPeer(converter), Pointer.getPeer(inbuf), Pointer.getPeer(inbytes_left), Pointer.getPeer(outbuf), Pointer.getPeer(outbytes_left));
	}
	@org.bridj.ann.CLong 
	protected native static long g_iconv(@Ptr long converter, @Ptr long inbuf, @Ptr long inbytes_left, @Ptr long outbuf, @Ptr long outbytes_left);
	/**
	 * Original signature : <code>gint g_iconv_close(GIConv)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:34</i>
	 */
	public static int g_iconv_close(GLibLibrary.GIConv converter) {
		return g_iconv_close(Pointer.getPeer(converter));
	}
	protected native static int g_iconv_close(@Ptr long converter);
	/**
	 * Original signature : <code>gchar* g_convert(const gchar*, gssize, const gchar*, const gchar*, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:36</i>
	 */
	public static Pointer<Byte > g_convert(Pointer<Byte > str, @org.bridj.ann.CLong long len, Pointer<Byte > to_codeset, Pointer<Byte > from_codeset, Pointer<org.bridj.CLong > bytes_read, Pointer<org.bridj.CLong > bytes_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_convert(Pointer.getPeer(str), len, Pointer.getPeer(to_codeset), Pointer.getPeer(from_codeset), Pointer.getPeer(bytes_read), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_convert(@Ptr long str, @org.bridj.ann.CLong long len, @Ptr long to_codeset, @Ptr long from_codeset, @Ptr long bytes_read, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_convert_with_iconv(const gchar*, gssize, GIConv, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:38</i>
	 */
	public static Pointer<Byte > g_convert_with_iconv(Pointer<Byte > str, @org.bridj.ann.CLong long len, GLibLibrary.GIConv converter, Pointer<org.bridj.CLong > bytes_read, Pointer<org.bridj.CLong > bytes_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_convert_with_iconv(Pointer.getPeer(str), len, Pointer.getPeer(converter), Pointer.getPeer(bytes_read), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_convert_with_iconv(@Ptr long str, @org.bridj.ann.CLong long len, @Ptr long converter, @Ptr long bytes_read, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_convert_with_fallback(const gchar*, gssize, const gchar*, const gchar*, const gchar*, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:40</i>
	 */
	public static Pointer<Byte > g_convert_with_fallback(Pointer<Byte > str, @org.bridj.ann.CLong long len, Pointer<Byte > to_codeset, Pointer<Byte > from_codeset, Pointer<Byte > fallback, Pointer<org.bridj.CLong > bytes_read, Pointer<org.bridj.CLong > bytes_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_convert_with_fallback(Pointer.getPeer(str), len, Pointer.getPeer(to_codeset), Pointer.getPeer(from_codeset), Pointer.getPeer(fallback), Pointer.getPeer(bytes_read), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_convert_with_fallback(@Ptr long str, @org.bridj.ann.CLong long len, @Ptr long to_codeset, @Ptr long from_codeset, @Ptr long fallback, @Ptr long bytes_read, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Convert between libc's idea of strings and UTF-8.<br>
	 * Original signature : <code>gchar* g_locale_to_utf8(const gchar*, gssize, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:45</i>
	 */
	public static Pointer<Byte > g_locale_to_utf8(Pointer<Byte > opsysstring, @org.bridj.ann.CLong long len, Pointer<org.bridj.CLong > bytes_read, Pointer<org.bridj.CLong > bytes_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_locale_to_utf8(Pointer.getPeer(opsysstring), len, Pointer.getPeer(bytes_read), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_locale_to_utf8(@Ptr long opsysstring, @org.bridj.ann.CLong long len, @Ptr long bytes_read, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_locale_from_utf8(const gchar*, gssize, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:47</i>
	 */
	public static Pointer<Byte > g_locale_from_utf8(Pointer<Byte > utf8string, @org.bridj.ann.CLong long len, Pointer<org.bridj.CLong > bytes_read, Pointer<org.bridj.CLong > bytes_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_locale_from_utf8(Pointer.getPeer(utf8string), len, Pointer.getPeer(bytes_read), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_locale_from_utf8(@Ptr long utf8string, @org.bridj.ann.CLong long len, @Ptr long bytes_read, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Convert between the operating system (or C runtime)<br>
	 * representation of file names and UTF-8.<br>
	 * Original signature : <code>gchar* g_filename_to_utf8(const gchar*, gssize, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:53</i>
	 */
	public static Pointer<Byte > g_filename_to_utf8(Pointer<Byte > opsysstring, @org.bridj.ann.CLong long len, Pointer<org.bridj.CLong > bytes_read, Pointer<org.bridj.CLong > bytes_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_filename_to_utf8(Pointer.getPeer(opsysstring), len, Pointer.getPeer(bytes_read), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_filename_to_utf8(@Ptr long opsysstring, @org.bridj.ann.CLong long len, @Ptr long bytes_read, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_filename_from_utf8(const gchar*, gssize, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:55</i>
	 */
	public static Pointer<Byte > g_filename_from_utf8(Pointer<Byte > utf8string, @org.bridj.ann.CLong long len, Pointer<org.bridj.CLong > bytes_read, Pointer<org.bridj.CLong > bytes_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_filename_from_utf8(Pointer.getPeer(utf8string), len, Pointer.getPeer(bytes_read), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_filename_from_utf8(@Ptr long utf8string, @org.bridj.ann.CLong long len, @Ptr long bytes_read, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_filename_from_uri(const gchar*, gchar**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:57</i>
	 */
	public static Pointer<Byte > g_filename_from_uri(Pointer<Byte > uri, Pointer<Pointer<Byte > > hostname, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_filename_from_uri(Pointer.getPeer(uri), Pointer.getPeer(hostname), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_filename_from_uri(@Ptr long uri, @Ptr long hostname, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_filename_to_uri(const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:59</i>
	 */
	public static Pointer<Byte > g_filename_to_uri(Pointer<Byte > filename, Pointer<Byte > hostname, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_filename_to_uri(Pointer.getPeer(filename), Pointer.getPeer(hostname), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_filename_to_uri(@Ptr long filename, @Ptr long hostname, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_filename_display_name(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:61</i>
	 */
	public static Pointer<Byte > g_filename_display_name(Pointer<Byte > filename) {
		return Pointer.pointerToAddress(g_filename_display_name(Pointer.getPeer(filename)), Byte.class);
	}
	@Ptr 
	protected native static long g_filename_display_name(@Ptr long filename);
	/**
	 * Original signature : <code>gboolean g_get_filename_charsets(const gchar***)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:63</i>
	 */
	public static GLibLibrary.gboolean g_get_filename_charsets(Pointer<Pointer<Pointer<Byte > > > charsets) {
		return g_get_filename_charsets(Pointer.getPeer(charsets));
	}
	protected native static GLibLibrary.gboolean g_get_filename_charsets(@Ptr long charsets);
	/**
	 * Original signature : <code>gchar* g_filename_display_basename(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:65</i>
	 */
	public static Pointer<Byte > g_filename_display_basename(Pointer<Byte > filename) {
		return Pointer.pointerToAddress(g_filename_display_basename(Pointer.getPeer(filename)), Byte.class);
	}
	@Ptr 
	protected native static long g_filename_display_basename(@Ptr long filename);
	/**
	 * Original signature : <code>gchar** g_uri_list_extract_uris(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:67</i>
	 */
	public static Pointer<Pointer<Byte > > g_uri_list_extract_uris(Pointer<Byte > uri_list) {
		return Pointer.pointerToAddress(g_uri_list_extract_uris(Pointer.getPeer(uri_list)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_uri_list_extract_uris(@Ptr long uri_list);
	/**
	 * Keyed Data List<br>
	 * Original signature : <code>void g_datalist_init(GData**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:7</i>
	 */
	public static void g_datalist_init(Pointer<Pointer<GLibLibrary.GData > > datalist) {
		g_datalist_init(Pointer.getPeer(datalist));
	}
	protected native static void g_datalist_init(@Ptr long datalist);
	/**
	 * Original signature : <code>void g_datalist_clear(GData**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:9</i>
	 */
	public static void g_datalist_clear(Pointer<Pointer<GLibLibrary.GData > > datalist) {
		g_datalist_clear(Pointer.getPeer(datalist));
	}
	protected native static void g_datalist_clear(@Ptr long datalist);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_datalist_id_get_data(GData**, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:11</i><br>
	 * Original signature : <code>gpointer g_datalist_id_get_data(GData**, GQuark)</code> * /<br>
	 * extern gpointer g_datalist_id_get_data(GData** datalist, GQuark key_id);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_datalist_id_get_data(GData**, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:11</i><br>
	 * Original signature : <code>gpointer g_datalist_id_get_data(GData**, GQuark)</code> * /<br>
	 * extern gpointer g_datalist_id_get_data(GData** datalist, GQuark key_id);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_datalist_id_set_data_full(GData**, GQuark, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:13</i><br>
	 * Original signature : <code>void g_datalist_id_set_data_full(GData**, GQuark, gpointer, GDestroyNotify)</code> * /<br>
	 * extern void g_datalist_id_set_data_full(GData** datalist, GQuark key_id, gpointer data, GDestroyNotify destroy_func);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_datalist_id_set_data_full(GData**, GQuark, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:13</i><br>
	 * Original signature : <code>void g_datalist_id_set_data_full(GData**, GQuark, gpointer, GDestroyNotify)</code> * /<br>
	 * extern void g_datalist_id_set_data_full(GData** datalist, GQuark key_id, gpointer data, GDestroyNotify destroy_func);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_datalist_id_dup_data(GData**, GQuark, GDuplicateFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:16</i><br>
	 * Original signature : <code>gpointer g_datalist_id_dup_data(GData**, GQuark, GDuplicateFunc, gpointer)</code> * /<br>
	 * extern gpointer g_datalist_id_dup_data(GData** datalist, GQuark key_id, GDuplicateFunc dup_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_datalist_id_dup_data(GData**, GQuark, GDuplicateFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:16</i><br>
	 * Original signature : <code>gpointer g_datalist_id_dup_data(GData**, GQuark, GDuplicateFunc, gpointer)</code> * /<br>
	 * extern gpointer g_datalist_id_dup_data(GData** datalist, GQuark key_id, GDuplicateFunc dup_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_datalist_id_replace_data(GData**, GQuark, gpointer, gpointer, GDestroyNotify, GDestroyNotify*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:18</i><br>
	 * Original signature : <code>gboolean g_datalist_id_replace_data(GData**, GQuark, gpointer, gpointer, GDestroyNotify, GDestroyNotify*)</code> * /<br>
	 * extern gboolean g_datalist_id_replace_data(GData** datalist, GQuark key_id, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify* old_destroy);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_datalist_id_replace_data(GData**, GQuark, gpointer, gpointer, GDestroyNotify, GDestroyNotify*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:18</i><br>
	 * Original signature : <code>gboolean g_datalist_id_replace_data(GData**, GQuark, gpointer, gpointer, GDestroyNotify, GDestroyNotify*)</code> * /<br>
	 * extern gboolean g_datalist_id_replace_data(GData** datalist, GQuark key_id, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify* old_destroy);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_datalist_id_remove_no_notify(GData**, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:20</i><br>
	 * Original signature : <code>gpointer g_datalist_id_remove_no_notify(GData**, GQuark)</code> * /<br>
	 * extern gpointer g_datalist_id_remove_no_notify(GData** datalist, GQuark key_id);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_datalist_id_remove_no_notify(GData**, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:20</i><br>
	 * Original signature : <code>gpointer g_datalist_id_remove_no_notify(GData**, GQuark)</code> * /<br>
	 * extern gpointer g_datalist_id_remove_no_notify(GData** datalist, GQuark key_id);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_datalist_foreach(GData**, GDataForeachFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:22</i><br>
	 * Original signature : <code>void g_datalist_foreach(GData**, GDataForeachFunc, gpointer)</code> * /<br>
	 * extern void g_datalist_foreach(GData** datalist, GDataForeachFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_datalist_foreach(GData**, GDataForeachFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:22</i><br>
	 * Original signature : <code>void g_datalist_foreach(GData**, GDataForeachFunc, gpointer)</code> * /<br>
	 * extern void g_datalist_foreach(GData** datalist, GDataForeachFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_datalist_set_flags(GData**, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:24</i>
	 */
	public static void g_datalist_set_flags(Pointer<Pointer<GLibLibrary.GData > > datalist, int flags) {
		g_datalist_set_flags(Pointer.getPeer(datalist), flags);
	}
	protected native static void g_datalist_set_flags(@Ptr long datalist, int flags);
	/**
	 * Original signature : <code>void g_datalist_unset_flags(GData**, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:26</i>
	 */
	public static void g_datalist_unset_flags(Pointer<Pointer<GLibLibrary.GData > > datalist, int flags) {
		g_datalist_unset_flags(Pointer.getPeer(datalist), flags);
	}
	protected native static void g_datalist_unset_flags(@Ptr long datalist, int flags);
	/**
	 * Original signature : <code>guint g_datalist_get_flags(GData**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:28</i>
	 */
	public static int g_datalist_get_flags(Pointer<Pointer<GLibLibrary.GData > > datalist) {
		return g_datalist_get_flags(Pointer.getPeer(datalist));
	}
	protected native static int g_datalist_get_flags(@Ptr long datalist);
	/**
	 * Location Associated Keyed Data<br>
	 * Original signature : <code>void g_dataset_destroy(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:33</i>
	 */
	public static void g_dataset_destroy(Pointer<? > dataset_location) {
		g_dataset_destroy(Pointer.getPeer(dataset_location));
	}
	protected native static void g_dataset_destroy(@Ptr long dataset_location);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_dataset_id_get_data(gconstpointer, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:35</i><br>
	 * Original signature : <code>gpointer g_dataset_id_get_data(gconstpointer, GQuark)</code> * /<br>
	 * extern gpointer g_dataset_id_get_data(gconstpointer dataset_location, GQuark key_id);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_dataset_id_get_data(gconstpointer, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:35</i><br>
	 * Original signature : <code>gpointer g_dataset_id_get_data(gconstpointer, GQuark)</code> * /<br>
	 * extern gpointer g_dataset_id_get_data(gconstpointer dataset_location, GQuark key_id);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_datalist_get_data(GData**, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:37</i><br>
	 * Original signature : <code>gpointer g_datalist_get_data(GData**, const gchar*)</code> * /<br>
	 * extern gpointer g_datalist_get_data(GData** datalist, const gchar* key);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_datalist_get_data(GData**, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:37</i><br>
	 * Original signature : <code>gpointer g_datalist_get_data(GData**, const gchar*)</code> * /<br>
	 * extern gpointer g_datalist_get_data(GData** datalist, const gchar* key);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_dataset_id_set_data_full(gconstpointer, GQuark, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:39</i><br>
	 * Original signature : <code>void g_dataset_id_set_data_full(gconstpointer, GQuark, gpointer, GDestroyNotify)</code> * /<br>
	 * extern void g_dataset_id_set_data_full(gconstpointer dataset_location, GQuark key_id, gpointer data, GDestroyNotify destroy_func);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_dataset_id_set_data_full(gconstpointer, GQuark, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:39</i><br>
	 * Original signature : <code>void g_dataset_id_set_data_full(gconstpointer, GQuark, gpointer, GDestroyNotify)</code> * /<br>
	 * extern void g_dataset_id_set_data_full(gconstpointer dataset_location, GQuark key_id, gpointer data, GDestroyNotify destroy_func);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_dataset_id_remove_no_notify(gconstpointer, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:41</i><br>
	 * Original signature : <code>gpointer g_dataset_id_remove_no_notify(gconstpointer, GQuark)</code> * /<br>
	 * extern gpointer g_dataset_id_remove_no_notify(gconstpointer dataset_location, GQuark key_id);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_dataset_id_remove_no_notify(gconstpointer, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:41</i><br>
	 * Original signature : <code>gpointer g_dataset_id_remove_no_notify(gconstpointer, GQuark)</code> * /<br>
	 * extern gpointer g_dataset_id_remove_no_notify(gconstpointer dataset_location, GQuark key_id);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_dataset_foreach(gconstpointer, GDataForeachFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:43</i><br>
	 * Original signature : <code>void g_dataset_foreach(gconstpointer, GDataForeachFunc, gpointer)</code> * /<br>
	 * extern void g_dataset_foreach(gconstpointer dataset_location, GDataForeachFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_dataset_foreach(gconstpointer, GDataForeachFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:43</i><br>
	 * Original signature : <code>void g_dataset_foreach(gconstpointer, GDataForeachFunc, gpointer)</code> * /<br>
	 * extern void g_dataset_foreach(gconstpointer dataset_location, GDataForeachFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * g_date_new() returns an invalid date, you then have to _set() stuff<br>
	 * to get a usable object. You can also allocate a GDate statically,<br>
	 * then call g_date_clear() to initialize.<br>
	 * Original signature : <code>GDate* g_date_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:62</i>
	 */
	public static Pointer<GDate > g_date_new() {
		return Pointer.pointerToAddress(g_date_new$2(), GDate.class);
	}
	@Ptr 
	protected native static long g_date_new$2();
	/**
	 * Original signature : <code>GDate* g_date_new_dmy(GDateDay, GDateMonth, GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:64</i>
	 */
	public static Pointer<GDate > g_date_new_dmy(byte day, IntValuedEnum<GLibLibrary.GDateMonth > month, short year) {
		return Pointer.pointerToAddress(g_date_new_dmy(day, (int)month.value(), year), GDate.class);
	}
	@Ptr 
	protected native static long g_date_new_dmy(byte day, int month, short year);
	/**
	 * Original signature : <code>GDate* g_date_new_julian(guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:66</i>
	 */
	public static Pointer<GDate > g_date_new_julian(int julian_day) {
		return Pointer.pointerToAddress(g_date_new_julian$2(julian_day), GDate.class);
	}
	@Ptr 
	protected native static long g_date_new_julian$2(int julian_day);
	/**
	 * Original signature : <code>void g_date_free(GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:68</i>
	 */
	public static void g_date_free(Pointer<GDate > date) {
		g_date_free(Pointer.getPeer(date));
	}
	protected native static void g_date_free(@Ptr long date);
	/**
	 * check g_date_valid() after doing an operation that might fail, like<br>
	 * _parse.  Almost all g_date operations are undefined on invalid<br>
	 * dates (the exceptions are the mutators, since you need those to<br>
	 * return to validity).<br>
	 * Original signature : <code>gboolean g_date_valid(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:76</i>
	 */
	public static GLibLibrary.gboolean g_date_valid(Pointer<GDate > date) {
		return g_date_valid(Pointer.getPeer(date));
	}
	protected native static GLibLibrary.gboolean g_date_valid(@Ptr long date);
	/**
	 * Original signature : <code>gboolean g_date_valid_day(GDateDay)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:78</i>
	 */
	public static native GLibLibrary.gboolean g_date_valid_day(byte day);
	/**
	 * Original signature : <code>gboolean g_date_valid_month(GDateMonth)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:80</i>
	 */
	public static GLibLibrary.gboolean g_date_valid_month(IntValuedEnum<GLibLibrary.GDateMonth > month) {
		return g_date_valid_month((int)month.value());
	}
	protected native static GLibLibrary.gboolean g_date_valid_month(int month);
	/**
	 * Original signature : <code>gboolean g_date_valid_year(GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:82</i>
	 */
	public static native GLibLibrary.gboolean g_date_valid_year(short year);
	/**
	 * Original signature : <code>gboolean g_date_valid_weekday(GDateWeekday)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:84</i>
	 */
	public static GLibLibrary.gboolean g_date_valid_weekday(IntValuedEnum<GLibLibrary.GDateWeekday > weekday) {
		return g_date_valid_weekday((int)weekday.value());
	}
	protected native static GLibLibrary.gboolean g_date_valid_weekday(int weekday);
	/**
	 * Original signature : <code>gboolean g_date_valid_julian(guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:86</i>
	 */
	public static native GLibLibrary.gboolean g_date_valid_julian(int julian_date);
	/**
	 * Original signature : <code>gboolean g_date_valid_dmy(GDateDay, GDateMonth, GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:88</i>
	 */
	public static GLibLibrary.gboolean g_date_valid_dmy(byte day, IntValuedEnum<GLibLibrary.GDateMonth > month, short year) {
		return g_date_valid_dmy(day, (int)month.value(), year);
	}
	protected native static GLibLibrary.gboolean g_date_valid_dmy(byte day, int month, short year);
	/**
	 * Original signature : <code>GDateWeekday g_date_get_weekday(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:90</i>
	 */
	public static IntValuedEnum<GLibLibrary.GDateWeekday > g_date_get_weekday(Pointer<GDate > date) {
		return FlagSet.fromValue(g_date_get_weekday(Pointer.getPeer(date)), GLibLibrary.GDateWeekday.class);
	}
	protected native static int g_date_get_weekday(@Ptr long date);
	/**
	 * Original signature : <code>GDateMonth g_date_get_month(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:92</i>
	 */
	public static IntValuedEnum<GLibLibrary.GDateMonth > g_date_get_month(Pointer<GDate > date) {
		return FlagSet.fromValue(g_date_get_month(Pointer.getPeer(date)), GLibLibrary.GDateMonth.class);
	}
	protected native static int g_date_get_month(@Ptr long date);
	/**
	 * Original signature : <code>GDateYear g_date_get_year(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:94</i>
	 */
	public static short g_date_get_year(Pointer<GDate > date) {
		return g_date_get_year(Pointer.getPeer(date));
	}
	protected native static short g_date_get_year(@Ptr long date);
	/**
	 * Original signature : <code>GDateDay g_date_get_day(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:96</i>
	 */
	public static byte g_date_get_day(Pointer<GDate > date) {
		return g_date_get_day(Pointer.getPeer(date));
	}
	protected native static byte g_date_get_day(@Ptr long date);
	/**
	 * Original signature : <code>guint32 g_date_get_julian(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:98</i>
	 */
	public static int g_date_get_julian(Pointer<GDate > date) {
		return g_date_get_julian(Pointer.getPeer(date));
	}
	protected native static int g_date_get_julian(@Ptr long date);
	/**
	 * Original signature : <code>guint g_date_get_day_of_year(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:100</i>
	 */
	public static int g_date_get_day_of_year(Pointer<GDate > date) {
		return g_date_get_day_of_year(Pointer.getPeer(date));
	}
	protected native static int g_date_get_day_of_year(@Ptr long date);
	/**
	 * First monday/sunday is the start of week 1; if we haven't reached<br>
	 * that day, return 0. These are not ISO weeks of the year; that<br>
	 * routine needs to be added.<br>
	 * these functions return the number of weeks, starting on the<br>
	 * corrsponding day<br>
	 * Original signature : <code>guint g_date_get_monday_week_of_year(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:109</i>
	 */
	public static int g_date_get_monday_week_of_year(Pointer<GDate > date) {
		return g_date_get_monday_week_of_year(Pointer.getPeer(date));
	}
	protected native static int g_date_get_monday_week_of_year(@Ptr long date);
	/**
	 * Original signature : <code>guint g_date_get_sunday_week_of_year(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:111</i>
	 */
	public static int g_date_get_sunday_week_of_year(Pointer<GDate > date) {
		return g_date_get_sunday_week_of_year(Pointer.getPeer(date));
	}
	protected native static int g_date_get_sunday_week_of_year(@Ptr long date);
	/**
	 * Original signature : <code>guint g_date_get_iso8601_week_of_year(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:113</i>
	 */
	public static int g_date_get_iso8601_week_of_year(Pointer<GDate > date) {
		return g_date_get_iso8601_week_of_year(Pointer.getPeer(date));
	}
	protected native static int g_date_get_iso8601_week_of_year(@Ptr long date);
	/**
	 * If you create a static date struct you need to clear it to get it<br>
	 * in a sane state before use. You can clear a whole array at<br>
	 * once with the ndates argument.<br>
	 * Original signature : <code>void g_date_clear(GDate*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:120</i>
	 */
	public static void g_date_clear(Pointer<GDate > date, int n_dates) {
		g_date_clear(Pointer.getPeer(date), n_dates);
	}
	protected native static void g_date_clear(@Ptr long date, int n_dates);
	/**
	 * The parse routine is meant for dates typed in by a user, so it<br>
	 * permits many formats but tries to catch common typos. If your data<br>
	 * needs to be strictly validated, it is not an appropriate function.<br>
	 * Original signature : <code>void g_date_set_parse(GDate*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:127</i>
	 */
	public static void g_date_set_parse(Pointer<GDate > date, Pointer<Byte > str) {
		g_date_set_parse(Pointer.getPeer(date), Pointer.getPeer(str));
	}
	protected native static void g_date_set_parse(@Ptr long date, @Ptr long str);
	/**
	 * Original signature : <code>void g_date_set_time_t(GDate*, time_t)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:129</i>
	 */
	public static void g_date_set_time_t(Pointer<GDate > date, @org.bridj.ann.CLong long timet) {
		g_date_set_time_t(Pointer.getPeer(date), timet);
	}
	protected native static void g_date_set_time_t(@Ptr long date, @org.bridj.ann.CLong long timet);
	/**
	 * Original signature : <code>void g_date_set_time_val(GDate*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:131</i>
	 */
	public static void g_date_set_time_val(Pointer<GDate > date, Pointer<GTimeVal > timeval) {
		g_date_set_time_val(Pointer.getPeer(date), Pointer.getPeer(timeval));
	}
	protected native static void g_date_set_time_val(@Ptr long date, @Ptr long timeval);
	/**
	 * Original signature : <code>void g_date_set_time(GDate*, GTime)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:133</i>
	 */
	public static void g_date_set_time(Pointer<GDate > date, int time_) {
		g_date_set_time(Pointer.getPeer(date), time_);
	}
	protected native static void g_date_set_time(@Ptr long date, int time_);
	/**
	 * Original signature : <code>void g_date_set_month(GDate*, GDateMonth)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:135</i>
	 */
	public static void g_date_set_month(Pointer<GDate > date, IntValuedEnum<GLibLibrary.GDateMonth > month) {
		g_date_set_month(Pointer.getPeer(date), (int)month.value());
	}
	protected native static void g_date_set_month(@Ptr long date, int month);
	/**
	 * Original signature : <code>void g_date_set_day(GDate*, GDateDay)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:137</i>
	 */
	public static void g_date_set_day(Pointer<GDate > date, byte day) {
		g_date_set_day(Pointer.getPeer(date), day);
	}
	protected native static void g_date_set_day(@Ptr long date, byte day);
	/**
	 * Original signature : <code>void g_date_set_year(GDate*, GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:139</i>
	 */
	public static void g_date_set_year(Pointer<GDate > date, short year) {
		g_date_set_year(Pointer.getPeer(date), year);
	}
	protected native static void g_date_set_year(@Ptr long date, short year);
	/**
	 * Original signature : <code>void g_date_set_dmy(GDate*, GDateDay, GDateMonth, GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:141</i>
	 */
	public static void g_date_set_dmy(Pointer<GDate > date, byte day, IntValuedEnum<GLibLibrary.GDateMonth > month, short y) {
		g_date_set_dmy(Pointer.getPeer(date), day, (int)month.value(), y);
	}
	protected native static void g_date_set_dmy(@Ptr long date, byte day, int month, short y);
	/**
	 * Original signature : <code>void g_date_set_julian(GDate*, guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:143</i>
	 */
	public static void g_date_set_julian(Pointer<GDate > date, int julian_date) {
		g_date_set_julian(Pointer.getPeer(date), julian_date);
	}
	protected native static void g_date_set_julian(@Ptr long date, int julian_date);
	/**
	 * Original signature : <code>gboolean g_date_is_first_of_month(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:145</i>
	 */
	public static GLibLibrary.gboolean g_date_is_first_of_month(Pointer<GDate > date) {
		return g_date_is_first_of_month(Pointer.getPeer(date));
	}
	protected native static GLibLibrary.gboolean g_date_is_first_of_month(@Ptr long date);
	/**
	 * Original signature : <code>gboolean g_date_is_last_of_month(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:147</i>
	 */
	public static GLibLibrary.gboolean g_date_is_last_of_month(Pointer<GDate > date) {
		return g_date_is_last_of_month(Pointer.getPeer(date));
	}
	protected native static GLibLibrary.gboolean g_date_is_last_of_month(@Ptr long date);
	/**
	 * To go forward by some number of weeks just go forward weeks*7 days<br>
	 * Original signature : <code>void g_date_add_days(GDate*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:152</i>
	 */
	public static void g_date_add_days(Pointer<GDate > date, int n_days) {
		g_date_add_days(Pointer.getPeer(date), n_days);
	}
	protected native static void g_date_add_days(@Ptr long date, int n_days);
	/**
	 * Original signature : <code>void g_date_subtract_days(GDate*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:154</i>
	 */
	public static void g_date_subtract_days(Pointer<GDate > date, int n_days) {
		g_date_subtract_days(Pointer.getPeer(date), n_days);
	}
	protected native static void g_date_subtract_days(@Ptr long date, int n_days);
	/**
	 * If you add/sub months while day > 28, the day might change<br>
	 * Original signature : <code>void g_date_add_months(GDate*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:159</i>
	 */
	public static void g_date_add_months(Pointer<GDate > date, int n_months) {
		g_date_add_months(Pointer.getPeer(date), n_months);
	}
	protected native static void g_date_add_months(@Ptr long date, int n_months);
	/**
	 * Original signature : <code>void g_date_subtract_months(GDate*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:161</i>
	 */
	public static void g_date_subtract_months(Pointer<GDate > date, int n_months) {
		g_date_subtract_months(Pointer.getPeer(date), n_months);
	}
	protected native static void g_date_subtract_months(@Ptr long date, int n_months);
	/**
	 * If it's feb 29, changing years can move you to the 28th<br>
	 * Original signature : <code>void g_date_add_years(GDate*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:166</i>
	 */
	public static void g_date_add_years(Pointer<GDate > date, int n_years) {
		g_date_add_years(Pointer.getPeer(date), n_years);
	}
	protected native static void g_date_add_years(@Ptr long date, int n_years);
	/**
	 * Original signature : <code>void g_date_subtract_years(GDate*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:168</i>
	 */
	public static void g_date_subtract_years(Pointer<GDate > date, int n_years) {
		g_date_subtract_years(Pointer.getPeer(date), n_years);
	}
	protected native static void g_date_subtract_years(@Ptr long date, int n_years);
	/**
	 * Original signature : <code>gboolean g_date_is_leap_year(GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:170</i>
	 */
	public static native GLibLibrary.gboolean g_date_is_leap_year(short year);
	/**
	 * Original signature : <code>guint8 g_date_get_days_in_month(GDateMonth, GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:172</i>
	 */
	public static byte g_date_get_days_in_month(IntValuedEnum<GLibLibrary.GDateMonth > month, short year) {
		return g_date_get_days_in_month((int)month.value(), year);
	}
	protected native static byte g_date_get_days_in_month(int month, short year);
	/**
	 * Original signature : <code>guint8 g_date_get_monday_weeks_in_year(GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:174</i>
	 */
	public static native byte g_date_get_monday_weeks_in_year(short year);
	/**
	 * Original signature : <code>guint8 g_date_get_sunday_weeks_in_year(GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:176</i>
	 */
	public static native byte g_date_get_sunday_weeks_in_year(short year);
	/**
	 * Returns the number of days between the two dates.  If date2 comes<br>
	 * before date1, a negative value is return.<br>
	 * Original signature : <code>gint g_date_days_between(const GDate*, const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:182</i>
	 */
	public static int g_date_days_between(Pointer<GDate > date1, Pointer<GDate > date2) {
		return g_date_days_between(Pointer.getPeer(date1), Pointer.getPeer(date2));
	}
	protected native static int g_date_days_between(@Ptr long date1, @Ptr long date2);
	/**
	 * qsort-friendly (with a cast...)<br>
	 * Original signature : <code>gint g_date_compare(const GDate*, const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:187</i>
	 */
	public static int g_date_compare(Pointer<GDate > lhs, Pointer<GDate > rhs) {
		return g_date_compare(Pointer.getPeer(lhs), Pointer.getPeer(rhs));
	}
	protected native static int g_date_compare(@Ptr long lhs, @Ptr long rhs);
	/**
	 * Original signature : <code>void g_date_to_struct_tm(const GDate*, tm*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:189</i>
	 */
	public static void g_date_to_struct_tm(Pointer<GDate > date, Pointer tm) {
		g_date_to_struct_tm(Pointer.getPeer(date), Pointer.getPeer(tm));
	}
	protected native static void g_date_to_struct_tm(@Ptr long date, @Ptr long tm);
	/**
	 * Original signature : <code>void g_date_clamp(GDate*, const GDate*, const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:191</i>
	 */
	public static void g_date_clamp(Pointer<GDate > date, Pointer<GDate > min_date, Pointer<GDate > max_date) {
		g_date_clamp(Pointer.getPeer(date), Pointer.getPeer(min_date), Pointer.getPeer(max_date));
	}
	protected native static void g_date_clamp(@Ptr long date, @Ptr long min_date, @Ptr long max_date);
	/**
	 * Swap date1 and date2's values if date1 > date2.<br>
	 * Original signature : <code>void g_date_order(GDate*, GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:196</i>
	 */
	public static void g_date_order(Pointer<GDate > date1, Pointer<GDate > date2) {
		g_date_order(Pointer.getPeer(date1), Pointer.getPeer(date2));
	}
	protected native static void g_date_order(@Ptr long date1, @Ptr long date2);
	/**
	 * Just like strftime() except you can only use date-related formats.<br>
	 *   Using a time format is undefined.<br>
	 * Original signature : <code>gsize g_date_strftime(gchar*, gsize, const gchar*, const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:202</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_date_strftime(Pointer<Byte > s, @org.bridj.ann.CLong long slen, Pointer<Byte > format, Pointer<GDate > date) {
		return g_date_strftime(Pointer.getPeer(s), slen, Pointer.getPeer(format), Pointer.getPeer(date));
	}
	@org.bridj.ann.CLong 
	protected native static long g_date_strftime(@Ptr long s, @org.bridj.ann.CLong long slen, @Ptr long format, @Ptr long date);
	/**
	 * Original signature : <code>GTimeZone* g_time_zone_new(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:20</i>
	 */
	public static Pointer<GLibLibrary.GTimeZone > g_time_zone_new(Pointer<Byte > identifier) {
		return Pointer.pointerToAddress(g_time_zone_new(Pointer.getPeer(identifier)), GLibLibrary.GTimeZone.class);
	}
	@Ptr 
	protected native static long g_time_zone_new(@Ptr long identifier);
	/**
	 * Original signature : <code>GTimeZone* g_time_zone_new_utc()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:22</i>
	 */
	public static Pointer<GLibLibrary.GTimeZone > g_time_zone_new_utc() {
		return Pointer.pointerToAddress(g_time_zone_new_utc$2(), GLibLibrary.GTimeZone.class);
	}
	@Ptr 
	protected native static long g_time_zone_new_utc$2();
	/**
	 * Original signature : <code>GTimeZone* g_time_zone_new_local()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:24</i>
	 */
	public static Pointer<GLibLibrary.GTimeZone > g_time_zone_new_local() {
		return Pointer.pointerToAddress(g_time_zone_new_local$2(), GLibLibrary.GTimeZone.class);
	}
	@Ptr 
	protected native static long g_time_zone_new_local$2();
	/**
	 * Original signature : <code>GTimeZone* g_time_zone_ref(GTimeZone*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:26</i>
	 */
	public static Pointer<GLibLibrary.GTimeZone > g_time_zone_ref(Pointer<GLibLibrary.GTimeZone > tz) {
		return Pointer.pointerToAddress(g_time_zone_ref(Pointer.getPeer(tz)), GLibLibrary.GTimeZone.class);
	}
	@Ptr 
	protected native static long g_time_zone_ref(@Ptr long tz);
	/**
	 * Original signature : <code>void g_time_zone_unref(GTimeZone*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:28</i>
	 */
	public static void g_time_zone_unref(Pointer<GLibLibrary.GTimeZone > tz) {
		g_time_zone_unref(Pointer.getPeer(tz));
	}
	protected native static void g_time_zone_unref(@Ptr long tz);
	/**
	 * Original signature : <code>gint g_time_zone_find_interval(GTimeZone*, GTimeType, gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:30</i>
	 */
	public static int g_time_zone_find_interval(Pointer<GLibLibrary.GTimeZone > tz, IntValuedEnum<GLibLibrary.GTimeType > type, long time_) {
		return g_time_zone_find_interval(Pointer.getPeer(tz), (int)type.value(), time_);
	}
	protected native static int g_time_zone_find_interval(@Ptr long tz, int type, long time_);
	/**
	 * Original signature : <code>gint g_time_zone_adjust_time(GTimeZone*, GTimeType, gint64*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:32</i>
	 */
	public static int g_time_zone_adjust_time(Pointer<GLibLibrary.GTimeZone > tz, IntValuedEnum<GLibLibrary.GTimeType > type, Pointer<Long > time_) {
		return g_time_zone_adjust_time(Pointer.getPeer(tz), (int)type.value(), Pointer.getPeer(time_));
	}
	protected native static int g_time_zone_adjust_time(@Ptr long tz, int type, @Ptr long time_);
	/**
	 * Original signature : <code>gchar* g_time_zone_get_abbreviation(GTimeZone*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:34</i>
	 */
	public static Pointer<Byte > g_time_zone_get_abbreviation(Pointer<GLibLibrary.GTimeZone > tz, int interval) {
		return Pointer.pointerToAddress(g_time_zone_get_abbreviation(Pointer.getPeer(tz), interval), Byte.class);
	}
	@Ptr 
	protected native static long g_time_zone_get_abbreviation(@Ptr long tz, int interval);
	/**
	 * Original signature : <code>gint32 g_time_zone_get_offset(GTimeZone*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:36</i>
	 */
	public static int g_time_zone_get_offset(Pointer<GLibLibrary.GTimeZone > tz, int interval) {
		return g_time_zone_get_offset(Pointer.getPeer(tz), interval);
	}
	protected native static int g_time_zone_get_offset(@Ptr long tz, int interval);
	/**
	 * Original signature : <code>gboolean g_time_zone_is_dst(GTimeZone*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:38</i>
	 */
	public static GLibLibrary.gboolean g_time_zone_is_dst(Pointer<GLibLibrary.GTimeZone > tz, int interval) {
		return g_time_zone_is_dst(Pointer.getPeer(tz), interval);
	}
	protected native static GLibLibrary.gboolean g_time_zone_is_dst(@Ptr long tz, int interval);
	/**
	 * Original signature : <code>void g_date_time_unref(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:15</i>
	 */
	public static void g_date_time_unref(Pointer<GLibLibrary.GDateTime > datetime) {
		g_date_time_unref(Pointer.getPeer(datetime));
	}
	protected native static void g_date_time_unref(@Ptr long datetime);
	/**
	 * Original signature : <code>GDateTime* g_date_time_ref(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:17</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_ref(Pointer<GLibLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_ref(Pointer.getPeer(datetime)), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_ref(@Ptr long datetime);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_now(GTimeZone*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:19</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_new_now(Pointer<GLibLibrary.GTimeZone > tz) {
		return Pointer.pointerToAddress(g_date_time_new_now(Pointer.getPeer(tz)), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_now(@Ptr long tz);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_now_local()</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:21</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_new_now_local() {
		return Pointer.pointerToAddress(g_date_time_new_now_local$2(), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_now_local$2();
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_now_utc()</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:23</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_new_now_utc() {
		return Pointer.pointerToAddress(g_date_time_new_now_utc$2(), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_now_utc$2();
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_from_unix_local(gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:25</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_new_from_unix_local(long t) {
		return Pointer.pointerToAddress(g_date_time_new_from_unix_local$2(t), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_from_unix_local$2(long t);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_from_unix_utc(gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:27</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_new_from_unix_utc(long t) {
		return Pointer.pointerToAddress(g_date_time_new_from_unix_utc$2(t), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_from_unix_utc$2(long t);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_from_timeval_local(const GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:29</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_new_from_timeval_local(Pointer<GTimeVal > tv) {
		return Pointer.pointerToAddress(g_date_time_new_from_timeval_local(Pointer.getPeer(tv)), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_from_timeval_local(@Ptr long tv);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_from_timeval_utc(const GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:31</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_new_from_timeval_utc(Pointer<GTimeVal > tv) {
		return Pointer.pointerToAddress(g_date_time_new_from_timeval_utc(Pointer.getPeer(tv)), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_from_timeval_utc(@Ptr long tv);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new(GTimeZone*, gint, gint, gint, gint, gint, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:33</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_new(Pointer<GLibLibrary.GTimeZone > tz, int year, int month, int day, int hour, int minute, double seconds) {
		return Pointer.pointerToAddress(g_date_time_new(Pointer.getPeer(tz), year, month, day, hour, minute, seconds), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new(@Ptr long tz, int year, int month, int day, int hour, int minute, double seconds);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_local(gint, gint, gint, gint, gint, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:35</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_new_local(int year, int month, int day, int hour, int minute, double seconds) {
		return Pointer.pointerToAddress(g_date_time_new_local$2(year, month, day, hour, minute, seconds), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_local$2(int year, int month, int day, int hour, int minute, double seconds);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_utc(gint, gint, gint, gint, gint, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:37</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_new_utc(int year, int month, int day, int hour, int minute, double seconds) {
		return Pointer.pointerToAddress(g_date_time_new_utc$2(year, month, day, hour, minute, seconds), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_utc$2(int year, int month, int day, int hour, int minute, double seconds);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add(GDateTime*, GTimeSpan)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:39</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_add(Pointer<GLibLibrary.GDateTime > datetime, long timespan) {
		return Pointer.pointerToAddress(g_date_time_add(Pointer.getPeer(datetime), timespan), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add(@Ptr long datetime, long timespan);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_years(GDateTime*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:41</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_add_years(Pointer<GLibLibrary.GDateTime > datetime, int years) {
		return Pointer.pointerToAddress(g_date_time_add_years(Pointer.getPeer(datetime), years), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_years(@Ptr long datetime, int years);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_months(GDateTime*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:43</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_add_months(Pointer<GLibLibrary.GDateTime > datetime, int months) {
		return Pointer.pointerToAddress(g_date_time_add_months(Pointer.getPeer(datetime), months), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_months(@Ptr long datetime, int months);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_weeks(GDateTime*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:45</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_add_weeks(Pointer<GLibLibrary.GDateTime > datetime, int weeks) {
		return Pointer.pointerToAddress(g_date_time_add_weeks(Pointer.getPeer(datetime), weeks), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_weeks(@Ptr long datetime, int weeks);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_days(GDateTime*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:47</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_add_days(Pointer<GLibLibrary.GDateTime > datetime, int days) {
		return Pointer.pointerToAddress(g_date_time_add_days(Pointer.getPeer(datetime), days), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_days(@Ptr long datetime, int days);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_hours(GDateTime*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:49</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_add_hours(Pointer<GLibLibrary.GDateTime > datetime, int hours) {
		return Pointer.pointerToAddress(g_date_time_add_hours(Pointer.getPeer(datetime), hours), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_hours(@Ptr long datetime, int hours);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_minutes(GDateTime*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:51</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_add_minutes(Pointer<GLibLibrary.GDateTime > datetime, int minutes) {
		return Pointer.pointerToAddress(g_date_time_add_minutes(Pointer.getPeer(datetime), minutes), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_minutes(@Ptr long datetime, int minutes);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_seconds(GDateTime*, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:53</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_add_seconds(Pointer<GLibLibrary.GDateTime > datetime, double seconds) {
		return Pointer.pointerToAddress(g_date_time_add_seconds(Pointer.getPeer(datetime), seconds), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_seconds(@Ptr long datetime, double seconds);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_full(GDateTime*, gint, gint, gint, gint, gint, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:55</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_add_full(Pointer<GLibLibrary.GDateTime > datetime, int years, int months, int days, int hours, int minutes, double seconds) {
		return Pointer.pointerToAddress(g_date_time_add_full(Pointer.getPeer(datetime), years, months, days, hours, minutes, seconds), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_full(@Ptr long datetime, int years, int months, int days, int hours, int minutes, double seconds);
	/**
	 * Original signature : <code>gint g_date_time_compare(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:57</i>
	 */
	public static int g_date_time_compare(Pointer<? > dt1, Pointer<? > dt2) {
		return g_date_time_compare(Pointer.getPeer(dt1), Pointer.getPeer(dt2));
	}
	protected native static int g_date_time_compare(@Ptr long dt1, @Ptr long dt2);
	/**
	 * Original signature : <code>GTimeSpan g_date_time_difference(GDateTime*, GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:59</i>
	 */
	public static long g_date_time_difference(Pointer<GLibLibrary.GDateTime > end, Pointer<GLibLibrary.GDateTime > begin) {
		return g_date_time_difference(Pointer.getPeer(end), Pointer.getPeer(begin));
	}
	protected native static long g_date_time_difference(@Ptr long end, @Ptr long begin);
	/**
	 * Original signature : <code>guint g_date_time_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:61</i>
	 */
	public static int g_date_time_hash(Pointer<? > datetime) {
		return g_date_time_hash(Pointer.getPeer(datetime));
	}
	protected native static int g_date_time_hash(@Ptr long datetime);
	/**
	 * Original signature : <code>gboolean g_date_time_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:63</i>
	 */
	public static GLibLibrary.gboolean g_date_time_equal(Pointer<? > dt1, Pointer<? > dt2) {
		return g_date_time_equal(Pointer.getPeer(dt1), Pointer.getPeer(dt2));
	}
	protected native static GLibLibrary.gboolean g_date_time_equal(@Ptr long dt1, @Ptr long dt2);
	/**
	 * Original signature : <code>void g_date_time_get_ymd(GDateTime*, gint*, gint*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:65</i>
	 */
	public static void g_date_time_get_ymd(Pointer<GLibLibrary.GDateTime > datetime, Pointer<Integer > year, Pointer<Integer > month, Pointer<Integer > day) {
		g_date_time_get_ymd(Pointer.getPeer(datetime), Pointer.getPeer(year), Pointer.getPeer(month), Pointer.getPeer(day));
	}
	protected native static void g_date_time_get_ymd(@Ptr long datetime, @Ptr long year, @Ptr long month, @Ptr long day);
	/**
	 * Original signature : <code>gint g_date_time_get_year(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:67</i>
	 */
	public static int g_date_time_get_year(Pointer<GLibLibrary.GDateTime > datetime) {
		return g_date_time_get_year(Pointer.getPeer(datetime));
	}
	protected native static int g_date_time_get_year(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_month(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:69</i>
	 */
	public static int g_date_time_get_month(Pointer<GLibLibrary.GDateTime > datetime) {
		return g_date_time_get_month(Pointer.getPeer(datetime));
	}
	protected native static int g_date_time_get_month(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_day_of_month(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:71</i>
	 */
	public static int g_date_time_get_day_of_month(Pointer<GLibLibrary.GDateTime > datetime) {
		return g_date_time_get_day_of_month(Pointer.getPeer(datetime));
	}
	protected native static int g_date_time_get_day_of_month(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_week_numbering_year(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:73</i>
	 */
	public static int g_date_time_get_week_numbering_year(Pointer<GLibLibrary.GDateTime > datetime) {
		return g_date_time_get_week_numbering_year(Pointer.getPeer(datetime));
	}
	protected native static int g_date_time_get_week_numbering_year(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_week_of_year(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:75</i>
	 */
	public static int g_date_time_get_week_of_year(Pointer<GLibLibrary.GDateTime > datetime) {
		return g_date_time_get_week_of_year(Pointer.getPeer(datetime));
	}
	protected native static int g_date_time_get_week_of_year(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_day_of_week(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:77</i>
	 */
	public static int g_date_time_get_day_of_week(Pointer<GLibLibrary.GDateTime > datetime) {
		return g_date_time_get_day_of_week(Pointer.getPeer(datetime));
	}
	protected native static int g_date_time_get_day_of_week(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_day_of_year(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:79</i>
	 */
	public static int g_date_time_get_day_of_year(Pointer<GLibLibrary.GDateTime > datetime) {
		return g_date_time_get_day_of_year(Pointer.getPeer(datetime));
	}
	protected native static int g_date_time_get_day_of_year(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_hour(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:81</i>
	 */
	public static int g_date_time_get_hour(Pointer<GLibLibrary.GDateTime > datetime) {
		return g_date_time_get_hour(Pointer.getPeer(datetime));
	}
	protected native static int g_date_time_get_hour(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_minute(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:83</i>
	 */
	public static int g_date_time_get_minute(Pointer<GLibLibrary.GDateTime > datetime) {
		return g_date_time_get_minute(Pointer.getPeer(datetime));
	}
	protected native static int g_date_time_get_minute(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_second(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:85</i>
	 */
	public static int g_date_time_get_second(Pointer<GLibLibrary.GDateTime > datetime) {
		return g_date_time_get_second(Pointer.getPeer(datetime));
	}
	protected native static int g_date_time_get_second(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_microsecond(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:87</i>
	 */
	public static int g_date_time_get_microsecond(Pointer<GLibLibrary.GDateTime > datetime) {
		return g_date_time_get_microsecond(Pointer.getPeer(datetime));
	}
	protected native static int g_date_time_get_microsecond(@Ptr long datetime);
	/**
	 * Original signature : <code>gdouble g_date_time_get_seconds(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:89</i>
	 */
	public static double g_date_time_get_seconds(Pointer<GLibLibrary.GDateTime > datetime) {
		return g_date_time_get_seconds(Pointer.getPeer(datetime));
	}
	protected native static double g_date_time_get_seconds(@Ptr long datetime);
	/**
	 * Original signature : <code>gint64 g_date_time_to_unix(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:91</i>
	 */
	public static long g_date_time_to_unix(Pointer<GLibLibrary.GDateTime > datetime) {
		return g_date_time_to_unix(Pointer.getPeer(datetime));
	}
	protected native static long g_date_time_to_unix(@Ptr long datetime);
	/**
	 * Original signature : <code>gboolean g_date_time_to_timeval(GDateTime*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:93</i>
	 */
	public static GLibLibrary.gboolean g_date_time_to_timeval(Pointer<GLibLibrary.GDateTime > datetime, Pointer<GTimeVal > tv) {
		return g_date_time_to_timeval(Pointer.getPeer(datetime), Pointer.getPeer(tv));
	}
	protected native static GLibLibrary.gboolean g_date_time_to_timeval(@Ptr long datetime, @Ptr long tv);
	/**
	 * Original signature : <code>GTimeSpan g_date_time_get_utc_offset(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:95</i>
	 */
	public static long g_date_time_get_utc_offset(Pointer<GLibLibrary.GDateTime > datetime) {
		return g_date_time_get_utc_offset(Pointer.getPeer(datetime));
	}
	protected native static long g_date_time_get_utc_offset(@Ptr long datetime);
	/**
	 * Original signature : <code>gchar* g_date_time_get_timezone_abbreviation(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:97</i>
	 */
	public static Pointer<Byte > g_date_time_get_timezone_abbreviation(Pointer<GLibLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_get_timezone_abbreviation(Pointer.getPeer(datetime)), Byte.class);
	}
	@Ptr 
	protected native static long g_date_time_get_timezone_abbreviation(@Ptr long datetime);
	/**
	 * Original signature : <code>gboolean g_date_time_is_daylight_savings(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:99</i>
	 */
	public static GLibLibrary.gboolean g_date_time_is_daylight_savings(Pointer<GLibLibrary.GDateTime > datetime) {
		return g_date_time_is_daylight_savings(Pointer.getPeer(datetime));
	}
	protected native static GLibLibrary.gboolean g_date_time_is_daylight_savings(@Ptr long datetime);
	/**
	 * Original signature : <code>GDateTime* g_date_time_to_timezone(GDateTime*, GTimeZone*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:101</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_to_timezone(Pointer<GLibLibrary.GDateTime > datetime, Pointer<GLibLibrary.GTimeZone > tz) {
		return Pointer.pointerToAddress(g_date_time_to_timezone(Pointer.getPeer(datetime), Pointer.getPeer(tz)), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_to_timezone(@Ptr long datetime, @Ptr long tz);
	/**
	 * Original signature : <code>GDateTime* g_date_time_to_local(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:103</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_to_local(Pointer<GLibLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_to_local(Pointer.getPeer(datetime)), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_to_local(@Ptr long datetime);
	/**
	 * Original signature : <code>GDateTime* g_date_time_to_utc(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:105</i>
	 */
	public static Pointer<GLibLibrary.GDateTime > g_date_time_to_utc(Pointer<GLibLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_to_utc(Pointer.getPeer(datetime)), GLibLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_to_utc(@Ptr long datetime);
	/**
	 * Original signature : <code>gchar* g_date_time_format(GDateTime*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:107</i>
	 */
	public static Pointer<Byte > g_date_time_format(Pointer<GLibLibrary.GDateTime > datetime, Pointer<Byte > format) {
		return Pointer.pointerToAddress(g_date_time_format(Pointer.getPeer(datetime), Pointer.getPeer(format)), Byte.class);
	}
	@Ptr 
	protected native static long g_date_time_format(@Ptr long datetime, @Ptr long format);
	/**
	 * Original signature : <code>GDir* g_dir_open(const gchar*, guint, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdir.h:3</i>
	 */
	public static Pointer<GLibLibrary.GDir > g_dir_open(Pointer<Byte > path, int flags, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_dir_open(Pointer.getPeer(path), flags, Pointer.getPeer(error)), GLibLibrary.GDir.class);
	}
	@Ptr 
	protected native static long g_dir_open(@Ptr long path, int flags, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_dir_read_name(GDir*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdir.h:5</i>
	 */
	public static Pointer<Byte > g_dir_read_name(Pointer<GLibLibrary.GDir > dir) {
		return Pointer.pointerToAddress(g_dir_read_name(Pointer.getPeer(dir)), Byte.class);
	}
	@Ptr 
	protected native static long g_dir_read_name(@Ptr long dir);
	/**
	 * Original signature : <code>void g_dir_rewind(GDir*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdir.h:7</i>
	 */
	public static void g_dir_rewind(Pointer<GLibLibrary.GDir > dir) {
		g_dir_rewind(Pointer.getPeer(dir));
	}
	protected native static void g_dir_rewind(@Ptr long dir);
	/**
	 * Original signature : <code>void g_dir_close(GDir*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdir.h:9</i>
	 */
	public static void g_dir_close(Pointer<GLibLibrary.GDir > dir) {
		g_dir_close(Pointer.getPeer(dir));
	}
	protected native static void g_dir_close(@Ptr long dir);
	/**
	 * Original signature : <code>gchar* g_getenv(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:2</i>
	 */
	public static Pointer<Byte > g_getenv(Pointer<Byte > variable) {
		return Pointer.pointerToAddress(g_getenv(Pointer.getPeer(variable)), Byte.class);
	}
	@Ptr 
	protected native static long g_getenv(@Ptr long variable);
	/**
	 * Original signature : <code>gboolean g_setenv(const gchar*, const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:4</i>
	 */
	public static GLibLibrary.gboolean g_setenv(Pointer<Byte > variable, Pointer<Byte > value, GLibLibrary.gboolean overwrite) {
		return g_setenv(Pointer.getPeer(variable), Pointer.getPeer(value), overwrite);
	}
	protected native static GLibLibrary.gboolean g_setenv(@Ptr long variable, @Ptr long value, GLibLibrary.gboolean overwrite);
	/**
	 * Original signature : <code>void g_unsetenv(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:6</i>
	 */
	public static void g_unsetenv(Pointer<Byte > variable) {
		g_unsetenv(Pointer.getPeer(variable));
	}
	protected native static void g_unsetenv(@Ptr long variable);
	/**
	 * Original signature : <code>gchar** g_listenv()</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:8</i>
	 */
	public static Pointer<Pointer<Byte > > g_listenv() {
		return Pointer.pointerToAddress(g_listenv$2(), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_listenv$2();
	/**
	 * Original signature : <code>gchar** g_get_environ()</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:10</i>
	 */
	public static Pointer<Pointer<Byte > > g_get_environ() {
		return Pointer.pointerToAddress(g_get_environ$2(), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_get_environ$2();
	/**
	 * Original signature : <code>gchar* g_environ_getenv(gchar**, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:12</i>
	 */
	public static Pointer<Byte > g_environ_getenv(Pointer<Pointer<Byte > > envp, Pointer<Byte > variable) {
		return Pointer.pointerToAddress(g_environ_getenv(Pointer.getPeer(envp), Pointer.getPeer(variable)), Byte.class);
	}
	@Ptr 
	protected native static long g_environ_getenv(@Ptr long envp, @Ptr long variable);
	/**
	 * Original signature : <code>gchar** g_environ_setenv(gchar**, const gchar*, const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:14</i>
	 */
	public static Pointer<Pointer<Byte > > g_environ_setenv(Pointer<Pointer<Byte > > envp, Pointer<Byte > variable, Pointer<Byte > value, GLibLibrary.gboolean overwrite) {
		return Pointer.pointerToAddress(g_environ_setenv(Pointer.getPeer(envp), Pointer.getPeer(variable), Pointer.getPeer(value), overwrite), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_environ_setenv(@Ptr long envp, @Ptr long variable, @Ptr long value, GLibLibrary.gboolean overwrite);
	/**
	 * Original signature : <code>gchar** g_environ_unsetenv(gchar**, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:16</i>
	 */
	public static Pointer<Pointer<Byte > > g_environ_unsetenv(Pointer<Pointer<Byte > > envp, Pointer<Byte > variable) {
		return Pointer.pointerToAddress(g_environ_unsetenv(Pointer.getPeer(envp), Pointer.getPeer(variable)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_environ_unsetenv(@Ptr long envp, @Ptr long variable);
	/**
	 * Original signature : <code>GQuark g_file_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:41</i>
	 */
	public static native int g_file_error_quark();
	/**
	 * So other code can generate a GFileError<br>
	 * Original signature : <code>GFileError g_file_error_from_errno(gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:46</i>
	 */
	public static IntValuedEnum<GLibLibrary.GFileError > g_file_error_from_errno(int err_no) {
		return FlagSet.fromValue(g_file_error_from_errno$2(err_no), GLibLibrary.GFileError.class);
	}
	protected native static int g_file_error_from_errno$2(int err_no);
	/**
	 * Original signature : <code>gboolean g_file_test(const gchar*, GFileTest)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:48</i>
	 */
	public static GLibLibrary.gboolean g_file_test(Pointer<Byte > filename, IntValuedEnum<GLibLibrary.GFileTest > test) {
		return g_file_test(Pointer.getPeer(filename), (int)test.value());
	}
	protected native static GLibLibrary.gboolean g_file_test(@Ptr long filename, int test);
	/**
	 * Original signature : <code>gboolean g_file_get_contents(const gchar*, gchar**, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:50</i>
	 */
	public static GLibLibrary.gboolean g_file_get_contents(Pointer<Byte > filename, Pointer<Pointer<Byte > > contents, Pointer<org.bridj.CLong > length, Pointer<Pointer<GError > > error) {
		return g_file_get_contents(Pointer.getPeer(filename), Pointer.getPeer(contents), Pointer.getPeer(length), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_file_get_contents(@Ptr long filename, @Ptr long contents, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_file_set_contents(const gchar*, const gchar*, gssize, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:52</i>
	 */
	public static GLibLibrary.gboolean g_file_set_contents(Pointer<Byte > filename, Pointer<Byte > contents, @org.bridj.ann.CLong long length, Pointer<Pointer<GError > > error) {
		return g_file_set_contents(Pointer.getPeer(filename), Pointer.getPeer(contents), length, Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_file_set_contents(@Ptr long filename, @Ptr long contents, @org.bridj.ann.CLong long length, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_file_read_link(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:54</i>
	 */
	public static Pointer<Byte > g_file_read_link(Pointer<Byte > filename, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_file_read_link(Pointer.getPeer(filename), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_file_read_link(@Ptr long filename, @Ptr long error);
	/**
	 * Wrapper / workalike for mkdtemp()<br>
	 * Original signature : <code>gchar* g_mkdtemp(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:59</i>
	 */
	public static Pointer<Byte > g_mkdtemp(Pointer<Byte > tmpl) {
		return Pointer.pointerToAddress(g_mkdtemp(Pointer.getPeer(tmpl)), Byte.class);
	}
	@Ptr 
	protected native static long g_mkdtemp(@Ptr long tmpl);
	/**
	 * Original signature : <code>gchar* g_mkdtemp_full(gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:61</i>
	 */
	public static Pointer<Byte > g_mkdtemp_full(Pointer<Byte > tmpl, int mode) {
		return Pointer.pointerToAddress(g_mkdtemp_full(Pointer.getPeer(tmpl), mode), Byte.class);
	}
	@Ptr 
	protected native static long g_mkdtemp_full(@Ptr long tmpl, int mode);
	/**
	 * Wrapper / workalike for mkstemp()<br>
	 * Original signature : <code>gint g_mkstemp(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:66</i>
	 */
	public static int g_mkstemp(Pointer<Byte > tmpl) {
		return g_mkstemp(Pointer.getPeer(tmpl));
	}
	protected native static int g_mkstemp(@Ptr long tmpl);
	/**
	 * Original signature : <code>gint g_mkstemp_full(gchar*, gint, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:68</i>
	 */
	public static int g_mkstemp_full(Pointer<Byte > tmpl, int flags, int mode) {
		return g_mkstemp_full(Pointer.getPeer(tmpl), flags, mode);
	}
	protected native static int g_mkstemp_full(@Ptr long tmpl, int flags, int mode);
	/**
	 * Wrappers for g_mkstemp and g_mkdtemp()<br>
	 * Original signature : <code>gint g_file_open_tmp(const gchar*, gchar**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:73</i>
	 */
	public static int g_file_open_tmp(Pointer<Byte > tmpl, Pointer<Pointer<Byte > > name_used, Pointer<Pointer<GError > > error) {
		return g_file_open_tmp(Pointer.getPeer(tmpl), Pointer.getPeer(name_used), Pointer.getPeer(error));
	}
	protected native static int g_file_open_tmp(@Ptr long tmpl, @Ptr long name_used, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_dir_make_tmp(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:75</i>
	 */
	public static Pointer<Byte > g_dir_make_tmp(Pointer<Byte > tmpl, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_dir_make_tmp(Pointer.getPeer(tmpl), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_dir_make_tmp(@Ptr long tmpl, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_build_path(const gchar*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:77</i>
	 */
	public static Pointer<Byte > g_build_path(Pointer<Byte > separator, Pointer<Byte > first_element, Object... varArgs1) {
		return Pointer.pointerToAddress(g_build_path(Pointer.getPeer(separator), Pointer.getPeer(first_element), varArgs1), Byte.class);
	}
	@Ptr 
	protected native static long g_build_path(@Ptr long separator, @Ptr long first_element, Object... varArgs1);
	/**
	 * Original signature : <code>gchar* g_build_pathv(const gchar*, gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:79</i>
	 */
	public static Pointer<Byte > g_build_pathv(Pointer<Byte > separator, Pointer<Pointer<Byte > > args) {
		return Pointer.pointerToAddress(g_build_pathv(Pointer.getPeer(separator), Pointer.getPeer(args)), Byte.class);
	}
	@Ptr 
	protected native static long g_build_pathv(@Ptr long separator, @Ptr long args);
	/**
	 * Original signature : <code>gchar* g_build_filename(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:81</i>
	 */
	public static Pointer<Byte > g_build_filename(Pointer<Byte > first_element, Object... varArgs1) {
		return Pointer.pointerToAddress(g_build_filename(Pointer.getPeer(first_element), varArgs1), Byte.class);
	}
	@Ptr 
	protected native static long g_build_filename(@Ptr long first_element, Object... varArgs1);
	/**
	 * Original signature : <code>gchar* g_build_filenamev(gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:83</i>
	 */
	public static Pointer<Byte > g_build_filenamev(Pointer<Pointer<Byte > > args) {
		return Pointer.pointerToAddress(g_build_filenamev(Pointer.getPeer(args)), Byte.class);
	}
	@Ptr 
	protected native static long g_build_filenamev(@Ptr long args);
	/**
	 * Original signature : <code>gint g_mkdir_with_parents(const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:85</i>
	 */
	public static int g_mkdir_with_parents(Pointer<Byte > pathname, int mode) {
		return g_mkdir_with_parents(Pointer.getPeer(pathname), mode);
	}
	protected native static int g_mkdir_with_parents(@Ptr long pathname, int mode);
	/**
	 * Original signature : <code>gboolean g_path_is_absolute(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:87</i>
	 */
	public static GLibLibrary.gboolean g_path_is_absolute(Pointer<Byte > file_name) {
		return g_path_is_absolute(Pointer.getPeer(file_name));
	}
	protected native static GLibLibrary.gboolean g_path_is_absolute(@Ptr long file_name);
	/**
	 * Original signature : <code>gchar* g_path_skip_root(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:89</i>
	 */
	public static Pointer<Byte > g_path_skip_root(Pointer<Byte > file_name) {
		return Pointer.pointerToAddress(g_path_skip_root(Pointer.getPeer(file_name)), Byte.class);
	}
	@Ptr 
	protected native static long g_path_skip_root(@Ptr long file_name);
	/**
	 * Original signature : <code>gchar* g_basename(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:91</i>
	 */
	public static Pointer<Byte > g_basename(Pointer<Byte > file_name) {
		return Pointer.pointerToAddress(g_basename(Pointer.getPeer(file_name)), Byte.class);
	}
	@Ptr 
	protected native static long g_basename(@Ptr long file_name);
	/**
	 * Original signature : <code>gchar* g_get_current_dir()</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:93</i>
	 */
	public static Pointer<Byte > g_get_current_dir() {
		return Pointer.pointerToAddress(g_get_current_dir$2(), Byte.class);
	}
	@Ptr 
	protected native static long g_get_current_dir$2();
	/**
	 * Original signature : <code>gchar* g_path_get_basename(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:95</i>
	 */
	public static Pointer<Byte > g_path_get_basename(Pointer<Byte > file_name) {
		return Pointer.pointerToAddress(g_path_get_basename(Pointer.getPeer(file_name)), Byte.class);
	}
	@Ptr 
	protected native static long g_path_get_basename(@Ptr long file_name);
	/**
	 * Original signature : <code>gchar* g_path_get_dirname(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:97</i>
	 */
	public static Pointer<Byte > g_path_get_dirname(Pointer<Byte > file_name) {
		return Pointer.pointerToAddress(g_path_get_dirname(Pointer.getPeer(file_name)), Byte.class);
	}
	@Ptr 
	protected native static long g_path_get_dirname(@Ptr long file_name);
	/**
	 * Original signature : <code>gchar* g_strip_context(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ggettext.h:2</i>
	 */
	public static Pointer<Byte > g_strip_context(Pointer<Byte > msgid, Pointer<Byte > msgval) {
		return Pointer.pointerToAddress(g_strip_context(Pointer.getPeer(msgid), Pointer.getPeer(msgval)), Byte.class);
	}
	@Ptr 
	protected native static long g_strip_context(@Ptr long msgid, @Ptr long msgval);
	/**
	 * Original signature : <code>gchar* g_dgettext(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ggettext.h:4</i>
	 */
	public static Pointer<Byte > g_dgettext(Pointer<Byte > domain, Pointer<Byte > msgid) {
		return Pointer.pointerToAddress(g_dgettext(Pointer.getPeer(domain), Pointer.getPeer(msgid)), Byte.class);
	}
	@Ptr 
	protected native static long g_dgettext(@Ptr long domain, @Ptr long msgid);
	/**
	 * Original signature : <code>gchar* g_dcgettext(const gchar*, const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/ggettext.h:6</i>
	 */
	public static Pointer<Byte > g_dcgettext(Pointer<Byte > domain, Pointer<Byte > msgid, int category) {
		return Pointer.pointerToAddress(g_dcgettext(Pointer.getPeer(domain), Pointer.getPeer(msgid), category), Byte.class);
	}
	@Ptr 
	protected native static long g_dcgettext(@Ptr long domain, @Ptr long msgid, int category);
	/**
	 * Original signature : <code>gchar* g_dngettext(const gchar*, const gchar*, const gchar*, gulong)</code><br>
	 * <i>native declaration : glib-2.0/glib/ggettext.h:8</i>
	 */
	public static Pointer<Byte > g_dngettext(Pointer<Byte > domain, Pointer<Byte > msgid, Pointer<Byte > msgid_plural, @org.bridj.ann.CLong long n) {
		return Pointer.pointerToAddress(g_dngettext(Pointer.getPeer(domain), Pointer.getPeer(msgid), Pointer.getPeer(msgid_plural), n), Byte.class);
	}
	@Ptr 
	protected native static long g_dngettext(@Ptr long domain, @Ptr long msgid, @Ptr long msgid_plural, @org.bridj.ann.CLong long n);
	/**
	 * Original signature : <code>gchar* g_dpgettext(const gchar*, const gchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/ggettext.h:10</i>
	 */
	public static Pointer<Byte > g_dpgettext(Pointer<Byte > domain, Pointer<Byte > msgctxtid, @org.bridj.ann.CLong long msgidoffset) {
		return Pointer.pointerToAddress(g_dpgettext(Pointer.getPeer(domain), Pointer.getPeer(msgctxtid), msgidoffset), Byte.class);
	}
	@Ptr 
	protected native static long g_dpgettext(@Ptr long domain, @Ptr long msgctxtid, @org.bridj.ann.CLong long msgidoffset);
	/**
	 * Original signature : <code>gchar* g_dpgettext2(const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ggettext.h:12</i>
	 */
	public static Pointer<Byte > g_dpgettext2(Pointer<Byte > domain, Pointer<Byte > context, Pointer<Byte > msgid) {
		return Pointer.pointerToAddress(g_dpgettext2(Pointer.getPeer(domain), Pointer.getPeer(context), Pointer.getPeer(msgid)), Byte.class);
	}
	@Ptr 
	protected native static long g_dpgettext2(@Ptr long domain, @Ptr long context, @Ptr long msgid);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_free(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:16</i><br>
	 * Original signature : <code>void g_free(gpointer)</code> * /<br>
	 * extern void g_free(gpointer mem);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_free(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:16</i><br>
	 * Original signature : <code>void g_free(gpointer)</code> * /<br>
	 * extern void g_free(gpointer mem);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_clear_pointer(gpointer*, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:18</i>
	 */
	public static void g_clear_pointer(Pointer pp, Pointer<GLibLibrary.GDestroyNotify > destroy) {
		g_clear_pointer(Pointer.getPeer(pp), Pointer.getPeer(destroy));
	}
	protected native static void g_clear_pointer(@Ptr long pp, @Ptr long destroy);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_malloc(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:20</i><br>
	 * Original signature : <code>gpointer g_malloc(gsize)</code> * /<br>
	 * extern gpointer g_malloc(gsize n_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_malloc(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:20</i><br>
	 * Original signature : <code>gpointer g_malloc(gsize)</code> * /<br>
	 * extern gpointer g_malloc(gsize n_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_malloc0(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:22</i><br>
	 * Original signature : <code>gpointer g_malloc0(gsize)</code> * /<br>
	 * extern gpointer g_malloc0(gsize n_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_malloc0(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:22</i><br>
	 * Original signature : <code>gpointer g_malloc0(gsize)</code> * /<br>
	 * extern gpointer g_malloc0(gsize n_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_realloc(gpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:24</i><br>
	 * Original signature : <code>gpointer g_realloc(gpointer, gsize)</code> * /<br>
	 * extern gpointer g_realloc(gpointer mem, gsize n_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_realloc(gpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:24</i><br>
	 * Original signature : <code>gpointer g_realloc(gpointer, gsize)</code> * /<br>
	 * extern gpointer g_realloc(gpointer mem, gsize n_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_try_malloc(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:26</i><br>
	 * Original signature : <code>gpointer g_try_malloc(gsize)</code> * /<br>
	 * extern gpointer g_try_malloc(gsize n_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_try_malloc(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:26</i><br>
	 * Original signature : <code>gpointer g_try_malloc(gsize)</code> * /<br>
	 * extern gpointer g_try_malloc(gsize n_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_try_malloc0(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:28</i><br>
	 * Original signature : <code>gpointer g_try_malloc0(gsize)</code> * /<br>
	 * extern gpointer g_try_malloc0(gsize n_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_try_malloc0(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:28</i><br>
	 * Original signature : <code>gpointer g_try_malloc0(gsize)</code> * /<br>
	 * extern gpointer g_try_malloc0(gsize n_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_try_realloc(gpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:30</i><br>
	 * Original signature : <code>gpointer g_try_realloc(gpointer, gsize)</code> * /<br>
	 * extern gpointer g_try_realloc(gpointer mem, gsize n_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_try_realloc(gpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:30</i><br>
	 * Original signature : <code>gpointer g_try_realloc(gpointer, gsize)</code> * /<br>
	 * extern gpointer g_try_realloc(gpointer mem, gsize n_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_malloc_n(gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:32</i><br>
	 * Original signature : <code>gpointer g_malloc_n(gsize, gsize)</code> * /<br>
	 * extern gpointer g_malloc_n(gsize n_blocks, gsize n_block_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_malloc_n(gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:32</i><br>
	 * Original signature : <code>gpointer g_malloc_n(gsize, gsize)</code> * /<br>
	 * extern gpointer g_malloc_n(gsize n_blocks, gsize n_block_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_malloc0_n(gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:34</i><br>
	 * Original signature : <code>gpointer g_malloc0_n(gsize, gsize)</code> * /<br>
	 * extern gpointer g_malloc0_n(gsize n_blocks, gsize n_block_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_malloc0_n(gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:34</i><br>
	 * Original signature : <code>gpointer g_malloc0_n(gsize, gsize)</code> * /<br>
	 * extern gpointer g_malloc0_n(gsize n_blocks, gsize n_block_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_realloc_n(gpointer, gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:36</i><br>
	 * Original signature : <code>gpointer g_realloc_n(gpointer, gsize, gsize)</code> * /<br>
	 * extern gpointer g_realloc_n(gpointer mem, gsize n_blocks, gsize n_block_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_realloc_n(gpointer, gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:36</i><br>
	 * Original signature : <code>gpointer g_realloc_n(gpointer, gsize, gsize)</code> * /<br>
	 * extern gpointer g_realloc_n(gpointer mem, gsize n_blocks, gsize n_block_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_try_malloc_n(gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:38</i><br>
	 * Original signature : <code>gpointer g_try_malloc_n(gsize, gsize)</code> * /<br>
	 * extern gpointer g_try_malloc_n(gsize n_blocks, gsize n_block_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_try_malloc_n(gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:38</i><br>
	 * Original signature : <code>gpointer g_try_malloc_n(gsize, gsize)</code> * /<br>
	 * extern gpointer g_try_malloc_n(gsize n_blocks, gsize n_block_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_try_malloc0_n(gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:40</i><br>
	 * Original signature : <code>gpointer g_try_malloc0_n(gsize, gsize)</code> * /<br>
	 * extern gpointer g_try_malloc0_n(gsize n_blocks, gsize n_block_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_try_malloc0_n(gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:40</i><br>
	 * Original signature : <code>gpointer g_try_malloc0_n(gsize, gsize)</code> * /<br>
	 * extern gpointer g_try_malloc0_n(gsize n_blocks, gsize n_block_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_try_realloc_n(gpointer, gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:42</i><br>
	 * Original signature : <code>gpointer g_try_realloc_n(gpointer, gsize, gsize)</code> * /<br>
	 * extern gpointer g_try_realloc_n(gpointer mem, gsize n_blocks, gsize n_block_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_try_realloc_n(gpointer, gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:42</i><br>
	 * Original signature : <code>gpointer g_try_realloc_n(gpointer, gsize, gsize)</code> * /<br>
	 * extern gpointer g_try_realloc_n(gpointer mem, gsize n_blocks, gsize n_block_bytes);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_mem_set_vtable(GMemVTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:66</i>
	 */
	public static void g_mem_set_vtable(Pointer<GMemVTable > vtable) {
		g_mem_set_vtable(Pointer.getPeer(vtable));
	}
	protected native static void g_mem_set_vtable(@Ptr long vtable);
	/**
	 * Original signature : <code>gboolean g_mem_is_system_malloc()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:68</i>
	 */
	public static native GLibLibrary.gboolean g_mem_is_system_malloc();
	/**
	 * Original signature : <code>void g_mem_profile()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:73</i>
	 */
	public static native void g_mem_profile();
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GNode* g_node_new(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:39</i><br>
	 * Original signature : <code>GNode* g_node_new(gpointer)</code> * /<br>
	 * extern GNode* g_node_new(gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GNode* g_node_new(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:39</i><br>
	 * Original signature : <code>GNode* g_node_new(gpointer)</code> * /<br>
	 * extern GNode* g_node_new(gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_node_destroy(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:41</i>
	 */
	public static void g_node_destroy(Pointer<GNode > root) {
		g_node_destroy(Pointer.getPeer(root));
	}
	protected native static void g_node_destroy(@Ptr long root);
	/**
	 * Original signature : <code>void g_node_unlink(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:43</i>
	 */
	public static void g_node_unlink(Pointer<GNode > node) {
		g_node_unlink(Pointer.getPeer(node));
	}
	protected native static void g_node_unlink(@Ptr long node);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GNode* g_node_copy_deep(GNode*, GCopyFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:45</i><br>
	 * Original signature : <code>GNode* g_node_copy_deep(GNode*, GCopyFunc, gpointer)</code> * /<br>
	 * extern GNode* g_node_copy_deep(GNode* node, GCopyFunc copy_func, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GNode* g_node_copy_deep(GNode*, GCopyFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:45</i><br>
	 * Original signature : <code>GNode* g_node_copy_deep(GNode*, GCopyFunc, gpointer)</code> * /<br>
	 * extern GNode* g_node_copy_deep(GNode* node, GCopyFunc copy_func, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GNode* g_node_copy(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:47</i>
	 */
	public static Pointer<GNode > g_node_copy(Pointer<GNode > node) {
		return Pointer.pointerToAddress(g_node_copy(Pointer.getPeer(node)), GNode.class);
	}
	@Ptr 
	protected native static long g_node_copy(@Ptr long node);
	/**
	 * Original signature : <code>GNode* g_node_insert(GNode*, gint, GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:49</i>
	 */
	public static Pointer<GNode > g_node_insert(Pointer<GNode > parent, int position, Pointer<GNode > node) {
		return Pointer.pointerToAddress(g_node_insert(Pointer.getPeer(parent), position, Pointer.getPeer(node)), GNode.class);
	}
	@Ptr 
	protected native static long g_node_insert(@Ptr long parent, int position, @Ptr long node);
	/**
	 * Original signature : <code>GNode* g_node_insert_before(GNode*, GNode*, GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:51</i>
	 */
	public static Pointer<GNode > g_node_insert_before(Pointer<GNode > parent, Pointer<GNode > sibling, Pointer<GNode > node) {
		return Pointer.pointerToAddress(g_node_insert_before(Pointer.getPeer(parent), Pointer.getPeer(sibling), Pointer.getPeer(node)), GNode.class);
	}
	@Ptr 
	protected native static long g_node_insert_before(@Ptr long parent, @Ptr long sibling, @Ptr long node);
	/**
	 * Original signature : <code>GNode* g_node_insert_after(GNode*, GNode*, GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:53</i>
	 */
	public static Pointer<GNode > g_node_insert_after(Pointer<GNode > parent, Pointer<GNode > sibling, Pointer<GNode > node) {
		return Pointer.pointerToAddress(g_node_insert_after(Pointer.getPeer(parent), Pointer.getPeer(sibling), Pointer.getPeer(node)), GNode.class);
	}
	@Ptr 
	protected native static long g_node_insert_after(@Ptr long parent, @Ptr long sibling, @Ptr long node);
	/**
	 * Original signature : <code>GNode* g_node_prepend(GNode*, GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:55</i>
	 */
	public static Pointer<GNode > g_node_prepend(Pointer<GNode > parent, Pointer<GNode > node) {
		return Pointer.pointerToAddress(g_node_prepend(Pointer.getPeer(parent), Pointer.getPeer(node)), GNode.class);
	}
	@Ptr 
	protected native static long g_node_prepend(@Ptr long parent, @Ptr long node);
	/**
	 * Original signature : <code>guint g_node_n_nodes(GNode*, GTraverseFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:57</i>
	 */
	public static int g_node_n_nodes(Pointer<GNode > root, IntValuedEnum<GLibLibrary.GTraverseFlags > flags) {
		return g_node_n_nodes(Pointer.getPeer(root), (int)flags.value());
	}
	protected native static int g_node_n_nodes(@Ptr long root, int flags);
	/**
	 * Original signature : <code>GNode* g_node_get_root(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:59</i>
	 */
	public static Pointer<GNode > g_node_get_root(Pointer<GNode > node) {
		return Pointer.pointerToAddress(g_node_get_root(Pointer.getPeer(node)), GNode.class);
	}
	@Ptr 
	protected native static long g_node_get_root(@Ptr long node);
	/**
	 * Original signature : <code>gboolean g_node_is_ancestor(GNode*, GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:61</i>
	 */
	public static GLibLibrary.gboolean g_node_is_ancestor(Pointer<GNode > node, Pointer<GNode > descendant) {
		return g_node_is_ancestor(Pointer.getPeer(node), Pointer.getPeer(descendant));
	}
	protected native static GLibLibrary.gboolean g_node_is_ancestor(@Ptr long node, @Ptr long descendant);
	/**
	 * Original signature : <code>guint g_node_depth(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:63</i>
	 */
	public static int g_node_depth(Pointer<GNode > node) {
		return g_node_depth(Pointer.getPeer(node));
	}
	protected native static int g_node_depth(@Ptr long node);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GNode* g_node_find(GNode*, GTraverseType, GTraverseFlags, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:65</i><br>
	 * Original signature : <code>GNode* g_node_find(GNode*, GTraverseType, GTraverseFlags, gpointer)</code> * /<br>
	 * extern GNode* g_node_find(GNode* root, GTraverseType order, GTraverseFlags flags, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GNode* g_node_find(GNode*, GTraverseType, GTraverseFlags, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:65</i><br>
	 * Original signature : <code>GNode* g_node_find(GNode*, GTraverseType, GTraverseFlags, gpointer)</code> * /<br>
	 * extern GNode* g_node_find(GNode* root, GTraverseType order, GTraverseFlags flags, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * traversal function, assumes that 'node' is root<br>
	 * (only traverses 'node' and its subtree).<br>
	 * this function is just a high level interface to<br>
	 * low level traversal functions, optimized for speed.<br>
	 * Original signature : <code>void g_node_traverse(GNode*, GTraverseType, GTraverseFlags, gint, GNodeTraverseFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:73</i><br>
	 * traversal function, assumes that 'node' is root<br>
	 * (only traverses 'node' and its subtree).<br>
	 * this function is just a high level interface to<br>
	 * low level traversal functions, optimized for speed.<br>
	 * Original signature : <code>void g_node_traverse(GNode*, GTraverseType, GTraverseFlags, gint, GNodeTraverseFunc, gpointer)</code><br>
	 * /<br>
	 * extern void g_node_traverse(GNode* root, GTraverseType order, GTraverseFlags flags, gint max_depth, GNodeTraverseFunc func, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * traversal function, assumes that 'node' is root<br>
	 * (only traverses 'node' and its subtree).<br>
	 * this function is just a high level interface to<br>
	 * low level traversal functions, optimized for speed.<br>
	 * Original signature : <code>void g_node_traverse(GNode*, GTraverseType, GTraverseFlags, gint, GNodeTraverseFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:73</i><br>
	 * traversal function, assumes that 'node' is root<br>
	 * (only traverses 'node' and its subtree).<br>
	 * this function is just a high level interface to<br>
	 * low level traversal functions, optimized for speed.<br>
	 * Original signature : <code>void g_node_traverse(GNode*, GTraverseType, GTraverseFlags, gint, GNodeTraverseFunc, gpointer)</code><br>
	 * /<br>
	 * extern void g_node_traverse(GNode* root, GTraverseType order, GTraverseFlags flags, gint max_depth, GNodeTraverseFunc func, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * return the maximum tree height starting with 'node', this is an expensive<br>
	 * operation, since we need to visit all nodes. this could be shortened by<br>
	 * adding 'guint height' to struct _GNode, but then again, this is not very<br>
	 * often needed, and would make g_node_insert() more time consuming.<br>
	 * Original signature : <code>guint g_node_max_height(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:81</i>
	 */
	public static int g_node_max_height(Pointer<GNode > root) {
		return g_node_max_height(Pointer.getPeer(root));
	}
	protected native static int g_node_max_height(@Ptr long root);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_node_children_foreach(GNode*, GTraverseFlags, GNodeForeachFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:83</i><br>
	 * Original signature : <code>void g_node_children_foreach(GNode*, GTraverseFlags, GNodeForeachFunc, gpointer)</code> * /<br>
	 * extern void g_node_children_foreach(GNode* node, GTraverseFlags flags, GNodeForeachFunc func, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_node_children_foreach(GNode*, GTraverseFlags, GNodeForeachFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:83</i><br>
	 * Original signature : <code>void g_node_children_foreach(GNode*, GTraverseFlags, GNodeForeachFunc, gpointer)</code> * /<br>
	 * extern void g_node_children_foreach(GNode* node, GTraverseFlags flags, GNodeForeachFunc func, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_node_reverse_children(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:85</i>
	 */
	public static void g_node_reverse_children(Pointer<GNode > node) {
		g_node_reverse_children(Pointer.getPeer(node));
	}
	protected native static void g_node_reverse_children(@Ptr long node);
	/**
	 * Original signature : <code>guint g_node_n_children(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:87</i>
	 */
	public static int g_node_n_children(Pointer<GNode > node) {
		return g_node_n_children(Pointer.getPeer(node));
	}
	protected native static int g_node_n_children(@Ptr long node);
	/**
	 * Original signature : <code>GNode* g_node_nth_child(GNode*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:89</i>
	 */
	public static Pointer<GNode > g_node_nth_child(Pointer<GNode > node, int n) {
		return Pointer.pointerToAddress(g_node_nth_child(Pointer.getPeer(node), n), GNode.class);
	}
	@Ptr 
	protected native static long g_node_nth_child(@Ptr long node, int n);
	/**
	 * Original signature : <code>GNode* g_node_last_child(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:91</i>
	 */
	public static Pointer<GNode > g_node_last_child(Pointer<GNode > node) {
		return Pointer.pointerToAddress(g_node_last_child(Pointer.getPeer(node)), GNode.class);
	}
	@Ptr 
	protected native static long g_node_last_child(@Ptr long node);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GNode* g_node_find_child(GNode*, GTraverseFlags, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:93</i><br>
	 * Original signature : <code>GNode* g_node_find_child(GNode*, GTraverseFlags, gpointer)</code> * /<br>
	 * extern GNode* g_node_find_child(GNode* node, GTraverseFlags flags, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GNode* g_node_find_child(GNode*, GTraverseFlags, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:93</i><br>
	 * Original signature : <code>GNode* g_node_find_child(GNode*, GTraverseFlags, gpointer)</code> * /<br>
	 * extern GNode* g_node_find_child(GNode* node, GTraverseFlags flags, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gint g_node_child_position(GNode*, GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:95</i>
	 */
	public static int g_node_child_position(Pointer<GNode > node, Pointer<GNode > child) {
		return g_node_child_position(Pointer.getPeer(node), Pointer.getPeer(child));
	}
	protected native static int g_node_child_position(@Ptr long node, @Ptr long child);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gint g_node_child_index(GNode*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:97</i><br>
	 * Original signature : <code>gint g_node_child_index(GNode*, gpointer)</code> * /<br>
	 * extern gint g_node_child_index(GNode* node, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gint g_node_child_index(GNode*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:97</i><br>
	 * Original signature : <code>gint g_node_child_index(GNode*, gpointer)</code> * /<br>
	 * extern gint g_node_child_index(GNode* node, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GNode* g_node_first_sibling(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:99</i>
	 */
	public static Pointer<GNode > g_node_first_sibling(Pointer<GNode > node) {
		return Pointer.pointerToAddress(g_node_first_sibling(Pointer.getPeer(node)), GNode.class);
	}
	@Ptr 
	protected native static long g_node_first_sibling(@Ptr long node);
	/**
	 * Original signature : <code>GNode* g_node_last_sibling(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:101</i>
	 */
	public static Pointer<GNode > g_node_last_sibling(Pointer<GNode > node) {
		return Pointer.pointerToAddress(g_node_last_sibling(Pointer.getPeer(node)), GNode.class);
	}
	@Ptr 
	protected native static long g_node_last_sibling(@Ptr long node);
	/**
	 * Doubly linked lists<br>
	 * Original signature : <code>GList* g_list_alloc()</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:11</i>
	 */
	public static Pointer<GList > g_list_alloc() {
		return Pointer.pointerToAddress(g_list_alloc$2(), GList.class);
	}
	@Ptr 
	protected native static long g_list_alloc$2();
	/**
	 * Original signature : <code>void g_list_free(GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:13</i>
	 */
	public static void g_list_free(Pointer<GList > list) {
		g_list_free(Pointer.getPeer(list));
	}
	protected native static void g_list_free(@Ptr long list);
	/**
	 * Original signature : <code>void g_list_free_1(GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:15</i>
	 */
	public static void g_list_free_1(Pointer<GList > list) {
		g_list_free_1(Pointer.getPeer(list));
	}
	protected native static void g_list_free_1(@Ptr long list);
	/**
	 * Original signature : <code>void g_list_free_full(GList*, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:17</i>
	 */
	public static void g_list_free_full(Pointer<GList > list, Pointer<GLibLibrary.GDestroyNotify > free_func) {
		g_list_free_full(Pointer.getPeer(list), Pointer.getPeer(free_func));
	}
	protected native static void g_list_free_full(@Ptr long list, @Ptr long free_func);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_append(GList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:19</i><br>
	 * Original signature : <code>GList* g_list_append(GList*, gpointer)</code> * /<br>
	 * extern GList* g_list_append(GList* list, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_append(GList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:19</i><br>
	 * Original signature : <code>GList* g_list_append(GList*, gpointer)</code> * /<br>
	 * extern GList* g_list_append(GList* list, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_prepend(GList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:21</i><br>
	 * Original signature : <code>GList* g_list_prepend(GList*, gpointer)</code> * /<br>
	 * extern GList* g_list_prepend(GList* list, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_prepend(GList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:21</i><br>
	 * Original signature : <code>GList* g_list_prepend(GList*, gpointer)</code> * /<br>
	 * extern GList* g_list_prepend(GList* list, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_insert(GList*, gpointer, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:23</i><br>
	 * Original signature : <code>GList* g_list_insert(GList*, gpointer, gint)</code> * /<br>
	 * extern GList* g_list_insert(GList* list, gpointer data, gint position);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_insert(GList*, gpointer, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:23</i><br>
	 * Original signature : <code>GList* g_list_insert(GList*, gpointer, gint)</code> * /<br>
	 * extern GList* g_list_insert(GList* list, gpointer data, gint position);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_insert_sorted(GList*, gpointer, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:25</i><br>
	 * Original signature : <code>GList* g_list_insert_sorted(GList*, gpointer, GCompareFunc)</code> * /<br>
	 * extern GList* g_list_insert_sorted(GList* list, gpointer data, GCompareFunc func);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_insert_sorted(GList*, gpointer, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:25</i><br>
	 * Original signature : <code>GList* g_list_insert_sorted(GList*, gpointer, GCompareFunc)</code> * /<br>
	 * extern GList* g_list_insert_sorted(GList* list, gpointer data, GCompareFunc func);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_insert_sorted_with_data(GList*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:27</i><br>
	 * Original signature : <code>GList* g_list_insert_sorted_with_data(GList*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GList* g_list_insert_sorted_with_data(GList* list, gpointer data, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_insert_sorted_with_data(GList*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:27</i><br>
	 * Original signature : <code>GList* g_list_insert_sorted_with_data(GList*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GList* g_list_insert_sorted_with_data(GList* list, gpointer data, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_insert_before(GList*, GList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:29</i><br>
	 * Original signature : <code>GList* g_list_insert_before(GList*, GList*, gpointer)</code> * /<br>
	 * extern GList* g_list_insert_before(GList* list, GList* sibling, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_insert_before(GList*, GList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:29</i><br>
	 * Original signature : <code>GList* g_list_insert_before(GList*, GList*, gpointer)</code> * /<br>
	 * extern GList* g_list_insert_before(GList* list, GList* sibling, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GList* g_list_concat(GList*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:31</i>
	 */
	public static Pointer<GList > g_list_concat(Pointer<GList > list1, Pointer<GList > list2) {
		return Pointer.pointerToAddress(g_list_concat(Pointer.getPeer(list1), Pointer.getPeer(list2)), GList.class);
	}
	@Ptr 
	protected native static long g_list_concat(@Ptr long list1, @Ptr long list2);
	/**
	 * Original signature : <code>GList* g_list_remove(GList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:33</i>
	 */
	public static Pointer<GList > g_list_remove(Pointer<GList > list, Pointer<? > data) {
		return Pointer.pointerToAddress(g_list_remove(Pointer.getPeer(list), Pointer.getPeer(data)), GList.class);
	}
	@Ptr 
	protected native static long g_list_remove(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GList* g_list_remove_all(GList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:35</i>
	 */
	public static Pointer<GList > g_list_remove_all(Pointer<GList > list, Pointer<? > data) {
		return Pointer.pointerToAddress(g_list_remove_all(Pointer.getPeer(list), Pointer.getPeer(data)), GList.class);
	}
	@Ptr 
	protected native static long g_list_remove_all(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GList* g_list_remove_link(GList*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:37</i>
	 */
	public static Pointer<GList > g_list_remove_link(Pointer<GList > list, Pointer<GList > llink) {
		return Pointer.pointerToAddress(g_list_remove_link(Pointer.getPeer(list), Pointer.getPeer(llink)), GList.class);
	}
	@Ptr 
	protected native static long g_list_remove_link(@Ptr long list, @Ptr long llink);
	/**
	 * Original signature : <code>GList* g_list_delete_link(GList*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:39</i>
	 */
	public static Pointer<GList > g_list_delete_link(Pointer<GList > list, Pointer<GList > link_) {
		return Pointer.pointerToAddress(g_list_delete_link(Pointer.getPeer(list), Pointer.getPeer(link_)), GList.class);
	}
	@Ptr 
	protected native static long g_list_delete_link(@Ptr long list, @Ptr long link_);
	/**
	 * Original signature : <code>GList* g_list_reverse(GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:41</i>
	 */
	public static Pointer<GList > g_list_reverse(Pointer<GList > list) {
		return Pointer.pointerToAddress(g_list_reverse(Pointer.getPeer(list)), GList.class);
	}
	@Ptr 
	protected native static long g_list_reverse(@Ptr long list);
	/**
	 * Original signature : <code>GList* g_list_copy(GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:43</i>
	 */
	public static Pointer<GList > g_list_copy(Pointer<GList > list) {
		return Pointer.pointerToAddress(g_list_copy(Pointer.getPeer(list)), GList.class);
	}
	@Ptr 
	protected native static long g_list_copy(@Ptr long list);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_copy_deep(GList*, GCopyFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:45</i><br>
	 * Original signature : <code>GList* g_list_copy_deep(GList*, GCopyFunc, gpointer)</code> * /<br>
	 * extern GList* g_list_copy_deep(GList* list, GCopyFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_copy_deep(GList*, GCopyFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:45</i><br>
	 * Original signature : <code>GList* g_list_copy_deep(GList*, GCopyFunc, gpointer)</code> * /<br>
	 * extern GList* g_list_copy_deep(GList* list, GCopyFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GList* g_list_nth(GList*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:47</i>
	 */
	public static Pointer<GList > g_list_nth(Pointer<GList > list, int n) {
		return Pointer.pointerToAddress(g_list_nth(Pointer.getPeer(list), n), GList.class);
	}
	@Ptr 
	protected native static long g_list_nth(@Ptr long list, int n);
	/**
	 * Original signature : <code>GList* g_list_nth_prev(GList*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:49</i>
	 */
	public static Pointer<GList > g_list_nth_prev(Pointer<GList > list, int n) {
		return Pointer.pointerToAddress(g_list_nth_prev(Pointer.getPeer(list), n), GList.class);
	}
	@Ptr 
	protected native static long g_list_nth_prev(@Ptr long list, int n);
	/**
	 * Original signature : <code>GList* g_list_find(GList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:51</i>
	 */
	public static Pointer<GList > g_list_find(Pointer<GList > list, Pointer<? > data) {
		return Pointer.pointerToAddress(g_list_find(Pointer.getPeer(list), Pointer.getPeer(data)), GList.class);
	}
	@Ptr 
	protected native static long g_list_find(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GList* g_list_find_custom(GList*, gconstpointer, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:53</i>
	 */
	public static Pointer<GList > g_list_find_custom(Pointer<GList > list, Pointer<? > data, Pointer<GLibLibrary.GCompareFunc > func) {
		return Pointer.pointerToAddress(g_list_find_custom(Pointer.getPeer(list), Pointer.getPeer(data), Pointer.getPeer(func)), GList.class);
	}
	@Ptr 
	protected native static long g_list_find_custom(@Ptr long list, @Ptr long data, @Ptr long func);
	/**
	 * Original signature : <code>gint g_list_position(GList*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:55</i>
	 */
	public static int g_list_position(Pointer<GList > list, Pointer<GList > llink) {
		return g_list_position(Pointer.getPeer(list), Pointer.getPeer(llink));
	}
	protected native static int g_list_position(@Ptr long list, @Ptr long llink);
	/**
	 * Original signature : <code>gint g_list_index(GList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:57</i>
	 */
	public static int g_list_index(Pointer<GList > list, Pointer<? > data) {
		return g_list_index(Pointer.getPeer(list), Pointer.getPeer(data));
	}
	protected native static int g_list_index(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GList* g_list_last(GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:59</i>
	 */
	public static Pointer<GList > g_list_last(Pointer<GList > list) {
		return Pointer.pointerToAddress(g_list_last(Pointer.getPeer(list)), GList.class);
	}
	@Ptr 
	protected native static long g_list_last(@Ptr long list);
	/**
	 * Original signature : <code>GList* g_list_first(GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:61</i>
	 */
	public static Pointer<GList > g_list_first(Pointer<GList > list) {
		return Pointer.pointerToAddress(g_list_first(Pointer.getPeer(list)), GList.class);
	}
	@Ptr 
	protected native static long g_list_first(@Ptr long list);
	/**
	 * Original signature : <code>guint g_list_length(GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:63</i>
	 */
	public static int g_list_length(Pointer<GList > list) {
		return g_list_length(Pointer.getPeer(list));
	}
	protected native static int g_list_length(@Ptr long list);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_list_foreach(GList*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:65</i><br>
	 * Original signature : <code>void g_list_foreach(GList*, GFunc, gpointer)</code> * /<br>
	 * extern void g_list_foreach(GList* list, GFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_list_foreach(GList*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:65</i><br>
	 * Original signature : <code>void g_list_foreach(GList*, GFunc, gpointer)</code> * /<br>
	 * extern void g_list_foreach(GList* list, GFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GList* g_list_sort(GList*, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:67</i>
	 */
	public static Pointer<GList > g_list_sort(Pointer<GList > list, Pointer<GLibLibrary.GCompareFunc > compare_func) {
		return Pointer.pointerToAddress(g_list_sort(Pointer.getPeer(list), Pointer.getPeer(compare_func)), GList.class);
	}
	@Ptr 
	protected native static long g_list_sort(@Ptr long list, @Ptr long compare_func);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_sort_with_data(GList*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:69</i><br>
	 * Original signature : <code>GList* g_list_sort_with_data(GList*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GList* g_list_sort_with_data(GList* list, GCompareDataFunc compare_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GList* g_list_sort_with_data(GList*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:69</i><br>
	 * Original signature : <code>GList* g_list_sort_with_data(GList*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GList* g_list_sort_with_data(GList* list, GCompareDataFunc compare_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_list_nth_data(GList*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:71</i><br>
	 * Original signature : <code>gpointer g_list_nth_data(GList*, guint)</code> * /<br>
	 * extern gpointer g_list_nth_data(GList* list, guint n);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_list_nth_data(GList*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:71</i><br>
	 * Original signature : <code>gpointer g_list_nth_data(GList*, guint)</code> * /<br>
	 * extern gpointer g_list_nth_data(GList* list, guint n);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GHashTable* g_hash_table_new(GHashFunc, GEqualFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:14</i>
	 */
	public static Pointer<GLibLibrary.GHashTable > g_hash_table_new(Pointer<GLibLibrary.GHashFunc > hash_func, Pointer<GLibLibrary.GEqualFunc > key_equal_func) {
		return Pointer.pointerToAddress(g_hash_table_new(Pointer.getPeer(hash_func), Pointer.getPeer(key_equal_func)), GLibLibrary.GHashTable.class);
	}
	@Ptr 
	protected native static long g_hash_table_new(@Ptr long hash_func, @Ptr long key_equal_func);
	/**
	 * Original signature : <code>GHashTable* g_hash_table_new_full(GHashFunc, GEqualFunc, GDestroyNotify, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:16</i>
	 */
	public static Pointer<GLibLibrary.GHashTable > g_hash_table_new_full(Pointer<GLibLibrary.GHashFunc > hash_func, Pointer<GLibLibrary.GEqualFunc > key_equal_func, Pointer<GLibLibrary.GDestroyNotify > key_destroy_func, Pointer<GLibLibrary.GDestroyNotify > value_destroy_func) {
		return Pointer.pointerToAddress(g_hash_table_new_full(Pointer.getPeer(hash_func), Pointer.getPeer(key_equal_func), Pointer.getPeer(key_destroy_func), Pointer.getPeer(value_destroy_func)), GLibLibrary.GHashTable.class);
	}
	@Ptr 
	protected native static long g_hash_table_new_full(@Ptr long hash_func, @Ptr long key_equal_func, @Ptr long key_destroy_func, @Ptr long value_destroy_func);
	/**
	 * Original signature : <code>void g_hash_table_destroy(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:18</i>
	 */
	public static void g_hash_table_destroy(Pointer<GLibLibrary.GHashTable > hash_table) {
		g_hash_table_destroy(Pointer.getPeer(hash_table));
	}
	protected native static void g_hash_table_destroy(@Ptr long hash_table);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_hash_table_insert(GHashTable*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:20</i><br>
	 * Original signature : <code>void g_hash_table_insert(GHashTable*, gpointer, gpointer)</code> * /<br>
	 * extern void g_hash_table_insert(GHashTable* hash_table, gpointer key, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_hash_table_insert(GHashTable*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:20</i><br>
	 * Original signature : <code>void g_hash_table_insert(GHashTable*, gpointer, gpointer)</code> * /<br>
	 * extern void g_hash_table_insert(GHashTable* hash_table, gpointer key, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_hash_table_replace(GHashTable*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:22</i><br>
	 * Original signature : <code>void g_hash_table_replace(GHashTable*, gpointer, gpointer)</code> * /<br>
	 * extern void g_hash_table_replace(GHashTable* hash_table, gpointer key, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_hash_table_replace(GHashTable*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:22</i><br>
	 * Original signature : <code>void g_hash_table_replace(GHashTable*, gpointer, gpointer)</code> * /<br>
	 * extern void g_hash_table_replace(GHashTable* hash_table, gpointer key, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_hash_table_add(GHashTable*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:24</i><br>
	 * Original signature : <code>void g_hash_table_add(GHashTable*, gpointer)</code> * /<br>
	 * extern void g_hash_table_add(GHashTable* hash_table, gpointer key);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_hash_table_add(GHashTable*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:24</i><br>
	 * Original signature : <code>void g_hash_table_add(GHashTable*, gpointer)</code> * /<br>
	 * extern void g_hash_table_add(GHashTable* hash_table, gpointer key);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gboolean g_hash_table_remove(GHashTable*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:26</i>
	 */
	public static GLibLibrary.gboolean g_hash_table_remove(Pointer<GLibLibrary.GHashTable > hash_table, Pointer<? > key) {
		return g_hash_table_remove(Pointer.getPeer(hash_table), Pointer.getPeer(key));
	}
	protected native static GLibLibrary.gboolean g_hash_table_remove(@Ptr long hash_table, @Ptr long key);
	/**
	 * Original signature : <code>void g_hash_table_remove_all(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:28</i>
	 */
	public static void g_hash_table_remove_all(Pointer<GLibLibrary.GHashTable > hash_table) {
		g_hash_table_remove_all(Pointer.getPeer(hash_table));
	}
	protected native static void g_hash_table_remove_all(@Ptr long hash_table);
	/**
	 * Original signature : <code>gboolean g_hash_table_steal(GHashTable*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:30</i>
	 */
	public static GLibLibrary.gboolean g_hash_table_steal(Pointer<GLibLibrary.GHashTable > hash_table, Pointer<? > key) {
		return g_hash_table_steal(Pointer.getPeer(hash_table), Pointer.getPeer(key));
	}
	protected native static GLibLibrary.gboolean g_hash_table_steal(@Ptr long hash_table, @Ptr long key);
	/**
	 * Original signature : <code>void g_hash_table_steal_all(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:32</i>
	 */
	public static void g_hash_table_steal_all(Pointer<GLibLibrary.GHashTable > hash_table) {
		g_hash_table_steal_all(Pointer.getPeer(hash_table));
	}
	protected native static void g_hash_table_steal_all(@Ptr long hash_table);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_hash_table_lookup(GHashTable*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:34</i><br>
	 * Original signature : <code>gpointer g_hash_table_lookup(GHashTable*, gconstpointer)</code> * /<br>
	 * extern gpointer g_hash_table_lookup(GHashTable* hash_table, gconstpointer key);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_hash_table_lookup(GHashTable*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:34</i><br>
	 * Original signature : <code>gpointer g_hash_table_lookup(GHashTable*, gconstpointer)</code> * /<br>
	 * extern gpointer g_hash_table_lookup(GHashTable* hash_table, gconstpointer key);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gboolean g_hash_table_contains(GHashTable*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:36</i>
	 */
	public static GLibLibrary.gboolean g_hash_table_contains(Pointer<GLibLibrary.GHashTable > hash_table, Pointer<? > key) {
		return g_hash_table_contains(Pointer.getPeer(hash_table), Pointer.getPeer(key));
	}
	protected native static GLibLibrary.gboolean g_hash_table_contains(@Ptr long hash_table, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_hash_table_lookup_extended(GHashTable*, gconstpointer, gpointer*, gpointer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:38</i>
	 */
	public static GLibLibrary.gboolean g_hash_table_lookup_extended(Pointer<GLibLibrary.GHashTable > hash_table, Pointer<? > lookup_key, Pointer orig_key, Pointer value) {
		return g_hash_table_lookup_extended(Pointer.getPeer(hash_table), Pointer.getPeer(lookup_key), Pointer.getPeer(orig_key), Pointer.getPeer(value));
	}
	protected native static GLibLibrary.gboolean g_hash_table_lookup_extended(@Ptr long hash_table, @Ptr long lookup_key, @Ptr long orig_key, @Ptr long value);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_hash_table_foreach(GHashTable*, GHFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:40</i><br>
	 * Original signature : <code>void g_hash_table_foreach(GHashTable*, GHFunc, gpointer)</code> * /<br>
	 * extern void g_hash_table_foreach(GHashTable* hash_table, GHFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_hash_table_foreach(GHashTable*, GHFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:40</i><br>
	 * Original signature : <code>void g_hash_table_foreach(GHashTable*, GHFunc, gpointer)</code> * /<br>
	 * extern void g_hash_table_foreach(GHashTable* hash_table, GHFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_hash_table_find(GHashTable*, GHRFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:42</i><br>
	 * Original signature : <code>gpointer g_hash_table_find(GHashTable*, GHRFunc, gpointer)</code> * /<br>
	 * extern gpointer g_hash_table_find(GHashTable* hash_table, GHRFunc predicate, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_hash_table_find(GHashTable*, GHRFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:42</i><br>
	 * Original signature : <code>gpointer g_hash_table_find(GHashTable*, GHRFunc, gpointer)</code> * /<br>
	 * extern gpointer g_hash_table_find(GHashTable* hash_table, GHRFunc predicate, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_hash_table_foreach_remove(GHashTable*, GHRFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:44</i><br>
	 * Original signature : <code>guint g_hash_table_foreach_remove(GHashTable*, GHRFunc, gpointer)</code> * /<br>
	 * extern guint g_hash_table_foreach_remove(GHashTable* hash_table, GHRFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_hash_table_foreach_remove(GHashTable*, GHRFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:44</i><br>
	 * Original signature : <code>guint g_hash_table_foreach_remove(GHashTable*, GHRFunc, gpointer)</code> * /<br>
	 * extern guint g_hash_table_foreach_remove(GHashTable* hash_table, GHRFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_hash_table_foreach_steal(GHashTable*, GHRFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:46</i><br>
	 * Original signature : <code>guint g_hash_table_foreach_steal(GHashTable*, GHRFunc, gpointer)</code> * /<br>
	 * extern guint g_hash_table_foreach_steal(GHashTable* hash_table, GHRFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_hash_table_foreach_steal(GHashTable*, GHRFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:46</i><br>
	 * Original signature : <code>guint g_hash_table_foreach_steal(GHashTable*, GHRFunc, gpointer)</code> * /<br>
	 * extern guint g_hash_table_foreach_steal(GHashTable* hash_table, GHRFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>guint g_hash_table_size(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:48</i>
	 */
	public static int g_hash_table_size(Pointer<GLibLibrary.GHashTable > hash_table) {
		return g_hash_table_size(Pointer.getPeer(hash_table));
	}
	protected native static int g_hash_table_size(@Ptr long hash_table);
	/**
	 * Original signature : <code>GList* g_hash_table_get_keys(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:50</i>
	 */
	public static Pointer<GList > g_hash_table_get_keys(Pointer<GLibLibrary.GHashTable > hash_table) {
		return Pointer.pointerToAddress(g_hash_table_get_keys(Pointer.getPeer(hash_table)), GList.class);
	}
	@Ptr 
	protected native static long g_hash_table_get_keys(@Ptr long hash_table);
	/**
	 * Original signature : <code>GList* g_hash_table_get_values(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:52</i>
	 */
	public static Pointer<GList > g_hash_table_get_values(Pointer<GLibLibrary.GHashTable > hash_table) {
		return Pointer.pointerToAddress(g_hash_table_get_values(Pointer.getPeer(hash_table)), GList.class);
	}
	@Ptr 
	protected native static long g_hash_table_get_values(@Ptr long hash_table);
	/**
	 * Original signature : <code>void g_hash_table_iter_init(GHashTableIter*, GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:54</i>
	 */
	public static void g_hash_table_iter_init(Pointer<GHashTableIter > iter, Pointer<GLibLibrary.GHashTable > hash_table) {
		g_hash_table_iter_init(Pointer.getPeer(iter), Pointer.getPeer(hash_table));
	}
	protected native static void g_hash_table_iter_init(@Ptr long iter, @Ptr long hash_table);
	/**
	 * Original signature : <code>gboolean g_hash_table_iter_next(GHashTableIter*, gpointer*, gpointer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:56</i>
	 */
	public static GLibLibrary.gboolean g_hash_table_iter_next(Pointer<GHashTableIter > iter, Pointer key, Pointer value) {
		return g_hash_table_iter_next(Pointer.getPeer(iter), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static GLibLibrary.gboolean g_hash_table_iter_next(@Ptr long iter, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>GHashTable* g_hash_table_iter_get_hash_table(GHashTableIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:58</i>
	 */
	public static Pointer<GLibLibrary.GHashTable > g_hash_table_iter_get_hash_table(Pointer<GHashTableIter > iter) {
		return Pointer.pointerToAddress(g_hash_table_iter_get_hash_table(Pointer.getPeer(iter)), GLibLibrary.GHashTable.class);
	}
	@Ptr 
	protected native static long g_hash_table_iter_get_hash_table(@Ptr long iter);
	/**
	 * Original signature : <code>void g_hash_table_iter_remove(GHashTableIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:60</i>
	 */
	public static void g_hash_table_iter_remove(Pointer<GHashTableIter > iter) {
		g_hash_table_iter_remove(Pointer.getPeer(iter));
	}
	protected native static void g_hash_table_iter_remove(@Ptr long iter);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_hash_table_iter_replace(GHashTableIter*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:62</i><br>
	 * Original signature : <code>void g_hash_table_iter_replace(GHashTableIter*, gpointer)</code> * /<br>
	 * extern void g_hash_table_iter_replace(GHashTableIter* iter, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_hash_table_iter_replace(GHashTableIter*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:62</i><br>
	 * Original signature : <code>void g_hash_table_iter_replace(GHashTableIter*, gpointer)</code> * /<br>
	 * extern void g_hash_table_iter_replace(GHashTableIter* iter, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_hash_table_iter_steal(GHashTableIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:64</i>
	 */
	public static void g_hash_table_iter_steal(Pointer<GHashTableIter > iter) {
		g_hash_table_iter_steal(Pointer.getPeer(iter));
	}
	protected native static void g_hash_table_iter_steal(@Ptr long iter);
	/**
	 * Original signature : <code>GHashTable* g_hash_table_ref(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:66</i>
	 */
	public static Pointer<GLibLibrary.GHashTable > g_hash_table_ref(Pointer<GLibLibrary.GHashTable > hash_table) {
		return Pointer.pointerToAddress(g_hash_table_ref(Pointer.getPeer(hash_table)), GLibLibrary.GHashTable.class);
	}
	@Ptr 
	protected native static long g_hash_table_ref(@Ptr long hash_table);
	/**
	 * Original signature : <code>void g_hash_table_unref(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:68</i>
	 */
	public static void g_hash_table_unref(Pointer<GLibLibrary.GHashTable > hash_table) {
		g_hash_table_unref(Pointer.getPeer(hash_table));
	}
	protected native static void g_hash_table_unref(@Ptr long hash_table);
	/**
	 * Hash Functions<br>
	 * Original signature : <code>gboolean g_str_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:73</i>
	 */
	public static GLibLibrary.gboolean g_str_equal(Pointer<? > v1, Pointer<? > v2) {
		return g_str_equal(Pointer.getPeer(v1), Pointer.getPeer(v2));
	}
	protected native static GLibLibrary.gboolean g_str_equal(@Ptr long v1, @Ptr long v2);
	/**
	 * Original signature : <code>guint g_str_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:75</i>
	 */
	public static int g_str_hash(Pointer<? > v) {
		return g_str_hash(Pointer.getPeer(v));
	}
	protected native static int g_str_hash(@Ptr long v);
	/**
	 * Original signature : <code>gboolean g_int_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:77</i>
	 */
	public static GLibLibrary.gboolean g_int_equal(Pointer<? > v1, Pointer<? > v2) {
		return g_int_equal(Pointer.getPeer(v1), Pointer.getPeer(v2));
	}
	protected native static GLibLibrary.gboolean g_int_equal(@Ptr long v1, @Ptr long v2);
	/**
	 * Original signature : <code>guint g_int_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:79</i>
	 */
	public static int g_int_hash(Pointer<? > v) {
		return g_int_hash(Pointer.getPeer(v));
	}
	protected native static int g_int_hash(@Ptr long v);
	/**
	 * Original signature : <code>gboolean g_int64_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:81</i>
	 */
	public static GLibLibrary.gboolean g_int64_equal(Pointer<? > v1, Pointer<? > v2) {
		return g_int64_equal(Pointer.getPeer(v1), Pointer.getPeer(v2));
	}
	protected native static GLibLibrary.gboolean g_int64_equal(@Ptr long v1, @Ptr long v2);
	/**
	 * Original signature : <code>guint g_int64_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:83</i>
	 */
	public static int g_int64_hash(Pointer<? > v) {
		return g_int64_hash(Pointer.getPeer(v));
	}
	protected native static int g_int64_hash(@Ptr long v);
	/**
	 * Original signature : <code>gboolean g_double_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:85</i>
	 */
	public static GLibLibrary.gboolean g_double_equal(Pointer<? > v1, Pointer<? > v2) {
		return g_double_equal(Pointer.getPeer(v1), Pointer.getPeer(v2));
	}
	protected native static GLibLibrary.gboolean g_double_equal(@Ptr long v1, @Ptr long v2);
	/**
	 * Original signature : <code>guint g_double_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:87</i>
	 */
	public static int g_double_hash(Pointer<? > v) {
		return g_double_hash(Pointer.getPeer(v));
	}
	protected native static int g_double_hash(@Ptr long v);
	/**
	 * Original signature : <code>guint g_direct_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:89</i>
	 */
	public static int g_direct_hash(Pointer<? > v) {
		return g_direct_hash(Pointer.getPeer(v));
	}
	protected native static int g_direct_hash(@Ptr long v);
	/**
	 * Original signature : <code>gboolean g_direct_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:91</i>
	 */
	public static GLibLibrary.gboolean g_direct_equal(Pointer<? > v1, Pointer<? > v2) {
		return g_direct_equal(Pointer.getPeer(v1), Pointer.getPeer(v2));
	}
	protected native static GLibLibrary.gboolean g_direct_equal(@Ptr long v1, @Ptr long v2);
	/**
	 * Original signature : <code>GHmac* g_hmac_new(GChecksumType, const guchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:10</i>
	 */
	public static Pointer<GLibLibrary.GHmac > g_hmac_new(IntValuedEnum<GLibLibrary.GChecksumType > digest_type, Pointer<Byte > key, @org.bridj.ann.CLong long key_len) {
		return Pointer.pointerToAddress(g_hmac_new((int)digest_type.value(), Pointer.getPeer(key), key_len), GLibLibrary.GHmac.class);
	}
	@Ptr 
	protected native static long g_hmac_new(int digest_type, @Ptr long key, @org.bridj.ann.CLong long key_len);
	/**
	 * Original signature : <code>GHmac* g_hmac_copy(const GHmac*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:12</i>
	 */
	public static Pointer<GLibLibrary.GHmac > g_hmac_copy(Pointer<GLibLibrary.GHmac > hmac) {
		return Pointer.pointerToAddress(g_hmac_copy(Pointer.getPeer(hmac)), GLibLibrary.GHmac.class);
	}
	@Ptr 
	protected native static long g_hmac_copy(@Ptr long hmac);
	/**
	 * Original signature : <code>GHmac* g_hmac_ref(GHmac*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:14</i>
	 */
	public static Pointer<GLibLibrary.GHmac > g_hmac_ref(Pointer<GLibLibrary.GHmac > hmac) {
		return Pointer.pointerToAddress(g_hmac_ref(Pointer.getPeer(hmac)), GLibLibrary.GHmac.class);
	}
	@Ptr 
	protected native static long g_hmac_ref(@Ptr long hmac);
	/**
	 * Original signature : <code>void g_hmac_unref(GHmac*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:16</i>
	 */
	public static void g_hmac_unref(Pointer<GLibLibrary.GHmac > hmac) {
		g_hmac_unref(Pointer.getPeer(hmac));
	}
	protected native static void g_hmac_unref(@Ptr long hmac);
	/**
	 * Original signature : <code>void g_hmac_update(GHmac*, const guchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:18</i>
	 */
	public static void g_hmac_update(Pointer<GLibLibrary.GHmac > hmac, Pointer<Byte > data, @org.bridj.ann.CLong long length) {
		g_hmac_update(Pointer.getPeer(hmac), Pointer.getPeer(data), length);
	}
	protected native static void g_hmac_update(@Ptr long hmac, @Ptr long data, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>gchar* g_hmac_get_string(GHmac*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:20</i>
	 */
	public static Pointer<Byte > g_hmac_get_string(Pointer<GLibLibrary.GHmac > hmac) {
		return Pointer.pointerToAddress(g_hmac_get_string(Pointer.getPeer(hmac)), Byte.class);
	}
	@Ptr 
	protected native static long g_hmac_get_string(@Ptr long hmac);
	/**
	 * Original signature : <code>void g_hmac_get_digest(GHmac*, guint8*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:22</i>
	 */
	public static void g_hmac_get_digest(Pointer<GLibLibrary.GHmac > hmac, Pointer<Byte > buffer, Pointer<org.bridj.CLong > digest_len) {
		g_hmac_get_digest(Pointer.getPeer(hmac), Pointer.getPeer(buffer), Pointer.getPeer(digest_len));
	}
	protected native static void g_hmac_get_digest(@Ptr long hmac, @Ptr long buffer, @Ptr long digest_len);
	/**
	 * Original signature : <code>gchar* g_compute_hmac_for_data(GChecksumType, const guchar*, gsize, const guchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:24</i>
	 */
	public static Pointer<Byte > g_compute_hmac_for_data(IntValuedEnum<GLibLibrary.GChecksumType > digest_type, Pointer<Byte > key, @org.bridj.ann.CLong long key_len, Pointer<Byte > data, @org.bridj.ann.CLong long length) {
		return Pointer.pointerToAddress(g_compute_hmac_for_data((int)digest_type.value(), Pointer.getPeer(key), key_len, Pointer.getPeer(data), length), Byte.class);
	}
	@Ptr 
	protected native static long g_compute_hmac_for_data(int digest_type, @Ptr long key, @org.bridj.ann.CLong long key_len, @Ptr long data, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>gchar* g_compute_hmac_for_string(GChecksumType, const guchar*, gsize, const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:26</i>
	 */
	public static Pointer<Byte > g_compute_hmac_for_string(IntValuedEnum<GLibLibrary.GChecksumType > digest_type, Pointer<Byte > key, @org.bridj.ann.CLong long key_len, Pointer<Byte > str, @org.bridj.ann.CLong long length) {
		return Pointer.pointerToAddress(g_compute_hmac_for_string((int)digest_type.value(), Pointer.getPeer(key), key_len, Pointer.getPeer(str), length), Byte.class);
	}
	@Ptr 
	protected native static long g_compute_hmac_for_string(int digest_type, @Ptr long key, @org.bridj.ann.CLong long key_len, @Ptr long str, @org.bridj.ann.CLong long length);
	/**
	 * callback maintenance functions<br>
	 * Original signature : <code>void g_hook_list_init(GHookList*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:40</i>
	 */
	public static void g_hook_list_init(Pointer<GHookList > hook_list, int hook_size) {
		g_hook_list_init(Pointer.getPeer(hook_list), hook_size);
	}
	protected native static void g_hook_list_init(@Ptr long hook_list, int hook_size);
	/**
	 * Original signature : <code>void g_hook_list_clear(GHookList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:42</i>
	 */
	public static void g_hook_list_clear(Pointer<GHookList > hook_list) {
		g_hook_list_clear(Pointer.getPeer(hook_list));
	}
	protected native static void g_hook_list_clear(@Ptr long hook_list);
	/**
	 * Original signature : <code>GHook* g_hook_alloc(GHookList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:44</i>
	 */
	public static Pointer<GHook > g_hook_alloc(Pointer<GHookList > hook_list) {
		return Pointer.pointerToAddress(g_hook_alloc(Pointer.getPeer(hook_list)), GHook.class);
	}
	@Ptr 
	protected native static long g_hook_alloc(@Ptr long hook_list);
	/**
	 * Original signature : <code>void g_hook_free(GHookList*, GHook*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:46</i>
	 */
	public static void g_hook_free(Pointer<GHookList > hook_list, Pointer<GHook > hook) {
		g_hook_free(Pointer.getPeer(hook_list), Pointer.getPeer(hook));
	}
	protected native static void g_hook_free(@Ptr long hook_list, @Ptr long hook);
	/**
	 * Original signature : <code>GHook* g_hook_ref(GHookList*, GHook*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:48</i>
	 */
	public static Pointer<GHook > g_hook_ref(Pointer<GHookList > hook_list, Pointer<GHook > hook) {
		return Pointer.pointerToAddress(g_hook_ref(Pointer.getPeer(hook_list), Pointer.getPeer(hook)), GHook.class);
	}
	@Ptr 
	protected native static long g_hook_ref(@Ptr long hook_list, @Ptr long hook);
	/**
	 * Original signature : <code>void g_hook_unref(GHookList*, GHook*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:50</i>
	 */
	public static void g_hook_unref(Pointer<GHookList > hook_list, Pointer<GHook > hook) {
		g_hook_unref(Pointer.getPeer(hook_list), Pointer.getPeer(hook));
	}
	protected native static void g_hook_unref(@Ptr long hook_list, @Ptr long hook);
	/**
	 * Original signature : <code>gboolean g_hook_destroy(GHookList*, gulong)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:52</i>
	 */
	public static GLibLibrary.gboolean g_hook_destroy(Pointer<GHookList > hook_list, @org.bridj.ann.CLong long hook_id) {
		return g_hook_destroy(Pointer.getPeer(hook_list), hook_id);
	}
	protected native static GLibLibrary.gboolean g_hook_destroy(@Ptr long hook_list, @org.bridj.ann.CLong long hook_id);
	/**
	 * Original signature : <code>void g_hook_destroy_link(GHookList*, GHook*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:54</i>
	 */
	public static void g_hook_destroy_link(Pointer<GHookList > hook_list, Pointer<GHook > hook) {
		g_hook_destroy_link(Pointer.getPeer(hook_list), Pointer.getPeer(hook));
	}
	protected native static void g_hook_destroy_link(@Ptr long hook_list, @Ptr long hook);
	/**
	 * Original signature : <code>void g_hook_prepend(GHookList*, GHook*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:56</i>
	 */
	public static void g_hook_prepend(Pointer<GHookList > hook_list, Pointer<GHook > hook) {
		g_hook_prepend(Pointer.getPeer(hook_list), Pointer.getPeer(hook));
	}
	protected native static void g_hook_prepend(@Ptr long hook_list, @Ptr long hook);
	/**
	 * Original signature : <code>void g_hook_insert_before(GHookList*, GHook*, GHook*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:58</i>
	 */
	public static void g_hook_insert_before(Pointer<GHookList > hook_list, Pointer<GHook > sibling, Pointer<GHook > hook) {
		g_hook_insert_before(Pointer.getPeer(hook_list), Pointer.getPeer(sibling), Pointer.getPeer(hook));
	}
	protected native static void g_hook_insert_before(@Ptr long hook_list, @Ptr long sibling, @Ptr long hook);
	/**
	 * Original signature : <code>void g_hook_insert_sorted(GHookList*, GHook*, GHookCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:60</i>
	 */
	public static void g_hook_insert_sorted(Pointer<GHookList > hook_list, Pointer<GHook > hook, Pointer<GLibLibrary.GHookCompareFunc > func) {
		g_hook_insert_sorted(Pointer.getPeer(hook_list), Pointer.getPeer(hook), Pointer.getPeer(func));
	}
	protected native static void g_hook_insert_sorted(@Ptr long hook_list, @Ptr long hook, @Ptr long func);
	/**
	 * Original signature : <code>GHook* g_hook_get(GHookList*, gulong)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:62</i>
	 */
	public static Pointer<GHook > g_hook_get(Pointer<GHookList > hook_list, @org.bridj.ann.CLong long hook_id) {
		return Pointer.pointerToAddress(g_hook_get(Pointer.getPeer(hook_list), hook_id), GHook.class);
	}
	@Ptr 
	protected native static long g_hook_get(@Ptr long hook_list, @org.bridj.ann.CLong long hook_id);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GHook* g_hook_find(GHookList*, gboolean, GHookFindFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:64</i><br>
	 * Original signature : <code>GHook* g_hook_find(GHookList*, gboolean, GHookFindFunc, gpointer)</code> * /<br>
	 * extern GHook* g_hook_find(GHookList* hook_list, gboolean need_valids, GHookFindFunc func, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GHook* g_hook_find(GHookList*, gboolean, GHookFindFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:64</i><br>
	 * Original signature : <code>GHook* g_hook_find(GHookList*, gboolean, GHookFindFunc, gpointer)</code> * /<br>
	 * extern GHook* g_hook_find(GHookList* hook_list, gboolean need_valids, GHookFindFunc func, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GHook* g_hook_find_data(GHookList*, gboolean, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:66</i><br>
	 * Original signature : <code>GHook* g_hook_find_data(GHookList*, gboolean, gpointer)</code> * /<br>
	 * extern GHook* g_hook_find_data(GHookList* hook_list, gboolean need_valids, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GHook* g_hook_find_data(GHookList*, gboolean, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:66</i><br>
	 * Original signature : <code>GHook* g_hook_find_data(GHookList*, gboolean, gpointer)</code> * /<br>
	 * extern GHook* g_hook_find_data(GHookList* hook_list, gboolean need_valids, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GHook* g_hook_find_func(GHookList*, gboolean, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:68</i><br>
	 * Original signature : <code>GHook* g_hook_find_func(GHookList*, gboolean, gpointer)</code> * /<br>
	 * extern GHook* g_hook_find_func(GHookList* hook_list, gboolean need_valids, gpointer func);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GHook* g_hook_find_func(GHookList*, gboolean, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:68</i><br>
	 * Original signature : <code>GHook* g_hook_find_func(GHookList*, gboolean, gpointer)</code> * /<br>
	 * extern GHook* g_hook_find_func(GHookList* hook_list, gboolean need_valids, gpointer func);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GHook* g_hook_find_func_data(GHookList*, gboolean, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:70</i><br>
	 * Original signature : <code>GHook* g_hook_find_func_data(GHookList*, gboolean, gpointer, gpointer)</code> * /<br>
	 * extern GHook* g_hook_find_func_data(GHookList* hook_list, gboolean need_valids, gpointer func, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GHook* g_hook_find_func_data(GHookList*, gboolean, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:70</i><br>
	 * Original signature : <code>GHook* g_hook_find_func_data(GHookList*, gboolean, gpointer, gpointer)</code> * /<br>
	 * extern GHook* g_hook_find_func_data(GHookList* hook_list, gboolean need_valids, gpointer func, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * return the first valid hook, and increment its reference count<br>
	 * Original signature : <code>GHook* g_hook_first_valid(GHookList*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:75</i>
	 */
	public static Pointer<GHook > g_hook_first_valid(Pointer<GHookList > hook_list, GLibLibrary.gboolean may_be_in_call) {
		return Pointer.pointerToAddress(g_hook_first_valid(Pointer.getPeer(hook_list), may_be_in_call), GHook.class);
	}
	@Ptr 
	protected native static long g_hook_first_valid(@Ptr long hook_list, GLibLibrary.gboolean may_be_in_call);
	/**
	 * return the next valid hook with incremented reference count, and<br>
	 * decrement the reference count of the original hook<br>
	 * Original signature : <code>GHook* g_hook_next_valid(GHookList*, GHook*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:81</i>
	 */
	public static Pointer<GHook > g_hook_next_valid(Pointer<GHookList > hook_list, Pointer<GHook > hook, GLibLibrary.gboolean may_be_in_call) {
		return Pointer.pointerToAddress(g_hook_next_valid(Pointer.getPeer(hook_list), Pointer.getPeer(hook), may_be_in_call), GHook.class);
	}
	@Ptr 
	protected native static long g_hook_next_valid(@Ptr long hook_list, @Ptr long hook, GLibLibrary.gboolean may_be_in_call);
	/**
	 * GHookCompareFunc implementation to insert hooks sorted by their id<br>
	 * Original signature : <code>gint g_hook_compare_ids(GHook*, GHook*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:86</i>
	 */
	public static int g_hook_compare_ids(Pointer<GHook > new_hook, Pointer<GHook > sibling) {
		return g_hook_compare_ids(Pointer.getPeer(new_hook), Pointer.getPeer(sibling));
	}
	protected native static int g_hook_compare_ids(@Ptr long new_hook, @Ptr long sibling);
	/**
	 * invoke all valid hooks with the (*GHookFunc) signature.<br>
	 * Original signature : <code>void g_hook_list_invoke(GHookList*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:91</i>
	 */
	public static void g_hook_list_invoke(Pointer<GHookList > hook_list, GLibLibrary.gboolean may_recurse) {
		g_hook_list_invoke(Pointer.getPeer(hook_list), may_recurse);
	}
	protected native static void g_hook_list_invoke(@Ptr long hook_list, GLibLibrary.gboolean may_recurse);
	/**
	 * invoke all valid hooks with the (*GHookCheckFunc) signature,<br>
	 * and destroy the hook if FALSE is returned.<br>
	 * Original signature : <code>void g_hook_list_invoke_check(GHookList*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:97</i>
	 */
	public static void g_hook_list_invoke_check(Pointer<GHookList > hook_list, GLibLibrary.gboolean may_recurse) {
		g_hook_list_invoke_check(Pointer.getPeer(hook_list), may_recurse);
	}
	protected native static void g_hook_list_invoke_check(@Ptr long hook_list, GLibLibrary.gboolean may_recurse);
	/**
	 * SKIPPED:<br>
	 * invoke a marshaller on all valid hooks.<br>
	 * Original signature : <code>void g_hook_list_marshal(GHookList*, gboolean, GHookMarshaller, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:102</i><br>
	 * invoke a marshaller on all valid hooks.<br>
	 * Original signature : <code>void g_hook_list_marshal(GHookList*, gboolean, GHookMarshaller, gpointer)</code><br>
	 * /<br>
	 * extern void g_hook_list_marshal(GHookList* hook_list, gboolean may_recurse, GHookMarshaller marshaller, gpointer marshal_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * invoke a marshaller on all valid hooks.<br>
	 * Original signature : <code>void g_hook_list_marshal(GHookList*, gboolean, GHookMarshaller, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:102</i><br>
	 * invoke a marshaller on all valid hooks.<br>
	 * Original signature : <code>void g_hook_list_marshal(GHookList*, gboolean, GHookMarshaller, gpointer)</code><br>
	 * /<br>
	 * extern void g_hook_list_marshal(GHookList* hook_list, gboolean may_recurse, GHookMarshaller marshaller, gpointer marshal_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_hook_list_marshal_check(GHookList*, gboolean, GHookCheckMarshaller, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:104</i><br>
	 * Original signature : <code>void g_hook_list_marshal_check(GHookList*, gboolean, GHookCheckMarshaller, gpointer)</code> * /<br>
	 * extern void g_hook_list_marshal_check(GHookList* hook_list, gboolean may_recurse, GHookCheckMarshaller marshaller, gpointer marshal_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_hook_list_marshal_check(GHookList*, gboolean, GHookCheckMarshaller, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:104</i><br>
	 * Original signature : <code>void g_hook_list_marshal_check(GHookList*, gboolean, GHookCheckMarshaller, gpointer)</code> * /<br>
	 * extern void g_hook_list_marshal_check(GHookList* hook_list, gboolean may_recurse, GHookCheckMarshaller marshaller, gpointer marshal_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gboolean g_hostname_is_non_ascii(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghostutils.h:2</i>
	 */
	public static GLibLibrary.gboolean g_hostname_is_non_ascii(Pointer<Byte > hostname) {
		return g_hostname_is_non_ascii(Pointer.getPeer(hostname));
	}
	protected native static GLibLibrary.gboolean g_hostname_is_non_ascii(@Ptr long hostname);
	/**
	 * Original signature : <code>gboolean g_hostname_is_ascii_encoded(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghostutils.h:4</i>
	 */
	public static GLibLibrary.gboolean g_hostname_is_ascii_encoded(Pointer<Byte > hostname) {
		return g_hostname_is_ascii_encoded(Pointer.getPeer(hostname));
	}
	protected native static GLibLibrary.gboolean g_hostname_is_ascii_encoded(@Ptr long hostname);
	/**
	 * Original signature : <code>gboolean g_hostname_is_ip_address(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghostutils.h:6</i>
	 */
	public static GLibLibrary.gboolean g_hostname_is_ip_address(Pointer<Byte > hostname) {
		return g_hostname_is_ip_address(Pointer.getPeer(hostname));
	}
	protected native static GLibLibrary.gboolean g_hostname_is_ip_address(@Ptr long hostname);
	/**
	 * Original signature : <code>gchar* g_hostname_to_ascii(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghostutils.h:8</i>
	 */
	public static Pointer<Byte > g_hostname_to_ascii(Pointer<Byte > hostname) {
		return Pointer.pointerToAddress(g_hostname_to_ascii(Pointer.getPeer(hostname)), Byte.class);
	}
	@Ptr 
	protected native static long g_hostname_to_ascii(@Ptr long hostname);
	/**
	 * Original signature : <code>gchar* g_hostname_to_unicode(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghostutils.h:10</i>
	 */
	public static Pointer<Byte > g_hostname_to_unicode(Pointer<Byte > hostname) {
		return Pointer.pointerToAddress(g_hostname_to_unicode(Pointer.getPeer(hostname)), Byte.class);
	}
	@Ptr 
	protected native static long g_hostname_to_unicode(@Ptr long hostname);
	/**
	 * Original signature : <code>gint g_poll(GPollFD*, guint, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gpoll.h:58</i>
	 */
	public static int g_poll(Pointer<GPollFD > fds, int nfds, int timeout) {
		return g_poll(Pointer.getPeer(fds), nfds, timeout);
	}
	protected native static int g_poll(@Ptr long fds, int nfds, int timeout);
	/**
	 * Singly linked lists<br>
	 * Original signature : <code>GSList* g_slist_alloc()</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:10</i>
	 */
	public static Pointer<GSList > g_slist_alloc() {
		return Pointer.pointerToAddress(g_slist_alloc$2(), GSList.class);
	}
	@Ptr 
	protected native static long g_slist_alloc$2();
	/**
	 * Original signature : <code>void g_slist_free(GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:12</i>
	 */
	public static void g_slist_free(Pointer<GSList > list) {
		g_slist_free(Pointer.getPeer(list));
	}
	protected native static void g_slist_free(@Ptr long list);
	/**
	 * Original signature : <code>void g_slist_free_1(GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:14</i>
	 */
	public static void g_slist_free_1(Pointer<GSList > list) {
		g_slist_free_1(Pointer.getPeer(list));
	}
	protected native static void g_slist_free_1(@Ptr long list);
	/**
	 * Original signature : <code>void g_slist_free_full(GSList*, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:16</i>
	 */
	public static void g_slist_free_full(Pointer<GSList > list, Pointer<GLibLibrary.GDestroyNotify > free_func) {
		g_slist_free_full(Pointer.getPeer(list), Pointer.getPeer(free_func));
	}
	protected native static void g_slist_free_full(@Ptr long list, @Ptr long free_func);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_append(GSList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:18</i><br>
	 * Original signature : <code>GSList* g_slist_append(GSList*, gpointer)</code> * /<br>
	 * extern GSList* g_slist_append(GSList* list, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_append(GSList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:18</i><br>
	 * Original signature : <code>GSList* g_slist_append(GSList*, gpointer)</code> * /<br>
	 * extern GSList* g_slist_append(GSList* list, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_prepend(GSList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:20</i><br>
	 * Original signature : <code>GSList* g_slist_prepend(GSList*, gpointer)</code> * /<br>
	 * extern GSList* g_slist_prepend(GSList* list, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_prepend(GSList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:20</i><br>
	 * Original signature : <code>GSList* g_slist_prepend(GSList*, gpointer)</code> * /<br>
	 * extern GSList* g_slist_prepend(GSList* list, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_insert(GSList*, gpointer, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:22</i><br>
	 * Original signature : <code>GSList* g_slist_insert(GSList*, gpointer, gint)</code> * /<br>
	 * extern GSList* g_slist_insert(GSList* list, gpointer data, gint position);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_insert(GSList*, gpointer, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:22</i><br>
	 * Original signature : <code>GSList* g_slist_insert(GSList*, gpointer, gint)</code> * /<br>
	 * extern GSList* g_slist_insert(GSList* list, gpointer data, gint position);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_insert_sorted(GSList*, gpointer, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:24</i><br>
	 * Original signature : <code>GSList* g_slist_insert_sorted(GSList*, gpointer, GCompareFunc)</code> * /<br>
	 * extern GSList* g_slist_insert_sorted(GSList* list, gpointer data, GCompareFunc func);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_insert_sorted(GSList*, gpointer, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:24</i><br>
	 * Original signature : <code>GSList* g_slist_insert_sorted(GSList*, gpointer, GCompareFunc)</code> * /<br>
	 * extern GSList* g_slist_insert_sorted(GSList* list, gpointer data, GCompareFunc func);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_insert_sorted_with_data(GSList*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:26</i><br>
	 * Original signature : <code>GSList* g_slist_insert_sorted_with_data(GSList*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GSList* g_slist_insert_sorted_with_data(GSList* list, gpointer data, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_insert_sorted_with_data(GSList*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:26</i><br>
	 * Original signature : <code>GSList* g_slist_insert_sorted_with_data(GSList*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GSList* g_slist_insert_sorted_with_data(GSList* list, gpointer data, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_insert_before(GSList*, GSList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:28</i><br>
	 * Original signature : <code>GSList* g_slist_insert_before(GSList*, GSList*, gpointer)</code> * /<br>
	 * extern GSList* g_slist_insert_before(GSList* slist, GSList* sibling, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_insert_before(GSList*, GSList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:28</i><br>
	 * Original signature : <code>GSList* g_slist_insert_before(GSList*, GSList*, gpointer)</code> * /<br>
	 * extern GSList* g_slist_insert_before(GSList* slist, GSList* sibling, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GSList* g_slist_concat(GSList*, GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:30</i>
	 */
	public static Pointer<GSList > g_slist_concat(Pointer<GSList > list1, Pointer<GSList > list2) {
		return Pointer.pointerToAddress(g_slist_concat(Pointer.getPeer(list1), Pointer.getPeer(list2)), GSList.class);
	}
	@Ptr 
	protected native static long g_slist_concat(@Ptr long list1, @Ptr long list2);
	/**
	 * Original signature : <code>GSList* g_slist_remove(GSList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:32</i>
	 */
	public static Pointer<GSList > g_slist_remove(Pointer<GSList > list, Pointer<? > data) {
		return Pointer.pointerToAddress(g_slist_remove(Pointer.getPeer(list), Pointer.getPeer(data)), GSList.class);
	}
	@Ptr 
	protected native static long g_slist_remove(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GSList* g_slist_remove_all(GSList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:34</i>
	 */
	public static Pointer<GSList > g_slist_remove_all(Pointer<GSList > list, Pointer<? > data) {
		return Pointer.pointerToAddress(g_slist_remove_all(Pointer.getPeer(list), Pointer.getPeer(data)), GSList.class);
	}
	@Ptr 
	protected native static long g_slist_remove_all(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GSList* g_slist_remove_link(GSList*, GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:36</i>
	 */
	public static Pointer<GSList > g_slist_remove_link(Pointer<GSList > list, Pointer<GSList > link_) {
		return Pointer.pointerToAddress(g_slist_remove_link(Pointer.getPeer(list), Pointer.getPeer(link_)), GSList.class);
	}
	@Ptr 
	protected native static long g_slist_remove_link(@Ptr long list, @Ptr long link_);
	/**
	 * Original signature : <code>GSList* g_slist_delete_link(GSList*, GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:38</i>
	 */
	public static Pointer<GSList > g_slist_delete_link(Pointer<GSList > list, Pointer<GSList > link_) {
		return Pointer.pointerToAddress(g_slist_delete_link(Pointer.getPeer(list), Pointer.getPeer(link_)), GSList.class);
	}
	@Ptr 
	protected native static long g_slist_delete_link(@Ptr long list, @Ptr long link_);
	/**
	 * Original signature : <code>GSList* g_slist_reverse(GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:40</i>
	 */
	public static Pointer<GSList > g_slist_reverse(Pointer<GSList > list) {
		return Pointer.pointerToAddress(g_slist_reverse(Pointer.getPeer(list)), GSList.class);
	}
	@Ptr 
	protected native static long g_slist_reverse(@Ptr long list);
	/**
	 * Original signature : <code>GSList* g_slist_copy(GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:42</i>
	 */
	public static Pointer<GSList > g_slist_copy(Pointer<GSList > list) {
		return Pointer.pointerToAddress(g_slist_copy(Pointer.getPeer(list)), GSList.class);
	}
	@Ptr 
	protected native static long g_slist_copy(@Ptr long list);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_copy_deep(GSList*, GCopyFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:44</i><br>
	 * Original signature : <code>GSList* g_slist_copy_deep(GSList*, GCopyFunc, gpointer)</code> * /<br>
	 * extern GSList* g_slist_copy_deep(GSList* list, GCopyFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_copy_deep(GSList*, GCopyFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:44</i><br>
	 * Original signature : <code>GSList* g_slist_copy_deep(GSList*, GCopyFunc, gpointer)</code> * /<br>
	 * extern GSList* g_slist_copy_deep(GSList* list, GCopyFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GSList* g_slist_nth(GSList*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:46</i>
	 */
	public static Pointer<GSList > g_slist_nth(Pointer<GSList > list, int n) {
		return Pointer.pointerToAddress(g_slist_nth(Pointer.getPeer(list), n), GSList.class);
	}
	@Ptr 
	protected native static long g_slist_nth(@Ptr long list, int n);
	/**
	 * Original signature : <code>GSList* g_slist_find(GSList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:48</i>
	 */
	public static Pointer<GSList > g_slist_find(Pointer<GSList > list, Pointer<? > data) {
		return Pointer.pointerToAddress(g_slist_find(Pointer.getPeer(list), Pointer.getPeer(data)), GSList.class);
	}
	@Ptr 
	protected native static long g_slist_find(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GSList* g_slist_find_custom(GSList*, gconstpointer, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:50</i>
	 */
	public static Pointer<GSList > g_slist_find_custom(Pointer<GSList > list, Pointer<? > data, Pointer<GLibLibrary.GCompareFunc > func) {
		return Pointer.pointerToAddress(g_slist_find_custom(Pointer.getPeer(list), Pointer.getPeer(data), Pointer.getPeer(func)), GSList.class);
	}
	@Ptr 
	protected native static long g_slist_find_custom(@Ptr long list, @Ptr long data, @Ptr long func);
	/**
	 * Original signature : <code>gint g_slist_position(GSList*, GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:52</i>
	 */
	public static int g_slist_position(Pointer<GSList > list, Pointer<GSList > llink) {
		return g_slist_position(Pointer.getPeer(list), Pointer.getPeer(llink));
	}
	protected native static int g_slist_position(@Ptr long list, @Ptr long llink);
	/**
	 * Original signature : <code>gint g_slist_index(GSList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:54</i>
	 */
	public static int g_slist_index(Pointer<GSList > list, Pointer<? > data) {
		return g_slist_index(Pointer.getPeer(list), Pointer.getPeer(data));
	}
	protected native static int g_slist_index(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GSList* g_slist_last(GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:56</i>
	 */
	public static Pointer<GSList > g_slist_last(Pointer<GSList > list) {
		return Pointer.pointerToAddress(g_slist_last(Pointer.getPeer(list)), GSList.class);
	}
	@Ptr 
	protected native static long g_slist_last(@Ptr long list);
	/**
	 * Original signature : <code>guint g_slist_length(GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:58</i>
	 */
	public static int g_slist_length(Pointer<GSList > list) {
		return g_slist_length(Pointer.getPeer(list));
	}
	protected native static int g_slist_length(@Ptr long list);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_slist_foreach(GSList*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:60</i><br>
	 * Original signature : <code>void g_slist_foreach(GSList*, GFunc, gpointer)</code> * /<br>
	 * extern void g_slist_foreach(GSList* list, GFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_slist_foreach(GSList*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:60</i><br>
	 * Original signature : <code>void g_slist_foreach(GSList*, GFunc, gpointer)</code> * /<br>
	 * extern void g_slist_foreach(GSList* list, GFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GSList* g_slist_sort(GSList*, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:62</i>
	 */
	public static Pointer<GSList > g_slist_sort(Pointer<GSList > list, Pointer<GLibLibrary.GCompareFunc > compare_func) {
		return Pointer.pointerToAddress(g_slist_sort(Pointer.getPeer(list), Pointer.getPeer(compare_func)), GSList.class);
	}
	@Ptr 
	protected native static long g_slist_sort(@Ptr long list, @Ptr long compare_func);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_sort_with_data(GSList*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:64</i><br>
	 * Original signature : <code>GSList* g_slist_sort_with_data(GSList*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GSList* g_slist_sort_with_data(GSList* list, GCompareDataFunc compare_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSList* g_slist_sort_with_data(GSList*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:64</i><br>
	 * Original signature : <code>GSList* g_slist_sort_with_data(GSList*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GSList* g_slist_sort_with_data(GSList* list, GCompareDataFunc compare_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_slist_nth_data(GSList*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:66</i><br>
	 * Original signature : <code>gpointer g_slist_nth_data(GSList*, guint)</code> * /<br>
	 * extern gpointer g_slist_nth_data(GSList* list, guint n);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_slist_nth_data(GSList*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:66</i><br>
	 * Original signature : <code>gpointer g_slist_nth_data(GSList*, guint)</code> * /<br>
	 * extern gpointer g_slist_nth_data(GSList* list, guint n);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GMainContext* g_main_context_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:149</i>
	 */
	public static Pointer<GLibLibrary.GMainContext > g_main_context_new() {
		return Pointer.pointerToAddress(g_main_context_new$2(), GLibLibrary.GMainContext.class);
	}
	@Ptr 
	protected native static long g_main_context_new$2();
	/**
	 * Original signature : <code>GMainContext* g_main_context_ref(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:151</i>
	 */
	public static Pointer<GLibLibrary.GMainContext > g_main_context_ref(Pointer<GLibLibrary.GMainContext > context) {
		return Pointer.pointerToAddress(g_main_context_ref(Pointer.getPeer(context)), GLibLibrary.GMainContext.class);
	}
	@Ptr 
	protected native static long g_main_context_ref(@Ptr long context);
	/**
	 * Original signature : <code>void g_main_context_unref(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:153</i>
	 */
	public static void g_main_context_unref(Pointer<GLibLibrary.GMainContext > context) {
		g_main_context_unref(Pointer.getPeer(context));
	}
	protected native static void g_main_context_unref(@Ptr long context);
	/**
	 * Original signature : <code>GMainContext* g_main_context_default()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:155</i>
	 */
	public static Pointer<GLibLibrary.GMainContext > g_main_context_default() {
		return Pointer.pointerToAddress(g_main_context_default$2(), GLibLibrary.GMainContext.class);
	}
	@Ptr 
	protected native static long g_main_context_default$2();
	/**
	 * Original signature : <code>gboolean g_main_context_iteration(GMainContext*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:157</i>
	 */
	public static GLibLibrary.gboolean g_main_context_iteration(Pointer<GLibLibrary.GMainContext > context, GLibLibrary.gboolean may_block) {
		return g_main_context_iteration(Pointer.getPeer(context), may_block);
	}
	protected native static GLibLibrary.gboolean g_main_context_iteration(@Ptr long context, GLibLibrary.gboolean may_block);
	/**
	 * Original signature : <code>gboolean g_main_context_pending(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:159</i>
	 */
	public static GLibLibrary.gboolean g_main_context_pending(Pointer<GLibLibrary.GMainContext > context) {
		return g_main_context_pending(Pointer.getPeer(context));
	}
	protected native static GLibLibrary.gboolean g_main_context_pending(@Ptr long context);
	/**
	 * For implementation of legacy interfaces<br>
	 * Original signature : <code>GSource* g_main_context_find_source_by_id(GMainContext*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:164</i>
	 */
	public static Pointer<GSource > g_main_context_find_source_by_id(Pointer<GLibLibrary.GMainContext > context, int source_id) {
		return Pointer.pointerToAddress(g_main_context_find_source_by_id(Pointer.getPeer(context), source_id), GSource.class);
	}
	@Ptr 
	protected native static long g_main_context_find_source_by_id(@Ptr long context, int source_id);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSource* g_main_context_find_source_by_user_data(GMainContext*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:166</i><br>
	 * Original signature : <code>GSource* g_main_context_find_source_by_user_data(GMainContext*, gpointer)</code> * /<br>
	 * extern GSource* g_main_context_find_source_by_user_data(GMainContext* context, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSource* g_main_context_find_source_by_user_data(GMainContext*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:166</i><br>
	 * Original signature : <code>GSource* g_main_context_find_source_by_user_data(GMainContext*, gpointer)</code> * /<br>
	 * extern GSource* g_main_context_find_source_by_user_data(GMainContext* context, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSource* g_main_context_find_source_by_funcs_user_data(GMainContext*, GSourceFuncs*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:168</i><br>
	 * Original signature : <code>GSource* g_main_context_find_source_by_funcs_user_data(GMainContext*, GSourceFuncs*, gpointer)</code> * /<br>
	 * extern GSource* g_main_context_find_source_by_funcs_user_data(GMainContext* context, GSourceFuncs* funcs, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSource* g_main_context_find_source_by_funcs_user_data(GMainContext*, GSourceFuncs*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:168</i><br>
	 * Original signature : <code>GSource* g_main_context_find_source_by_funcs_user_data(GMainContext*, GSourceFuncs*, gpointer)</code> * /<br>
	 * extern GSource* g_main_context_find_source_by_funcs_user_data(GMainContext* context, GSourceFuncs* funcs, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Low level functions for implementing custom main loops.<br>
	 * Original signature : <code>void g_main_context_wakeup(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:173</i>
	 */
	public static void g_main_context_wakeup(Pointer<GLibLibrary.GMainContext > context) {
		g_main_context_wakeup(Pointer.getPeer(context));
	}
	protected native static void g_main_context_wakeup(@Ptr long context);
	/**
	 * Original signature : <code>gboolean g_main_context_acquire(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:175</i>
	 */
	public static GLibLibrary.gboolean g_main_context_acquire(Pointer<GLibLibrary.GMainContext > context) {
		return g_main_context_acquire(Pointer.getPeer(context));
	}
	protected native static GLibLibrary.gboolean g_main_context_acquire(@Ptr long context);
	/**
	 * Original signature : <code>void g_main_context_release(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:177</i>
	 */
	public static void g_main_context_release(Pointer<GLibLibrary.GMainContext > context) {
		g_main_context_release(Pointer.getPeer(context));
	}
	protected native static void g_main_context_release(@Ptr long context);
	/**
	 * Original signature : <code>gboolean g_main_context_is_owner(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:179</i>
	 */
	public static GLibLibrary.gboolean g_main_context_is_owner(Pointer<GLibLibrary.GMainContext > context) {
		return g_main_context_is_owner(Pointer.getPeer(context));
	}
	protected native static GLibLibrary.gboolean g_main_context_is_owner(@Ptr long context);
	/**
	 * Original signature : <code>gboolean g_main_context_wait(GMainContext*, GCond*, GMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:181</i>
	 */
	public static GLibLibrary.gboolean g_main_context_wait(Pointer<GLibLibrary.GMainContext > context, Pointer<GCond > cond, Pointer<GMutex > mutex) {
		return g_main_context_wait(Pointer.getPeer(context), Pointer.getPeer(cond), Pointer.getPeer(mutex));
	}
	protected native static GLibLibrary.gboolean g_main_context_wait(@Ptr long context, @Ptr long cond, @Ptr long mutex);
	/**
	 * Original signature : <code>gboolean g_main_context_prepare(GMainContext*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:183</i>
	 */
	public static GLibLibrary.gboolean g_main_context_prepare(Pointer<GLibLibrary.GMainContext > context, Pointer<Integer > priority) {
		return g_main_context_prepare(Pointer.getPeer(context), Pointer.getPeer(priority));
	}
	protected native static GLibLibrary.gboolean g_main_context_prepare(@Ptr long context, @Ptr long priority);
	/**
	 * Original signature : <code>gint g_main_context_query(GMainContext*, gint, gint*, GPollFD*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:185</i>
	 */
	public static int g_main_context_query(Pointer<GLibLibrary.GMainContext > context, int max_priority, Pointer<Integer > timeout_, Pointer<GPollFD > fds, int n_fds) {
		return g_main_context_query(Pointer.getPeer(context), max_priority, Pointer.getPeer(timeout_), Pointer.getPeer(fds), n_fds);
	}
	protected native static int g_main_context_query(@Ptr long context, int max_priority, @Ptr long timeout_, @Ptr long fds, int n_fds);
	/**
	 * Original signature : <code>gint g_main_context_check(GMainContext*, gint, GPollFD*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:187</i>
	 */
	public static int g_main_context_check(Pointer<GLibLibrary.GMainContext > context, int max_priority, Pointer<GPollFD > fds, int n_fds) {
		return g_main_context_check(Pointer.getPeer(context), max_priority, Pointer.getPeer(fds), n_fds);
	}
	protected native static int g_main_context_check(@Ptr long context, int max_priority, @Ptr long fds, int n_fds);
	/**
	 * Original signature : <code>void g_main_context_dispatch(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:189</i>
	 */
	public static void g_main_context_dispatch(Pointer<GLibLibrary.GMainContext > context) {
		g_main_context_dispatch(Pointer.getPeer(context));
	}
	protected native static void g_main_context_dispatch(@Ptr long context);
	/**
	 * Original signature : <code>void g_main_context_set_poll_func(GMainContext*, GPollFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:191</i>
	 */
	public static void g_main_context_set_poll_func(Pointer<GLibLibrary.GMainContext > context, Pointer<GLibLibrary.GPollFunc > func) {
		g_main_context_set_poll_func(Pointer.getPeer(context), Pointer.getPeer(func));
	}
	protected native static void g_main_context_set_poll_func(@Ptr long context, @Ptr long func);
	/**
	 * Original signature : <code>GPollFunc g_main_context_get_poll_func(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:193</i>
	 */
	public static Pointer<GLibLibrary.GPollFunc > g_main_context_get_poll_func(Pointer<GLibLibrary.GMainContext > context) {
		return Pointer.pointerToAddress(g_main_context_get_poll_func(Pointer.getPeer(context)), GLibLibrary.GPollFunc.class);
	}
	@Ptr 
	protected native static long g_main_context_get_poll_func(@Ptr long context);
	/**
	 * Low level functions for use by source implementations<br>
	 * Original signature : <code>void g_main_context_add_poll(GMainContext*, GPollFD*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:198</i>
	 */
	public static void g_main_context_add_poll(Pointer<GLibLibrary.GMainContext > context, Pointer<GPollFD > fd, int priority) {
		g_main_context_add_poll(Pointer.getPeer(context), Pointer.getPeer(fd), priority);
	}
	protected native static void g_main_context_add_poll(@Ptr long context, @Ptr long fd, int priority);
	/**
	 * Original signature : <code>void g_main_context_remove_poll(GMainContext*, GPollFD*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:200</i>
	 */
	public static void g_main_context_remove_poll(Pointer<GLibLibrary.GMainContext > context, Pointer<GPollFD > fd) {
		g_main_context_remove_poll(Pointer.getPeer(context), Pointer.getPeer(fd));
	}
	protected native static void g_main_context_remove_poll(@Ptr long context, @Ptr long fd);
	/**
	 * Original signature : <code>gint g_main_depth()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:202</i>
	 */
	public static native int g_main_depth();
	/**
	 * Original signature : <code>GSource* g_main_current_source()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:204</i>
	 */
	public static Pointer<GSource > g_main_current_source() {
		return Pointer.pointerToAddress(g_main_current_source$2(), GSource.class);
	}
	@Ptr 
	protected native static long g_main_current_source$2();
	/**
	 * GMainContexts for other threads<br>
	 * Original signature : <code>void g_main_context_push_thread_default(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:209</i>
	 */
	public static void g_main_context_push_thread_default(Pointer<GLibLibrary.GMainContext > context) {
		g_main_context_push_thread_default(Pointer.getPeer(context));
	}
	protected native static void g_main_context_push_thread_default(@Ptr long context);
	/**
	 * Original signature : <code>void g_main_context_pop_thread_default(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:211</i>
	 */
	public static void g_main_context_pop_thread_default(Pointer<GLibLibrary.GMainContext > context) {
		g_main_context_pop_thread_default(Pointer.getPeer(context));
	}
	protected native static void g_main_context_pop_thread_default(@Ptr long context);
	/**
	 * Original signature : <code>GMainContext* g_main_context_get_thread_default()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:213</i>
	 */
	public static Pointer<GLibLibrary.GMainContext > g_main_context_get_thread_default() {
		return Pointer.pointerToAddress(g_main_context_get_thread_default$2(), GLibLibrary.GMainContext.class);
	}
	@Ptr 
	protected native static long g_main_context_get_thread_default$2();
	/**
	 * Original signature : <code>GMainContext* g_main_context_ref_thread_default()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:215</i>
	 */
	public static Pointer<GLibLibrary.GMainContext > g_main_context_ref_thread_default() {
		return Pointer.pointerToAddress(g_main_context_ref_thread_default$2(), GLibLibrary.GMainContext.class);
	}
	@Ptr 
	protected native static long g_main_context_ref_thread_default$2();
	/**
	 * Original signature : <code>GMainLoop* g_main_loop_new(GMainContext*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:217</i>
	 */
	public static Pointer<GLibLibrary.GMainLoop > g_main_loop_new(Pointer<GLibLibrary.GMainContext > context, GLibLibrary.gboolean is_running) {
		return Pointer.pointerToAddress(g_main_loop_new(Pointer.getPeer(context), is_running), GLibLibrary.GMainLoop.class);
	}
	@Ptr 
	protected native static long g_main_loop_new(@Ptr long context, GLibLibrary.gboolean is_running);
	/**
	 * Original signature : <code>void g_main_loop_run(GMainLoop*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:219</i>
	 */
	public static void g_main_loop_run(Pointer<GLibLibrary.GMainLoop > loop) {
		g_main_loop_run(Pointer.getPeer(loop));
	}
	protected native static void g_main_loop_run(@Ptr long loop);
	/**
	 * Original signature : <code>void g_main_loop_quit(GMainLoop*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:221</i>
	 */
	public static void g_main_loop_quit(Pointer<GLibLibrary.GMainLoop > loop) {
		g_main_loop_quit(Pointer.getPeer(loop));
	}
	protected native static void g_main_loop_quit(@Ptr long loop);
	/**
	 * Original signature : <code>GMainLoop* g_main_loop_ref(GMainLoop*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:223</i>
	 */
	public static Pointer<GLibLibrary.GMainLoop > g_main_loop_ref(Pointer<GLibLibrary.GMainLoop > loop) {
		return Pointer.pointerToAddress(g_main_loop_ref(Pointer.getPeer(loop)), GLibLibrary.GMainLoop.class);
	}
	@Ptr 
	protected native static long g_main_loop_ref(@Ptr long loop);
	/**
	 * Original signature : <code>void g_main_loop_unref(GMainLoop*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:225</i>
	 */
	public static void g_main_loop_unref(Pointer<GLibLibrary.GMainLoop > loop) {
		g_main_loop_unref(Pointer.getPeer(loop));
	}
	protected native static void g_main_loop_unref(@Ptr long loop);
	/**
	 * Original signature : <code>gboolean g_main_loop_is_running(GMainLoop*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:227</i>
	 */
	public static GLibLibrary.gboolean g_main_loop_is_running(Pointer<GLibLibrary.GMainLoop > loop) {
		return g_main_loop_is_running(Pointer.getPeer(loop));
	}
	protected native static GLibLibrary.gboolean g_main_loop_is_running(@Ptr long loop);
	/**
	 * Original signature : <code>GMainContext* g_main_loop_get_context(GMainLoop*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:229</i>
	 */
	public static Pointer<GLibLibrary.GMainContext > g_main_loop_get_context(Pointer<GLibLibrary.GMainLoop > loop) {
		return Pointer.pointerToAddress(g_main_loop_get_context(Pointer.getPeer(loop)), GLibLibrary.GMainContext.class);
	}
	@Ptr 
	protected native static long g_main_loop_get_context(@Ptr long loop);
	/**
	 * Original signature : <code>GSource* g_source_new(GSourceFuncs*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:231</i>
	 */
	public static Pointer<GSource > g_source_new(Pointer<GSourceFuncs > source_funcs, int struct_size) {
		return Pointer.pointerToAddress(g_source_new(Pointer.getPeer(source_funcs), struct_size), GSource.class);
	}
	@Ptr 
	protected native static long g_source_new(@Ptr long source_funcs, int struct_size);
	/**
	 * Original signature : <code>GSource* g_source_ref(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:233</i>
	 */
	public static Pointer<GSource > g_source_ref(Pointer<GSource > source) {
		return Pointer.pointerToAddress(g_source_ref(Pointer.getPeer(source)), GSource.class);
	}
	@Ptr 
	protected native static long g_source_ref(@Ptr long source);
	/**
	 * Original signature : <code>void g_source_unref(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:235</i>
	 */
	public static void g_source_unref(Pointer<GSource > source) {
		g_source_unref(Pointer.getPeer(source));
	}
	protected native static void g_source_unref(@Ptr long source);
	/**
	 * Original signature : <code>guint g_source_attach(GSource*, GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:237</i>
	 */
	public static int g_source_attach(Pointer<GSource > source, Pointer<GLibLibrary.GMainContext > context) {
		return g_source_attach(Pointer.getPeer(source), Pointer.getPeer(context));
	}
	protected native static int g_source_attach(@Ptr long source, @Ptr long context);
	/**
	 * Original signature : <code>void g_source_destroy(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:239</i>
	 */
	public static void g_source_destroy(Pointer<GSource > source) {
		g_source_destroy(Pointer.getPeer(source));
	}
	protected native static void g_source_destroy(@Ptr long source);
	/**
	 * Original signature : <code>void g_source_set_priority(GSource*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:241</i>
	 */
	public static void g_source_set_priority(Pointer<GSource > source, int priority) {
		g_source_set_priority(Pointer.getPeer(source), priority);
	}
	protected native static void g_source_set_priority(@Ptr long source, int priority);
	/**
	 * Original signature : <code>gint g_source_get_priority(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:243</i>
	 */
	public static int g_source_get_priority(Pointer<GSource > source) {
		return g_source_get_priority(Pointer.getPeer(source));
	}
	protected native static int g_source_get_priority(@Ptr long source);
	/**
	 * Original signature : <code>void g_source_set_can_recurse(GSource*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:245</i>
	 */
	public static void g_source_set_can_recurse(Pointer<GSource > source, GLibLibrary.gboolean can_recurse) {
		g_source_set_can_recurse(Pointer.getPeer(source), can_recurse);
	}
	protected native static void g_source_set_can_recurse(@Ptr long source, GLibLibrary.gboolean can_recurse);
	/**
	 * Original signature : <code>gboolean g_source_get_can_recurse(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:247</i>
	 */
	public static GLibLibrary.gboolean g_source_get_can_recurse(Pointer<GSource > source) {
		return g_source_get_can_recurse(Pointer.getPeer(source));
	}
	protected native static GLibLibrary.gboolean g_source_get_can_recurse(@Ptr long source);
	/**
	 * Original signature : <code>guint g_source_get_id(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:249</i>
	 */
	public static int g_source_get_id(Pointer<GSource > source) {
		return g_source_get_id(Pointer.getPeer(source));
	}
	protected native static int g_source_get_id(@Ptr long source);
	/**
	 * Original signature : <code>GMainContext* g_source_get_context(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:251</i>
	 */
	public static Pointer<GLibLibrary.GMainContext > g_source_get_context(Pointer<GSource > source) {
		return Pointer.pointerToAddress(g_source_get_context(Pointer.getPeer(source)), GLibLibrary.GMainContext.class);
	}
	@Ptr 
	protected native static long g_source_get_context(@Ptr long source);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_source_set_callback(GSource*, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:253</i><br>
	 * Original signature : <code>void g_source_set_callback(GSource*, GSourceFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern void g_source_set_callback(GSource* source, GSourceFunc func, gpointer data, GDestroyNotify notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_source_set_callback(GSource*, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:253</i><br>
	 * Original signature : <code>void g_source_set_callback(GSource*, GSourceFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern void g_source_set_callback(GSource* source, GSourceFunc func, gpointer data, GDestroyNotify notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_source_set_funcs(GSource*, GSourceFuncs*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:255</i>
	 */
	public static void g_source_set_funcs(Pointer<GSource > source, Pointer<GSourceFuncs > funcs) {
		g_source_set_funcs(Pointer.getPeer(source), Pointer.getPeer(funcs));
	}
	protected native static void g_source_set_funcs(@Ptr long source, @Ptr long funcs);
	/**
	 * Original signature : <code>gboolean g_source_is_destroyed(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:257</i>
	 */
	public static GLibLibrary.gboolean g_source_is_destroyed(Pointer<GSource > source) {
		return g_source_is_destroyed(Pointer.getPeer(source));
	}
	protected native static GLibLibrary.gboolean g_source_is_destroyed(@Ptr long source);
	/**
	 * Original signature : <code>void g_source_set_name(GSource*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:259</i>
	 */
	public static void g_source_set_name(Pointer<GSource > source, Pointer<Byte > name) {
		g_source_set_name(Pointer.getPeer(source), Pointer.getPeer(name));
	}
	protected native static void g_source_set_name(@Ptr long source, @Ptr long name);
	/**
	 * Original signature : <code>char* g_source_get_name(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:261</i>
	 */
	public static Pointer<Byte > g_source_get_name(Pointer<GSource > source) {
		return Pointer.pointerToAddress(g_source_get_name(Pointer.getPeer(source)), Byte.class);
	}
	@Ptr 
	protected native static long g_source_get_name(@Ptr long source);
	/**
	 * Original signature : <code>void g_source_set_name_by_id(guint, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:263</i>
	 */
	public static void g_source_set_name_by_id(int tag, Pointer<Byte > name) {
		g_source_set_name_by_id(tag, Pointer.getPeer(name));
	}
	protected native static void g_source_set_name_by_id(int tag, @Ptr long name);
	/**
	 * Original signature : <code>void g_source_set_ready_time(GSource*, gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:265</i>
	 */
	public static void g_source_set_ready_time(Pointer<GSource > source, long ready_time) {
		g_source_set_ready_time(Pointer.getPeer(source), ready_time);
	}
	protected native static void g_source_set_ready_time(@Ptr long source, long ready_time);
	/**
	 * Original signature : <code>gint64 g_source_get_ready_time(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:267</i>
	 */
	public static long g_source_get_ready_time(Pointer<GSource > source) {
		return g_source_get_ready_time(Pointer.getPeer(source));
	}
	protected native static long g_source_get_ready_time(@Ptr long source);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_source_add_unix_fd(GSource*, gint, GIOCondition)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:269</i><br>
	 * Original signature : <code>gpointer g_source_add_unix_fd(GSource*, gint, GIOCondition)</code> * /<br>
	 * extern gpointer g_source_add_unix_fd(GSource* source, gint fd, GIOCondition events);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_source_add_unix_fd(GSource*, gint, GIOCondition)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:269</i><br>
	 * Original signature : <code>gpointer g_source_add_unix_fd(GSource*, gint, GIOCondition)</code> * /<br>
	 * extern gpointer g_source_add_unix_fd(GSource* source, gint fd, GIOCondition events);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_source_modify_unix_fd(GSource*, gpointer, GIOCondition)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:271</i><br>
	 * Original signature : <code>void g_source_modify_unix_fd(GSource*, gpointer, GIOCondition)</code> * /<br>
	 * extern void g_source_modify_unix_fd(GSource* source, gpointer tag, GIOCondition new_events);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_source_modify_unix_fd(GSource*, gpointer, GIOCondition)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:271</i><br>
	 * Original signature : <code>void g_source_modify_unix_fd(GSource*, gpointer, GIOCondition)</code> * /<br>
	 * extern void g_source_modify_unix_fd(GSource* source, gpointer tag, GIOCondition new_events);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_source_remove_unix_fd(GSource*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:273</i><br>
	 * Original signature : <code>void g_source_remove_unix_fd(GSource*, gpointer)</code> * /<br>
	 * extern void g_source_remove_unix_fd(GSource* source, gpointer tag);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_source_remove_unix_fd(GSource*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:273</i><br>
	 * Original signature : <code>void g_source_remove_unix_fd(GSource*, gpointer)</code> * /<br>
	 * extern void g_source_remove_unix_fd(GSource* source, gpointer tag);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GIOCondition g_source_query_unix_fd(GSource*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:275</i><br>
	 * Original signature : <code>GIOCondition g_source_query_unix_fd(GSource*, gpointer)</code> * /<br>
	 * extern GIOCondition g_source_query_unix_fd(GSource* source, gpointer tag);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GIOCondition g_source_query_unix_fd(GSource*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:275</i><br>
	 * Original signature : <code>GIOCondition g_source_query_unix_fd(GSource*, gpointer)</code> * /<br>
	 * extern GIOCondition g_source_query_unix_fd(GSource* source, gpointer tag);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Used to implement g_source_connect_closure and internally<br>
	 * Original signature : <code>void g_source_set_callback_indirect(GSource*, gpointer, GSourceCallbackFuncs*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:280</i><br>
	 * Used to implement g_source_connect_closure and internally<br>
	 * Original signature : <code>void g_source_set_callback_indirect(GSource*, gpointer, GSourceCallbackFuncs*)</code><br>
	 * /<br>
	 * extern void g_source_set_callback_indirect(GSource* source, gpointer callback_data, GSourceCallbackFuncs* callback_funcs);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Used to implement g_source_connect_closure and internally<br>
	 * Original signature : <code>void g_source_set_callback_indirect(GSource*, gpointer, GSourceCallbackFuncs*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:280</i><br>
	 * Used to implement g_source_connect_closure and internally<br>
	 * Original signature : <code>void g_source_set_callback_indirect(GSource*, gpointer, GSourceCallbackFuncs*)</code><br>
	 * /<br>
	 * extern void g_source_set_callback_indirect(GSource* source, gpointer callback_data, GSourceCallbackFuncs* callback_funcs);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_source_add_poll(GSource*, GPollFD*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:282</i>
	 */
	public static void g_source_add_poll(Pointer<GSource > source, Pointer<GPollFD > fd) {
		g_source_add_poll(Pointer.getPeer(source), Pointer.getPeer(fd));
	}
	protected native static void g_source_add_poll(@Ptr long source, @Ptr long fd);
	/**
	 * Original signature : <code>void g_source_remove_poll(GSource*, GPollFD*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:284</i>
	 */
	public static void g_source_remove_poll(Pointer<GSource > source, Pointer<GPollFD > fd) {
		g_source_remove_poll(Pointer.getPeer(source), Pointer.getPeer(fd));
	}
	protected native static void g_source_remove_poll(@Ptr long source, @Ptr long fd);
	/**
	 * Original signature : <code>void g_source_add_child_source(GSource*, GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:286</i>
	 */
	public static void g_source_add_child_source(Pointer<GSource > source, Pointer<GSource > child_source) {
		g_source_add_child_source(Pointer.getPeer(source), Pointer.getPeer(child_source));
	}
	protected native static void g_source_add_child_source(@Ptr long source, @Ptr long child_source);
	/**
	 * Original signature : <code>void g_source_remove_child_source(GSource*, GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:288</i>
	 */
	public static void g_source_remove_child_source(Pointer<GSource > source, Pointer<GSource > child_source) {
		g_source_remove_child_source(Pointer.getPeer(source), Pointer.getPeer(child_source));
	}
	protected native static void g_source_remove_child_source(@Ptr long source, @Ptr long child_source);
	/**
	 * Original signature : <code>void g_source_get_current_time(GSource*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:290</i>
	 */
	public static void g_source_get_current_time(Pointer<GSource > source, Pointer<GTimeVal > timeval) {
		g_source_get_current_time(Pointer.getPeer(source), Pointer.getPeer(timeval));
	}
	protected native static void g_source_get_current_time(@Ptr long source, @Ptr long timeval);
	/**
	 * Original signature : <code>gint64 g_source_get_time(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:292</i>
	 */
	public static long g_source_get_time(Pointer<GSource > source) {
		return g_source_get_time(Pointer.getPeer(source));
	}
	protected native static long g_source_get_time(@Ptr long source);
	/**
	 * Specific source types<br>
	 * Original signature : <code>GSource* g_idle_source_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:297</i>
	 */
	public static Pointer<GSource > g_idle_source_new() {
		return Pointer.pointerToAddress(g_idle_source_new$2(), GSource.class);
	}
	@Ptr 
	protected native static long g_idle_source_new$2();
	/**
	 * Original signature : <code>GSource* g_child_watch_source_new(GPid)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:299</i>
	 */
	public static Pointer<GSource > g_child_watch_source_new(int pid) {
		return Pointer.pointerToAddress(g_child_watch_source_new$2(pid), GSource.class);
	}
	@Ptr 
	protected native static long g_child_watch_source_new$2(int pid);
	/**
	 * Original signature : <code>GSource* g_timeout_source_new(guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:301</i>
	 */
	public static Pointer<GSource > g_timeout_source_new(int interval) {
		return Pointer.pointerToAddress(g_timeout_source_new$2(interval), GSource.class);
	}
	@Ptr 
	protected native static long g_timeout_source_new$2(int interval);
	/**
	 * Original signature : <code>GSource* g_timeout_source_new_seconds(guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:303</i>
	 */
	public static Pointer<GSource > g_timeout_source_new_seconds(int interval) {
		return Pointer.pointerToAddress(g_timeout_source_new_seconds$2(interval), GSource.class);
	}
	@Ptr 
	protected native static long g_timeout_source_new_seconds$2(int interval);
	/**
	 * Miscellaneous functions<br>
	 * Original signature : <code>void g_get_current_time(GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:308</i>
	 */
	public static void g_get_current_time(Pointer<GTimeVal > result) {
		g_get_current_time(Pointer.getPeer(result));
	}
	protected native static void g_get_current_time(@Ptr long result);
	/**
	 * Original signature : <code>gint64 g_get_monotonic_time()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:310</i>
	 */
	public static native long g_get_monotonic_time();
	/**
	 * Original signature : <code>gint64 g_get_real_time()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:312</i>
	 */
	public static native long g_get_real_time();
	/**
	 * Source manipulation by ID<br>
	 * Original signature : <code>gboolean g_source_remove(guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:317</i>
	 */
	public static native GLibLibrary.gboolean g_source_remove(int tag);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_source_remove_by_user_data(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:319</i><br>
	 * Original signature : <code>gboolean g_source_remove_by_user_data(gpointer)</code> * /<br>
	 * extern gboolean g_source_remove_by_user_data(gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_source_remove_by_user_data(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:319</i><br>
	 * Original signature : <code>gboolean g_source_remove_by_user_data(gpointer)</code> * /<br>
	 * extern gboolean g_source_remove_by_user_data(gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_source_remove_by_funcs_user_data(GSourceFuncs*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:321</i><br>
	 * Original signature : <code>gboolean g_source_remove_by_funcs_user_data(GSourceFuncs*, gpointer)</code> * /<br>
	 * extern gboolean g_source_remove_by_funcs_user_data(GSourceFuncs* funcs, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_source_remove_by_funcs_user_data(GSourceFuncs*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:321</i><br>
	 * Original signature : <code>gboolean g_source_remove_by_funcs_user_data(GSourceFuncs*, gpointer)</code> * /<br>
	 * extern gboolean g_source_remove_by_funcs_user_data(GSourceFuncs* funcs, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Idles, child watchers and timeouts<br>
	 * Original signature : <code>guint g_timeout_add_full(gint, guint, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:326</i><br>
	 * Idles, child watchers and timeouts<br>
	 * Original signature : <code>guint g_timeout_add_full(gint, guint, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * /<br>
	 * extern guint g_timeout_add_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Idles, child watchers and timeouts<br>
	 * Original signature : <code>guint g_timeout_add_full(gint, guint, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:326</i><br>
	 * Idles, child watchers and timeouts<br>
	 * Original signature : <code>guint g_timeout_add_full(gint, guint, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * /<br>
	 * extern guint g_timeout_add_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_timeout_add(guint, GSourceFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:328</i><br>
	 * Original signature : <code>guint g_timeout_add(guint, GSourceFunc, gpointer)</code> * /<br>
	 * extern guint g_timeout_add(guint interval, GSourceFunc function, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_timeout_add(guint, GSourceFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:328</i><br>
	 * Original signature : <code>guint g_timeout_add(guint, GSourceFunc, gpointer)</code> * /<br>
	 * extern guint g_timeout_add(guint interval, GSourceFunc function, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_timeout_add_seconds_full(gint, guint, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:330</i><br>
	 * Original signature : <code>guint g_timeout_add_seconds_full(gint, guint, GSourceFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern guint g_timeout_add_seconds_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_timeout_add_seconds_full(gint, guint, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:330</i><br>
	 * Original signature : <code>guint g_timeout_add_seconds_full(gint, guint, GSourceFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern guint g_timeout_add_seconds_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_timeout_add_seconds(guint, GSourceFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:332</i><br>
	 * Original signature : <code>guint g_timeout_add_seconds(guint, GSourceFunc, gpointer)</code> * /<br>
	 * extern guint g_timeout_add_seconds(guint interval, GSourceFunc function, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_timeout_add_seconds(guint, GSourceFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:332</i><br>
	 * Original signature : <code>guint g_timeout_add_seconds(guint, GSourceFunc, gpointer)</code> * /<br>
	 * extern guint g_timeout_add_seconds(guint interval, GSourceFunc function, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_child_watch_add_full(gint, GPid, GChildWatchFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:334</i><br>
	 * Original signature : <code>guint g_child_watch_add_full(gint, GPid, GChildWatchFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern guint g_child_watch_add_full(gint priority, GPid pid, GChildWatchFunc function, gpointer data, GDestroyNotify notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_child_watch_add_full(gint, GPid, GChildWatchFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:334</i><br>
	 * Original signature : <code>guint g_child_watch_add_full(gint, GPid, GChildWatchFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern guint g_child_watch_add_full(gint priority, GPid pid, GChildWatchFunc function, gpointer data, GDestroyNotify notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_child_watch_add(GPid, GChildWatchFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:336</i><br>
	 * Original signature : <code>guint g_child_watch_add(GPid, GChildWatchFunc, gpointer)</code> * /<br>
	 * extern guint g_child_watch_add(GPid pid, GChildWatchFunc function, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_child_watch_add(GPid, GChildWatchFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:336</i><br>
	 * Original signature : <code>guint g_child_watch_add(GPid, GChildWatchFunc, gpointer)</code> * /<br>
	 * extern guint g_child_watch_add(GPid pid, GChildWatchFunc function, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_idle_add(GSourceFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:338</i><br>
	 * Original signature : <code>guint g_idle_add(GSourceFunc, gpointer)</code> * /<br>
	 * extern guint g_idle_add(GSourceFunc function, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_idle_add(GSourceFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:338</i><br>
	 * Original signature : <code>guint g_idle_add(GSourceFunc, gpointer)</code> * /<br>
	 * extern guint g_idle_add(GSourceFunc function, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_idle_add_full(gint, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:340</i><br>
	 * Original signature : <code>guint g_idle_add_full(gint, GSourceFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern guint g_idle_add_full(gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_idle_add_full(gint, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:340</i><br>
	 * Original signature : <code>guint g_idle_add_full(gint, GSourceFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern guint g_idle_add_full(gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_idle_remove_by_data(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:342</i><br>
	 * Original signature : <code>gboolean g_idle_remove_by_data(gpointer)</code> * /<br>
	 * extern gboolean g_idle_remove_by_data(gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_idle_remove_by_data(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:342</i><br>
	 * Original signature : <code>gboolean g_idle_remove_by_data(gpointer)</code> * /<br>
	 * extern gboolean g_idle_remove_by_data(gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_main_context_invoke_full(GMainContext*, gint, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:344</i><br>
	 * Original signature : <code>void g_main_context_invoke_full(GMainContext*, gint, GSourceFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern void g_main_context_invoke_full(GMainContext* context, gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_main_context_invoke_full(GMainContext*, gint, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:344</i><br>
	 * Original signature : <code>void g_main_context_invoke_full(GMainContext*, gint, GSourceFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern void g_main_context_invoke_full(GMainContext* context, gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_main_context_invoke(GMainContext*, GSourceFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:346</i><br>
	 * Original signature : <code>void g_main_context_invoke(GMainContext*, GSourceFunc, gpointer)</code> * /<br>
	 * extern void g_main_context_invoke(GMainContext* context, GSourceFunc function, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_main_context_invoke(GMainContext*, GSourceFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:346</i><br>
	 * Original signature : <code>void g_main_context_invoke(GMainContext*, GSourceFunc, gpointer)</code> * /<br>
	 * extern void g_main_context_invoke(GMainContext* context, GSourceFunc function, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>guint32 g_unicode_script_to_iso15924(GUnicodeScript)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:437</i>
	 */
	public static int g_unicode_script_to_iso15924(IntValuedEnum<GLibLibrary.GUnicodeScript > script) {
		return g_unicode_script_to_iso15924((int)script.value());
	}
	protected native static int g_unicode_script_to_iso15924(int script);
	/**
	 * Original signature : <code>GUnicodeScript g_unicode_script_from_iso15924(guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:439</i>
	 */
	public static IntValuedEnum<GLibLibrary.GUnicodeScript > g_unicode_script_from_iso15924(int iso15924) {
		return FlagSet.fromValue(g_unicode_script_from_iso15924$2(iso15924), GLibLibrary.GUnicodeScript.class);
	}
	protected native static int g_unicode_script_from_iso15924$2(int iso15924);
	/**
	 * These are all analogs of the <ctype.h> functions.<br>
	 * Original signature : <code>gboolean g_unichar_isalnum(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:444</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_isalnum(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_isalpha(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:446</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_isalpha(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_iscntrl(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:448</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_iscntrl(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_isdigit(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:450</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_isdigit(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_isgraph(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:452</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_isgraph(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_islower(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:454</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_islower(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_isprint(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:456</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_isprint(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_ispunct(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:458</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_ispunct(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_isspace(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:460</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_isspace(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_isupper(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:462</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_isupper(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_isxdigit(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:464</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_isxdigit(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_istitle(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:466</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_istitle(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_isdefined(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:468</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_isdefined(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_iswide(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:470</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_iswide(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_iswide_cjk(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:472</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_iswide_cjk(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_iszerowidth(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:474</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_iszerowidth(int c);
	/**
	 * Original signature : <code>gboolean g_unichar_ismark(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:476</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_ismark(int c);
	/**
	 * More <ctype.h> functions.  These convert between the three cases.<br>
	 * See the Unicode book to understand title case.<br>
	 * Original signature : <code>gunichar g_unichar_toupper(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:482</i>
	 */
	public static native int g_unichar_toupper(int c);
	/**
	 * Original signature : <code>gunichar g_unichar_tolower(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:484</i>
	 */
	public static native int g_unichar_tolower(int c);
	/**
	 * Original signature : <code>gunichar g_unichar_totitle(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:486</i>
	 */
	public static native int g_unichar_totitle(int c);
	/**
	 * If C is a digit (according to 'g_unichar_isdigit'), then return its<br>
	 * numeric value.  Otherwise return -1.<br>
	 * Original signature : <code>gint g_unichar_digit_value(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:492</i>
	 */
	public static native int g_unichar_digit_value(int c);
	/**
	 * Original signature : <code>gint g_unichar_xdigit_value(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:494</i>
	 */
	public static native int g_unichar_xdigit_value(int c);
	/**
	 * Return the Unicode character type of a given character.<br>
	 * Original signature : <code>GUnicodeType g_unichar_type(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:499</i>
	 */
	public static IntValuedEnum<GLibLibrary.GUnicodeType > g_unichar_type(int c) {
		return FlagSet.fromValue(g_unichar_type$2(c), GLibLibrary.GUnicodeType.class);
	}
	protected native static int g_unichar_type$2(int c);
	/**
	 * Return the line break property for a given character<br>
	 * Original signature : <code>GUnicodeBreakType g_unichar_break_type(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:504</i>
	 */
	public static IntValuedEnum<GLibLibrary.GUnicodeBreakType > g_unichar_break_type(int c) {
		return FlagSet.fromValue(g_unichar_break_type$2(c), GLibLibrary.GUnicodeBreakType.class);
	}
	protected native static int g_unichar_break_type$2(int c);
	/**
	 * Returns the combining class for a given character<br>
	 * Original signature : <code>gint g_unichar_combining_class(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:509</i>
	 */
	public static native int g_unichar_combining_class(int uc);
	/**
	 * Original signature : <code>gboolean g_unichar_get_mirror_char(gunichar, gunichar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:511</i>
	 */
	public static GLibLibrary.gboolean g_unichar_get_mirror_char(int ch, Pointer<Integer > mirrored_ch) {
		return g_unichar_get_mirror_char(ch, Pointer.getPeer(mirrored_ch));
	}
	protected native static GLibLibrary.gboolean g_unichar_get_mirror_char(int ch, @Ptr long mirrored_ch);
	/**
	 * Original signature : <code>GUnicodeScript g_unichar_get_script(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:513</i>
	 */
	public static IntValuedEnum<GLibLibrary.GUnicodeScript > g_unichar_get_script(int ch) {
		return FlagSet.fromValue(g_unichar_get_script$2(ch), GLibLibrary.GUnicodeScript.class);
	}
	protected native static int g_unichar_get_script$2(int ch);
	/**
	 * Validate a Unicode character<br>
	 * Original signature : <code>gboolean g_unichar_validate(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:518</i>
	 */
	public static native GLibLibrary.gboolean g_unichar_validate(int ch);
	/**
	 * Pairwise canonical compose/decompose<br>
	 * Original signature : <code>gboolean g_unichar_compose(gunichar, gunichar, gunichar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:523</i>
	 */
	public static GLibLibrary.gboolean g_unichar_compose(int a, int b, Pointer<Integer > ch) {
		return g_unichar_compose(a, b, Pointer.getPeer(ch));
	}
	protected native static GLibLibrary.gboolean g_unichar_compose(int a, int b, @Ptr long ch);
	/**
	 * Original signature : <code>gboolean g_unichar_decompose(gunichar, gunichar*, gunichar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:525</i>
	 */
	public static GLibLibrary.gboolean g_unichar_decompose(int ch, Pointer<Integer > a, Pointer<Integer > b) {
		return g_unichar_decompose(ch, Pointer.getPeer(a), Pointer.getPeer(b));
	}
	protected native static GLibLibrary.gboolean g_unichar_decompose(int ch, @Ptr long a, @Ptr long b);
	/**
	 * Original signature : <code>gsize g_unichar_fully_decompose(gunichar, gboolean, gunichar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:527</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_unichar_fully_decompose(int ch, GLibLibrary.gboolean compat, Pointer<Integer > result, @org.bridj.ann.CLong long result_len) {
		return g_unichar_fully_decompose(ch, compat, Pointer.getPeer(result), result_len);
	}
	@org.bridj.ann.CLong 
	protected native static long g_unichar_fully_decompose(int ch, GLibLibrary.gboolean compat, @Ptr long result, @org.bridj.ann.CLong long result_len);
	/**
	 * Compute canonical ordering of a string in-place.  This rearranges<br>
	 * decomposed characters in the string according to their combining<br>
	 * classes.  See the Unicode manual for more information.<br>
	 * Original signature : <code>void g_unicode_canonical_ordering(gunichar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:534</i>
	 */
	public static void g_unicode_canonical_ordering(Pointer<Integer > string, @org.bridj.ann.CLong long len) {
		g_unicode_canonical_ordering(Pointer.getPeer(string), len);
	}
	protected native static void g_unicode_canonical_ordering(@Ptr long string, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>gunichar* g_unicode_canonical_decomposition(gunichar, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:536</i>
	 */
	public static Pointer<Integer > g_unicode_canonical_decomposition(int ch, Pointer<org.bridj.CLong > result_len) {
		return Pointer.pointerToAddress(g_unicode_canonical_decomposition(ch, Pointer.getPeer(result_len)), Integer.class);
	}
	@Ptr 
	protected native static long g_unicode_canonical_decomposition(int ch, @Ptr long result_len);
	/**
	 * Original signature : <code>gunichar g_utf8_get_char(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:540</i>
	 */
	public static int g_utf8_get_char(Pointer<Byte > p) {
		return g_utf8_get_char(Pointer.getPeer(p));
	}
	protected native static int g_utf8_get_char(@Ptr long p);
	/**
	 * Original signature : <code>gunichar g_utf8_get_char_validated(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:542</i>
	 */
	public static int g_utf8_get_char_validated(Pointer<Byte > p, @org.bridj.ann.CLong long max_len) {
		return g_utf8_get_char_validated(Pointer.getPeer(p), max_len);
	}
	protected native static int g_utf8_get_char_validated(@Ptr long p, @org.bridj.ann.CLong long max_len);
	/**
	 * Original signature : <code>gchar* g_utf8_offset_to_pointer(const gchar*, glong)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:544</i>
	 */
	public static Pointer<Byte > g_utf8_offset_to_pointer(Pointer<Byte > str, @org.bridj.ann.CLong long offset) {
		return Pointer.pointerToAddress(g_utf8_offset_to_pointer(Pointer.getPeer(str), offset), Byte.class);
	}
	@Ptr 
	protected native static long g_utf8_offset_to_pointer(@Ptr long str, @org.bridj.ann.CLong long offset);
	/**
	 * Original signature : <code>glong g_utf8_pointer_to_offset(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:546</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_utf8_pointer_to_offset(Pointer<Byte > str, Pointer<Byte > pos) {
		return g_utf8_pointer_to_offset(Pointer.getPeer(str), Pointer.getPeer(pos));
	}
	@org.bridj.ann.CLong 
	protected native static long g_utf8_pointer_to_offset(@Ptr long str, @Ptr long pos);
	/**
	 * Original signature : <code>gchar* g_utf8_prev_char(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:548</i>
	 */
	public static Pointer<Byte > g_utf8_prev_char(Pointer<Byte > p) {
		return Pointer.pointerToAddress(g_utf8_prev_char(Pointer.getPeer(p)), Byte.class);
	}
	@Ptr 
	protected native static long g_utf8_prev_char(@Ptr long p);
	/**
	 * Original signature : <code>gchar* g_utf8_find_next_char(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:550</i>
	 */
	public static Pointer<Byte > g_utf8_find_next_char(Pointer<Byte > p, Pointer<Byte > end) {
		return Pointer.pointerToAddress(g_utf8_find_next_char(Pointer.getPeer(p), Pointer.getPeer(end)), Byte.class);
	}
	@Ptr 
	protected native static long g_utf8_find_next_char(@Ptr long p, @Ptr long end);
	/**
	 * Original signature : <code>gchar* g_utf8_find_prev_char(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:552</i>
	 */
	public static Pointer<Byte > g_utf8_find_prev_char(Pointer<Byte > str, Pointer<Byte > p) {
		return Pointer.pointerToAddress(g_utf8_find_prev_char(Pointer.getPeer(str), Pointer.getPeer(p)), Byte.class);
	}
	@Ptr 
	protected native static long g_utf8_find_prev_char(@Ptr long str, @Ptr long p);
	/**
	 * Original signature : <code>glong g_utf8_strlen(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:554</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_utf8_strlen(Pointer<Byte > p, @org.bridj.ann.CLong long max) {
		return g_utf8_strlen(Pointer.getPeer(p), max);
	}
	@org.bridj.ann.CLong 
	protected native static long g_utf8_strlen(@Ptr long p, @org.bridj.ann.CLong long max);
	/**
	 * Original signature : <code>gchar* g_utf8_substring(const gchar*, glong, glong)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:556</i>
	 */
	public static Pointer<Byte > g_utf8_substring(Pointer<Byte > str, @org.bridj.ann.CLong long start_pos, @org.bridj.ann.CLong long end_pos) {
		return Pointer.pointerToAddress(g_utf8_substring(Pointer.getPeer(str), start_pos, end_pos), Byte.class);
	}
	@Ptr 
	protected native static long g_utf8_substring(@Ptr long str, @org.bridj.ann.CLong long start_pos, @org.bridj.ann.CLong long end_pos);
	/**
	 * Original signature : <code>gchar* g_utf8_strncpy(gchar*, const gchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:558</i>
	 */
	public static Pointer<Byte > g_utf8_strncpy(Pointer<Byte > dest, Pointer<Byte > src, @org.bridj.ann.CLong long n) {
		return Pointer.pointerToAddress(g_utf8_strncpy(Pointer.getPeer(dest), Pointer.getPeer(src), n), Byte.class);
	}
	@Ptr 
	protected native static long g_utf8_strncpy(@Ptr long dest, @Ptr long src, @org.bridj.ann.CLong long n);
	/**
	 * Find the UTF-8 character corresponding to ch, in string p. These<br>
	 * functions are equivalants to strchr and strrchr<br>
	 * Original signature : <code>gchar* g_utf8_strchr(const gchar*, gssize, gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:564</i>
	 */
	public static Pointer<Byte > g_utf8_strchr(Pointer<Byte > p, @org.bridj.ann.CLong long len, int c) {
		return Pointer.pointerToAddress(g_utf8_strchr(Pointer.getPeer(p), len, c), Byte.class);
	}
	@Ptr 
	protected native static long g_utf8_strchr(@Ptr long p, @org.bridj.ann.CLong long len, int c);
	/**
	 * Original signature : <code>gchar* g_utf8_strrchr(const gchar*, gssize, gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:566</i>
	 */
	public static Pointer<Byte > g_utf8_strrchr(Pointer<Byte > p, @org.bridj.ann.CLong long len, int c) {
		return Pointer.pointerToAddress(g_utf8_strrchr(Pointer.getPeer(p), len, c), Byte.class);
	}
	@Ptr 
	protected native static long g_utf8_strrchr(@Ptr long p, @org.bridj.ann.CLong long len, int c);
	/**
	 * Original signature : <code>gchar* g_utf8_strreverse(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:568</i>
	 */
	public static Pointer<Byte > g_utf8_strreverse(Pointer<Byte > str, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_utf8_strreverse(Pointer.getPeer(str), len), Byte.class);
	}
	@Ptr 
	protected native static long g_utf8_strreverse(@Ptr long str, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>gunichar2* g_utf8_to_utf16(const gchar*, glong, glong*, glong*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:570</i>
	 */
	public static Pointer<Short > g_utf8_to_utf16(Pointer<Byte > str, @org.bridj.ann.CLong long len, Pointer<org.bridj.CLong > items_read, Pointer<org.bridj.CLong > items_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_utf8_to_utf16(Pointer.getPeer(str), len, Pointer.getPeer(items_read), Pointer.getPeer(items_written), Pointer.getPeer(error)), Short.class);
	}
	@Ptr 
	protected native static long g_utf8_to_utf16(@Ptr long str, @org.bridj.ann.CLong long len, @Ptr long items_read, @Ptr long items_written, @Ptr long error);
	/**
	 * Original signature : <code>gunichar* g_utf8_to_ucs4(const gchar*, glong, glong*, glong*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:572</i>
	 */
	public static Pointer<Integer > g_utf8_to_ucs4(Pointer<Byte > str, @org.bridj.ann.CLong long len, Pointer<org.bridj.CLong > items_read, Pointer<org.bridj.CLong > items_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_utf8_to_ucs4(Pointer.getPeer(str), len, Pointer.getPeer(items_read), Pointer.getPeer(items_written), Pointer.getPeer(error)), Integer.class);
	}
	@Ptr 
	protected native static long g_utf8_to_ucs4(@Ptr long str, @org.bridj.ann.CLong long len, @Ptr long items_read, @Ptr long items_written, @Ptr long error);
	/**
	 * Original signature : <code>gunichar* g_utf8_to_ucs4_fast(const gchar*, glong, glong*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:574</i>
	 */
	public static Pointer<Integer > g_utf8_to_ucs4_fast(Pointer<Byte > str, @org.bridj.ann.CLong long len, Pointer<org.bridj.CLong > items_written) {
		return Pointer.pointerToAddress(g_utf8_to_ucs4_fast(Pointer.getPeer(str), len, Pointer.getPeer(items_written)), Integer.class);
	}
	@Ptr 
	protected native static long g_utf8_to_ucs4_fast(@Ptr long str, @org.bridj.ann.CLong long len, @Ptr long items_written);
	/**
	 * Original signature : <code>gunichar* g_utf16_to_ucs4(const gunichar2*, glong, glong*, glong*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:576</i>
	 */
	public static Pointer<Integer > g_utf16_to_ucs4(Pointer<Short > str, @org.bridj.ann.CLong long len, Pointer<org.bridj.CLong > items_read, Pointer<org.bridj.CLong > items_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_utf16_to_ucs4(Pointer.getPeer(str), len, Pointer.getPeer(items_read), Pointer.getPeer(items_written), Pointer.getPeer(error)), Integer.class);
	}
	@Ptr 
	protected native static long g_utf16_to_ucs4(@Ptr long str, @org.bridj.ann.CLong long len, @Ptr long items_read, @Ptr long items_written, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_utf16_to_utf8(const gunichar2*, glong, glong*, glong*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:578</i>
	 */
	public static Pointer<Byte > g_utf16_to_utf8(Pointer<Short > str, @org.bridj.ann.CLong long len, Pointer<org.bridj.CLong > items_read, Pointer<org.bridj.CLong > items_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_utf16_to_utf8(Pointer.getPeer(str), len, Pointer.getPeer(items_read), Pointer.getPeer(items_written), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_utf16_to_utf8(@Ptr long str, @org.bridj.ann.CLong long len, @Ptr long items_read, @Ptr long items_written, @Ptr long error);
	/**
	 * Original signature : <code>gunichar2* g_ucs4_to_utf16(const gunichar*, glong, glong*, glong*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:580</i>
	 */
	public static Pointer<Short > g_ucs4_to_utf16(Pointer<Integer > str, @org.bridj.ann.CLong long len, Pointer<org.bridj.CLong > items_read, Pointer<org.bridj.CLong > items_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_ucs4_to_utf16(Pointer.getPeer(str), len, Pointer.getPeer(items_read), Pointer.getPeer(items_written), Pointer.getPeer(error)), Short.class);
	}
	@Ptr 
	protected native static long g_ucs4_to_utf16(@Ptr long str, @org.bridj.ann.CLong long len, @Ptr long items_read, @Ptr long items_written, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_ucs4_to_utf8(const gunichar*, glong, glong*, glong*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:582</i>
	 */
	public static Pointer<Byte > g_ucs4_to_utf8(Pointer<Integer > str, @org.bridj.ann.CLong long len, Pointer<org.bridj.CLong > items_read, Pointer<org.bridj.CLong > items_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_ucs4_to_utf8(Pointer.getPeer(str), len, Pointer.getPeer(items_read), Pointer.getPeer(items_written), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_ucs4_to_utf8(@Ptr long str, @org.bridj.ann.CLong long len, @Ptr long items_read, @Ptr long items_written, @Ptr long error);
	/**
	 * Original signature : <code>gint g_unichar_to_utf8(gunichar, gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:584</i>
	 */
	public static int g_unichar_to_utf8(int c, Pointer<Byte > outbuf) {
		return g_unichar_to_utf8(c, Pointer.getPeer(outbuf));
	}
	protected native static int g_unichar_to_utf8(int c, @Ptr long outbuf);
	/**
	 * Original signature : <code>gboolean g_utf8_validate(const gchar*, gssize, const gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:586</i>
	 */
	public static GLibLibrary.gboolean g_utf8_validate(Pointer<Byte > str, @org.bridj.ann.CLong long max_len, Pointer<Pointer<Byte > > end) {
		return g_utf8_validate(Pointer.getPeer(str), max_len, Pointer.getPeer(end));
	}
	protected native static GLibLibrary.gboolean g_utf8_validate(@Ptr long str, @org.bridj.ann.CLong long max_len, @Ptr long end);
	/**
	 * Original signature : <code>gchar* g_utf8_strup(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:588</i>
	 */
	public static Pointer<Byte > g_utf8_strup(Pointer<Byte > str, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_utf8_strup(Pointer.getPeer(str), len), Byte.class);
	}
	@Ptr 
	protected native static long g_utf8_strup(@Ptr long str, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>gchar* g_utf8_strdown(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:590</i>
	 */
	public static Pointer<Byte > g_utf8_strdown(Pointer<Byte > str, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_utf8_strdown(Pointer.getPeer(str), len), Byte.class);
	}
	@Ptr 
	protected native static long g_utf8_strdown(@Ptr long str, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>gchar* g_utf8_casefold(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:592</i>
	 */
	public static Pointer<Byte > g_utf8_casefold(Pointer<Byte > str, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_utf8_casefold(Pointer.getPeer(str), len), Byte.class);
	}
	@Ptr 
	protected native static long g_utf8_casefold(@Ptr long str, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>gchar* g_utf8_normalize(const gchar*, gssize, GNormalizeMode)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:627</i>
	 */
	public static Pointer<Byte > g_utf8_normalize(Pointer<Byte > str, @org.bridj.ann.CLong long len, IntValuedEnum<GLibLibrary.GNormalizeMode > mode) {
		return Pointer.pointerToAddress(g_utf8_normalize(Pointer.getPeer(str), len, (int)mode.value()), Byte.class);
	}
	@Ptr 
	protected native static long g_utf8_normalize(@Ptr long str, @org.bridj.ann.CLong long len, int mode);
	/**
	 * Original signature : <code>gint g_utf8_collate(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:629</i>
	 */
	public static int g_utf8_collate(Pointer<Byte > str1, Pointer<Byte > str2) {
		return g_utf8_collate(Pointer.getPeer(str1), Pointer.getPeer(str2));
	}
	protected native static int g_utf8_collate(@Ptr long str1, @Ptr long str2);
	/**
	 * Original signature : <code>gchar* g_utf8_collate_key(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:631</i>
	 */
	public static Pointer<Byte > g_utf8_collate_key(Pointer<Byte > str, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_utf8_collate_key(Pointer.getPeer(str), len), Byte.class);
	}
	@Ptr 
	protected native static long g_utf8_collate_key(@Ptr long str, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>gchar* g_utf8_collate_key_for_filename(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:633</i>
	 */
	public static Pointer<Byte > g_utf8_collate_key_for_filename(Pointer<Byte > str, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_utf8_collate_key_for_filename(Pointer.getPeer(str), len), Byte.class);
	}
	@Ptr 
	protected native static long g_utf8_collate_key_for_filename(@Ptr long str, @org.bridj.ann.CLong long len);
	/**
	 * private<br>
	 * Original signature : <code>gchar* _g_utf8_make_valid(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:638</i>
	 */
	public static Pointer<Byte > _g_utf8_make_valid(Pointer<Byte > name) {
		return Pointer.pointerToAddress(_g_utf8_make_valid(Pointer.getPeer(name)), Byte.class);
	}
	@Ptr 
	protected native static long _g_utf8_make_valid(@Ptr long name);
	/**
	 * Original signature : <code>gchar* g_get_user_name()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:2</i>
	 */
	public static Pointer<Byte > g_get_user_name() {
		return Pointer.pointerToAddress(g_get_user_name$2(), Byte.class);
	}
	@Ptr 
	protected native static long g_get_user_name$2();
	/**
	 * Original signature : <code>gchar* g_get_real_name()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:4</i>
	 */
	public static Pointer<Byte > g_get_real_name() {
		return Pointer.pointerToAddress(g_get_real_name$2(), Byte.class);
	}
	@Ptr 
	protected native static long g_get_real_name$2();
	/**
	 * Original signature : <code>gchar* g_get_home_dir()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:6</i>
	 */
	public static Pointer<Byte > g_get_home_dir() {
		return Pointer.pointerToAddress(g_get_home_dir$2(), Byte.class);
	}
	@Ptr 
	protected native static long g_get_home_dir$2();
	/**
	 * Original signature : <code>gchar* g_get_tmp_dir()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:8</i>
	 */
	public static Pointer<Byte > g_get_tmp_dir() {
		return Pointer.pointerToAddress(g_get_tmp_dir$2(), Byte.class);
	}
	@Ptr 
	protected native static long g_get_tmp_dir$2();
	/**
	 * Original signature : <code>gchar* g_get_host_name()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:10</i>
	 */
	public static Pointer<Byte > g_get_host_name() {
		return Pointer.pointerToAddress(g_get_host_name$2(), Byte.class);
	}
	@Ptr 
	protected native static long g_get_host_name$2();
	/**
	 * Original signature : <code>gchar* g_get_prgname()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:12</i>
	 */
	public static Pointer<Byte > g_get_prgname() {
		return Pointer.pointerToAddress(g_get_prgname$2(), Byte.class);
	}
	@Ptr 
	protected native static long g_get_prgname$2();
	/**
	 * Original signature : <code>void g_set_prgname(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:14</i>
	 */
	public static void g_set_prgname(Pointer<Byte > prgname) {
		g_set_prgname(Pointer.getPeer(prgname));
	}
	protected native static void g_set_prgname(@Ptr long prgname);
	/**
	 * Original signature : <code>gchar* g_get_application_name()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:16</i>
	 */
	public static Pointer<Byte > g_get_application_name() {
		return Pointer.pointerToAddress(g_get_application_name$2(), Byte.class);
	}
	@Ptr 
	protected native static long g_get_application_name$2();
	/**
	 * Original signature : <code>void g_set_application_name(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:18</i>
	 */
	public static void g_set_application_name(Pointer<Byte > application_name) {
		g_set_application_name(Pointer.getPeer(application_name));
	}
	protected native static void g_set_application_name(@Ptr long application_name);
	/**
	 * Original signature : <code>void g_reload_user_special_dirs_cache()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:20</i>
	 */
	public static native void g_reload_user_special_dirs_cache();
	/**
	 * Original signature : <code>gchar* g_get_user_data_dir()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:22</i>
	 */
	public static Pointer<Byte > g_get_user_data_dir() {
		return Pointer.pointerToAddress(g_get_user_data_dir$2(), Byte.class);
	}
	@Ptr 
	protected native static long g_get_user_data_dir$2();
	/**
	 * Original signature : <code>gchar* g_get_user_config_dir()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:24</i>
	 */
	public static Pointer<Byte > g_get_user_config_dir() {
		return Pointer.pointerToAddress(g_get_user_config_dir$2(), Byte.class);
	}
	@Ptr 
	protected native static long g_get_user_config_dir$2();
	/**
	 * Original signature : <code>gchar* g_get_user_cache_dir()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:26</i>
	 */
	public static Pointer<Byte > g_get_user_cache_dir() {
		return Pointer.pointerToAddress(g_get_user_cache_dir$2(), Byte.class);
	}
	@Ptr 
	protected native static long g_get_user_cache_dir$2();
	/**
	 * Original signature : <code>const gchar** g_get_system_data_dirs()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:28</i>
	 */
	public static Pointer<Pointer<Byte > > g_get_system_data_dirs() {
		return Pointer.pointerToAddress(g_get_system_data_dirs$2(), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_get_system_data_dirs$2();
	/**
	 * Original signature : <code>const gchar** g_get_system_config_dirs()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:30</i>
	 */
	public static Pointer<Pointer<Byte > > g_get_system_config_dirs() {
		return Pointer.pointerToAddress(g_get_system_config_dirs$2(), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_get_system_config_dirs$2();
	/**
	 * Original signature : <code>gchar* g_get_user_runtime_dir()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:32</i>
	 */
	public static Pointer<Byte > g_get_user_runtime_dir() {
		return Pointer.pointerToAddress(g_get_user_runtime_dir$2(), Byte.class);
	}
	@Ptr 
	protected native static long g_get_user_runtime_dir$2();
	/**
	 * Original signature : <code>gchar* g_get_user_special_dir(GUserDirectory)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:64</i>
	 */
	public static Pointer<Byte > g_get_user_special_dir(IntValuedEnum<GLibLibrary.GUserDirectory > directory) {
		return Pointer.pointerToAddress(g_get_user_special_dir((int)directory.value()), Byte.class);
	}
	@Ptr 
	protected native static long g_get_user_special_dir(int directory);
	/**
	 * Miscellaneous utility functions<br>
	 * Original signature : <code>guint g_parse_debug_string(const gchar*, const GDebugKey*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:81</i>
	 */
	public static int g_parse_debug_string(Pointer<Byte > string, Pointer<GDebugKey > keys, int nkeys) {
		return g_parse_debug_string(Pointer.getPeer(string), Pointer.getPeer(keys), nkeys);
	}
	protected native static int g_parse_debug_string(@Ptr long string, @Ptr long keys, int nkeys);
	/**
	 * Original signature : <code>gint g_snprintf(gchar*, gulong, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:83</i>
	 */
	public static int g_snprintf(Pointer<Byte > string, @org.bridj.ann.CLong long n, Pointer<Byte > format, Object... varArgs1) {
		return g_snprintf(Pointer.getPeer(string), n, Pointer.getPeer(format), varArgs1);
	}
	protected native static int g_snprintf(@Ptr long string, @org.bridj.ann.CLong long n, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>gint g_vsnprintf(gchar*, gulong, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:85</i>
	 */
	public static int g_vsnprintf(Pointer<Byte > string, @org.bridj.ann.CLong long n, Pointer<Byte > format, Object... args) {
		return g_vsnprintf(Pointer.getPeer(string), n, Pointer.getPeer(format), args);
	}
	protected native static int g_vsnprintf(@Ptr long string, @org.bridj.ann.CLong long n, @Ptr long format, Object... args);
	/**
	 * Original signature : <code>void g_nullify_pointer(gpointer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:87</i>
	 */
	public static void g_nullify_pointer(Pointer nullify_location) {
		g_nullify_pointer(Pointer.getPeer(nullify_location));
	}
	protected native static void g_nullify_pointer(@Ptr long nullify_location);
	/**
	 * Original signature : <code>gchar* g_format_size_full(guint64, GFormatSizeFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:94</i>
	 */
	public static Pointer<Byte > g_format_size_full(long size, IntValuedEnum<GLibLibrary.GFormatSizeFlags > flags) {
		return Pointer.pointerToAddress(g_format_size_full(size, (int)flags.value()), Byte.class);
	}
	@Ptr 
	protected native static long g_format_size_full(long size, int flags);
	/**
	 * Original signature : <code>gchar* g_format_size(guint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:96</i>
	 */
	public static Pointer<Byte > g_format_size(long size) {
		return Pointer.pointerToAddress(g_format_size$2(size), Byte.class);
	}
	@Ptr 
	protected native static long g_format_size$2(long size);
	/**
	 * Original signature : <code>gchar* g_format_size_for_display(goffset)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:98</i>
	 */
	public static Pointer<Byte > g_format_size_for_display(long size) {
		return Pointer.pointerToAddress(g_format_size_for_display$2(size), Byte.class);
	}
	@Ptr 
	protected native static long g_format_size_for_display$2(long size);
	/**
	 * we use a GLib function as a replacement for ATEXIT, so<br>
	 * the programmer is not required to check the return value<br>
	 * (if there is any in the implementation) and doesn't encounter<br>
	 * missing include files.<br>
	 * Original signature : <code>void g_atexit(GVoidFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:113</i>
	 */
	public static void g_atexit(Pointer<GLibLibrary.GVoidFunc > func) {
		g_atexit(Pointer.getPeer(func));
	}
	protected native static void g_atexit(@Ptr long func);
	/**
	 * Look for an executable in PATH, following execvp() rules<br>
	 * Original signature : <code>gchar* g_find_program_in_path(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:118</i>
	 */
	public static Pointer<Byte > g_find_program_in_path(Pointer<Byte > program) {
		return Pointer.pointerToAddress(g_find_program_in_path(Pointer.getPeer(program)), Byte.class);
	}
	@Ptr 
	protected native static long g_find_program_in_path(@Ptr long program);
	/**
	 * Original signature : <code>GString* g_string_new(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:8</i>
	 */
	public static Pointer<GString > g_string_new(Pointer<Byte > init) {
		return Pointer.pointerToAddress(g_string_new(Pointer.getPeer(init)), GString.class);
	}
	@Ptr 
	protected native static long g_string_new(@Ptr long init);
	/**
	 * Original signature : <code>GString* g_string_new_len(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:10</i>
	 */
	public static Pointer<GString > g_string_new_len(Pointer<Byte > init, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_string_new_len(Pointer.getPeer(init), len), GString.class);
	}
	@Ptr 
	protected native static long g_string_new_len(@Ptr long init, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>GString* g_string_sized_new(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:12</i>
	 */
	public static Pointer<GString > g_string_sized_new(@org.bridj.ann.CLong long dfl_size) {
		return Pointer.pointerToAddress(g_string_sized_new$2(dfl_size), GString.class);
	}
	@Ptr 
	protected native static long g_string_sized_new$2(@org.bridj.ann.CLong long dfl_size);
	/**
	 * Original signature : <code>gchar* g_string_free(GString*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:14</i>
	 */
	public static Pointer<Byte > g_string_free(Pointer<GString > string, GLibLibrary.gboolean free_segment) {
		return Pointer.pointerToAddress(g_string_free(Pointer.getPeer(string), free_segment), Byte.class);
	}
	@Ptr 
	protected native static long g_string_free(@Ptr long string, GLibLibrary.gboolean free_segment);
	/**
	 * Original signature : <code>GBytes* g_string_free_to_bytes(GString*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:16</i>
	 */
	public static Pointer<GLibLibrary.GBytes > g_string_free_to_bytes(Pointer<GString > string) {
		return Pointer.pointerToAddress(g_string_free_to_bytes(Pointer.getPeer(string)), GLibLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_string_free_to_bytes(@Ptr long string);
	/**
	 * Original signature : <code>gboolean g_string_equal(const GString*, const GString*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:18</i>
	 */
	public static GLibLibrary.gboolean g_string_equal(Pointer<GString > v, Pointer<GString > v2) {
		return g_string_equal(Pointer.getPeer(v), Pointer.getPeer(v2));
	}
	protected native static GLibLibrary.gboolean g_string_equal(@Ptr long v, @Ptr long v2);
	/**
	 * Original signature : <code>guint g_string_hash(const GString*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:20</i>
	 */
	public static int g_string_hash(Pointer<GString > str) {
		return g_string_hash(Pointer.getPeer(str));
	}
	protected native static int g_string_hash(@Ptr long str);
	/**
	 * Original signature : <code>GString* g_string_assign(GString*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:22</i>
	 */
	public static Pointer<GString > g_string_assign(Pointer<GString > string, Pointer<Byte > rval) {
		return Pointer.pointerToAddress(g_string_assign(Pointer.getPeer(string), Pointer.getPeer(rval)), GString.class);
	}
	@Ptr 
	protected native static long g_string_assign(@Ptr long string, @Ptr long rval);
	/**
	 * Original signature : <code>GString* g_string_truncate(GString*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:24</i>
	 */
	public static Pointer<GString > g_string_truncate(Pointer<GString > string, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_string_truncate(Pointer.getPeer(string), len), GString.class);
	}
	@Ptr 
	protected native static long g_string_truncate(@Ptr long string, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>GString* g_string_set_size(GString*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:26</i>
	 */
	public static Pointer<GString > g_string_set_size(Pointer<GString > string, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_string_set_size(Pointer.getPeer(string), len), GString.class);
	}
	@Ptr 
	protected native static long g_string_set_size(@Ptr long string, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>GString* g_string_insert_len(GString*, gssize, const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:28</i>
	 */
	public static Pointer<GString > g_string_insert_len(Pointer<GString > string, @org.bridj.ann.CLong long pos, Pointer<Byte > val, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_string_insert_len(Pointer.getPeer(string), pos, Pointer.getPeer(val), len), GString.class);
	}
	@Ptr 
	protected native static long g_string_insert_len(@Ptr long string, @org.bridj.ann.CLong long pos, @Ptr long val, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>GString* g_string_append(GString*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:30</i>
	 */
	public static Pointer<GString > g_string_append(Pointer<GString > string, Pointer<Byte > val) {
		return Pointer.pointerToAddress(g_string_append(Pointer.getPeer(string), Pointer.getPeer(val)), GString.class);
	}
	@Ptr 
	protected native static long g_string_append(@Ptr long string, @Ptr long val);
	/**
	 * Original signature : <code>GString* g_string_append_len(GString*, const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:32</i>
	 */
	public static Pointer<GString > g_string_append_len(Pointer<GString > string, Pointer<Byte > val, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_string_append_len(Pointer.getPeer(string), Pointer.getPeer(val), len), GString.class);
	}
	@Ptr 
	protected native static long g_string_append_len(@Ptr long string, @Ptr long val, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>GString* g_string_append_c(GString*, gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:34</i>
	 */
	public static Pointer<GString > g_string_append_c(Pointer<GString > string, byte c) {
		return Pointer.pointerToAddress(g_string_append_c(Pointer.getPeer(string), c), GString.class);
	}
	@Ptr 
	protected native static long g_string_append_c(@Ptr long string, byte c);
	/**
	 * Original signature : <code>GString* g_string_append_unichar(GString*, gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:36</i>
	 */
	public static Pointer<GString > g_string_append_unichar(Pointer<GString > string, int wc) {
		return Pointer.pointerToAddress(g_string_append_unichar(Pointer.getPeer(string), wc), GString.class);
	}
	@Ptr 
	protected native static long g_string_append_unichar(@Ptr long string, int wc);
	/**
	 * Original signature : <code>GString* g_string_prepend(GString*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:38</i>
	 */
	public static Pointer<GString > g_string_prepend(Pointer<GString > string, Pointer<Byte > val) {
		return Pointer.pointerToAddress(g_string_prepend(Pointer.getPeer(string), Pointer.getPeer(val)), GString.class);
	}
	@Ptr 
	protected native static long g_string_prepend(@Ptr long string, @Ptr long val);
	/**
	 * Original signature : <code>GString* g_string_prepend_c(GString*, gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:40</i>
	 */
	public static Pointer<GString > g_string_prepend_c(Pointer<GString > string, byte c) {
		return Pointer.pointerToAddress(g_string_prepend_c(Pointer.getPeer(string), c), GString.class);
	}
	@Ptr 
	protected native static long g_string_prepend_c(@Ptr long string, byte c);
	/**
	 * Original signature : <code>GString* g_string_prepend_unichar(GString*, gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:42</i>
	 */
	public static Pointer<GString > g_string_prepend_unichar(Pointer<GString > string, int wc) {
		return Pointer.pointerToAddress(g_string_prepend_unichar(Pointer.getPeer(string), wc), GString.class);
	}
	@Ptr 
	protected native static long g_string_prepend_unichar(@Ptr long string, int wc);
	/**
	 * Original signature : <code>GString* g_string_prepend_len(GString*, const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:44</i>
	 */
	public static Pointer<GString > g_string_prepend_len(Pointer<GString > string, Pointer<Byte > val, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_string_prepend_len(Pointer.getPeer(string), Pointer.getPeer(val), len), GString.class);
	}
	@Ptr 
	protected native static long g_string_prepend_len(@Ptr long string, @Ptr long val, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>GString* g_string_insert(GString*, gssize, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:46</i>
	 */
	public static Pointer<GString > g_string_insert(Pointer<GString > string, @org.bridj.ann.CLong long pos, Pointer<Byte > val) {
		return Pointer.pointerToAddress(g_string_insert(Pointer.getPeer(string), pos, Pointer.getPeer(val)), GString.class);
	}
	@Ptr 
	protected native static long g_string_insert(@Ptr long string, @org.bridj.ann.CLong long pos, @Ptr long val);
	/**
	 * Original signature : <code>GString* g_string_insert_c(GString*, gssize, gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:48</i>
	 */
	public static Pointer<GString > g_string_insert_c(Pointer<GString > string, @org.bridj.ann.CLong long pos, byte c) {
		return Pointer.pointerToAddress(g_string_insert_c(Pointer.getPeer(string), pos, c), GString.class);
	}
	@Ptr 
	protected native static long g_string_insert_c(@Ptr long string, @org.bridj.ann.CLong long pos, byte c);
	/**
	 * Original signature : <code>GString* g_string_insert_unichar(GString*, gssize, gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:50</i>
	 */
	public static Pointer<GString > g_string_insert_unichar(Pointer<GString > string, @org.bridj.ann.CLong long pos, int wc) {
		return Pointer.pointerToAddress(g_string_insert_unichar(Pointer.getPeer(string), pos, wc), GString.class);
	}
	@Ptr 
	protected native static long g_string_insert_unichar(@Ptr long string, @org.bridj.ann.CLong long pos, int wc);
	/**
	 * Original signature : <code>GString* g_string_overwrite(GString*, gsize, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:52</i>
	 */
	public static Pointer<GString > g_string_overwrite(Pointer<GString > string, @org.bridj.ann.CLong long pos, Pointer<Byte > val) {
		return Pointer.pointerToAddress(g_string_overwrite(Pointer.getPeer(string), pos, Pointer.getPeer(val)), GString.class);
	}
	@Ptr 
	protected native static long g_string_overwrite(@Ptr long string, @org.bridj.ann.CLong long pos, @Ptr long val);
	/**
	 * Original signature : <code>GString* g_string_overwrite_len(GString*, gsize, const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:54</i>
	 */
	public static Pointer<GString > g_string_overwrite_len(Pointer<GString > string, @org.bridj.ann.CLong long pos, Pointer<Byte > val, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_string_overwrite_len(Pointer.getPeer(string), pos, Pointer.getPeer(val), len), GString.class);
	}
	@Ptr 
	protected native static long g_string_overwrite_len(@Ptr long string, @org.bridj.ann.CLong long pos, @Ptr long val, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>GString* g_string_erase(GString*, gssize, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:56</i>
	 */
	public static Pointer<GString > g_string_erase(Pointer<GString > string, @org.bridj.ann.CLong long pos, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_string_erase(Pointer.getPeer(string), pos, len), GString.class);
	}
	@Ptr 
	protected native static long g_string_erase(@Ptr long string, @org.bridj.ann.CLong long pos, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>GString* g_string_ascii_down(GString*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:58</i>
	 */
	public static Pointer<GString > g_string_ascii_down(Pointer<GString > string) {
		return Pointer.pointerToAddress(g_string_ascii_down(Pointer.getPeer(string)), GString.class);
	}
	@Ptr 
	protected native static long g_string_ascii_down(@Ptr long string);
	/**
	 * Original signature : <code>GString* g_string_ascii_up(GString*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:60</i>
	 */
	public static Pointer<GString > g_string_ascii_up(Pointer<GString > string) {
		return Pointer.pointerToAddress(g_string_ascii_up(Pointer.getPeer(string)), GString.class);
	}
	@Ptr 
	protected native static long g_string_ascii_up(@Ptr long string);
	/**
	 * Original signature : <code>void g_string_vprintf(GString*, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:62</i>
	 */
	public static void g_string_vprintf(Pointer<GString > string, Pointer<Byte > format, Object... args) {
		g_string_vprintf(Pointer.getPeer(string), Pointer.getPeer(format), args);
	}
	protected native static void g_string_vprintf(@Ptr long string, @Ptr long format, Object... args);
	/**
	 * Original signature : <code>void g_string_printf(GString*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:64</i>
	 */
	public static void g_string_printf(Pointer<GString > string, Pointer<Byte > format, Object... varArgs1) {
		g_string_printf(Pointer.getPeer(string), Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_string_printf(@Ptr long string, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>void g_string_append_vprintf(GString*, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:66</i>
	 */
	public static void g_string_append_vprintf(Pointer<GString > string, Pointer<Byte > format, Object... args) {
		g_string_append_vprintf(Pointer.getPeer(string), Pointer.getPeer(format), args);
	}
	protected native static void g_string_append_vprintf(@Ptr long string, @Ptr long format, Object... args);
	/**
	 * Original signature : <code>void g_string_append_printf(GString*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:68</i>
	 */
	public static void g_string_append_printf(Pointer<GString > string, Pointer<Byte > format, Object... varArgs1) {
		g_string_append_printf(Pointer.getPeer(string), Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_string_append_printf(@Ptr long string, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>GString* g_string_append_uri_escaped(GString*, const gchar*, const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:70</i>
	 */
	public static Pointer<GString > g_string_append_uri_escaped(Pointer<GString > string, Pointer<Byte > unescaped, Pointer<Byte > reserved_chars_allowed, GLibLibrary.gboolean allow_utf8) {
		return Pointer.pointerToAddress(g_string_append_uri_escaped(Pointer.getPeer(string), Pointer.getPeer(unescaped), Pointer.getPeer(reserved_chars_allowed), allow_utf8), GString.class);
	}
	@Ptr 
	protected native static long g_string_append_uri_escaped(@Ptr long string, @Ptr long unescaped, @Ptr long reserved_chars_allowed, GLibLibrary.gboolean allow_utf8);
	/**
	 * Original signature : <code>GString* g_string_down(GString*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:81</i>
	 */
	public static Pointer<GString > g_string_down(Pointer<GString > string) {
		return Pointer.pointerToAddress(g_string_down(Pointer.getPeer(string)), GString.class);
	}
	@Ptr 
	protected native static long g_string_down(@Ptr long string);
	/**
	 * Original signature : <code>GString* g_string_up(GString*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:83</i>
	 */
	public static Pointer<GString > g_string_up(Pointer<GString > string) {
		return Pointer.pointerToAddress(g_string_up(Pointer.getPeer(string)), GString.class);
	}
	@Ptr 
	protected native static long g_string_up(@Ptr long string);
	/**
	 * Original signature : <code>void g_io_channel_init(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:87</i>
	 */
	public static void g_io_channel_init(Pointer<GIOChannel > channel) {
		g_io_channel_init(Pointer.getPeer(channel));
	}
	protected native static void g_io_channel_init(@Ptr long channel);
	/**
	 * Original signature : <code>GIOChannel* g_io_channel_ref(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:89</i>
	 */
	public static Pointer<GIOChannel > g_io_channel_ref(Pointer<GIOChannel > channel) {
		return Pointer.pointerToAddress(g_io_channel_ref(Pointer.getPeer(channel)), GIOChannel.class);
	}
	@Ptr 
	protected native static long g_io_channel_ref(@Ptr long channel);
	/**
	 * Original signature : <code>void g_io_channel_unref(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:91</i>
	 */
	public static void g_io_channel_unref(Pointer<GIOChannel > channel) {
		g_io_channel_unref(Pointer.getPeer(channel));
	}
	protected native static void g_io_channel_unref(@Ptr long channel);
	/**
	 * Original signature : <code>GIOError g_io_channel_read(GIOChannel*, gchar*, gsize, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:93</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOError > g_io_channel_read(Pointer<GIOChannel > channel, Pointer<Byte > buf, @org.bridj.ann.CLong long count, Pointer<org.bridj.CLong > bytes_read) {
		return FlagSet.fromValue(g_io_channel_read(Pointer.getPeer(channel), Pointer.getPeer(buf), count, Pointer.getPeer(bytes_read)), GLibLibrary.GIOError.class);
	}
	protected native static int g_io_channel_read(@Ptr long channel, @Ptr long buf, @org.bridj.ann.CLong long count, @Ptr long bytes_read);
	/**
	 * Original signature : <code>GIOError g_io_channel_write(GIOChannel*, const gchar*, gsize, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:95</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOError > g_io_channel_write(Pointer<GIOChannel > channel, Pointer<Byte > buf, @org.bridj.ann.CLong long count, Pointer<org.bridj.CLong > bytes_written) {
		return FlagSet.fromValue(g_io_channel_write(Pointer.getPeer(channel), Pointer.getPeer(buf), count, Pointer.getPeer(bytes_written)), GLibLibrary.GIOError.class);
	}
	protected native static int g_io_channel_write(@Ptr long channel, @Ptr long buf, @org.bridj.ann.CLong long count, @Ptr long bytes_written);
	/**
	 * Original signature : <code>GIOError g_io_channel_seek(GIOChannel*, gint64, GSeekType)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:97</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOError > g_io_channel_seek(Pointer<GIOChannel > channel, long offset, IntValuedEnum<GLibLibrary.GSeekType > type) {
		return FlagSet.fromValue(g_io_channel_seek(Pointer.getPeer(channel), offset, (int)type.value()), GLibLibrary.GIOError.class);
	}
	protected native static int g_io_channel_seek(@Ptr long channel, long offset, int type);
	/**
	 * Original signature : <code>void g_io_channel_close(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:99</i>
	 */
	public static void g_io_channel_close(Pointer<GIOChannel > channel) {
		g_io_channel_close(Pointer.getPeer(channel));
	}
	protected native static void g_io_channel_close(@Ptr long channel);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_shutdown(GIOChannel*, gboolean, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:101</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOStatus > g_io_channel_shutdown(Pointer<GIOChannel > channel, GLibLibrary.gboolean flush, Pointer<Pointer<GError > > err) {
		return FlagSet.fromValue(g_io_channel_shutdown(Pointer.getPeer(channel), flush, Pointer.getPeer(err)), GLibLibrary.GIOStatus.class);
	}
	protected native static int g_io_channel_shutdown(@Ptr long channel, GLibLibrary.gboolean flush, @Ptr long err);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_io_add_watch_full(GIOChannel*, gint, GIOCondition, GIOFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:103</i><br>
	 * Original signature : <code>guint g_io_add_watch_full(GIOChannel*, gint, GIOCondition, GIOFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern guint g_io_add_watch_full(GIOChannel* channel, gint priority, GIOCondition condition, GIOFunc func, gpointer user_data, GDestroyNotify notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_io_add_watch_full(GIOChannel*, gint, GIOCondition, GIOFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:103</i><br>
	 * Original signature : <code>guint g_io_add_watch_full(GIOChannel*, gint, GIOCondition, GIOFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern guint g_io_add_watch_full(GIOChannel* channel, gint priority, GIOCondition condition, GIOFunc func, gpointer user_data, GDestroyNotify notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GSource* g_io_create_watch(GIOChannel*, GIOCondition)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:105</i>
	 */
	public static Pointer<GSource > g_io_create_watch(Pointer<GIOChannel > channel, IntValuedEnum<GLibLibrary.GIOCondition > condition) {
		return Pointer.pointerToAddress(g_io_create_watch(Pointer.getPeer(channel), (int)condition.value()), GSource.class);
	}
	@Ptr 
	protected native static long g_io_create_watch(@Ptr long channel, int condition);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_io_add_watch(GIOChannel*, GIOCondition, GIOFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:107</i><br>
	 * Original signature : <code>guint g_io_add_watch(GIOChannel*, GIOCondition, GIOFunc, gpointer)</code> * /<br>
	 * extern guint g_io_add_watch(GIOChannel* channel, GIOCondition condition, GIOFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>guint g_io_add_watch(GIOChannel*, GIOCondition, GIOFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:107</i><br>
	 * Original signature : <code>guint g_io_add_watch(GIOChannel*, GIOCondition, GIOFunc, gpointer)</code> * /<br>
	 * extern guint g_io_add_watch(GIOChannel* channel, GIOCondition condition, GIOFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_io_channel_set_buffer_size(GIOChannel*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:109</i>
	 */
	public static void g_io_channel_set_buffer_size(Pointer<GIOChannel > channel, @org.bridj.ann.CLong long size) {
		g_io_channel_set_buffer_size(Pointer.getPeer(channel), size);
	}
	protected native static void g_io_channel_set_buffer_size(@Ptr long channel, @org.bridj.ann.CLong long size);
	/**
	 * Original signature : <code>gsize g_io_channel_get_buffer_size(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:111</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_io_channel_get_buffer_size(Pointer<GIOChannel > channel) {
		return g_io_channel_get_buffer_size(Pointer.getPeer(channel));
	}
	@org.bridj.ann.CLong 
	protected native static long g_io_channel_get_buffer_size(@Ptr long channel);
	/**
	 * Original signature : <code>GIOCondition g_io_channel_get_buffer_condition(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:113</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOCondition > g_io_channel_get_buffer_condition(Pointer<GIOChannel > channel) {
		return FlagSet.fromValue(g_io_channel_get_buffer_condition(Pointer.getPeer(channel)), GLibLibrary.GIOCondition.class);
	}
	protected native static int g_io_channel_get_buffer_condition(@Ptr long channel);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_set_flags(GIOChannel*, GIOFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:115</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOStatus > g_io_channel_set_flags(Pointer<GIOChannel > channel, IntValuedEnum<GLibLibrary.GIOFlags > flags, Pointer<Pointer<GError > > error) {
		return FlagSet.fromValue(g_io_channel_set_flags(Pointer.getPeer(channel), (int)flags.value(), Pointer.getPeer(error)), GLibLibrary.GIOStatus.class);
	}
	protected native static int g_io_channel_set_flags(@Ptr long channel, int flags, @Ptr long error);
	/**
	 * Original signature : <code>GIOFlags g_io_channel_get_flags(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:117</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOFlags > g_io_channel_get_flags(Pointer<GIOChannel > channel) {
		return FlagSet.fromValue(g_io_channel_get_flags(Pointer.getPeer(channel)), GLibLibrary.GIOFlags.class);
	}
	protected native static int g_io_channel_get_flags(@Ptr long channel);
	/**
	 * Original signature : <code>void g_io_channel_set_line_term(GIOChannel*, const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:119</i>
	 */
	public static void g_io_channel_set_line_term(Pointer<GIOChannel > channel, Pointer<Byte > line_term, int length) {
		g_io_channel_set_line_term(Pointer.getPeer(channel), Pointer.getPeer(line_term), length);
	}
	protected native static void g_io_channel_set_line_term(@Ptr long channel, @Ptr long line_term, int length);
	/**
	 * Original signature : <code>gchar* g_io_channel_get_line_term(GIOChannel*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:121</i>
	 */
	public static Pointer<Byte > g_io_channel_get_line_term(Pointer<GIOChannel > channel, Pointer<Integer > length) {
		return Pointer.pointerToAddress(g_io_channel_get_line_term(Pointer.getPeer(channel), Pointer.getPeer(length)), Byte.class);
	}
	@Ptr 
	protected native static long g_io_channel_get_line_term(@Ptr long channel, @Ptr long length);
	/**
	 * Original signature : <code>void g_io_channel_set_buffered(GIOChannel*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:123</i>
	 */
	public static void g_io_channel_set_buffered(Pointer<GIOChannel > channel, GLibLibrary.gboolean buffered) {
		g_io_channel_set_buffered(Pointer.getPeer(channel), buffered);
	}
	protected native static void g_io_channel_set_buffered(@Ptr long channel, GLibLibrary.gboolean buffered);
	/**
	 * Original signature : <code>gboolean g_io_channel_get_buffered(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:125</i>
	 */
	public static GLibLibrary.gboolean g_io_channel_get_buffered(Pointer<GIOChannel > channel) {
		return g_io_channel_get_buffered(Pointer.getPeer(channel));
	}
	protected native static GLibLibrary.gboolean g_io_channel_get_buffered(@Ptr long channel);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_set_encoding(GIOChannel*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:127</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOStatus > g_io_channel_set_encoding(Pointer<GIOChannel > channel, Pointer<Byte > encoding, Pointer<Pointer<GError > > error) {
		return FlagSet.fromValue(g_io_channel_set_encoding(Pointer.getPeer(channel), Pointer.getPeer(encoding), Pointer.getPeer(error)), GLibLibrary.GIOStatus.class);
	}
	protected native static int g_io_channel_set_encoding(@Ptr long channel, @Ptr long encoding, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_io_channel_get_encoding(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:129</i>
	 */
	public static Pointer<Byte > g_io_channel_get_encoding(Pointer<GIOChannel > channel) {
		return Pointer.pointerToAddress(g_io_channel_get_encoding(Pointer.getPeer(channel)), Byte.class);
	}
	@Ptr 
	protected native static long g_io_channel_get_encoding(@Ptr long channel);
	/**
	 * Original signature : <code>void g_io_channel_set_close_on_unref(GIOChannel*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:131</i>
	 */
	public static void g_io_channel_set_close_on_unref(Pointer<GIOChannel > channel, GLibLibrary.gboolean do_close) {
		g_io_channel_set_close_on_unref(Pointer.getPeer(channel), do_close);
	}
	protected native static void g_io_channel_set_close_on_unref(@Ptr long channel, GLibLibrary.gboolean do_close);
	/**
	 * Original signature : <code>gboolean g_io_channel_get_close_on_unref(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:133</i>
	 */
	public static GLibLibrary.gboolean g_io_channel_get_close_on_unref(Pointer<GIOChannel > channel) {
		return g_io_channel_get_close_on_unref(Pointer.getPeer(channel));
	}
	protected native static GLibLibrary.gboolean g_io_channel_get_close_on_unref(@Ptr long channel);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_flush(GIOChannel*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:135</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOStatus > g_io_channel_flush(Pointer<GIOChannel > channel, Pointer<Pointer<GError > > error) {
		return FlagSet.fromValue(g_io_channel_flush(Pointer.getPeer(channel), Pointer.getPeer(error)), GLibLibrary.GIOStatus.class);
	}
	protected native static int g_io_channel_flush(@Ptr long channel, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_read_line(GIOChannel*, gchar**, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:137</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOStatus > g_io_channel_read_line(Pointer<GIOChannel > channel, Pointer<Pointer<Byte > > str_return, Pointer<org.bridj.CLong > length, Pointer<org.bridj.CLong > terminator_pos, Pointer<Pointer<GError > > error) {
		return FlagSet.fromValue(g_io_channel_read_line(Pointer.getPeer(channel), Pointer.getPeer(str_return), Pointer.getPeer(length), Pointer.getPeer(terminator_pos), Pointer.getPeer(error)), GLibLibrary.GIOStatus.class);
	}
	protected native static int g_io_channel_read_line(@Ptr long channel, @Ptr long str_return, @Ptr long length, @Ptr long terminator_pos, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_read_line_string(GIOChannel*, GString*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:139</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOStatus > g_io_channel_read_line_string(Pointer<GIOChannel > channel, Pointer<GString > buffer, Pointer<org.bridj.CLong > terminator_pos, Pointer<Pointer<GError > > error) {
		return FlagSet.fromValue(g_io_channel_read_line_string(Pointer.getPeer(channel), Pointer.getPeer(buffer), Pointer.getPeer(terminator_pos), Pointer.getPeer(error)), GLibLibrary.GIOStatus.class);
	}
	protected native static int g_io_channel_read_line_string(@Ptr long channel, @Ptr long buffer, @Ptr long terminator_pos, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_read_to_end(GIOChannel*, gchar**, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:141</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOStatus > g_io_channel_read_to_end(Pointer<GIOChannel > channel, Pointer<Pointer<Byte > > str_return, Pointer<org.bridj.CLong > length, Pointer<Pointer<GError > > error) {
		return FlagSet.fromValue(g_io_channel_read_to_end(Pointer.getPeer(channel), Pointer.getPeer(str_return), Pointer.getPeer(length), Pointer.getPeer(error)), GLibLibrary.GIOStatus.class);
	}
	protected native static int g_io_channel_read_to_end(@Ptr long channel, @Ptr long str_return, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_read_chars(GIOChannel*, gchar*, gsize, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:143</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOStatus > g_io_channel_read_chars(Pointer<GIOChannel > channel, Pointer<Byte > buf, @org.bridj.ann.CLong long count, Pointer<org.bridj.CLong > bytes_read, Pointer<Pointer<GError > > error) {
		return FlagSet.fromValue(g_io_channel_read_chars(Pointer.getPeer(channel), Pointer.getPeer(buf), count, Pointer.getPeer(bytes_read), Pointer.getPeer(error)), GLibLibrary.GIOStatus.class);
	}
	protected native static int g_io_channel_read_chars(@Ptr long channel, @Ptr long buf, @org.bridj.ann.CLong long count, @Ptr long bytes_read, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_read_unichar(GIOChannel*, gunichar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:145</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOStatus > g_io_channel_read_unichar(Pointer<GIOChannel > channel, Pointer<Integer > thechar, Pointer<Pointer<GError > > error) {
		return FlagSet.fromValue(g_io_channel_read_unichar(Pointer.getPeer(channel), Pointer.getPeer(thechar), Pointer.getPeer(error)), GLibLibrary.GIOStatus.class);
	}
	protected native static int g_io_channel_read_unichar(@Ptr long channel, @Ptr long thechar, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_write_chars(GIOChannel*, const gchar*, gssize, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:147</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOStatus > g_io_channel_write_chars(Pointer<GIOChannel > channel, Pointer<Byte > buf, @org.bridj.ann.CLong long count, Pointer<org.bridj.CLong > bytes_written, Pointer<Pointer<GError > > error) {
		return FlagSet.fromValue(g_io_channel_write_chars(Pointer.getPeer(channel), Pointer.getPeer(buf), count, Pointer.getPeer(bytes_written), Pointer.getPeer(error)), GLibLibrary.GIOStatus.class);
	}
	protected native static int g_io_channel_write_chars(@Ptr long channel, @Ptr long buf, @org.bridj.ann.CLong long count, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_write_unichar(GIOChannel*, gunichar, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:149</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOStatus > g_io_channel_write_unichar(Pointer<GIOChannel > channel, int thechar, Pointer<Pointer<GError > > error) {
		return FlagSet.fromValue(g_io_channel_write_unichar(Pointer.getPeer(channel), thechar, Pointer.getPeer(error)), GLibLibrary.GIOStatus.class);
	}
	protected native static int g_io_channel_write_unichar(@Ptr long channel, int thechar, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_seek_position(GIOChannel*, gint64, GSeekType, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:151</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOStatus > g_io_channel_seek_position(Pointer<GIOChannel > channel, long offset, IntValuedEnum<GLibLibrary.GSeekType > type, Pointer<Pointer<GError > > error) {
		return FlagSet.fromValue(g_io_channel_seek_position(Pointer.getPeer(channel), offset, (int)type.value(), Pointer.getPeer(error)), GLibLibrary.GIOStatus.class);
	}
	protected native static int g_io_channel_seek_position(@Ptr long channel, long offset, int type, @Ptr long error);
	/**
	 * Original signature : <code>GIOChannel* g_io_channel_new_file(const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:153</i>
	 */
	public static Pointer<GIOChannel > g_io_channel_new_file(Pointer<Byte > filename, Pointer<Byte > mode, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_io_channel_new_file(Pointer.getPeer(filename), Pointer.getPeer(mode), Pointer.getPeer(error)), GIOChannel.class);
	}
	@Ptr 
	protected native static long g_io_channel_new_file(@Ptr long filename, @Ptr long mode, @Ptr long error);
	/**
	 * Original signature : <code>GQuark g_io_channel_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:155</i>
	 */
	public static native int g_io_channel_error_quark();
	/**
	 * Original signature : <code>GIOChannelError g_io_channel_error_from_errno(gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:157</i>
	 */
	public static IntValuedEnum<GLibLibrary.GIOChannelError > g_io_channel_error_from_errno(int en) {
		return FlagSet.fromValue(g_io_channel_error_from_errno$2(en), GLibLibrary.GIOChannelError.class);
	}
	protected native static int g_io_channel_error_from_errno$2(int en);
	/**
	 * On Unix, IO channels created with this function for any file<br>
	 * descriptor or socket.<br>
	 * * On Win32, this can be used either for files opened with the MSVCRT<br>
	 * (the Microsoft run-time C library) _open() or _pipe, including file<br>
	 * descriptors 0, 1 and 2 (corresponding to stdin, stdout and stderr),<br>
	 * or for Winsock SOCKETs. If the parameter is a legal file<br>
	 * descriptor, it is assumed to be such, otherwise it should be a<br>
	 * SOCKET. This relies on SOCKETs and file descriptors not<br>
	 * overlapping. If you want to be certain, call either<br>
	 * g_io_channel_win32_new_fd() or g_io_channel_win32_new_socket()<br>
	 * instead as appropriate.<br>
	 * * The term file descriptor as used in the context of Win32 refers to<br>
	 * the emulated Unix-like file descriptors MSVCRT provides. The native<br>
	 * corresponding concept is file HANDLE. There isn't as of yet a way to<br>
	 * get GIOChannels for Win32 file HANDLEs.<br>
	 * Original signature : <code>GIOChannel* g_io_channel_unix_new(int)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:176</i>
	 */
	public static Pointer<GIOChannel > g_io_channel_unix_new(int fd) {
		return Pointer.pointerToAddress(g_io_channel_unix_new$2(fd), GIOChannel.class);
	}
	@Ptr 
	protected native static long g_io_channel_unix_new$2(int fd);
	/**
	 * Original signature : <code>gint g_io_channel_unix_get_fd(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:178</i>
	 */
	public static int g_io_channel_unix_get_fd(Pointer<GIOChannel > channel) {
		return g_io_channel_unix_get_fd(Pointer.getPeer(channel));
	}
	protected native static int g_io_channel_unix_get_fd(@Ptr long channel);
	/**
	 * Original signature : <code>GQuark g_key_file_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:10</i>
	 */
	public static native int g_key_file_error_quark();
	/**
	 * Original signature : <code>GKeyFile* g_key_file_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:18</i>
	 */
	public static Pointer<GLibLibrary.GKeyFile > g_key_file_new() {
		return Pointer.pointerToAddress(g_key_file_new$2(), GLibLibrary.GKeyFile.class);
	}
	@Ptr 
	protected native static long g_key_file_new$2();
	/**
	 * Original signature : <code>GKeyFile* g_key_file_ref(GKeyFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:20</i>
	 */
	public static Pointer<GLibLibrary.GKeyFile > g_key_file_ref(Pointer<GLibLibrary.GKeyFile > key_file) {
		return Pointer.pointerToAddress(g_key_file_ref(Pointer.getPeer(key_file)), GLibLibrary.GKeyFile.class);
	}
	@Ptr 
	protected native static long g_key_file_ref(@Ptr long key_file);
	/**
	 * Original signature : <code>void g_key_file_unref(GKeyFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:22</i>
	 */
	public static void g_key_file_unref(Pointer<GLibLibrary.GKeyFile > key_file) {
		g_key_file_unref(Pointer.getPeer(key_file));
	}
	protected native static void g_key_file_unref(@Ptr long key_file);
	/**
	 * Original signature : <code>void g_key_file_free(GKeyFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:24</i>
	 */
	public static void g_key_file_free(Pointer<GLibLibrary.GKeyFile > key_file) {
		g_key_file_free(Pointer.getPeer(key_file));
	}
	protected native static void g_key_file_free(@Ptr long key_file);
	/**
	 * Original signature : <code>void g_key_file_set_list_separator(GKeyFile*, gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:26</i>
	 */
	public static void g_key_file_set_list_separator(Pointer<GLibLibrary.GKeyFile > key_file, byte separator) {
		g_key_file_set_list_separator(Pointer.getPeer(key_file), separator);
	}
	protected native static void g_key_file_set_list_separator(@Ptr long key_file, byte separator);
	/**
	 * Original signature : <code>gboolean g_key_file_load_from_file(GKeyFile*, const gchar*, GKeyFileFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:28</i>
	 */
	public static GLibLibrary.gboolean g_key_file_load_from_file(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > file, IntValuedEnum<GLibLibrary.GKeyFileFlags > flags, Pointer<Pointer<GError > > error) {
		return g_key_file_load_from_file(Pointer.getPeer(key_file), Pointer.getPeer(file), (int)flags.value(), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_key_file_load_from_file(@Ptr long key_file, @Ptr long file, int flags, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_key_file_load_from_data(GKeyFile*, const gchar*, gsize, GKeyFileFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:30</i>
	 */
	public static GLibLibrary.gboolean g_key_file_load_from_data(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > data, @org.bridj.ann.CLong long length, IntValuedEnum<GLibLibrary.GKeyFileFlags > flags, Pointer<Pointer<GError > > error) {
		return g_key_file_load_from_data(Pointer.getPeer(key_file), Pointer.getPeer(data), length, (int)flags.value(), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_key_file_load_from_data(@Ptr long key_file, @Ptr long data, @org.bridj.ann.CLong long length, int flags, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_key_file_load_from_dirs(GKeyFile*, const gchar*, const gchar**, gchar**, GKeyFileFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:32</i>
	 */
	public static GLibLibrary.gboolean g_key_file_load_from_dirs(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > file, Pointer<Pointer<Byte > > search_dirs, Pointer<Pointer<Byte > > full_path, IntValuedEnum<GLibLibrary.GKeyFileFlags > flags, Pointer<Pointer<GError > > error) {
		return g_key_file_load_from_dirs(Pointer.getPeer(key_file), Pointer.getPeer(file), Pointer.getPeer(search_dirs), Pointer.getPeer(full_path), (int)flags.value(), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_key_file_load_from_dirs(@Ptr long key_file, @Ptr long file, @Ptr long search_dirs, @Ptr long full_path, int flags, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_key_file_load_from_data_dirs(GKeyFile*, const gchar*, gchar**, GKeyFileFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:34</i>
	 */
	public static GLibLibrary.gboolean g_key_file_load_from_data_dirs(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > file, Pointer<Pointer<Byte > > full_path, IntValuedEnum<GLibLibrary.GKeyFileFlags > flags, Pointer<Pointer<GError > > error) {
		return g_key_file_load_from_data_dirs(Pointer.getPeer(key_file), Pointer.getPeer(file), Pointer.getPeer(full_path), (int)flags.value(), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_key_file_load_from_data_dirs(@Ptr long key_file, @Ptr long file, @Ptr long full_path, int flags, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_key_file_to_data(GKeyFile*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:36</i>
	 */
	public static Pointer<Byte > g_key_file_to_data(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<org.bridj.CLong > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_to_data(Pointer.getPeer(key_file), Pointer.getPeer(length), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_key_file_to_data(@Ptr long key_file, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_key_file_get_start_group(GKeyFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:38</i>
	 */
	public static Pointer<Byte > g_key_file_get_start_group(Pointer<GLibLibrary.GKeyFile > key_file) {
		return Pointer.pointerToAddress(g_key_file_get_start_group(Pointer.getPeer(key_file)), Byte.class);
	}
	@Ptr 
	protected native static long g_key_file_get_start_group(@Ptr long key_file);
	/**
	 * Original signature : <code>gchar** g_key_file_get_groups(GKeyFile*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:40</i>
	 */
	public static Pointer<Pointer<Byte > > g_key_file_get_groups(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<org.bridj.CLong > length) {
		return Pointer.pointerToAddress(g_key_file_get_groups(Pointer.getPeer(key_file), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_key_file_get_groups(@Ptr long key_file, @Ptr long length);
	/**
	 * Original signature : <code>gchar** g_key_file_get_keys(GKeyFile*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:42</i>
	 */
	public static Pointer<Pointer<Byte > > g_key_file_get_keys(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<org.bridj.CLong > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_keys(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(length), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_key_file_get_keys(@Ptr long key_file, @Ptr long group_name, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_key_file_has_group(GKeyFile*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:44</i>
	 */
	public static GLibLibrary.gboolean g_key_file_has_group(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name) {
		return g_key_file_has_group(Pointer.getPeer(key_file), Pointer.getPeer(group_name));
	}
	protected native static GLibLibrary.gboolean g_key_file_has_group(@Ptr long key_file, @Ptr long group_name);
	/**
	 * Original signature : <code>gboolean g_key_file_has_key(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:46</i>
	 */
	public static GLibLibrary.gboolean g_key_file_has_key(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Pointer<GError > > error) {
		return g_key_file_has_key(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_key_file_has_key(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_key_file_get_value(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:48</i>
	 */
	public static Pointer<Byte > g_key_file_get_value(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_value(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_key_file_get_value(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_value(GKeyFile*, const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:50</i>
	 */
	public static void g_key_file_set_value(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Byte > value) {
		g_key_file_set_value(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static void g_key_file_set_value(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>gchar* g_key_file_get_string(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:52</i>
	 */
	public static Pointer<Byte > g_key_file_get_string(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_string(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_key_file_get_string(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_string(GKeyFile*, const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:54</i>
	 */
	public static void g_key_file_set_string(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Byte > string) {
		g_key_file_set_string(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(string));
	}
	protected native static void g_key_file_set_string(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long string);
	/**
	 * Original signature : <code>gchar* g_key_file_get_locale_string(GKeyFile*, const gchar*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:56</i>
	 */
	public static Pointer<Byte > g_key_file_get_locale_string(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Byte > locale, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_locale_string(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(locale), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_key_file_get_locale_string(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long locale, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_locale_string(GKeyFile*, const gchar*, const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:58</i>
	 */
	public static void g_key_file_set_locale_string(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Byte > locale, Pointer<Byte > string) {
		g_key_file_set_locale_string(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(locale), Pointer.getPeer(string));
	}
	protected native static void g_key_file_set_locale_string(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long locale, @Ptr long string);
	/**
	 * Original signature : <code>gboolean g_key_file_get_boolean(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:60</i>
	 */
	public static GLibLibrary.gboolean g_key_file_get_boolean(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Pointer<GError > > error) {
		return g_key_file_get_boolean(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_key_file_get_boolean(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_boolean(GKeyFile*, const gchar*, const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:62</i>
	 */
	public static void g_key_file_set_boolean(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, GLibLibrary.gboolean value) {
		g_key_file_set_boolean(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), value);
	}
	protected native static void g_key_file_set_boolean(@Ptr long key_file, @Ptr long group_name, @Ptr long key, GLibLibrary.gboolean value);
	/**
	 * Original signature : <code>gint g_key_file_get_integer(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:64</i>
	 */
	public static int g_key_file_get_integer(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Pointer<GError > > error) {
		return g_key_file_get_integer(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error));
	}
	protected native static int g_key_file_get_integer(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_integer(GKeyFile*, const gchar*, const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:66</i>
	 */
	public static void g_key_file_set_integer(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, int value) {
		g_key_file_set_integer(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), value);
	}
	protected native static void g_key_file_set_integer(@Ptr long key_file, @Ptr long group_name, @Ptr long key, int value);
	/**
	 * Original signature : <code>gint64 g_key_file_get_int64(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:68</i>
	 */
	public static long g_key_file_get_int64(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Pointer<GError > > error) {
		return g_key_file_get_int64(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error));
	}
	protected native static long g_key_file_get_int64(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_int64(GKeyFile*, const gchar*, const gchar*, gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:70</i>
	 */
	public static void g_key_file_set_int64(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, long value) {
		g_key_file_set_int64(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), value);
	}
	protected native static void g_key_file_set_int64(@Ptr long key_file, @Ptr long group_name, @Ptr long key, long value);
	/**
	 * Original signature : <code>guint64 g_key_file_get_uint64(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:72</i>
	 */
	public static long g_key_file_get_uint64(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Pointer<GError > > error) {
		return g_key_file_get_uint64(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error));
	}
	protected native static long g_key_file_get_uint64(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_uint64(GKeyFile*, const gchar*, const gchar*, guint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:74</i>
	 */
	public static void g_key_file_set_uint64(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, long value) {
		g_key_file_set_uint64(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), value);
	}
	protected native static void g_key_file_set_uint64(@Ptr long key_file, @Ptr long group_name, @Ptr long key, long value);
	/**
	 * Original signature : <code>gdouble g_key_file_get_double(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:76</i>
	 */
	public static double g_key_file_get_double(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Pointer<GError > > error) {
		return g_key_file_get_double(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error));
	}
	protected native static double g_key_file_get_double(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_double(GKeyFile*, const gchar*, const gchar*, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:78</i>
	 */
	public static void g_key_file_set_double(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, double value) {
		g_key_file_set_double(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), value);
	}
	protected native static void g_key_file_set_double(@Ptr long key_file, @Ptr long group_name, @Ptr long key, double value);
	/**
	 * Original signature : <code>gchar** g_key_file_get_string_list(GKeyFile*, const gchar*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:80</i>
	 */
	public static Pointer<Pointer<Byte > > g_key_file_get_string_list(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<org.bridj.CLong > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_string_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(length), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_key_file_get_string_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_string_list(GKeyFile*, const gchar*, const gchar*, const const gchar*[], gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:82</i>
	 */
	public static void g_key_file_set_string_list(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Pointer<Byte > > list, @org.bridj.ann.CLong long length) {
		g_key_file_set_string_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(list), length);
	}
	protected native static void g_key_file_set_string_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long list, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>gchar** g_key_file_get_locale_string_list(GKeyFile*, const gchar*, const gchar*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:84</i>
	 */
	public static Pointer<Pointer<Byte > > g_key_file_get_locale_string_list(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Byte > locale, Pointer<org.bridj.CLong > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_locale_string_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(locale), Pointer.getPeer(length), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_key_file_get_locale_string_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long locale, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_locale_string_list(GKeyFile*, const gchar*, const gchar*, const gchar*, const const gchar*[], gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:86</i>
	 */
	public static void g_key_file_set_locale_string_list(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Byte > locale, Pointer<Pointer<Byte > > list, @org.bridj.ann.CLong long length) {
		g_key_file_set_locale_string_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(locale), Pointer.getPeer(list), length);
	}
	protected native static void g_key_file_set_locale_string_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long locale, @Ptr long list, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>gboolean* g_key_file_get_boolean_list(GKeyFile*, const gchar*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:88</i>
	 */
	public static Pointer<GLibLibrary.gboolean > g_key_file_get_boolean_list(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<org.bridj.CLong > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_boolean_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(length), Pointer.getPeer(error)), GLibLibrary.gboolean.class);
	}
	@Ptr 
	protected native static long g_key_file_get_boolean_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_boolean_list(GKeyFile*, const gchar*, const gchar*, gboolean[], gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:90</i>
	 */
	public static void g_key_file_set_boolean_list(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<GLibLibrary.gboolean > list, @org.bridj.ann.CLong long length) {
		g_key_file_set_boolean_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(list), length);
	}
	protected native static void g_key_file_set_boolean_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long list, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>gint* g_key_file_get_integer_list(GKeyFile*, const gchar*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:92</i>
	 */
	public static Pointer<Integer > g_key_file_get_integer_list(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<org.bridj.CLong > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_integer_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(length), Pointer.getPeer(error)), Integer.class);
	}
	@Ptr 
	protected native static long g_key_file_get_integer_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_double_list(GKeyFile*, const gchar*, const gchar*, gdouble[], gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:94</i>
	 */
	public static void g_key_file_set_double_list(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Double > list, @org.bridj.ann.CLong long length) {
		g_key_file_set_double_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(list), length);
	}
	protected native static void g_key_file_set_double_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long list, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>gdouble* g_key_file_get_double_list(GKeyFile*, const gchar*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:96</i>
	 */
	public static Pointer<Double > g_key_file_get_double_list(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<org.bridj.CLong > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_double_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(length), Pointer.getPeer(error)), Double.class);
	}
	@Ptr 
	protected native static long g_key_file_get_double_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_integer_list(GKeyFile*, const gchar*, const gchar*, gint[], gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:98</i>
	 */
	public static void g_key_file_set_integer_list(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Integer > list, @org.bridj.ann.CLong long length) {
		g_key_file_set_integer_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(list), length);
	}
	protected native static void g_key_file_set_integer_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long list, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>gboolean g_key_file_set_comment(GKeyFile*, const gchar*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:100</i>
	 */
	public static GLibLibrary.gboolean g_key_file_set_comment(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Byte > comment, Pointer<Pointer<GError > > error) {
		return g_key_file_set_comment(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(comment), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_key_file_set_comment(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long comment, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_key_file_get_comment(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:102</i>
	 */
	public static Pointer<Byte > g_key_file_get_comment(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_comment(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_key_file_get_comment(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_key_file_remove_comment(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:104</i>
	 */
	public static GLibLibrary.gboolean g_key_file_remove_comment(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Pointer<GError > > error) {
		return g_key_file_remove_comment(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_key_file_remove_comment(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_key_file_remove_key(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:106</i>
	 */
	public static GLibLibrary.gboolean g_key_file_remove_key(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Byte > key, Pointer<Pointer<GError > > error) {
		return g_key_file_remove_key(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_key_file_remove_key(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_key_file_remove_group(GKeyFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:108</i>
	 */
	public static GLibLibrary.gboolean g_key_file_remove_group(Pointer<GLibLibrary.GKeyFile > key_file, Pointer<Byte > group_name, Pointer<Pointer<GError > > error) {
		return g_key_file_remove_group(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_key_file_remove_group(@Ptr long key_file, @Ptr long group_name, @Ptr long error);
	/**
	 * Original signature : <code>GMappedFile* g_mapped_file_new(const gchar*, gboolean, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:3</i>
	 */
	public static Pointer<GLibLibrary.GMappedFile > g_mapped_file_new(Pointer<Byte > filename, GLibLibrary.gboolean writable, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_mapped_file_new(Pointer.getPeer(filename), writable, Pointer.getPeer(error)), GLibLibrary.GMappedFile.class);
	}
	@Ptr 
	protected native static long g_mapped_file_new(@Ptr long filename, GLibLibrary.gboolean writable, @Ptr long error);
	/**
	 * Original signature : <code>GMappedFile* g_mapped_file_new_from_fd(gint, gboolean, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:5</i>
	 */
	public static Pointer<GLibLibrary.GMappedFile > g_mapped_file_new_from_fd(int fd, GLibLibrary.gboolean writable, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_mapped_file_new_from_fd(fd, writable, Pointer.getPeer(error)), GLibLibrary.GMappedFile.class);
	}
	@Ptr 
	protected native static long g_mapped_file_new_from_fd(int fd, GLibLibrary.gboolean writable, @Ptr long error);
	/**
	 * Original signature : <code>gsize g_mapped_file_get_length(GMappedFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:7</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_mapped_file_get_length(Pointer<GLibLibrary.GMappedFile > file) {
		return g_mapped_file_get_length(Pointer.getPeer(file));
	}
	@org.bridj.ann.CLong 
	protected native static long g_mapped_file_get_length(@Ptr long file);
	/**
	 * Original signature : <code>gchar* g_mapped_file_get_contents(GMappedFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:9</i>
	 */
	public static Pointer<Byte > g_mapped_file_get_contents(Pointer<GLibLibrary.GMappedFile > file) {
		return Pointer.pointerToAddress(g_mapped_file_get_contents(Pointer.getPeer(file)), Byte.class);
	}
	@Ptr 
	protected native static long g_mapped_file_get_contents(@Ptr long file);
	/**
	 * Original signature : <code>GBytes* g_mapped_file_get_bytes(GMappedFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:11</i>
	 */
	public static Pointer<GLibLibrary.GBytes > g_mapped_file_get_bytes(Pointer<GLibLibrary.GMappedFile > file) {
		return Pointer.pointerToAddress(g_mapped_file_get_bytes(Pointer.getPeer(file)), GLibLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_mapped_file_get_bytes(@Ptr long file);
	/**
	 * Original signature : <code>GMappedFile* g_mapped_file_ref(GMappedFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:13</i>
	 */
	public static Pointer<GLibLibrary.GMappedFile > g_mapped_file_ref(Pointer<GLibLibrary.GMappedFile > file) {
		return Pointer.pointerToAddress(g_mapped_file_ref(Pointer.getPeer(file)), GLibLibrary.GMappedFile.class);
	}
	@Ptr 
	protected native static long g_mapped_file_ref(@Ptr long file);
	/**
	 * Original signature : <code>void g_mapped_file_unref(GMappedFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:15</i>
	 */
	public static void g_mapped_file_unref(Pointer<GLibLibrary.GMappedFile > file) {
		g_mapped_file_unref(Pointer.getPeer(file));
	}
	protected native static void g_mapped_file_unref(@Ptr long file);
	/**
	 * Original signature : <code>void g_mapped_file_free(GMappedFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:17</i>
	 */
	public static void g_mapped_file_free(Pointer<GLibLibrary.GMappedFile > file) {
		g_mapped_file_free(Pointer.getPeer(file));
	}
	protected native static void g_mapped_file_free(@Ptr long file);
	/**
	 * Original signature : <code>GQuark g_markup_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:30</i>
	 */
	public static native int g_markup_error_quark();
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GMarkupParseContext* g_markup_parse_context_new(const GMarkupParser*, GMarkupParseFlags, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:107</i><br>
	 * Original signature : <code>GMarkupParseContext* g_markup_parse_context_new(const GMarkupParser*, GMarkupParseFlags, gpointer, GDestroyNotify)</code> * /<br>
	 * extern GMarkupParseContext* g_markup_parse_context_new(const GMarkupParser* parser, GMarkupParseFlags flags, gpointer user_data, GDestroyNotify user_data_dnotify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GMarkupParseContext* g_markup_parse_context_new(const GMarkupParser*, GMarkupParseFlags, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:107</i><br>
	 * Original signature : <code>GMarkupParseContext* g_markup_parse_context_new(const GMarkupParser*, GMarkupParseFlags, gpointer, GDestroyNotify)</code> * /<br>
	 * extern GMarkupParseContext* g_markup_parse_context_new(const GMarkupParser* parser, GMarkupParseFlags flags, gpointer user_data, GDestroyNotify user_data_dnotify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GMarkupParseContext* g_markup_parse_context_ref(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:109</i>
	 */
	public static Pointer<GLibLibrary.GMarkupParseContext > g_markup_parse_context_ref(Pointer<GLibLibrary.GMarkupParseContext > context) {
		return Pointer.pointerToAddress(g_markup_parse_context_ref(Pointer.getPeer(context)), GLibLibrary.GMarkupParseContext.class);
	}
	@Ptr 
	protected native static long g_markup_parse_context_ref(@Ptr long context);
	/**
	 * Original signature : <code>void g_markup_parse_context_unref(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:111</i>
	 */
	public static void g_markup_parse_context_unref(Pointer<GLibLibrary.GMarkupParseContext > context) {
		g_markup_parse_context_unref(Pointer.getPeer(context));
	}
	protected native static void g_markup_parse_context_unref(@Ptr long context);
	/**
	 * Original signature : <code>void g_markup_parse_context_free(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:113</i>
	 */
	public static void g_markup_parse_context_free(Pointer<GLibLibrary.GMarkupParseContext > context) {
		g_markup_parse_context_free(Pointer.getPeer(context));
	}
	protected native static void g_markup_parse_context_free(@Ptr long context);
	/**
	 * Original signature : <code>gboolean g_markup_parse_context_parse(GMarkupParseContext*, const gchar*, gssize, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:115</i>
	 */
	public static GLibLibrary.gboolean g_markup_parse_context_parse(Pointer<GLibLibrary.GMarkupParseContext > context, Pointer<Byte > text, @org.bridj.ann.CLong long text_len, Pointer<Pointer<GError > > error) {
		return g_markup_parse_context_parse(Pointer.getPeer(context), Pointer.getPeer(text), text_len, Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_markup_parse_context_parse(@Ptr long context, @Ptr long text, @org.bridj.ann.CLong long text_len, @Ptr long error);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_markup_parse_context_push(GMarkupParseContext*, const GMarkupParser*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:117</i><br>
	 * Original signature : <code>void g_markup_parse_context_push(GMarkupParseContext*, const GMarkupParser*, gpointer)</code> * /<br>
	 * extern void g_markup_parse_context_push(GMarkupParseContext* context, const GMarkupParser* parser, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_markup_parse_context_push(GMarkupParseContext*, const GMarkupParser*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:117</i><br>
	 * Original signature : <code>void g_markup_parse_context_push(GMarkupParseContext*, const GMarkupParser*, gpointer)</code> * /<br>
	 * extern void g_markup_parse_context_push(GMarkupParseContext* context, const GMarkupParser* parser, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_markup_parse_context_pop(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:119</i><br>
	 * Original signature : <code>gpointer g_markup_parse_context_pop(GMarkupParseContext*)</code> * /<br>
	 * extern gpointer g_markup_parse_context_pop(GMarkupParseContext* context);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_markup_parse_context_pop(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:119</i><br>
	 * Original signature : <code>gpointer g_markup_parse_context_pop(GMarkupParseContext*)</code> * /<br>
	 * extern gpointer g_markup_parse_context_pop(GMarkupParseContext* context);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gboolean g_markup_parse_context_end_parse(GMarkupParseContext*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:121</i>
	 */
	public static GLibLibrary.gboolean g_markup_parse_context_end_parse(Pointer<GLibLibrary.GMarkupParseContext > context, Pointer<Pointer<GError > > error) {
		return g_markup_parse_context_end_parse(Pointer.getPeer(context), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_markup_parse_context_end_parse(@Ptr long context, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_markup_parse_context_get_element(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:123</i>
	 */
	public static Pointer<Byte > g_markup_parse_context_get_element(Pointer<GLibLibrary.GMarkupParseContext > context) {
		return Pointer.pointerToAddress(g_markup_parse_context_get_element(Pointer.getPeer(context)), Byte.class);
	}
	@Ptr 
	protected native static long g_markup_parse_context_get_element(@Ptr long context);
	/**
	 * Original signature : <code>GSList* g_markup_parse_context_get_element_stack(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:125</i>
	 */
	public static Pointer<GSList > g_markup_parse_context_get_element_stack(Pointer<GLibLibrary.GMarkupParseContext > context) {
		return Pointer.pointerToAddress(g_markup_parse_context_get_element_stack(Pointer.getPeer(context)), GSList.class);
	}
	@Ptr 
	protected native static long g_markup_parse_context_get_element_stack(@Ptr long context);
	/**
	 * For user-constructed error messages, has no precise semantics<br>
	 * Original signature : <code>void g_markup_parse_context_get_position(GMarkupParseContext*, gint*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:130</i>
	 */
	public static void g_markup_parse_context_get_position(Pointer<GLibLibrary.GMarkupParseContext > context, Pointer<Integer > line_number, Pointer<Integer > char_number) {
		g_markup_parse_context_get_position(Pointer.getPeer(context), Pointer.getPeer(line_number), Pointer.getPeer(char_number));
	}
	protected native static void g_markup_parse_context_get_position(@Ptr long context, @Ptr long line_number, @Ptr long char_number);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_markup_parse_context_get_user_data(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:132</i><br>
	 * Original signature : <code>gpointer g_markup_parse_context_get_user_data(GMarkupParseContext*)</code> * /<br>
	 * extern gpointer g_markup_parse_context_get_user_data(GMarkupParseContext* context);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_markup_parse_context_get_user_data(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:132</i><br>
	 * Original signature : <code>gpointer g_markup_parse_context_get_user_data(GMarkupParseContext*)</code> * /<br>
	 * extern gpointer g_markup_parse_context_get_user_data(GMarkupParseContext* context);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * useful when saving<br>
	 * Original signature : <code>gchar* g_markup_escape_text(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:137</i>
	 */
	public static Pointer<Byte > g_markup_escape_text(Pointer<Byte > text, @org.bridj.ann.CLong long length) {
		return Pointer.pointerToAddress(g_markup_escape_text(Pointer.getPeer(text), length), Byte.class);
	}
	@Ptr 
	protected native static long g_markup_escape_text(@Ptr long text, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>gchar* g_markup_printf_escaped(const char*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:139</i>
	 */
	public static Pointer<Byte > g_markup_printf_escaped(Pointer<Byte > format, Object... varArgs1) {
		return Pointer.pointerToAddress(g_markup_printf_escaped(Pointer.getPeer(format), varArgs1), Byte.class);
	}
	@Ptr 
	protected native static long g_markup_printf_escaped(@Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>gchar* g_markup_vprintf_escaped(const char*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:141</i>
	 */
	public static Pointer<Byte > g_markup_vprintf_escaped(Pointer<Byte > format, Object... args) {
		return Pointer.pointerToAddress(g_markup_vprintf_escaped(Pointer.getPeer(format), args), Byte.class);
	}
	@Ptr 
	protected native static long g_markup_vprintf_escaped(@Ptr long format, Object... args);
	/**
	 * useful from start_element<br>
	 * Original signature : <code>gboolean g_markup_collect_attributes(const gchar*, const gchar**, const gchar**, GError**, GMarkupCollectType, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:154</i>
	 */
	public static GLibLibrary.gboolean g_markup_collect_attributes(Pointer<Byte > element_name, Pointer<Pointer<Byte > > attribute_names, Pointer<Pointer<Byte > > attribute_values, Pointer<Pointer<GError > > error, IntValuedEnum<GLibLibrary.GMarkupCollectType > first_type, Pointer<Byte > first_attr, Object... varArgs1) {
		return g_markup_collect_attributes(Pointer.getPeer(element_name), Pointer.getPeer(attribute_names), Pointer.getPeer(attribute_values), Pointer.getPeer(error), (int)first_type.value(), Pointer.getPeer(first_attr), varArgs1);
	}
	protected native static GLibLibrary.gboolean g_markup_collect_attributes(@Ptr long element_name, @Ptr long attribute_names, @Ptr long attribute_values, @Ptr long error, int first_type, @Ptr long first_attr, Object... varArgs1);
	/**
	 * calculate a string size, guaranteed to fit format + args.<br>
	 * Original signature : <code>gsize g_printf_string_upper_bound(const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:5</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_printf_string_upper_bound(Pointer<Byte > format, Object... args) {
		return g_printf_string_upper_bound(Pointer.getPeer(format), args);
	}
	@org.bridj.ann.CLong 
	protected native static long g_printf_string_upper_bound(@Ptr long format, Object... args);
	/**
	 * SKIPPED:<br>
	 * Logging mechanism<br>
	 * Original signature : <code>guint g_log_set_handler(const gchar*, GLogLevelFlags, GLogFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:25</i><br>
	 * Logging mechanism<br>
	 * Original signature : <code>guint g_log_set_handler(const gchar*, GLogLevelFlags, GLogFunc, gpointer)</code><br>
	 * /<br>
	 * extern guint g_log_set_handler(const gchar* log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Logging mechanism<br>
	 * Original signature : <code>guint g_log_set_handler(const gchar*, GLogLevelFlags, GLogFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:25</i><br>
	 * Logging mechanism<br>
	 * Original signature : <code>guint g_log_set_handler(const gchar*, GLogLevelFlags, GLogFunc, gpointer)</code><br>
	 * /<br>
	 * extern guint g_log_set_handler(const gchar* log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_log_remove_handler(const gchar*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:27</i>
	 */
	public static void g_log_remove_handler(Pointer<Byte > log_domain, int handler_id) {
		g_log_remove_handler(Pointer.getPeer(log_domain), handler_id);
	}
	protected native static void g_log_remove_handler(@Ptr long log_domain, int handler_id);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_log_default_handler(const gchar*, GLogLevelFlags, const gchar*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:29</i><br>
	 * Original signature : <code>void g_log_default_handler(const gchar*, GLogLevelFlags, const gchar*, gpointer)</code> * /<br>
	 * extern void g_log_default_handler(const gchar* log_domain, GLogLevelFlags log_level, const gchar* message, gpointer unused_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_log_default_handler(const gchar*, GLogLevelFlags, const gchar*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:29</i><br>
	 * Original signature : <code>void g_log_default_handler(const gchar*, GLogLevelFlags, const gchar*, gpointer)</code> * /<br>
	 * extern void g_log_default_handler(const gchar* log_domain, GLogLevelFlags log_level, const gchar* message, gpointer unused_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GLogFunc g_log_set_default_handler(GLogFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:31</i><br>
	 * Original signature : <code>GLogFunc g_log_set_default_handler(GLogFunc, gpointer)</code> * /<br>
	 * extern GLogFunc g_log_set_default_handler(GLogFunc log_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GLogFunc g_log_set_default_handler(GLogFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:31</i><br>
	 * Original signature : <code>GLogFunc g_log_set_default_handler(GLogFunc, gpointer)</code> * /<br>
	 * extern GLogFunc g_log_set_default_handler(GLogFunc log_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_log(const gchar*, GLogLevelFlags, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:33</i>
	 */
	public static void g_log(Pointer<Byte > log_domain, IntValuedEnum<GLibLibrary.GLogLevelFlags > log_level, Pointer<Byte > format, Object... varArgs1) {
		g_log(Pointer.getPeer(log_domain), (int)log_level.value(), Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_log(@Ptr long log_domain, int log_level, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>void g_logv(const gchar*, GLogLevelFlags, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:35</i>
	 */
	public static void g_logv(Pointer<Byte > log_domain, IntValuedEnum<GLibLibrary.GLogLevelFlags > log_level, Pointer<Byte > format, Object... args) {
		g_logv(Pointer.getPeer(log_domain), (int)log_level.value(), Pointer.getPeer(format), args);
	}
	protected native static void g_logv(@Ptr long log_domain, int log_level, @Ptr long format, Object... args);
	/**
	 * Original signature : <code>GLogLevelFlags g_log_set_fatal_mask(const gchar*, GLogLevelFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:37</i>
	 */
	public static IntValuedEnum<GLibLibrary.GLogLevelFlags > g_log_set_fatal_mask(Pointer<Byte > log_domain, IntValuedEnum<GLibLibrary.GLogLevelFlags > fatal_mask) {
		return FlagSet.fromValue(g_log_set_fatal_mask(Pointer.getPeer(log_domain), (int)fatal_mask.value()), GLibLibrary.GLogLevelFlags.class);
	}
	protected native static int g_log_set_fatal_mask(@Ptr long log_domain, int fatal_mask);
	/**
	 * Original signature : <code>GLogLevelFlags g_log_set_always_fatal(GLogLevelFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:39</i>
	 */
	public static IntValuedEnum<GLibLibrary.GLogLevelFlags > g_log_set_always_fatal(IntValuedEnum<GLibLibrary.GLogLevelFlags > fatal_mask) {
		return FlagSet.fromValue(g_log_set_always_fatal((int)fatal_mask.value()), GLibLibrary.GLogLevelFlags.class);
	}
	protected native static int g_log_set_always_fatal(int fatal_mask);
	/**
	 * SKIPPED:<br>
	 * internal<br>
	 * Original signature : <code>void _g_log_fallback_handler(const gchar*, GLogLevelFlags, const gchar*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:44</i><br>
	 * internal<br>
	 * Original signature : <code>void _g_log_fallback_handler(const gchar*, GLogLevelFlags, const gchar*, gpointer)</code><br>
	 * /<br>
	 * void _g_log_fallback_handler(const gchar* log_domain, GLogLevelFlags log_level, const gchar* message, gpointer unused_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * internal<br>
	 * Original signature : <code>void _g_log_fallback_handler(const gchar*, GLogLevelFlags, const gchar*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:44</i><br>
	 * internal<br>
	 * Original signature : <code>void _g_log_fallback_handler(const gchar*, GLogLevelFlags, const gchar*, gpointer)</code><br>
	 * /<br>
	 * void _g_log_fallback_handler(const gchar* log_domain, GLogLevelFlags log_level, const gchar* message, gpointer unused_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Internal functions, used to implement the following macros<br>
	 * Original signature : <code>void g_return_if_fail_warning(const char*, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:49</i>
	 */
	public static void g_return_if_fail_warning(Pointer<Byte > log_domain, Pointer<Byte > pretty_function, Pointer<Byte > expression) {
		g_return_if_fail_warning(Pointer.getPeer(log_domain), Pointer.getPeer(pretty_function), Pointer.getPeer(expression));
	}
	protected native static void g_return_if_fail_warning(@Ptr long log_domain, @Ptr long pretty_function, @Ptr long expression);
	/**
	 * Original signature : <code>void g_warn_message(const char*, const char*, int, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:51</i>
	 */
	public static void g_warn_message(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func, Pointer<Byte > warnexpr) {
		g_warn_message(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func), Pointer.getPeer(warnexpr));
	}
	protected native static void g_warn_message(@Ptr long domain, @Ptr long file, int line, @Ptr long func, @Ptr long warnexpr);
	/**
	 * Original signature : <code>void g_assert_warning(const char*, const char*, const int, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:53</i>
	 */
	public static void g_assert_warning(Pointer<Byte > log_domain, Pointer<Byte > file, int line, Pointer<Byte > pretty_function, Pointer<Byte > expression) {
		g_assert_warning(Pointer.getPeer(log_domain), Pointer.getPeer(file), line, Pointer.getPeer(pretty_function), Pointer.getPeer(expression));
	}
	protected native static void g_assert_warning(@Ptr long log_domain, @Ptr long file, int line, @Ptr long pretty_function, @Ptr long expression);
	/**
	 * Original signature : <code>void g_print(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:62</i>
	 */
	public static void g_print(Pointer<Byte > format, Object... varArgs1) {
		g_print(Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_print(@Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>GPrintFunc g_set_print_handler(GPrintFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:64</i>
	 */
	public static Pointer<GLibLibrary.GPrintFunc > g_set_print_handler(Pointer<GLibLibrary.GPrintFunc > func) {
		return Pointer.pointerToAddress(g_set_print_handler(Pointer.getPeer(func)), GLibLibrary.GPrintFunc.class);
	}
	@Ptr 
	protected native static long g_set_print_handler(@Ptr long func);
	/**
	 * Original signature : <code>void g_printerr(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:66</i>
	 */
	public static void g_printerr(Pointer<Byte > format, Object... varArgs1) {
		g_printerr(Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_printerr(@Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>GPrintFunc g_set_printerr_handler(GPrintFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:68</i>
	 */
	public static Pointer<GLibLibrary.GPrintFunc > g_set_printerr_handler(Pointer<GLibLibrary.GPrintFunc > func) {
		return Pointer.pointerToAddress(g_set_printerr_handler(Pointer.getPeer(func)), GLibLibrary.GPrintFunc.class);
	}
	@Ptr 
	protected native static long g_set_printerr_handler(@Ptr long func);
	/**
	 * Original signature : <code>GQuark g_option_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:150</i>
	 */
	public static native int g_option_error_quark();
	/**
	 * Original signature : <code>GOptionContext* g_option_context_new(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:226</i>
	 */
	public static Pointer<GLibLibrary.GOptionContext > g_option_context_new(Pointer<Byte > parameter_string) {
		return Pointer.pointerToAddress(g_option_context_new(Pointer.getPeer(parameter_string)), GLibLibrary.GOptionContext.class);
	}
	@Ptr 
	protected native static long g_option_context_new(@Ptr long parameter_string);
	/**
	 * Original signature : <code>void g_option_context_set_summary(GOptionContext*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:228</i>
	 */
	public static void g_option_context_set_summary(Pointer<GLibLibrary.GOptionContext > context, Pointer<Byte > summary) {
		g_option_context_set_summary(Pointer.getPeer(context), Pointer.getPeer(summary));
	}
	protected native static void g_option_context_set_summary(@Ptr long context, @Ptr long summary);
	/**
	 * Original signature : <code>gchar* g_option_context_get_summary(GOptionContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:230</i>
	 */
	public static Pointer<Byte > g_option_context_get_summary(Pointer<GLibLibrary.GOptionContext > context) {
		return Pointer.pointerToAddress(g_option_context_get_summary(Pointer.getPeer(context)), Byte.class);
	}
	@Ptr 
	protected native static long g_option_context_get_summary(@Ptr long context);
	/**
	 * Original signature : <code>void g_option_context_set_description(GOptionContext*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:232</i>
	 */
	public static void g_option_context_set_description(Pointer<GLibLibrary.GOptionContext > context, Pointer<Byte > description) {
		g_option_context_set_description(Pointer.getPeer(context), Pointer.getPeer(description));
	}
	protected native static void g_option_context_set_description(@Ptr long context, @Ptr long description);
	/**
	 * Original signature : <code>gchar* g_option_context_get_description(GOptionContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:234</i>
	 */
	public static Pointer<Byte > g_option_context_get_description(Pointer<GLibLibrary.GOptionContext > context) {
		return Pointer.pointerToAddress(g_option_context_get_description(Pointer.getPeer(context)), Byte.class);
	}
	@Ptr 
	protected native static long g_option_context_get_description(@Ptr long context);
	/**
	 * Original signature : <code>void g_option_context_free(GOptionContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:236</i>
	 */
	public static void g_option_context_free(Pointer<GLibLibrary.GOptionContext > context) {
		g_option_context_free(Pointer.getPeer(context));
	}
	protected native static void g_option_context_free(@Ptr long context);
	/**
	 * Original signature : <code>void g_option_context_set_help_enabled(GOptionContext*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:238</i>
	 */
	public static void g_option_context_set_help_enabled(Pointer<GLibLibrary.GOptionContext > context, GLibLibrary.gboolean help_enabled) {
		g_option_context_set_help_enabled(Pointer.getPeer(context), help_enabled);
	}
	protected native static void g_option_context_set_help_enabled(@Ptr long context, GLibLibrary.gboolean help_enabled);
	/**
	 * Original signature : <code>gboolean g_option_context_get_help_enabled(GOptionContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:240</i>
	 */
	public static GLibLibrary.gboolean g_option_context_get_help_enabled(Pointer<GLibLibrary.GOptionContext > context) {
		return g_option_context_get_help_enabled(Pointer.getPeer(context));
	}
	protected native static GLibLibrary.gboolean g_option_context_get_help_enabled(@Ptr long context);
	/**
	 * Original signature : <code>void g_option_context_set_ignore_unknown_options(GOptionContext*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:242</i>
	 */
	public static void g_option_context_set_ignore_unknown_options(Pointer<GLibLibrary.GOptionContext > context, GLibLibrary.gboolean ignore_unknown) {
		g_option_context_set_ignore_unknown_options(Pointer.getPeer(context), ignore_unknown);
	}
	protected native static void g_option_context_set_ignore_unknown_options(@Ptr long context, GLibLibrary.gboolean ignore_unknown);
	/**
	 * Original signature : <code>gboolean g_option_context_get_ignore_unknown_options(GOptionContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:244</i>
	 */
	public static GLibLibrary.gboolean g_option_context_get_ignore_unknown_options(Pointer<GLibLibrary.GOptionContext > context) {
		return g_option_context_get_ignore_unknown_options(Pointer.getPeer(context));
	}
	protected native static GLibLibrary.gboolean g_option_context_get_ignore_unknown_options(@Ptr long context);
	/**
	 * Original signature : <code>void g_option_context_add_main_entries(GOptionContext*, const GOptionEntry*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:246</i>
	 */
	public static void g_option_context_add_main_entries(Pointer<GLibLibrary.GOptionContext > context, Pointer<GOptionEntry > entries, Pointer<Byte > translation_domain) {
		g_option_context_add_main_entries(Pointer.getPeer(context), Pointer.getPeer(entries), Pointer.getPeer(translation_domain));
	}
	protected native static void g_option_context_add_main_entries(@Ptr long context, @Ptr long entries, @Ptr long translation_domain);
	/**
	 * Original signature : <code>gboolean g_option_context_parse(GOptionContext*, gint*, gchar***, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:248</i>
	 */
	public static GLibLibrary.gboolean g_option_context_parse(Pointer<GLibLibrary.GOptionContext > context, Pointer<Integer > argc, Pointer<Pointer<Pointer<Byte > > > argv, Pointer<Pointer<GError > > error) {
		return g_option_context_parse(Pointer.getPeer(context), Pointer.getPeer(argc), Pointer.getPeer(argv), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_option_context_parse(@Ptr long context, @Ptr long argc, @Ptr long argv, @Ptr long error);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_option_context_set_translate_func(GOptionContext*, GTranslateFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:250</i><br>
	 * Original signature : <code>void g_option_context_set_translate_func(GOptionContext*, GTranslateFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern void g_option_context_set_translate_func(GOptionContext* context, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_option_context_set_translate_func(GOptionContext*, GTranslateFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:250</i><br>
	 * Original signature : <code>void g_option_context_set_translate_func(GOptionContext*, GTranslateFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern void g_option_context_set_translate_func(GOptionContext* context, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_option_context_set_translation_domain(GOptionContext*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:252</i>
	 */
	public static void g_option_context_set_translation_domain(Pointer<GLibLibrary.GOptionContext > context, Pointer<Byte > domain) {
		g_option_context_set_translation_domain(Pointer.getPeer(context), Pointer.getPeer(domain));
	}
	protected native static void g_option_context_set_translation_domain(@Ptr long context, @Ptr long domain);
	/**
	 * Original signature : <code>void g_option_context_add_group(GOptionContext*, GOptionGroup*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:254</i>
	 */
	public static void g_option_context_add_group(Pointer<GLibLibrary.GOptionContext > context, Pointer<GLibLibrary.GOptionGroup > group) {
		g_option_context_add_group(Pointer.getPeer(context), Pointer.getPeer(group));
	}
	protected native static void g_option_context_add_group(@Ptr long context, @Ptr long group);
	/**
	 * Original signature : <code>void g_option_context_set_main_group(GOptionContext*, GOptionGroup*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:256</i>
	 */
	public static void g_option_context_set_main_group(Pointer<GLibLibrary.GOptionContext > context, Pointer<GLibLibrary.GOptionGroup > group) {
		g_option_context_set_main_group(Pointer.getPeer(context), Pointer.getPeer(group));
	}
	protected native static void g_option_context_set_main_group(@Ptr long context, @Ptr long group);
	/**
	 * Original signature : <code>GOptionGroup* g_option_context_get_main_group(GOptionContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:258</i>
	 */
	public static Pointer<GLibLibrary.GOptionGroup > g_option_context_get_main_group(Pointer<GLibLibrary.GOptionContext > context) {
		return Pointer.pointerToAddress(g_option_context_get_main_group(Pointer.getPeer(context)), GLibLibrary.GOptionGroup.class);
	}
	@Ptr 
	protected native static long g_option_context_get_main_group(@Ptr long context);
	/**
	 * Original signature : <code>gchar* g_option_context_get_help(GOptionContext*, gboolean, GOptionGroup*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:260</i>
	 */
	public static Pointer<Byte > g_option_context_get_help(Pointer<GLibLibrary.GOptionContext > context, GLibLibrary.gboolean main_help, Pointer<GLibLibrary.GOptionGroup > group) {
		return Pointer.pointerToAddress(g_option_context_get_help(Pointer.getPeer(context), main_help, Pointer.getPeer(group)), Byte.class);
	}
	@Ptr 
	protected native static long g_option_context_get_help(@Ptr long context, GLibLibrary.gboolean main_help, @Ptr long group);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GOptionGroup* g_option_group_new(const gchar*, const gchar*, const gchar*, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:262</i><br>
	 * Original signature : <code>GOptionGroup* g_option_group_new(const gchar*, const gchar*, const gchar*, gpointer, GDestroyNotify)</code> * /<br>
	 * extern GOptionGroup* g_option_group_new(const gchar* name, const gchar* description, const gchar* help_description, gpointer user_data, GDestroyNotify destroy);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GOptionGroup* g_option_group_new(const gchar*, const gchar*, const gchar*, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:262</i><br>
	 * Original signature : <code>GOptionGroup* g_option_group_new(const gchar*, const gchar*, const gchar*, gpointer, GDestroyNotify)</code> * /<br>
	 * extern GOptionGroup* g_option_group_new(const gchar* name, const gchar* description, const gchar* help_description, gpointer user_data, GDestroyNotify destroy);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_option_group_set_parse_hooks(GOptionGroup*, GOptionParseFunc, GOptionParseFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:264</i>
	 */
	public static void g_option_group_set_parse_hooks(Pointer<GLibLibrary.GOptionGroup > group, Pointer<GLibLibrary.GOptionParseFunc > pre_parse_func, Pointer<GLibLibrary.GOptionParseFunc > post_parse_func) {
		g_option_group_set_parse_hooks(Pointer.getPeer(group), Pointer.getPeer(pre_parse_func), Pointer.getPeer(post_parse_func));
	}
	protected native static void g_option_group_set_parse_hooks(@Ptr long group, @Ptr long pre_parse_func, @Ptr long post_parse_func);
	/**
	 * Original signature : <code>void g_option_group_set_error_hook(GOptionGroup*, GOptionErrorFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:266</i>
	 */
	public static void g_option_group_set_error_hook(Pointer<GLibLibrary.GOptionGroup > group, Pointer<GLibLibrary.GOptionErrorFunc > error_func) {
		g_option_group_set_error_hook(Pointer.getPeer(group), Pointer.getPeer(error_func));
	}
	protected native static void g_option_group_set_error_hook(@Ptr long group, @Ptr long error_func);
	/**
	 * Original signature : <code>void g_option_group_free(GOptionGroup*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:268</i>
	 */
	public static void g_option_group_free(Pointer<GLibLibrary.GOptionGroup > group) {
		g_option_group_free(Pointer.getPeer(group));
	}
	protected native static void g_option_group_free(@Ptr long group);
	/**
	 * Original signature : <code>void g_option_group_add_entries(GOptionGroup*, const GOptionEntry*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:270</i>
	 */
	public static void g_option_group_add_entries(Pointer<GLibLibrary.GOptionGroup > group, Pointer<GOptionEntry > entries) {
		g_option_group_add_entries(Pointer.getPeer(group), Pointer.getPeer(entries));
	}
	protected native static void g_option_group_add_entries(@Ptr long group, @Ptr long entries);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_option_group_set_translate_func(GOptionGroup*, GTranslateFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:272</i><br>
	 * Original signature : <code>void g_option_group_set_translate_func(GOptionGroup*, GTranslateFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern void g_option_group_set_translate_func(GOptionGroup* group, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_option_group_set_translate_func(GOptionGroup*, GTranslateFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:272</i><br>
	 * Original signature : <code>void g_option_group_set_translate_func(GOptionGroup*, GTranslateFunc, gpointer, GDestroyNotify)</code> * /<br>
	 * extern void g_option_group_set_translate_func(GOptionGroup* group, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_option_group_set_translation_domain(GOptionGroup*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:274</i>
	 */
	public static void g_option_group_set_translation_domain(Pointer<GLibLibrary.GOptionGroup > group, Pointer<Byte > domain) {
		g_option_group_set_translation_domain(Pointer.getPeer(group), Pointer.getPeer(domain));
	}
	protected native static void g_option_group_set_translation_domain(@Ptr long group, @Ptr long domain);
	/**
	 * Original signature : <code>GPatternSpec* g_pattern_spec_new(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gpattern.h:3</i>
	 */
	public static Pointer<GLibLibrary.GPatternSpec > g_pattern_spec_new(Pointer<Byte > pattern) {
		return Pointer.pointerToAddress(g_pattern_spec_new(Pointer.getPeer(pattern)), GLibLibrary.GPatternSpec.class);
	}
	@Ptr 
	protected native static long g_pattern_spec_new(@Ptr long pattern);
	/**
	 * Original signature : <code>void g_pattern_spec_free(GPatternSpec*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gpattern.h:5</i>
	 */
	public static void g_pattern_spec_free(Pointer<GLibLibrary.GPatternSpec > pspec) {
		g_pattern_spec_free(Pointer.getPeer(pspec));
	}
	protected native static void g_pattern_spec_free(@Ptr long pspec);
	/**
	 * Original signature : <code>gboolean g_pattern_spec_equal(GPatternSpec*, GPatternSpec*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gpattern.h:7</i>
	 */
	public static GLibLibrary.gboolean g_pattern_spec_equal(Pointer<GLibLibrary.GPatternSpec > pspec1, Pointer<GLibLibrary.GPatternSpec > pspec2) {
		return g_pattern_spec_equal(Pointer.getPeer(pspec1), Pointer.getPeer(pspec2));
	}
	protected native static GLibLibrary.gboolean g_pattern_spec_equal(@Ptr long pspec1, @Ptr long pspec2);
	/**
	 * Original signature : <code>gboolean g_pattern_match(GPatternSpec*, guint, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gpattern.h:9</i>
	 */
	public static GLibLibrary.gboolean g_pattern_match(Pointer<GLibLibrary.GPatternSpec > pspec, int string_length, Pointer<Byte > string, Pointer<Byte > string_reversed) {
		return g_pattern_match(Pointer.getPeer(pspec), string_length, Pointer.getPeer(string), Pointer.getPeer(string_reversed));
	}
	protected native static GLibLibrary.gboolean g_pattern_match(@Ptr long pspec, int string_length, @Ptr long string, @Ptr long string_reversed);
	/**
	 * Original signature : <code>gboolean g_pattern_match_string(GPatternSpec*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gpattern.h:11</i>
	 */
	public static GLibLibrary.gboolean g_pattern_match_string(Pointer<GLibLibrary.GPatternSpec > pspec, Pointer<Byte > string) {
		return g_pattern_match_string(Pointer.getPeer(pspec), Pointer.getPeer(string));
	}
	protected native static GLibLibrary.gboolean g_pattern_match_string(@Ptr long pspec, @Ptr long string);
	/**
	 * Original signature : <code>gboolean g_pattern_match_simple(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gpattern.h:13</i>
	 */
	public static GLibLibrary.gboolean g_pattern_match_simple(Pointer<Byte > pattern, Pointer<Byte > string) {
		return g_pattern_match_simple(Pointer.getPeer(pattern), Pointer.getPeer(string));
	}
	protected native static GLibLibrary.gboolean g_pattern_match_simple(@Ptr long pattern, @Ptr long string);
	/**
	 * This function returns prime numbers spaced by approximately 1.5-2.0<br>
	 * and is for use in resizing data structures which prefer<br>
	 * prime-valued sizes.	The closest spaced prime function returns the<br>
	 * next largest prime, or the highest it knows about which is about<br>
	 * MAXINT/4.<br>
	 * Original signature : <code>guint g_spaced_primes_closest(guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprimes.h:9</i>
	 */
	public static native int g_spaced_primes_closest(int num);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_qsort_with_data(gconstpointer, gint, gsize, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqsort.h:2</i><br>
	 * Original signature : <code>void g_qsort_with_data(gconstpointer, gint, gsize, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_qsort_with_data(gconstpointer pbase, gint total_elems, gsize size, GCompareDataFunc compare_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_qsort_with_data(gconstpointer, gint, gsize, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqsort.h:2</i><br>
	 * Original signature : <code>void g_qsort_with_data(gconstpointer, gint, gsize, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_qsort_with_data(gconstpointer pbase, gint total_elems, gsize size, GCompareDataFunc compare_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Queues<br>
	 * Original signature : <code>GQueue* g_queue_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:19</i>
	 */
	public static Pointer<GQueue > g_queue_new() {
		return Pointer.pointerToAddress(g_queue_new$2(), GQueue.class);
	}
	@Ptr 
	protected native static long g_queue_new$2();
	/**
	 * Original signature : <code>void g_queue_free(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:21</i>
	 */
	public static void g_queue_free(Pointer<GQueue > queue) {
		g_queue_free(Pointer.getPeer(queue));
	}
	protected native static void g_queue_free(@Ptr long queue);
	/**
	 * Original signature : <code>void g_queue_free_full(GQueue*, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:23</i>
	 */
	public static void g_queue_free_full(Pointer<GQueue > queue, Pointer<GLibLibrary.GDestroyNotify > free_func) {
		g_queue_free_full(Pointer.getPeer(queue), Pointer.getPeer(free_func));
	}
	protected native static void g_queue_free_full(@Ptr long queue, @Ptr long free_func);
	/**
	 * Original signature : <code>void g_queue_init(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:25</i>
	 */
	public static void g_queue_init(Pointer<GQueue > queue) {
		g_queue_init(Pointer.getPeer(queue));
	}
	protected native static void g_queue_init(@Ptr long queue);
	/**
	 * Original signature : <code>void g_queue_clear(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:27</i>
	 */
	public static void g_queue_clear(Pointer<GQueue > queue) {
		g_queue_clear(Pointer.getPeer(queue));
	}
	protected native static void g_queue_clear(@Ptr long queue);
	/**
	 * Original signature : <code>gboolean g_queue_is_empty(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:29</i>
	 */
	public static GLibLibrary.gboolean g_queue_is_empty(Pointer<GQueue > queue) {
		return g_queue_is_empty(Pointer.getPeer(queue));
	}
	protected native static GLibLibrary.gboolean g_queue_is_empty(@Ptr long queue);
	/**
	 * Original signature : <code>guint g_queue_get_length(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:31</i>
	 */
	public static int g_queue_get_length(Pointer<GQueue > queue) {
		return g_queue_get_length(Pointer.getPeer(queue));
	}
	protected native static int g_queue_get_length(@Ptr long queue);
	/**
	 * Original signature : <code>void g_queue_reverse(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:33</i>
	 */
	public static void g_queue_reverse(Pointer<GQueue > queue) {
		g_queue_reverse(Pointer.getPeer(queue));
	}
	protected native static void g_queue_reverse(@Ptr long queue);
	/**
	 * Original signature : <code>GQueue* g_queue_copy(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:35</i>
	 */
	public static Pointer<GQueue > g_queue_copy(Pointer<GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_copy(Pointer.getPeer(queue)), GQueue.class);
	}
	@Ptr 
	protected native static long g_queue_copy(@Ptr long queue);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_foreach(GQueue*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:37</i><br>
	 * Original signature : <code>void g_queue_foreach(GQueue*, GFunc, gpointer)</code> * /<br>
	 * extern void g_queue_foreach(GQueue* queue, GFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_foreach(GQueue*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:37</i><br>
	 * Original signature : <code>void g_queue_foreach(GQueue*, GFunc, gpointer)</code> * /<br>
	 * extern void g_queue_foreach(GQueue* queue, GFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GList* g_queue_find(GQueue*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:39</i>
	 */
	public static Pointer<GList > g_queue_find(Pointer<GQueue > queue, Pointer<? > data) {
		return Pointer.pointerToAddress(g_queue_find(Pointer.getPeer(queue), Pointer.getPeer(data)), GList.class);
	}
	@Ptr 
	protected native static long g_queue_find(@Ptr long queue, @Ptr long data);
	/**
	 * Original signature : <code>GList* g_queue_find_custom(GQueue*, gconstpointer, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:41</i>
	 */
	public static Pointer<GList > g_queue_find_custom(Pointer<GQueue > queue, Pointer<? > data, Pointer<GLibLibrary.GCompareFunc > func) {
		return Pointer.pointerToAddress(g_queue_find_custom(Pointer.getPeer(queue), Pointer.getPeer(data), Pointer.getPeer(func)), GList.class);
	}
	@Ptr 
	protected native static long g_queue_find_custom(@Ptr long queue, @Ptr long data, @Ptr long func);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_sort(GQueue*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:43</i><br>
	 * Original signature : <code>void g_queue_sort(GQueue*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_queue_sort(GQueue* queue, GCompareDataFunc compare_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_sort(GQueue*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:43</i><br>
	 * Original signature : <code>void g_queue_sort(GQueue*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_queue_sort(GQueue* queue, GCompareDataFunc compare_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_push_head(GQueue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:45</i><br>
	 * Original signature : <code>void g_queue_push_head(GQueue*, gpointer)</code> * /<br>
	 * extern void g_queue_push_head(GQueue* queue, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_push_head(GQueue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:45</i><br>
	 * Original signature : <code>void g_queue_push_head(GQueue*, gpointer)</code> * /<br>
	 * extern void g_queue_push_head(GQueue* queue, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_push_tail(GQueue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:47</i><br>
	 * Original signature : <code>void g_queue_push_tail(GQueue*, gpointer)</code> * /<br>
	 * extern void g_queue_push_tail(GQueue* queue, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_push_tail(GQueue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:47</i><br>
	 * Original signature : <code>void g_queue_push_tail(GQueue*, gpointer)</code> * /<br>
	 * extern void g_queue_push_tail(GQueue* queue, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_push_nth(GQueue*, gpointer, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:49</i><br>
	 * Original signature : <code>void g_queue_push_nth(GQueue*, gpointer, gint)</code> * /<br>
	 * extern void g_queue_push_nth(GQueue* queue, gpointer data, gint n);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_push_nth(GQueue*, gpointer, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:49</i><br>
	 * Original signature : <code>void g_queue_push_nth(GQueue*, gpointer, gint)</code> * /<br>
	 * extern void g_queue_push_nth(GQueue* queue, gpointer data, gint n);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_queue_pop_head(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:51</i><br>
	 * Original signature : <code>gpointer g_queue_pop_head(GQueue*)</code> * /<br>
	 * extern gpointer g_queue_pop_head(GQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_queue_pop_head(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:51</i><br>
	 * Original signature : <code>gpointer g_queue_pop_head(GQueue*)</code> * /<br>
	 * extern gpointer g_queue_pop_head(GQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_queue_pop_tail(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:53</i><br>
	 * Original signature : <code>gpointer g_queue_pop_tail(GQueue*)</code> * /<br>
	 * extern gpointer g_queue_pop_tail(GQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_queue_pop_tail(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:53</i><br>
	 * Original signature : <code>gpointer g_queue_pop_tail(GQueue*)</code> * /<br>
	 * extern gpointer g_queue_pop_tail(GQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_queue_pop_nth(GQueue*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:55</i><br>
	 * Original signature : <code>gpointer g_queue_pop_nth(GQueue*, guint)</code> * /<br>
	 * extern gpointer g_queue_pop_nth(GQueue* queue, guint n);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_queue_pop_nth(GQueue*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:55</i><br>
	 * Original signature : <code>gpointer g_queue_pop_nth(GQueue*, guint)</code> * /<br>
	 * extern gpointer g_queue_pop_nth(GQueue* queue, guint n);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_queue_peek_head(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:57</i><br>
	 * Original signature : <code>gpointer g_queue_peek_head(GQueue*)</code> * /<br>
	 * extern gpointer g_queue_peek_head(GQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_queue_peek_head(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:57</i><br>
	 * Original signature : <code>gpointer g_queue_peek_head(GQueue*)</code> * /<br>
	 * extern gpointer g_queue_peek_head(GQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_queue_peek_tail(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:59</i><br>
	 * Original signature : <code>gpointer g_queue_peek_tail(GQueue*)</code> * /<br>
	 * extern gpointer g_queue_peek_tail(GQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_queue_peek_tail(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:59</i><br>
	 * Original signature : <code>gpointer g_queue_peek_tail(GQueue*)</code> * /<br>
	 * extern gpointer g_queue_peek_tail(GQueue* queue);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_queue_peek_nth(GQueue*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:61</i><br>
	 * Original signature : <code>gpointer g_queue_peek_nth(GQueue*, guint)</code> * /<br>
	 * extern gpointer g_queue_peek_nth(GQueue* queue, guint n);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_queue_peek_nth(GQueue*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:61</i><br>
	 * Original signature : <code>gpointer g_queue_peek_nth(GQueue*, guint)</code> * /<br>
	 * extern gpointer g_queue_peek_nth(GQueue* queue, guint n);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gint g_queue_index(GQueue*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:63</i>
	 */
	public static int g_queue_index(Pointer<GQueue > queue, Pointer<? > data) {
		return g_queue_index(Pointer.getPeer(queue), Pointer.getPeer(data));
	}
	protected native static int g_queue_index(@Ptr long queue, @Ptr long data);
	/**
	 * Original signature : <code>gboolean g_queue_remove(GQueue*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:65</i>
	 */
	public static GLibLibrary.gboolean g_queue_remove(Pointer<GQueue > queue, Pointer<? > data) {
		return g_queue_remove(Pointer.getPeer(queue), Pointer.getPeer(data));
	}
	protected native static GLibLibrary.gboolean g_queue_remove(@Ptr long queue, @Ptr long data);
	/**
	 * Original signature : <code>guint g_queue_remove_all(GQueue*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:67</i>
	 */
	public static int g_queue_remove_all(Pointer<GQueue > queue, Pointer<? > data) {
		return g_queue_remove_all(Pointer.getPeer(queue), Pointer.getPeer(data));
	}
	protected native static int g_queue_remove_all(@Ptr long queue, @Ptr long data);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_insert_before(GQueue*, GList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:69</i><br>
	 * Original signature : <code>void g_queue_insert_before(GQueue*, GList*, gpointer)</code> * /<br>
	 * extern void g_queue_insert_before(GQueue* queue, GList* sibling, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_insert_before(GQueue*, GList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:69</i><br>
	 * Original signature : <code>void g_queue_insert_before(GQueue*, GList*, gpointer)</code> * /<br>
	 * extern void g_queue_insert_before(GQueue* queue, GList* sibling, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_insert_after(GQueue*, GList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:71</i><br>
	 * Original signature : <code>void g_queue_insert_after(GQueue*, GList*, gpointer)</code> * /<br>
	 * extern void g_queue_insert_after(GQueue* queue, GList* sibling, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_insert_after(GQueue*, GList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:71</i><br>
	 * Original signature : <code>void g_queue_insert_after(GQueue*, GList*, gpointer)</code> * /<br>
	 * extern void g_queue_insert_after(GQueue* queue, GList* sibling, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_insert_sorted(GQueue*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:73</i><br>
	 * Original signature : <code>void g_queue_insert_sorted(GQueue*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_queue_insert_sorted(GQueue* queue, gpointer data, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_queue_insert_sorted(GQueue*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:73</i><br>
	 * Original signature : <code>void g_queue_insert_sorted(GQueue*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_queue_insert_sorted(GQueue* queue, gpointer data, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_queue_push_head_link(GQueue*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:75</i>
	 */
	public static void g_queue_push_head_link(Pointer<GQueue > queue, Pointer<GList > link_) {
		g_queue_push_head_link(Pointer.getPeer(queue), Pointer.getPeer(link_));
	}
	protected native static void g_queue_push_head_link(@Ptr long queue, @Ptr long link_);
	/**
	 * Original signature : <code>void g_queue_push_tail_link(GQueue*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:77</i>
	 */
	public static void g_queue_push_tail_link(Pointer<GQueue > queue, Pointer<GList > link_) {
		g_queue_push_tail_link(Pointer.getPeer(queue), Pointer.getPeer(link_));
	}
	protected native static void g_queue_push_tail_link(@Ptr long queue, @Ptr long link_);
	/**
	 * Original signature : <code>void g_queue_push_nth_link(GQueue*, gint, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:79</i>
	 */
	public static void g_queue_push_nth_link(Pointer<GQueue > queue, int n, Pointer<GList > link_) {
		g_queue_push_nth_link(Pointer.getPeer(queue), n, Pointer.getPeer(link_));
	}
	protected native static void g_queue_push_nth_link(@Ptr long queue, int n, @Ptr long link_);
	/**
	 * Original signature : <code>GList* g_queue_pop_head_link(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:81</i>
	 */
	public static Pointer<GList > g_queue_pop_head_link(Pointer<GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_pop_head_link(Pointer.getPeer(queue)), GList.class);
	}
	@Ptr 
	protected native static long g_queue_pop_head_link(@Ptr long queue);
	/**
	 * Original signature : <code>GList* g_queue_pop_tail_link(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:83</i>
	 */
	public static Pointer<GList > g_queue_pop_tail_link(Pointer<GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_pop_tail_link(Pointer.getPeer(queue)), GList.class);
	}
	@Ptr 
	protected native static long g_queue_pop_tail_link(@Ptr long queue);
	/**
	 * Original signature : <code>GList* g_queue_pop_nth_link(GQueue*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:85</i>
	 */
	public static Pointer<GList > g_queue_pop_nth_link(Pointer<GQueue > queue, int n) {
		return Pointer.pointerToAddress(g_queue_pop_nth_link(Pointer.getPeer(queue), n), GList.class);
	}
	@Ptr 
	protected native static long g_queue_pop_nth_link(@Ptr long queue, int n);
	/**
	 * Original signature : <code>GList* g_queue_peek_head_link(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:87</i>
	 */
	public static Pointer<GList > g_queue_peek_head_link(Pointer<GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_peek_head_link(Pointer.getPeer(queue)), GList.class);
	}
	@Ptr 
	protected native static long g_queue_peek_head_link(@Ptr long queue);
	/**
	 * Original signature : <code>GList* g_queue_peek_tail_link(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:89</i>
	 */
	public static Pointer<GList > g_queue_peek_tail_link(Pointer<GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_peek_tail_link(Pointer.getPeer(queue)), GList.class);
	}
	@Ptr 
	protected native static long g_queue_peek_tail_link(@Ptr long queue);
	/**
	 * Original signature : <code>GList* g_queue_peek_nth_link(GQueue*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:91</i>
	 */
	public static Pointer<GList > g_queue_peek_nth_link(Pointer<GQueue > queue, int n) {
		return Pointer.pointerToAddress(g_queue_peek_nth_link(Pointer.getPeer(queue), n), GList.class);
	}
	@Ptr 
	protected native static long g_queue_peek_nth_link(@Ptr long queue, int n);
	/**
	 * Original signature : <code>gint g_queue_link_index(GQueue*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:93</i>
	 */
	public static int g_queue_link_index(Pointer<GQueue > queue, Pointer<GList > link_) {
		return g_queue_link_index(Pointer.getPeer(queue), Pointer.getPeer(link_));
	}
	protected native static int g_queue_link_index(@Ptr long queue, @Ptr long link_);
	/**
	 * Original signature : <code>void g_queue_unlink(GQueue*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:95</i>
	 */
	public static void g_queue_unlink(Pointer<GQueue > queue, Pointer<GList > link_) {
		g_queue_unlink(Pointer.getPeer(queue), Pointer.getPeer(link_));
	}
	protected native static void g_queue_unlink(@Ptr long queue, @Ptr long link_);
	/**
	 * Original signature : <code>void g_queue_delete_link(GQueue*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:97</i>
	 */
	public static void g_queue_delete_link(Pointer<GQueue > queue, Pointer<GList > link_) {
		g_queue_delete_link(Pointer.getPeer(queue), Pointer.getPeer(link_));
	}
	protected native static void g_queue_delete_link(@Ptr long queue, @Ptr long link_);
	/**
	 * Original signature : <code>GRand* g_rand_new_with_seed(guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:3</i>
	 */
	public static Pointer<GLibLibrary.GRand > g_rand_new_with_seed(int seed) {
		return Pointer.pointerToAddress(g_rand_new_with_seed$2(seed), GLibLibrary.GRand.class);
	}
	@Ptr 
	protected native static long g_rand_new_with_seed$2(int seed);
	/**
	 * Original signature : <code>GRand* g_rand_new_with_seed_array(const guint32*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:5</i>
	 */
	public static Pointer<GLibLibrary.GRand > g_rand_new_with_seed_array(Pointer<Integer > seed, int seed_length) {
		return Pointer.pointerToAddress(g_rand_new_with_seed_array(Pointer.getPeer(seed), seed_length), GLibLibrary.GRand.class);
	}
	@Ptr 
	protected native static long g_rand_new_with_seed_array(@Ptr long seed, int seed_length);
	/**
	 * Original signature : <code>GRand* g_rand_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:7</i>
	 */
	public static Pointer<GLibLibrary.GRand > g_rand_new() {
		return Pointer.pointerToAddress(g_rand_new$2(), GLibLibrary.GRand.class);
	}
	@Ptr 
	protected native static long g_rand_new$2();
	/**
	 * Original signature : <code>void g_rand_free(GRand*)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:9</i>
	 */
	public static void g_rand_free(Pointer<GLibLibrary.GRand > rand_) {
		g_rand_free(Pointer.getPeer(rand_));
	}
	protected native static void g_rand_free(@Ptr long rand_);
	/**
	 * Original signature : <code>GRand* g_rand_copy(GRand*)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:11</i>
	 */
	public static Pointer<GLibLibrary.GRand > g_rand_copy(Pointer<GLibLibrary.GRand > rand_) {
		return Pointer.pointerToAddress(g_rand_copy(Pointer.getPeer(rand_)), GLibLibrary.GRand.class);
	}
	@Ptr 
	protected native static long g_rand_copy(@Ptr long rand_);
	/**
	 * Original signature : <code>void g_rand_set_seed(GRand*, guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:13</i>
	 */
	public static void g_rand_set_seed(Pointer<GLibLibrary.GRand > rand_, int seed) {
		g_rand_set_seed(Pointer.getPeer(rand_), seed);
	}
	protected native static void g_rand_set_seed(@Ptr long rand_, int seed);
	/**
	 * Original signature : <code>void g_rand_set_seed_array(GRand*, const guint32*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:15</i>
	 */
	public static void g_rand_set_seed_array(Pointer<GLibLibrary.GRand > rand_, Pointer<Integer > seed, int seed_length) {
		g_rand_set_seed_array(Pointer.getPeer(rand_), Pointer.getPeer(seed), seed_length);
	}
	protected native static void g_rand_set_seed_array(@Ptr long rand_, @Ptr long seed, int seed_length);
	/**
	 * Original signature : <code>guint32 g_rand_int(GRand*)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:17</i>
	 */
	public static int g_rand_int(Pointer<GLibLibrary.GRand > rand_) {
		return g_rand_int(Pointer.getPeer(rand_));
	}
	protected native static int g_rand_int(@Ptr long rand_);
	/**
	 * Original signature : <code>gint32 g_rand_int_range(GRand*, gint32, gint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:19</i>
	 */
	public static int g_rand_int_range(Pointer<GLibLibrary.GRand > rand_, int begin, int end) {
		return g_rand_int_range(Pointer.getPeer(rand_), begin, end);
	}
	protected native static int g_rand_int_range(@Ptr long rand_, int begin, int end);
	/**
	 * Original signature : <code>gdouble g_rand_double(GRand*)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:21</i>
	 */
	public static double g_rand_double(Pointer<GLibLibrary.GRand > rand_) {
		return g_rand_double(Pointer.getPeer(rand_));
	}
	protected native static double g_rand_double(@Ptr long rand_);
	/**
	 * Original signature : <code>gdouble g_rand_double_range(GRand*, gdouble, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:23</i>
	 */
	public static double g_rand_double_range(Pointer<GLibLibrary.GRand > rand_, double begin, double end) {
		return g_rand_double_range(Pointer.getPeer(rand_), begin, end);
	}
	protected native static double g_rand_double_range(@Ptr long rand_, double begin, double end);
	/**
	 * Original signature : <code>void g_random_set_seed(guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:25</i>
	 */
	public static native void g_random_set_seed(int seed);
	/**
	 * Original signature : <code>guint32 g_random_int()</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:27</i>
	 */
	public static native int g_random_int();
	/**
	 * Original signature : <code>gint32 g_random_int_range(gint32, gint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:29</i>
	 */
	public static native int g_random_int_range(int begin, int end);
	/**
	 * Original signature : <code>gdouble g_random_double()</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:31</i>
	 */
	public static native double g_random_double();
	/**
	 * Original signature : <code>gdouble g_random_double_range(gdouble, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:33</i>
	 */
	public static native double g_random_double_range(double begin, double end);
	/**
	 * Original signature : <code>GQuark g_regex_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:167</i>
	 */
	public static native int g_regex_error_quark();
	/**
	 * Original signature : <code>GRegex* g_regex_new(const gchar*, GRegexCompileFlags, GRegexMatchFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:237</i>
	 */
	public static Pointer<GLibLibrary.GRegex > g_regex_new(Pointer<Byte > pattern, IntValuedEnum<GLibLibrary.GRegexCompileFlags > compile_options, IntValuedEnum<GLibLibrary.GRegexMatchFlags > match_options, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_regex_new(Pointer.getPeer(pattern), (int)compile_options.value(), (int)match_options.value(), Pointer.getPeer(error)), GLibLibrary.GRegex.class);
	}
	@Ptr 
	protected native static long g_regex_new(@Ptr long pattern, int compile_options, int match_options, @Ptr long error);
	/**
	 * Original signature : <code>GRegex* g_regex_ref(GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:239</i>
	 */
	public static Pointer<GLibLibrary.GRegex > g_regex_ref(Pointer<GLibLibrary.GRegex > regex) {
		return Pointer.pointerToAddress(g_regex_ref(Pointer.getPeer(regex)), GLibLibrary.GRegex.class);
	}
	@Ptr 
	protected native static long g_regex_ref(@Ptr long regex);
	/**
	 * Original signature : <code>void g_regex_unref(GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:241</i>
	 */
	public static void g_regex_unref(Pointer<GLibLibrary.GRegex > regex) {
		g_regex_unref(Pointer.getPeer(regex));
	}
	protected native static void g_regex_unref(@Ptr long regex);
	/**
	 * Original signature : <code>gchar* g_regex_get_pattern(const GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:243</i>
	 */
	public static Pointer<Byte > g_regex_get_pattern(Pointer<GLibLibrary.GRegex > regex) {
		return Pointer.pointerToAddress(g_regex_get_pattern(Pointer.getPeer(regex)), Byte.class);
	}
	@Ptr 
	protected native static long g_regex_get_pattern(@Ptr long regex);
	/**
	 * Original signature : <code>gint g_regex_get_max_backref(const GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:245</i>
	 */
	public static int g_regex_get_max_backref(Pointer<GLibLibrary.GRegex > regex) {
		return g_regex_get_max_backref(Pointer.getPeer(regex));
	}
	protected native static int g_regex_get_max_backref(@Ptr long regex);
	/**
	 * Original signature : <code>gint g_regex_get_capture_count(const GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:247</i>
	 */
	public static int g_regex_get_capture_count(Pointer<GLibLibrary.GRegex > regex) {
		return g_regex_get_capture_count(Pointer.getPeer(regex));
	}
	protected native static int g_regex_get_capture_count(@Ptr long regex);
	/**
	 * Original signature : <code>gboolean g_regex_get_has_cr_or_lf(const GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:249</i>
	 */
	public static GLibLibrary.gboolean g_regex_get_has_cr_or_lf(Pointer<GLibLibrary.GRegex > regex) {
		return g_regex_get_has_cr_or_lf(Pointer.getPeer(regex));
	}
	protected native static GLibLibrary.gboolean g_regex_get_has_cr_or_lf(@Ptr long regex);
	/**
	 * Original signature : <code>gint g_regex_get_max_lookbehind(const GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:251</i>
	 */
	public static int g_regex_get_max_lookbehind(Pointer<GLibLibrary.GRegex > regex) {
		return g_regex_get_max_lookbehind(Pointer.getPeer(regex));
	}
	protected native static int g_regex_get_max_lookbehind(@Ptr long regex);
	/**
	 * Original signature : <code>gint g_regex_get_string_number(const GRegex*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:253</i>
	 */
	public static int g_regex_get_string_number(Pointer<GLibLibrary.GRegex > regex, Pointer<Byte > name) {
		return g_regex_get_string_number(Pointer.getPeer(regex), Pointer.getPeer(name));
	}
	protected native static int g_regex_get_string_number(@Ptr long regex, @Ptr long name);
	/**
	 * Original signature : <code>gchar* g_regex_escape_string(const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:255</i>
	 */
	public static Pointer<Byte > g_regex_escape_string(Pointer<Byte > string, int length) {
		return Pointer.pointerToAddress(g_regex_escape_string(Pointer.getPeer(string), length), Byte.class);
	}
	@Ptr 
	protected native static long g_regex_escape_string(@Ptr long string, int length);
	/**
	 * Original signature : <code>gchar* g_regex_escape_nul(const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:257</i>
	 */
	public static Pointer<Byte > g_regex_escape_nul(Pointer<Byte > string, int length) {
		return Pointer.pointerToAddress(g_regex_escape_nul(Pointer.getPeer(string), length), Byte.class);
	}
	@Ptr 
	protected native static long g_regex_escape_nul(@Ptr long string, int length);
	/**
	 * Original signature : <code>GRegexCompileFlags g_regex_get_compile_flags(const GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:259</i>
	 */
	public static IntValuedEnum<GLibLibrary.GRegexCompileFlags > g_regex_get_compile_flags(Pointer<GLibLibrary.GRegex > regex) {
		return FlagSet.fromValue(g_regex_get_compile_flags(Pointer.getPeer(regex)), GLibLibrary.GRegexCompileFlags.class);
	}
	protected native static int g_regex_get_compile_flags(@Ptr long regex);
	/**
	 * Original signature : <code>GRegexMatchFlags g_regex_get_match_flags(const GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:261</i>
	 */
	public static IntValuedEnum<GLibLibrary.GRegexMatchFlags > g_regex_get_match_flags(Pointer<GLibLibrary.GRegex > regex) {
		return FlagSet.fromValue(g_regex_get_match_flags(Pointer.getPeer(regex)), GLibLibrary.GRegexMatchFlags.class);
	}
	protected native static int g_regex_get_match_flags(@Ptr long regex);
	/**
	 * Matching.<br>
	 * Original signature : <code>gboolean g_regex_match_simple(const gchar*, const gchar*, GRegexCompileFlags, GRegexMatchFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:266</i>
	 */
	public static GLibLibrary.gboolean g_regex_match_simple(Pointer<Byte > pattern, Pointer<Byte > string, IntValuedEnum<GLibLibrary.GRegexCompileFlags > compile_options, IntValuedEnum<GLibLibrary.GRegexMatchFlags > match_options) {
		return g_regex_match_simple(Pointer.getPeer(pattern), Pointer.getPeer(string), (int)compile_options.value(), (int)match_options.value());
	}
	protected native static GLibLibrary.gboolean g_regex_match_simple(@Ptr long pattern, @Ptr long string, int compile_options, int match_options);
	/**
	 * Original signature : <code>gboolean g_regex_match(const GRegex*, const gchar*, GRegexMatchFlags, GMatchInfo**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:268</i>
	 */
	public static GLibLibrary.gboolean g_regex_match(Pointer<GLibLibrary.GRegex > regex, Pointer<Byte > string, IntValuedEnum<GLibLibrary.GRegexMatchFlags > match_options, Pointer<Pointer<GLibLibrary.GMatchInfo > > match_info) {
		return g_regex_match(Pointer.getPeer(regex), Pointer.getPeer(string), (int)match_options.value(), Pointer.getPeer(match_info));
	}
	protected native static GLibLibrary.gboolean g_regex_match(@Ptr long regex, @Ptr long string, int match_options, @Ptr long match_info);
	/**
	 * Original signature : <code>gboolean g_regex_match_full(const GRegex*, const gchar*, gssize, gint, GRegexMatchFlags, GMatchInfo**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:270</i>
	 */
	public static GLibLibrary.gboolean g_regex_match_full(Pointer<GLibLibrary.GRegex > regex, Pointer<Byte > string, @org.bridj.ann.CLong long string_len, int start_position, IntValuedEnum<GLibLibrary.GRegexMatchFlags > match_options, Pointer<Pointer<GLibLibrary.GMatchInfo > > match_info, Pointer<Pointer<GError > > error) {
		return g_regex_match_full(Pointer.getPeer(regex), Pointer.getPeer(string), string_len, start_position, (int)match_options.value(), Pointer.getPeer(match_info), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_regex_match_full(@Ptr long regex, @Ptr long string, @org.bridj.ann.CLong long string_len, int start_position, int match_options, @Ptr long match_info, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_regex_match_all(const GRegex*, const gchar*, GRegexMatchFlags, GMatchInfo**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:272</i>
	 */
	public static GLibLibrary.gboolean g_regex_match_all(Pointer<GLibLibrary.GRegex > regex, Pointer<Byte > string, IntValuedEnum<GLibLibrary.GRegexMatchFlags > match_options, Pointer<Pointer<GLibLibrary.GMatchInfo > > match_info) {
		return g_regex_match_all(Pointer.getPeer(regex), Pointer.getPeer(string), (int)match_options.value(), Pointer.getPeer(match_info));
	}
	protected native static GLibLibrary.gboolean g_regex_match_all(@Ptr long regex, @Ptr long string, int match_options, @Ptr long match_info);
	/**
	 * Original signature : <code>gboolean g_regex_match_all_full(const GRegex*, const gchar*, gssize, gint, GRegexMatchFlags, GMatchInfo**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:274</i>
	 */
	public static GLibLibrary.gboolean g_regex_match_all_full(Pointer<GLibLibrary.GRegex > regex, Pointer<Byte > string, @org.bridj.ann.CLong long string_len, int start_position, IntValuedEnum<GLibLibrary.GRegexMatchFlags > match_options, Pointer<Pointer<GLibLibrary.GMatchInfo > > match_info, Pointer<Pointer<GError > > error) {
		return g_regex_match_all_full(Pointer.getPeer(regex), Pointer.getPeer(string), string_len, start_position, (int)match_options.value(), Pointer.getPeer(match_info), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_regex_match_all_full(@Ptr long regex, @Ptr long string, @org.bridj.ann.CLong long string_len, int start_position, int match_options, @Ptr long match_info, @Ptr long error);
	/**
	 * String splitting.<br>
	 * Original signature : <code>gchar** g_regex_split_simple(const gchar*, const gchar*, GRegexCompileFlags, GRegexMatchFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:279</i>
	 */
	public static Pointer<Pointer<Byte > > g_regex_split_simple(Pointer<Byte > pattern, Pointer<Byte > string, IntValuedEnum<GLibLibrary.GRegexCompileFlags > compile_options, IntValuedEnum<GLibLibrary.GRegexMatchFlags > match_options) {
		return Pointer.pointerToAddress(g_regex_split_simple(Pointer.getPeer(pattern), Pointer.getPeer(string), (int)compile_options.value(), (int)match_options.value()), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_regex_split_simple(@Ptr long pattern, @Ptr long string, int compile_options, int match_options);
	/**
	 * Original signature : <code>gchar** g_regex_split(const GRegex*, const gchar*, GRegexMatchFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:281</i>
	 */
	public static Pointer<Pointer<Byte > > g_regex_split(Pointer<GLibLibrary.GRegex > regex, Pointer<Byte > string, IntValuedEnum<GLibLibrary.GRegexMatchFlags > match_options) {
		return Pointer.pointerToAddress(g_regex_split(Pointer.getPeer(regex), Pointer.getPeer(string), (int)match_options.value()), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_regex_split(@Ptr long regex, @Ptr long string, int match_options);
	/**
	 * Original signature : <code>gchar** g_regex_split_full(const GRegex*, const gchar*, gssize, gint, GRegexMatchFlags, gint, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:283</i>
	 */
	public static Pointer<Pointer<Byte > > g_regex_split_full(Pointer<GLibLibrary.GRegex > regex, Pointer<Byte > string, @org.bridj.ann.CLong long string_len, int start_position, IntValuedEnum<GLibLibrary.GRegexMatchFlags > match_options, int max_tokens, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_regex_split_full(Pointer.getPeer(regex), Pointer.getPeer(string), string_len, start_position, (int)match_options.value(), max_tokens, Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_regex_split_full(@Ptr long regex, @Ptr long string, @org.bridj.ann.CLong long string_len, int start_position, int match_options, int max_tokens, @Ptr long error);
	/**
	 * String replacement.<br>
	 * Original signature : <code>gchar* g_regex_replace(const GRegex*, const gchar*, gssize, gint, const gchar*, GRegexMatchFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:288</i>
	 */
	public static Pointer<Byte > g_regex_replace(Pointer<GLibLibrary.GRegex > regex, Pointer<Byte > string, @org.bridj.ann.CLong long string_len, int start_position, Pointer<Byte > replacement, IntValuedEnum<GLibLibrary.GRegexMatchFlags > match_options, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_regex_replace(Pointer.getPeer(regex), Pointer.getPeer(string), string_len, start_position, Pointer.getPeer(replacement), (int)match_options.value(), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_regex_replace(@Ptr long regex, @Ptr long string, @org.bridj.ann.CLong long string_len, int start_position, @Ptr long replacement, int match_options, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_regex_replace_literal(const GRegex*, const gchar*, gssize, gint, const gchar*, GRegexMatchFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:290</i>
	 */
	public static Pointer<Byte > g_regex_replace_literal(Pointer<GLibLibrary.GRegex > regex, Pointer<Byte > string, @org.bridj.ann.CLong long string_len, int start_position, Pointer<Byte > replacement, IntValuedEnum<GLibLibrary.GRegexMatchFlags > match_options, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_regex_replace_literal(Pointer.getPeer(regex), Pointer.getPeer(string), string_len, start_position, Pointer.getPeer(replacement), (int)match_options.value(), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_regex_replace_literal(@Ptr long regex, @Ptr long string, @org.bridj.ann.CLong long string_len, int start_position, @Ptr long replacement, int match_options, @Ptr long error);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gchar* g_regex_replace_eval(const GRegex*, const gchar*, gssize, gint, GRegexMatchFlags, GRegexEvalCallback, gpointer, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:292</i><br>
	 * Original signature : <code>gchar* g_regex_replace_eval(const GRegex*, const gchar*, gssize, gint, GRegexMatchFlags, GRegexEvalCallback, gpointer, GError**)</code> * /<br>
	 * extern gchar* g_regex_replace_eval(const GRegex* regex, const gchar* string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GRegexEvalCallback eval, gpointer user_data, GError** error);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gchar* g_regex_replace_eval(const GRegex*, const gchar*, gssize, gint, GRegexMatchFlags, GRegexEvalCallback, gpointer, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:292</i><br>
	 * Original signature : <code>gchar* g_regex_replace_eval(const GRegex*, const gchar*, gssize, gint, GRegexMatchFlags, GRegexEvalCallback, gpointer, GError**)</code> * /<br>
	 * extern gchar* g_regex_replace_eval(const GRegex* regex, const gchar* string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GRegexEvalCallback eval, gpointer user_data, GError** error);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gboolean g_regex_check_replacement(const gchar*, gboolean*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:294</i>
	 */
	public static GLibLibrary.gboolean g_regex_check_replacement(Pointer<Byte > replacement, Pointer<GLibLibrary.gboolean > has_references, Pointer<Pointer<GError > > error) {
		return g_regex_check_replacement(Pointer.getPeer(replacement), Pointer.getPeer(has_references), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_regex_check_replacement(@Ptr long replacement, @Ptr long has_references, @Ptr long error);
	/**
	 * Match info<br>
	 * Original signature : <code>GRegex* g_match_info_get_regex(const GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:299</i>
	 */
	public static Pointer<GLibLibrary.GRegex > g_match_info_get_regex(Pointer<GLibLibrary.GMatchInfo > match_info) {
		return Pointer.pointerToAddress(g_match_info_get_regex(Pointer.getPeer(match_info)), GLibLibrary.GRegex.class);
	}
	@Ptr 
	protected native static long g_match_info_get_regex(@Ptr long match_info);
	/**
	 * Original signature : <code>gchar* g_match_info_get_string(const GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:301</i>
	 */
	public static Pointer<Byte > g_match_info_get_string(Pointer<GLibLibrary.GMatchInfo > match_info) {
		return Pointer.pointerToAddress(g_match_info_get_string(Pointer.getPeer(match_info)), Byte.class);
	}
	@Ptr 
	protected native static long g_match_info_get_string(@Ptr long match_info);
	/**
	 * Original signature : <code>GMatchInfo* g_match_info_ref(GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:303</i>
	 */
	public static Pointer<GLibLibrary.GMatchInfo > g_match_info_ref(Pointer<GLibLibrary.GMatchInfo > match_info) {
		return Pointer.pointerToAddress(g_match_info_ref(Pointer.getPeer(match_info)), GLibLibrary.GMatchInfo.class);
	}
	@Ptr 
	protected native static long g_match_info_ref(@Ptr long match_info);
	/**
	 * Original signature : <code>void g_match_info_unref(GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:305</i>
	 */
	public static void g_match_info_unref(Pointer<GLibLibrary.GMatchInfo > match_info) {
		g_match_info_unref(Pointer.getPeer(match_info));
	}
	protected native static void g_match_info_unref(@Ptr long match_info);
	/**
	 * Original signature : <code>void g_match_info_free(GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:307</i>
	 */
	public static void g_match_info_free(Pointer<GLibLibrary.GMatchInfo > match_info) {
		g_match_info_free(Pointer.getPeer(match_info));
	}
	protected native static void g_match_info_free(@Ptr long match_info);
	/**
	 * Original signature : <code>gboolean g_match_info_next(GMatchInfo*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:309</i>
	 */
	public static GLibLibrary.gboolean g_match_info_next(Pointer<GLibLibrary.GMatchInfo > match_info, Pointer<Pointer<GError > > error) {
		return g_match_info_next(Pointer.getPeer(match_info), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_match_info_next(@Ptr long match_info, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_match_info_matches(const GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:311</i>
	 */
	public static GLibLibrary.gboolean g_match_info_matches(Pointer<GLibLibrary.GMatchInfo > match_info) {
		return g_match_info_matches(Pointer.getPeer(match_info));
	}
	protected native static GLibLibrary.gboolean g_match_info_matches(@Ptr long match_info);
	/**
	 * Original signature : <code>gint g_match_info_get_match_count(const GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:313</i>
	 */
	public static int g_match_info_get_match_count(Pointer<GLibLibrary.GMatchInfo > match_info) {
		return g_match_info_get_match_count(Pointer.getPeer(match_info));
	}
	protected native static int g_match_info_get_match_count(@Ptr long match_info);
	/**
	 * Original signature : <code>gboolean g_match_info_is_partial_match(const GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:315</i>
	 */
	public static GLibLibrary.gboolean g_match_info_is_partial_match(Pointer<GLibLibrary.GMatchInfo > match_info) {
		return g_match_info_is_partial_match(Pointer.getPeer(match_info));
	}
	protected native static GLibLibrary.gboolean g_match_info_is_partial_match(@Ptr long match_info);
	/**
	 * Original signature : <code>gchar* g_match_info_expand_references(const GMatchInfo*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:317</i>
	 */
	public static Pointer<Byte > g_match_info_expand_references(Pointer<GLibLibrary.GMatchInfo > match_info, Pointer<Byte > string_to_expand, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_match_info_expand_references(Pointer.getPeer(match_info), Pointer.getPeer(string_to_expand), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_match_info_expand_references(@Ptr long match_info, @Ptr long string_to_expand, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_match_info_fetch(const GMatchInfo*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:319</i>
	 */
	public static Pointer<Byte > g_match_info_fetch(Pointer<GLibLibrary.GMatchInfo > match_info, int match_num) {
		return Pointer.pointerToAddress(g_match_info_fetch(Pointer.getPeer(match_info), match_num), Byte.class);
	}
	@Ptr 
	protected native static long g_match_info_fetch(@Ptr long match_info, int match_num);
	/**
	 * Original signature : <code>gboolean g_match_info_fetch_pos(const GMatchInfo*, gint, gint*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:321</i>
	 */
	public static GLibLibrary.gboolean g_match_info_fetch_pos(Pointer<GLibLibrary.GMatchInfo > match_info, int match_num, Pointer<Integer > start_pos, Pointer<Integer > end_pos) {
		return g_match_info_fetch_pos(Pointer.getPeer(match_info), match_num, Pointer.getPeer(start_pos), Pointer.getPeer(end_pos));
	}
	protected native static GLibLibrary.gboolean g_match_info_fetch_pos(@Ptr long match_info, int match_num, @Ptr long start_pos, @Ptr long end_pos);
	/**
	 * Original signature : <code>gchar* g_match_info_fetch_named(const GMatchInfo*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:323</i>
	 */
	public static Pointer<Byte > g_match_info_fetch_named(Pointer<GLibLibrary.GMatchInfo > match_info, Pointer<Byte > name) {
		return Pointer.pointerToAddress(g_match_info_fetch_named(Pointer.getPeer(match_info), Pointer.getPeer(name)), Byte.class);
	}
	@Ptr 
	protected native static long g_match_info_fetch_named(@Ptr long match_info, @Ptr long name);
	/**
	 * Original signature : <code>gboolean g_match_info_fetch_named_pos(const GMatchInfo*, const gchar*, gint*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:325</i>
	 */
	public static GLibLibrary.gboolean g_match_info_fetch_named_pos(Pointer<GLibLibrary.GMatchInfo > match_info, Pointer<Byte > name, Pointer<Integer > start_pos, Pointer<Integer > end_pos) {
		return g_match_info_fetch_named_pos(Pointer.getPeer(match_info), Pointer.getPeer(name), Pointer.getPeer(start_pos), Pointer.getPeer(end_pos));
	}
	protected native static GLibLibrary.gboolean g_match_info_fetch_named_pos(@Ptr long match_info, @Ptr long name, @Ptr long start_pos, @Ptr long end_pos);
	/**
	 * Original signature : <code>gchar** g_match_info_fetch_all(const GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:327</i>
	 */
	public static Pointer<Pointer<Byte > > g_match_info_fetch_all(Pointer<GLibLibrary.GMatchInfo > match_info) {
		return Pointer.pointerToAddress(g_match_info_fetch_all(Pointer.getPeer(match_info)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_match_info_fetch_all(@Ptr long match_info);
	/**
	 * Original signature : <code>GScanner* g_scanner_new(const GScannerConfig*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:127</i>
	 */
	public static Pointer<GScanner > g_scanner_new(Pointer<GScannerConfig > config_templ) {
		return Pointer.pointerToAddress(g_scanner_new(Pointer.getPeer(config_templ)), GScanner.class);
	}
	@Ptr 
	protected native static long g_scanner_new(@Ptr long config_templ);
	/**
	 * Original signature : <code>void g_scanner_destroy(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:129</i>
	 */
	public static void g_scanner_destroy(Pointer<GScanner > scanner) {
		g_scanner_destroy(Pointer.getPeer(scanner));
	}
	protected native static void g_scanner_destroy(@Ptr long scanner);
	/**
	 * Original signature : <code>void g_scanner_input_file(GScanner*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:131</i>
	 */
	public static void g_scanner_input_file(Pointer<GScanner > scanner, int input_fd) {
		g_scanner_input_file(Pointer.getPeer(scanner), input_fd);
	}
	protected native static void g_scanner_input_file(@Ptr long scanner, int input_fd);
	/**
	 * Original signature : <code>void g_scanner_sync_file_offset(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:133</i>
	 */
	public static void g_scanner_sync_file_offset(Pointer<GScanner > scanner) {
		g_scanner_sync_file_offset(Pointer.getPeer(scanner));
	}
	protected native static void g_scanner_sync_file_offset(@Ptr long scanner);
	/**
	 * Original signature : <code>void g_scanner_input_text(GScanner*, const gchar*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:135</i>
	 */
	public static void g_scanner_input_text(Pointer<GScanner > scanner, Pointer<Byte > text, int text_len) {
		g_scanner_input_text(Pointer.getPeer(scanner), Pointer.getPeer(text), text_len);
	}
	protected native static void g_scanner_input_text(@Ptr long scanner, @Ptr long text, int text_len);
	/**
	 * Original signature : <code>GTokenType g_scanner_get_next_token(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:137</i>
	 */
	public static IntValuedEnum<GLibLibrary.GTokenType > g_scanner_get_next_token(Pointer<GScanner > scanner) {
		return FlagSet.fromValue(g_scanner_get_next_token(Pointer.getPeer(scanner)), GLibLibrary.GTokenType.class);
	}
	protected native static int g_scanner_get_next_token(@Ptr long scanner);
	/**
	 * Original signature : <code>GTokenType g_scanner_peek_next_token(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:139</i>
	 */
	public static IntValuedEnum<GLibLibrary.GTokenType > g_scanner_peek_next_token(Pointer<GScanner > scanner) {
		return FlagSet.fromValue(g_scanner_peek_next_token(Pointer.getPeer(scanner)), GLibLibrary.GTokenType.class);
	}
	protected native static int g_scanner_peek_next_token(@Ptr long scanner);
	/**
	 * Original signature : <code>GTokenType g_scanner_cur_token(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:141</i>
	 */
	public static IntValuedEnum<GLibLibrary.GTokenType > g_scanner_cur_token(Pointer<GScanner > scanner) {
		return FlagSet.fromValue(g_scanner_cur_token(Pointer.getPeer(scanner)), GLibLibrary.GTokenType.class);
	}
	protected native static int g_scanner_cur_token(@Ptr long scanner);
	/**
	 * Original signature : <code>GTokenValue g_scanner_cur_value(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:143</i>
	 */
	public static GTokenValue g_scanner_cur_value(Pointer<GScanner > scanner) {
		return g_scanner_cur_value(Pointer.getPeer(scanner));
	}
	protected native static GTokenValue g_scanner_cur_value(@Ptr long scanner);
	/**
	 * Original signature : <code>guint g_scanner_cur_line(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:145</i>
	 */
	public static int g_scanner_cur_line(Pointer<GScanner > scanner) {
		return g_scanner_cur_line(Pointer.getPeer(scanner));
	}
	protected native static int g_scanner_cur_line(@Ptr long scanner);
	/**
	 * Original signature : <code>guint g_scanner_cur_position(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:147</i>
	 */
	public static int g_scanner_cur_position(Pointer<GScanner > scanner) {
		return g_scanner_cur_position(Pointer.getPeer(scanner));
	}
	protected native static int g_scanner_cur_position(@Ptr long scanner);
	/**
	 * Original signature : <code>gboolean g_scanner_eof(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:149</i>
	 */
	public static GLibLibrary.gboolean g_scanner_eof(Pointer<GScanner > scanner) {
		return g_scanner_eof(Pointer.getPeer(scanner));
	}
	protected native static GLibLibrary.gboolean g_scanner_eof(@Ptr long scanner);
	/**
	 * Original signature : <code>guint g_scanner_set_scope(GScanner*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:151</i>
	 */
	public static int g_scanner_set_scope(Pointer<GScanner > scanner, int scope_id) {
		return g_scanner_set_scope(Pointer.getPeer(scanner), scope_id);
	}
	protected native static int g_scanner_set_scope(@Ptr long scanner, int scope_id);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_scanner_scope_add_symbol(GScanner*, guint, const gchar*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:153</i><br>
	 * Original signature : <code>void g_scanner_scope_add_symbol(GScanner*, guint, const gchar*, gpointer)</code> * /<br>
	 * extern void g_scanner_scope_add_symbol(GScanner* scanner, guint scope_id, const gchar* symbol, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_scanner_scope_add_symbol(GScanner*, guint, const gchar*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:153</i><br>
	 * Original signature : <code>void g_scanner_scope_add_symbol(GScanner*, guint, const gchar*, gpointer)</code> * /<br>
	 * extern void g_scanner_scope_add_symbol(GScanner* scanner, guint scope_id, const gchar* symbol, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_scanner_scope_remove_symbol(GScanner*, guint, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:155</i>
	 */
	public static void g_scanner_scope_remove_symbol(Pointer<GScanner > scanner, int scope_id, Pointer<Byte > symbol) {
		g_scanner_scope_remove_symbol(Pointer.getPeer(scanner), scope_id, Pointer.getPeer(symbol));
	}
	protected native static void g_scanner_scope_remove_symbol(@Ptr long scanner, int scope_id, @Ptr long symbol);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_scanner_scope_lookup_symbol(GScanner*, guint, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:157</i><br>
	 * Original signature : <code>gpointer g_scanner_scope_lookup_symbol(GScanner*, guint, const gchar*)</code> * /<br>
	 * extern gpointer g_scanner_scope_lookup_symbol(GScanner* scanner, guint scope_id, const gchar* symbol);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_scanner_scope_lookup_symbol(GScanner*, guint, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:157</i><br>
	 * Original signature : <code>gpointer g_scanner_scope_lookup_symbol(GScanner*, guint, const gchar*)</code> * /<br>
	 * extern gpointer g_scanner_scope_lookup_symbol(GScanner* scanner, guint scope_id, const gchar* symbol);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_scanner_scope_foreach_symbol(GScanner*, guint, GHFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:159</i><br>
	 * Original signature : <code>void g_scanner_scope_foreach_symbol(GScanner*, guint, GHFunc, gpointer)</code> * /<br>
	 * extern void g_scanner_scope_foreach_symbol(GScanner* scanner, guint scope_id, GHFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_scanner_scope_foreach_symbol(GScanner*, guint, GHFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:159</i><br>
	 * Original signature : <code>void g_scanner_scope_foreach_symbol(GScanner*, guint, GHFunc, gpointer)</code> * /<br>
	 * extern void g_scanner_scope_foreach_symbol(GScanner* scanner, guint scope_id, GHFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_scanner_lookup_symbol(GScanner*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:161</i><br>
	 * Original signature : <code>gpointer g_scanner_lookup_symbol(GScanner*, const gchar*)</code> * /<br>
	 * extern gpointer g_scanner_lookup_symbol(GScanner* scanner, const gchar* symbol);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_scanner_lookup_symbol(GScanner*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:161</i><br>
	 * Original signature : <code>gpointer g_scanner_lookup_symbol(GScanner*, const gchar*)</code> * /<br>
	 * extern gpointer g_scanner_lookup_symbol(GScanner* scanner, const gchar* symbol);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_scanner_unexp_token(GScanner*, GTokenType, const gchar*, const gchar*, const gchar*, const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:163</i>
	 */
	public static void g_scanner_unexp_token(Pointer<GScanner > scanner, IntValuedEnum<GLibLibrary.GTokenType > expected_token, Pointer<Byte > identifier_spec, Pointer<Byte > symbol_spec, Pointer<Byte > symbol_name, Pointer<Byte > message, int is_error) {
		g_scanner_unexp_token(Pointer.getPeer(scanner), (int)expected_token.value(), Pointer.getPeer(identifier_spec), Pointer.getPeer(symbol_spec), Pointer.getPeer(symbol_name), Pointer.getPeer(message), is_error);
	}
	protected native static void g_scanner_unexp_token(@Ptr long scanner, int expected_token, @Ptr long identifier_spec, @Ptr long symbol_spec, @Ptr long symbol_name, @Ptr long message, int is_error);
	/**
	 * Original signature : <code>void g_scanner_error(GScanner*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:165</i>
	 */
	public static void g_scanner_error(Pointer<GScanner > scanner, Pointer<Byte > format, Object... varArgs1) {
		g_scanner_error(Pointer.getPeer(scanner), Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_scanner_error(@Ptr long scanner, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>void g_scanner_warn(GScanner*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:167</i>
	 */
	public static void g_scanner_warn(Pointer<GScanner > scanner, Pointer<Byte > format, Object... varArgs1) {
		g_scanner_warn(Pointer.getPeer(scanner), Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_scanner_warn(@Ptr long scanner, @Ptr long format, Object... varArgs1);
	/**
	 * GSequence<br>
	 * Original signature : <code>GSequence* g_sequence_new(GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:8</i>
	 */
	public static Pointer<GLibLibrary.GSequence > g_sequence_new(Pointer<GLibLibrary.GDestroyNotify > data_destroy) {
		return Pointer.pointerToAddress(g_sequence_new(Pointer.getPeer(data_destroy)), GLibLibrary.GSequence.class);
	}
	@Ptr 
	protected native static long g_sequence_new(@Ptr long data_destroy);
	/**
	 * Original signature : <code>void g_sequence_free(GSequence*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:10</i>
	 */
	public static void g_sequence_free(Pointer<GLibLibrary.GSequence > seq) {
		g_sequence_free(Pointer.getPeer(seq));
	}
	protected native static void g_sequence_free(@Ptr long seq);
	/**
	 * Original signature : <code>gint g_sequence_get_length(GSequence*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:12</i>
	 */
	public static int g_sequence_get_length(Pointer<GLibLibrary.GSequence > seq) {
		return g_sequence_get_length(Pointer.getPeer(seq));
	}
	protected native static int g_sequence_get_length(@Ptr long seq);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_sequence_foreach(GSequence*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:14</i><br>
	 * Original signature : <code>void g_sequence_foreach(GSequence*, GFunc, gpointer)</code> * /<br>
	 * extern void g_sequence_foreach(GSequence* seq, GFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_sequence_foreach(GSequence*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:14</i><br>
	 * Original signature : <code>void g_sequence_foreach(GSequence*, GFunc, gpointer)</code> * /<br>
	 * extern void g_sequence_foreach(GSequence* seq, GFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_sequence_foreach_range(GSequenceIter*, GSequenceIter*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:16</i><br>
	 * Original signature : <code>void g_sequence_foreach_range(GSequenceIter*, GSequenceIter*, GFunc, gpointer)</code> * /<br>
	 * extern void g_sequence_foreach_range(GSequenceIter* begin, GSequenceIter* end, GFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_sequence_foreach_range(GSequenceIter*, GSequenceIter*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:16</i><br>
	 * Original signature : <code>void g_sequence_foreach_range(GSequenceIter*, GSequenceIter*, GFunc, gpointer)</code> * /<br>
	 * extern void g_sequence_foreach_range(GSequenceIter* begin, GSequenceIter* end, GFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_sequence_sort(GSequence*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:18</i><br>
	 * Original signature : <code>void g_sequence_sort(GSequence*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_sequence_sort(GSequence* seq, GCompareDataFunc cmp_func, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_sequence_sort(GSequence*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:18</i><br>
	 * Original signature : <code>void g_sequence_sort(GSequence*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_sequence_sort(GSequence* seq, GCompareDataFunc cmp_func, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_sequence_sort_iter(GSequence*, GSequenceIterCompareFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:20</i><br>
	 * Original signature : <code>void g_sequence_sort_iter(GSequence*, GSequenceIterCompareFunc, gpointer)</code> * /<br>
	 * extern void g_sequence_sort_iter(GSequence* seq, GSequenceIterCompareFunc cmp_func, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_sequence_sort_iter(GSequence*, GSequenceIterCompareFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:20</i><br>
	 * Original signature : <code>void g_sequence_sort_iter(GSequence*, GSequenceIterCompareFunc, gpointer)</code> * /<br>
	 * extern void g_sequence_sort_iter(GSequence* seq, GSequenceIterCompareFunc cmp_func, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Getting iters<br>
	 * Original signature : <code>GSequenceIter* g_sequence_get_begin_iter(GSequence*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:25</i>
	 */
	public static Pointer<GLibLibrary._GSequenceNode > g_sequence_get_begin_iter(Pointer<GLibLibrary.GSequence > seq) {
		return Pointer.pointerToAddress(g_sequence_get_begin_iter(Pointer.getPeer(seq)), GLibLibrary._GSequenceNode.class);
	}
	@Ptr 
	protected native static long g_sequence_get_begin_iter(@Ptr long seq);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_get_end_iter(GSequence*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:27</i>
	 */
	public static Pointer<GLibLibrary._GSequenceNode > g_sequence_get_end_iter(Pointer<GLibLibrary.GSequence > seq) {
		return Pointer.pointerToAddress(g_sequence_get_end_iter(Pointer.getPeer(seq)), GLibLibrary._GSequenceNode.class);
	}
	@Ptr 
	protected native static long g_sequence_get_end_iter(@Ptr long seq);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_get_iter_at_pos(GSequence*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:29</i>
	 */
	public static Pointer<GLibLibrary._GSequenceNode > g_sequence_get_iter_at_pos(Pointer<GLibLibrary.GSequence > seq, int pos) {
		return Pointer.pointerToAddress(g_sequence_get_iter_at_pos(Pointer.getPeer(seq), pos), GLibLibrary._GSequenceNode.class);
	}
	@Ptr 
	protected native static long g_sequence_get_iter_at_pos(@Ptr long seq, int pos);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_append(GSequence*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:31</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_append(GSequence*, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_append(GSequence* seq, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_append(GSequence*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:31</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_append(GSequence*, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_append(GSequence* seq, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_prepend(GSequence*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:33</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_prepend(GSequence*, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_prepend(GSequence* seq, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_prepend(GSequence*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:33</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_prepend(GSequence*, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_prepend(GSequence* seq, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_insert_before(GSequenceIter*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:35</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_insert_before(GSequenceIter*, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_insert_before(GSequenceIter* iter, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_insert_before(GSequenceIter*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:35</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_insert_before(GSequenceIter*, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_insert_before(GSequenceIter* iter, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_sequence_move(GSequenceIter*, GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:37</i>
	 */
	public static void g_sequence_move(Pointer<GLibLibrary._GSequenceNode > src, Pointer<GLibLibrary._GSequenceNode > dest) {
		g_sequence_move(Pointer.getPeer(src), Pointer.getPeer(dest));
	}
	protected native static void g_sequence_move(@Ptr long src, @Ptr long dest);
	/**
	 * Original signature : <code>void g_sequence_swap(GSequenceIter*, GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:39</i>
	 */
	public static void g_sequence_swap(Pointer<GLibLibrary._GSequenceNode > a, Pointer<GLibLibrary._GSequenceNode > b) {
		g_sequence_swap(Pointer.getPeer(a), Pointer.getPeer(b));
	}
	protected native static void g_sequence_swap(@Ptr long a, @Ptr long b);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_insert_sorted(GSequence*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:41</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_insert_sorted(GSequence*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_insert_sorted(GSequence* seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_insert_sorted(GSequence*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:41</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_insert_sorted(GSequence*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_insert_sorted(GSequence* seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_insert_sorted_iter(GSequence*, gpointer, GSequenceIterCompareFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:43</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_insert_sorted_iter(GSequence*, gpointer, GSequenceIterCompareFunc, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_insert_sorted_iter(GSequence* seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_insert_sorted_iter(GSequence*, gpointer, GSequenceIterCompareFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:43</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_insert_sorted_iter(GSequence*, gpointer, GSequenceIterCompareFunc, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_insert_sorted_iter(GSequence* seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_sequence_sort_changed(GSequenceIter*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:45</i><br>
	 * Original signature : <code>void g_sequence_sort_changed(GSequenceIter*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_sequence_sort_changed(GSequenceIter* iter, GCompareDataFunc cmp_func, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_sequence_sort_changed(GSequenceIter*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:45</i><br>
	 * Original signature : <code>void g_sequence_sort_changed(GSequenceIter*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_sequence_sort_changed(GSequenceIter* iter, GCompareDataFunc cmp_func, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_sequence_sort_changed_iter(GSequenceIter*, GSequenceIterCompareFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:47</i><br>
	 * Original signature : <code>void g_sequence_sort_changed_iter(GSequenceIter*, GSequenceIterCompareFunc, gpointer)</code> * /<br>
	 * extern void g_sequence_sort_changed_iter(GSequenceIter* iter, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_sequence_sort_changed_iter(GSequenceIter*, GSequenceIterCompareFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:47</i><br>
	 * Original signature : <code>void g_sequence_sort_changed_iter(GSequenceIter*, GSequenceIterCompareFunc, gpointer)</code> * /<br>
	 * extern void g_sequence_sort_changed_iter(GSequenceIter* iter, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_sequence_remove(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:49</i>
	 */
	public static void g_sequence_remove(Pointer<GLibLibrary._GSequenceNode > iter) {
		g_sequence_remove(Pointer.getPeer(iter));
	}
	protected native static void g_sequence_remove(@Ptr long iter);
	/**
	 * Original signature : <code>void g_sequence_remove_range(GSequenceIter*, GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:51</i>
	 */
	public static void g_sequence_remove_range(Pointer<GLibLibrary._GSequenceNode > begin, Pointer<GLibLibrary._GSequenceNode > end) {
		g_sequence_remove_range(Pointer.getPeer(begin), Pointer.getPeer(end));
	}
	protected native static void g_sequence_remove_range(@Ptr long begin, @Ptr long end);
	/**
	 * Original signature : <code>void g_sequence_move_range(GSequenceIter*, GSequenceIter*, GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:53</i>
	 */
	public static void g_sequence_move_range(Pointer<GLibLibrary._GSequenceNode > dest, Pointer<GLibLibrary._GSequenceNode > begin, Pointer<GLibLibrary._GSequenceNode > end) {
		g_sequence_move_range(Pointer.getPeer(dest), Pointer.getPeer(begin), Pointer.getPeer(end));
	}
	protected native static void g_sequence_move_range(@Ptr long dest, @Ptr long begin, @Ptr long end);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_search(GSequence*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:55</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_search(GSequence*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_search(GSequence* seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_search(GSequence*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:55</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_search(GSequence*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_search(GSequence* seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_search_iter(GSequence*, gpointer, GSequenceIterCompareFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:57</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_search_iter(GSequence*, gpointer, GSequenceIterCompareFunc, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_search_iter(GSequence* seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_search_iter(GSequence*, gpointer, GSequenceIterCompareFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:57</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_search_iter(GSequence*, gpointer, GSequenceIterCompareFunc, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_search_iter(GSequence* seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_lookup(GSequence*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:59</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_lookup(GSequence*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_lookup(GSequence* seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_lookup(GSequence*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:59</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_lookup(GSequence*, gpointer, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_lookup(GSequence* seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_lookup_iter(GSequence*, gpointer, GSequenceIterCompareFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:61</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_lookup_iter(GSequence*, gpointer, GSequenceIterCompareFunc, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_lookup_iter(GSequence* seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSequenceIter* g_sequence_lookup_iter(GSequence*, gpointer, GSequenceIterCompareFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:61</i><br>
	 * Original signature : <code>GSequenceIter* g_sequence_lookup_iter(GSequence*, gpointer, GSequenceIterCompareFunc, gpointer)</code> * /<br>
	 * extern GSequenceIter* g_sequence_lookup_iter(GSequence* seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Dereferencing<br>
	 * Original signature : <code>gpointer g_sequence_get(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:66</i><br>
	 * Dereferencing<br>
	 * Original signature : <code>gpointer g_sequence_get(GSequenceIter*)</code><br>
	 * /<br>
	 * extern gpointer g_sequence_get(GSequenceIter* iter);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Dereferencing<br>
	 * Original signature : <code>gpointer g_sequence_get(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:66</i><br>
	 * Dereferencing<br>
	 * Original signature : <code>gpointer g_sequence_get(GSequenceIter*)</code><br>
	 * /<br>
	 * extern gpointer g_sequence_get(GSequenceIter* iter);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_sequence_set(GSequenceIter*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:68</i><br>
	 * Original signature : <code>void g_sequence_set(GSequenceIter*, gpointer)</code> * /<br>
	 * extern void g_sequence_set(GSequenceIter* iter, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_sequence_set(GSequenceIter*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:68</i><br>
	 * Original signature : <code>void g_sequence_set(GSequenceIter*, gpointer)</code> * /<br>
	 * extern void g_sequence_set(GSequenceIter* iter, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Operations on GSequenceIter *<br>
	 * Original signature : <code>gboolean g_sequence_iter_is_begin(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:73</i>
	 */
	public static GLibLibrary.gboolean g_sequence_iter_is_begin(Pointer<GLibLibrary._GSequenceNode > iter) {
		return g_sequence_iter_is_begin(Pointer.getPeer(iter));
	}
	protected native static GLibLibrary.gboolean g_sequence_iter_is_begin(@Ptr long iter);
	/**
	 * Original signature : <code>gboolean g_sequence_iter_is_end(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:75</i>
	 */
	public static GLibLibrary.gboolean g_sequence_iter_is_end(Pointer<GLibLibrary._GSequenceNode > iter) {
		return g_sequence_iter_is_end(Pointer.getPeer(iter));
	}
	protected native static GLibLibrary.gboolean g_sequence_iter_is_end(@Ptr long iter);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_iter_next(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:77</i>
	 */
	public static Pointer<GLibLibrary._GSequenceNode > g_sequence_iter_next(Pointer<GLibLibrary._GSequenceNode > iter) {
		return Pointer.pointerToAddress(g_sequence_iter_next(Pointer.getPeer(iter)), GLibLibrary._GSequenceNode.class);
	}
	@Ptr 
	protected native static long g_sequence_iter_next(@Ptr long iter);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_iter_prev(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:79</i>
	 */
	public static Pointer<GLibLibrary._GSequenceNode > g_sequence_iter_prev(Pointer<GLibLibrary._GSequenceNode > iter) {
		return Pointer.pointerToAddress(g_sequence_iter_prev(Pointer.getPeer(iter)), GLibLibrary._GSequenceNode.class);
	}
	@Ptr 
	protected native static long g_sequence_iter_prev(@Ptr long iter);
	/**
	 * Original signature : <code>gint g_sequence_iter_get_position(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:81</i>
	 */
	public static int g_sequence_iter_get_position(Pointer<GLibLibrary._GSequenceNode > iter) {
		return g_sequence_iter_get_position(Pointer.getPeer(iter));
	}
	protected native static int g_sequence_iter_get_position(@Ptr long iter);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_iter_move(GSequenceIter*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:83</i>
	 */
	public static Pointer<GLibLibrary._GSequenceNode > g_sequence_iter_move(Pointer<GLibLibrary._GSequenceNode > iter, int delta) {
		return Pointer.pointerToAddress(g_sequence_iter_move(Pointer.getPeer(iter), delta), GLibLibrary._GSequenceNode.class);
	}
	@Ptr 
	protected native static long g_sequence_iter_move(@Ptr long iter, int delta);
	/**
	 * Original signature : <code>GSequence* g_sequence_iter_get_sequence(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:85</i>
	 */
	public static Pointer<GLibLibrary.GSequence > g_sequence_iter_get_sequence(Pointer<GLibLibrary._GSequenceNode > iter) {
		return Pointer.pointerToAddress(g_sequence_iter_get_sequence(Pointer.getPeer(iter)), GLibLibrary.GSequence.class);
	}
	@Ptr 
	protected native static long g_sequence_iter_get_sequence(@Ptr long iter);
	/**
	 * Search<br>
	 * Original signature : <code>gint g_sequence_iter_compare(GSequenceIter*, GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:90</i>
	 */
	public static int g_sequence_iter_compare(Pointer<GLibLibrary._GSequenceNode > a, Pointer<GLibLibrary._GSequenceNode > b) {
		return g_sequence_iter_compare(Pointer.getPeer(a), Pointer.getPeer(b));
	}
	protected native static int g_sequence_iter_compare(@Ptr long a, @Ptr long b);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_range_get_midpoint(GSequenceIter*, GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:92</i>
	 */
	public static Pointer<GLibLibrary._GSequenceNode > g_sequence_range_get_midpoint(Pointer<GLibLibrary._GSequenceNode > begin, Pointer<GLibLibrary._GSequenceNode > end) {
		return Pointer.pointerToAddress(g_sequence_range_get_midpoint(Pointer.getPeer(begin), Pointer.getPeer(end)), GLibLibrary._GSequenceNode.class);
	}
	@Ptr 
	protected native static long g_sequence_range_get_midpoint(@Ptr long begin, @Ptr long end);
	/**
	 * Original signature : <code>GQuark g_shell_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gshell.h:9</i>
	 */
	public static native int g_shell_error_quark();
	/**
	 * Original signature : <code>gchar* g_shell_quote(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gshell.h:11</i>
	 */
	public static Pointer<Byte > g_shell_quote(Pointer<Byte > unquoted_string) {
		return Pointer.pointerToAddress(g_shell_quote(Pointer.getPeer(unquoted_string)), Byte.class);
	}
	@Ptr 
	protected native static long g_shell_quote(@Ptr long unquoted_string);
	/**
	 * Original signature : <code>gchar* g_shell_unquote(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gshell.h:13</i>
	 */
	public static Pointer<Byte > g_shell_unquote(Pointer<Byte > quoted_string, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_shell_unquote(Pointer.getPeer(quoted_string), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_shell_unquote(@Ptr long quoted_string, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_shell_parse_argv(const gchar*, gint*, gchar***, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gshell.h:15</i>
	 */
	public static GLibLibrary.gboolean g_shell_parse_argv(Pointer<Byte > command_line, Pointer<Integer > argcp, Pointer<Pointer<Pointer<Byte > > > argvp, Pointer<Pointer<GError > > error) {
		return g_shell_parse_argv(Pointer.getPeer(command_line), Pointer.getPeer(argcp), Pointer.getPeer(argvp), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_shell_parse_argv(@Ptr long command_line, @Ptr long argcp, @Ptr long argvp, @Ptr long error);
	/**
	 * SKIPPED:<br>
	 * slices - fast allocation/release of small memory blocks<br>
	 * Original signature : <code>gpointer g_slice_alloc(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:5</i><br>
	 * slices - fast allocation/release of small memory blocks<br>
	 * Original signature : <code>gpointer g_slice_alloc(gsize)</code><br>
	 * /<br>
	 * extern gpointer g_slice_alloc(gsize block_size);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * slices - fast allocation/release of small memory blocks<br>
	 * Original signature : <code>gpointer g_slice_alloc(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:5</i><br>
	 * slices - fast allocation/release of small memory blocks<br>
	 * Original signature : <code>gpointer g_slice_alloc(gsize)</code><br>
	 * /<br>
	 * extern gpointer g_slice_alloc(gsize block_size);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_slice_alloc0(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:7</i><br>
	 * Original signature : <code>gpointer g_slice_alloc0(gsize)</code> * /<br>
	 * extern gpointer g_slice_alloc0(gsize block_size);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_slice_alloc0(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:7</i><br>
	 * Original signature : <code>gpointer g_slice_alloc0(gsize)</code> * /<br>
	 * extern gpointer g_slice_alloc0(gsize block_size);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_slice_copy(gsize, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:9</i><br>
	 * Original signature : <code>gpointer g_slice_copy(gsize, gconstpointer)</code> * /<br>
	 * extern gpointer g_slice_copy(gsize block_size, gconstpointer mem_block);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_slice_copy(gsize, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:9</i><br>
	 * Original signature : <code>gpointer g_slice_copy(gsize, gconstpointer)</code> * /<br>
	 * extern gpointer g_slice_copy(gsize block_size, gconstpointer mem_block);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_slice_free1(gsize, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:11</i><br>
	 * Original signature : <code>void g_slice_free1(gsize, gpointer)</code> * /<br>
	 * extern void g_slice_free1(gsize block_size, gpointer mem_block);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_slice_free1(gsize, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:11</i><br>
	 * Original signature : <code>void g_slice_free1(gsize, gpointer)</code> * /<br>
	 * extern void g_slice_free1(gsize block_size, gpointer mem_block);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_slice_free_chain_with_offset(gsize, gpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:13</i><br>
	 * Original signature : <code>void g_slice_free_chain_with_offset(gsize, gpointer, gsize)</code> * /<br>
	 * extern void g_slice_free_chain_with_offset(gsize block_size, gpointer mem_chain, gsize next_offset);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_slice_free_chain_with_offset(gsize, gpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:13</i><br>
	 * Original signature : <code>void g_slice_free_chain_with_offset(gsize, gpointer, gsize)</code> * /<br>
	 * extern void g_slice_free_chain_with_offset(gsize block_size, gpointer mem_chain, gsize next_offset);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_slice_set_config(GSliceConfig, gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:24</i>
	 */
	public static void g_slice_set_config(IntValuedEnum<GLibLibrary.GSliceConfig > ckey, long value) {
		g_slice_set_config((int)ckey.value(), value);
	}
	protected native static void g_slice_set_config(int ckey, long value);
	/**
	 * Original signature : <code>gint64 g_slice_get_config(GSliceConfig)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:26</i>
	 */
	public static long g_slice_get_config(IntValuedEnum<GLibLibrary.GSliceConfig > ckey) {
		return g_slice_get_config((int)ckey.value());
	}
	protected native static long g_slice_get_config(int ckey);
	/**
	 * Original signature : <code>gint64* g_slice_get_config_state(GSliceConfig, gint64, guint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:28</i>
	 */
	public static Pointer<Long > g_slice_get_config_state(IntValuedEnum<GLibLibrary.GSliceConfig > ckey, long address, Pointer<Integer > n_values) {
		return Pointer.pointerToAddress(g_slice_get_config_state((int)ckey.value(), address, Pointer.getPeer(n_values)), Long.class);
	}
	@Ptr 
	protected native static long g_slice_get_config_state(int ckey, long address, @Ptr long n_values);
	/**
	 * Original signature : <code>GQuark g_spawn_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:125</i>
	 */
	public static native int g_spawn_error_quark();
	/**
	 * Original signature : <code>GQuark g_spawn_exit_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:127</i>
	 */
	public static native int g_spawn_exit_error_quark();
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_spawn_async(const gchar*, gchar**, gchar**, GSpawnFlags, GSpawnChildSetupFunc, gpointer, GPid*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:129</i><br>
	 * Original signature : <code>gboolean g_spawn_async(const gchar*, gchar**, gchar**, GSpawnFlags, GSpawnChildSetupFunc, gpointer, GPid*, GError**)</code> * /<br>
	 * extern gboolean g_spawn_async(const gchar* working_directory, gchar** argv, gchar** envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid* child_pid, GError** error);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_spawn_async(const gchar*, gchar**, gchar**, GSpawnFlags, GSpawnChildSetupFunc, gpointer, GPid*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:129</i><br>
	 * Original signature : <code>gboolean g_spawn_async(const gchar*, gchar**, gchar**, GSpawnFlags, GSpawnChildSetupFunc, gpointer, GPid*, GError**)</code> * /<br>
	 * extern gboolean g_spawn_async(const gchar* working_directory, gchar** argv, gchar** envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid* child_pid, GError** error);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Opens pipes for non-NULL standard_output, standard_input, standard_error,<br>
	 * and returns the parent's end of the pipes.<br>
	 * Original signature : <code>gboolean g_spawn_async_with_pipes(const gchar*, gchar**, gchar**, GSpawnFlags, GSpawnChildSetupFunc, gpointer, GPid*, gint*, gint*, gint*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:135</i><br>
	 * Opens pipes for non-NULL standard_output, standard_input, standard_error,<br>
	 * and returns the parent's end of the pipes.<br>
	 * Original signature : <code>gboolean g_spawn_async_with_pipes(const gchar*, gchar**, gchar**, GSpawnFlags, GSpawnChildSetupFunc, gpointer, GPid*, gint*, gint*, gint*, GError**)</code><br>
	 * /<br>
	 * extern gboolean g_spawn_async_with_pipes(const gchar* working_directory, gchar** argv, gchar** envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid* child_pid, gint* standard_input, gint* standard_output, gint* standard_error, GError** error);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Opens pipes for non-NULL standard_output, standard_input, standard_error,<br>
	 * and returns the parent's end of the pipes.<br>
	 * Original signature : <code>gboolean g_spawn_async_with_pipes(const gchar*, gchar**, gchar**, GSpawnFlags, GSpawnChildSetupFunc, gpointer, GPid*, gint*, gint*, gint*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:135</i><br>
	 * Opens pipes for non-NULL standard_output, standard_input, standard_error,<br>
	 * and returns the parent's end of the pipes.<br>
	 * Original signature : <code>gboolean g_spawn_async_with_pipes(const gchar*, gchar**, gchar**, GSpawnFlags, GSpawnChildSetupFunc, gpointer, GPid*, gint*, gint*, gint*, GError**)</code><br>
	 * /<br>
	 * extern gboolean g_spawn_async_with_pipes(const gchar* working_directory, gchar** argv, gchar** envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid* child_pid, gint* standard_input, gint* standard_output, gint* standard_error, GError** error);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_spawn_sync(const gchar*, gchar**, gchar**, GSpawnFlags, GSpawnChildSetupFunc, gpointer, gchar**, gchar**, gint*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:137</i><br>
	 * Original signature : <code>gboolean g_spawn_sync(const gchar*, gchar**, gchar**, GSpawnFlags, GSpawnChildSetupFunc, gpointer, gchar**, gchar**, gint*, GError**)</code> * /<br>
	 * extern gboolean g_spawn_sync(const gchar* working_directory, gchar** argv, gchar** envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gchar** standard_output, gchar** standard_error, gint* exit_status, GError** error);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_spawn_sync(const gchar*, gchar**, gchar**, GSpawnFlags, GSpawnChildSetupFunc, gpointer, gchar**, gchar**, gint*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:137</i><br>
	 * Original signature : <code>gboolean g_spawn_sync(const gchar*, gchar**, gchar**, GSpawnFlags, GSpawnChildSetupFunc, gpointer, gchar**, gchar**, gint*, GError**)</code> * /<br>
	 * extern gboolean g_spawn_sync(const gchar* working_directory, gchar** argv, gchar** envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gchar** standard_output, gchar** standard_error, gint* exit_status, GError** error);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gboolean g_spawn_command_line_sync(const gchar*, gchar**, gchar**, gint*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:139</i>
	 */
	public static GLibLibrary.gboolean g_spawn_command_line_sync(Pointer<Byte > command_line, Pointer<Pointer<Byte > > standard_output, Pointer<Pointer<Byte > > standard_error, Pointer<Integer > exit_status, Pointer<Pointer<GError > > error) {
		return g_spawn_command_line_sync(Pointer.getPeer(command_line), Pointer.getPeer(standard_output), Pointer.getPeer(standard_error), Pointer.getPeer(exit_status), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_spawn_command_line_sync(@Ptr long command_line, @Ptr long standard_output, @Ptr long standard_error, @Ptr long exit_status, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_spawn_command_line_async(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:141</i>
	 */
	public static GLibLibrary.gboolean g_spawn_command_line_async(Pointer<Byte > command_line, Pointer<Pointer<GError > > error) {
		return g_spawn_command_line_async(Pointer.getPeer(command_line), Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_spawn_command_line_async(@Ptr long command_line, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_spawn_check_exit_status(gint, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:143</i>
	 */
	public static GLibLibrary.gboolean g_spawn_check_exit_status(int exit_status, Pointer<Pointer<GError > > error) {
		return g_spawn_check_exit_status(exit_status, Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_spawn_check_exit_status(int exit_status, @Ptr long error);
	/**
	 * Original signature : <code>void g_spawn_close_pid(GPid)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:145</i>
	 */
	public static native void g_spawn_close_pid(int pid);
	/**
	 * Original signature : <code>gchar g_ascii_tolower(gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:17</i>
	 */
	public static native byte g_ascii_tolower(byte c);
	/**
	 * Original signature : <code>gchar g_ascii_toupper(gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:19</i>
	 */
	public static native byte g_ascii_toupper(byte c);
	/**
	 * Original signature : <code>gint g_ascii_digit_value(gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:21</i>
	 */
	public static native int g_ascii_digit_value(byte c);
	/**
	 * Original signature : <code>gint g_ascii_xdigit_value(gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:23</i>
	 */
	public static native int g_ascii_xdigit_value(byte c);
	/**
	 * Original signature : <code>gchar* g_strdelimit(gchar*, const gchar*, gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:25</i>
	 */
	public static Pointer<Byte > g_strdelimit(Pointer<Byte > string, Pointer<Byte > delimiters, byte new_delimiter) {
		return Pointer.pointerToAddress(g_strdelimit(Pointer.getPeer(string), Pointer.getPeer(delimiters), new_delimiter), Byte.class);
	}
	@Ptr 
	protected native static long g_strdelimit(@Ptr long string, @Ptr long delimiters, byte new_delimiter);
	/**
	 * Original signature : <code>gchar* g_strcanon(gchar*, const gchar*, gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:27</i>
	 */
	public static Pointer<Byte > g_strcanon(Pointer<Byte > string, Pointer<Byte > valid_chars, byte substitutor) {
		return Pointer.pointerToAddress(g_strcanon(Pointer.getPeer(string), Pointer.getPeer(valid_chars), substitutor), Byte.class);
	}
	@Ptr 
	protected native static long g_strcanon(@Ptr long string, @Ptr long valid_chars, byte substitutor);
	/**
	 * Original signature : <code>gchar* g_strerror(gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:29</i>
	 */
	public static Pointer<Byte > g_strerror(int errnum) {
		return Pointer.pointerToAddress(g_strerror$2(errnum), Byte.class);
	}
	@Ptr 
	protected native static long g_strerror$2(int errnum);
	/**
	 * Original signature : <code>gchar* g_strsignal(gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:31</i>
	 */
	public static Pointer<Byte > g_strsignal(int signum) {
		return Pointer.pointerToAddress(g_strsignal$2(signum), Byte.class);
	}
	@Ptr 
	protected native static long g_strsignal$2(int signum);
	/**
	 * Original signature : <code>gchar* g_strreverse(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:33</i>
	 */
	public static Pointer<Byte > g_strreverse(Pointer<Byte > string) {
		return Pointer.pointerToAddress(g_strreverse(Pointer.getPeer(string)), Byte.class);
	}
	@Ptr 
	protected native static long g_strreverse(@Ptr long string);
	/**
	 * Original signature : <code>gsize g_strlcpy(gchar*, const gchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:35</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_strlcpy(Pointer<Byte > dest, Pointer<Byte > src, @org.bridj.ann.CLong long dest_size) {
		return g_strlcpy(Pointer.getPeer(dest), Pointer.getPeer(src), dest_size);
	}
	@org.bridj.ann.CLong 
	protected native static long g_strlcpy(@Ptr long dest, @Ptr long src, @org.bridj.ann.CLong long dest_size);
	/**
	 * Original signature : <code>gsize g_strlcat(gchar*, const gchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:37</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_strlcat(Pointer<Byte > dest, Pointer<Byte > src, @org.bridj.ann.CLong long dest_size) {
		return g_strlcat(Pointer.getPeer(dest), Pointer.getPeer(src), dest_size);
	}
	@org.bridj.ann.CLong 
	protected native static long g_strlcat(@Ptr long dest, @Ptr long src, @org.bridj.ann.CLong long dest_size);
	/**
	 * Original signature : <code>gchar* g_strstr_len(const gchar*, gssize, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:39</i>
	 */
	public static Pointer<Byte > g_strstr_len(Pointer<Byte > haystack, @org.bridj.ann.CLong long haystack_len, Pointer<Byte > needle) {
		return Pointer.pointerToAddress(g_strstr_len(Pointer.getPeer(haystack), haystack_len, Pointer.getPeer(needle)), Byte.class);
	}
	@Ptr 
	protected native static long g_strstr_len(@Ptr long haystack, @org.bridj.ann.CLong long haystack_len, @Ptr long needle);
	/**
	 * Original signature : <code>gchar* g_strrstr(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:41</i>
	 */
	public static Pointer<Byte > g_strrstr(Pointer<Byte > haystack, Pointer<Byte > needle) {
		return Pointer.pointerToAddress(g_strrstr(Pointer.getPeer(haystack), Pointer.getPeer(needle)), Byte.class);
	}
	@Ptr 
	protected native static long g_strrstr(@Ptr long haystack, @Ptr long needle);
	/**
	 * Original signature : <code>gchar* g_strrstr_len(const gchar*, gssize, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:43</i>
	 */
	public static Pointer<Byte > g_strrstr_len(Pointer<Byte > haystack, @org.bridj.ann.CLong long haystack_len, Pointer<Byte > needle) {
		return Pointer.pointerToAddress(g_strrstr_len(Pointer.getPeer(haystack), haystack_len, Pointer.getPeer(needle)), Byte.class);
	}
	@Ptr 
	protected native static long g_strrstr_len(@Ptr long haystack, @org.bridj.ann.CLong long haystack_len, @Ptr long needle);
	/**
	 * Original signature : <code>gboolean g_str_has_suffix(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:45</i>
	 */
	public static GLibLibrary.gboolean g_str_has_suffix(Pointer<Byte > str, Pointer<Byte > suffix) {
		return g_str_has_suffix(Pointer.getPeer(str), Pointer.getPeer(suffix));
	}
	protected native static GLibLibrary.gboolean g_str_has_suffix(@Ptr long str, @Ptr long suffix);
	/**
	 * Original signature : <code>gboolean g_str_has_prefix(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:47</i>
	 */
	public static GLibLibrary.gboolean g_str_has_prefix(Pointer<Byte > str, Pointer<Byte > prefix) {
		return g_str_has_prefix(Pointer.getPeer(str), Pointer.getPeer(prefix));
	}
	protected native static GLibLibrary.gboolean g_str_has_prefix(@Ptr long str, @Ptr long prefix);
	/**
	 * Original signature : <code>gdouble g_strtod(const gchar*, gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:49</i>
	 */
	public static double g_strtod(Pointer<Byte > nptr, Pointer<Pointer<Byte > > endptr) {
		return g_strtod(Pointer.getPeer(nptr), Pointer.getPeer(endptr));
	}
	protected native static double g_strtod(@Ptr long nptr, @Ptr long endptr);
	/**
	 * Original signature : <code>gdouble g_ascii_strtod(const gchar*, gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:51</i>
	 */
	public static double g_ascii_strtod(Pointer<Byte > nptr, Pointer<Pointer<Byte > > endptr) {
		return g_ascii_strtod(Pointer.getPeer(nptr), Pointer.getPeer(endptr));
	}
	protected native static double g_ascii_strtod(@Ptr long nptr, @Ptr long endptr);
	/**
	 * Original signature : <code>guint64 g_ascii_strtoull(const gchar*, gchar**, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:53</i>
	 */
	public static long g_ascii_strtoull(Pointer<Byte > nptr, Pointer<Pointer<Byte > > endptr, int base) {
		return g_ascii_strtoull(Pointer.getPeer(nptr), Pointer.getPeer(endptr), base);
	}
	protected native static long g_ascii_strtoull(@Ptr long nptr, @Ptr long endptr, int base);
	/**
	 * Original signature : <code>gint64 g_ascii_strtoll(const gchar*, gchar**, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:55</i>
	 */
	public static long g_ascii_strtoll(Pointer<Byte > nptr, Pointer<Pointer<Byte > > endptr, int base) {
		return g_ascii_strtoll(Pointer.getPeer(nptr), Pointer.getPeer(endptr), base);
	}
	protected native static long g_ascii_strtoll(@Ptr long nptr, @Ptr long endptr, int base);
	/**
	 * Original signature : <code>gchar* g_ascii_dtostr(gchar*, gint, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:57</i>
	 */
	public static Pointer<Byte > g_ascii_dtostr(Pointer<Byte > buffer, int buf_len, double d) {
		return Pointer.pointerToAddress(g_ascii_dtostr(Pointer.getPeer(buffer), buf_len, d), Byte.class);
	}
	@Ptr 
	protected native static long g_ascii_dtostr(@Ptr long buffer, int buf_len, double d);
	/**
	 * Original signature : <code>gchar* g_ascii_formatd(gchar*, gint, const gchar*, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:59</i>
	 */
	public static Pointer<Byte > g_ascii_formatd(Pointer<Byte > buffer, int buf_len, Pointer<Byte > format, double d) {
		return Pointer.pointerToAddress(g_ascii_formatd(Pointer.getPeer(buffer), buf_len, Pointer.getPeer(format), d), Byte.class);
	}
	@Ptr 
	protected native static long g_ascii_formatd(@Ptr long buffer, int buf_len, @Ptr long format, double d);
	/**
	 * removes leading spaces<br>
	 * Original signature : <code>gchar* g_strchug(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:64</i>
	 */
	public static Pointer<Byte > g_strchug(Pointer<Byte > string) {
		return Pointer.pointerToAddress(g_strchug(Pointer.getPeer(string)), Byte.class);
	}
	@Ptr 
	protected native static long g_strchug(@Ptr long string);
	/**
	 * removes trailing spaces<br>
	 * Original signature : <code>gchar* g_strchomp(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:69</i>
	 */
	public static Pointer<Byte > g_strchomp(Pointer<Byte > string) {
		return Pointer.pointerToAddress(g_strchomp(Pointer.getPeer(string)), Byte.class);
	}
	@Ptr 
	protected native static long g_strchomp(@Ptr long string);
	/**
	 * Original signature : <code>gint g_ascii_strcasecmp(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:71</i>
	 */
	public static int g_ascii_strcasecmp(Pointer<Byte > s1, Pointer<Byte > s2) {
		return g_ascii_strcasecmp(Pointer.getPeer(s1), Pointer.getPeer(s2));
	}
	protected native static int g_ascii_strcasecmp(@Ptr long s1, @Ptr long s2);
	/**
	 * Original signature : <code>gint g_ascii_strncasecmp(const gchar*, const gchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:73</i>
	 */
	public static int g_ascii_strncasecmp(Pointer<Byte > s1, Pointer<Byte > s2, @org.bridj.ann.CLong long n) {
		return g_ascii_strncasecmp(Pointer.getPeer(s1), Pointer.getPeer(s2), n);
	}
	protected native static int g_ascii_strncasecmp(@Ptr long s1, @Ptr long s2, @org.bridj.ann.CLong long n);
	/**
	 * Original signature : <code>gchar* g_ascii_strdown(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:75</i>
	 */
	public static Pointer<Byte > g_ascii_strdown(Pointer<Byte > str, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_ascii_strdown(Pointer.getPeer(str), len), Byte.class);
	}
	@Ptr 
	protected native static long g_ascii_strdown(@Ptr long str, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>gchar* g_ascii_strup(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:77</i>
	 */
	public static Pointer<Byte > g_ascii_strup(Pointer<Byte > str, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_ascii_strup(Pointer.getPeer(str), len), Byte.class);
	}
	@Ptr 
	protected native static long g_ascii_strup(@Ptr long str, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>gint g_strcasecmp(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:79</i>
	 */
	public static int g_strcasecmp(Pointer<Byte > s1, Pointer<Byte > s2) {
		return g_strcasecmp(Pointer.getPeer(s1), Pointer.getPeer(s2));
	}
	protected native static int g_strcasecmp(@Ptr long s1, @Ptr long s2);
	/**
	 * Original signature : <code>gint g_strncasecmp(const gchar*, const gchar*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:81</i>
	 */
	public static int g_strncasecmp(Pointer<Byte > s1, Pointer<Byte > s2, int n) {
		return g_strncasecmp(Pointer.getPeer(s1), Pointer.getPeer(s2), n);
	}
	protected native static int g_strncasecmp(@Ptr long s1, @Ptr long s2, int n);
	/**
	 * Original signature : <code>gchar* g_strdown(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:83</i>
	 */
	public static Pointer<Byte > g_strdown(Pointer<Byte > string) {
		return Pointer.pointerToAddress(g_strdown(Pointer.getPeer(string)), Byte.class);
	}
	@Ptr 
	protected native static long g_strdown(@Ptr long string);
	/**
	 * Original signature : <code>gchar* g_strup(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:85</i>
	 */
	public static Pointer<Byte > g_strup(Pointer<Byte > string) {
		return Pointer.pointerToAddress(g_strup(Pointer.getPeer(string)), Byte.class);
	}
	@Ptr 
	protected native static long g_strup(@Ptr long string);
	/**
	 * String utility functions that return a newly allocated string which<br>
	 * ought to be freed with g_free from the caller at some point.<br>
	 * Original signature : <code>gchar* g_strdup(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:91</i>
	 */
	public static Pointer<Byte > g_strdup(Pointer<Byte > str) {
		return Pointer.pointerToAddress(g_strdup(Pointer.getPeer(str)), Byte.class);
	}
	@Ptr 
	protected native static long g_strdup(@Ptr long str);
	/**
	 * Original signature : <code>gchar* g_strdup_printf(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:93</i>
	 */
	public static Pointer<Byte > g_strdup_printf(Pointer<Byte > format, Object... varArgs1) {
		return Pointer.pointerToAddress(g_strdup_printf(Pointer.getPeer(format), varArgs1), Byte.class);
	}
	@Ptr 
	protected native static long g_strdup_printf(@Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>gchar* g_strdup_vprintf(const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:95</i>
	 */
	public static Pointer<Byte > g_strdup_vprintf(Pointer<Byte > format, Object... args) {
		return Pointer.pointerToAddress(g_strdup_vprintf(Pointer.getPeer(format), args), Byte.class);
	}
	@Ptr 
	protected native static long g_strdup_vprintf(@Ptr long format, Object... args);
	/**
	 * Original signature : <code>gchar* g_strndup(const gchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:97</i>
	 */
	public static Pointer<Byte > g_strndup(Pointer<Byte > str, @org.bridj.ann.CLong long n) {
		return Pointer.pointerToAddress(g_strndup(Pointer.getPeer(str), n), Byte.class);
	}
	@Ptr 
	protected native static long g_strndup(@Ptr long str, @org.bridj.ann.CLong long n);
	/**
	 * Original signature : <code>gchar* g_strnfill(gsize, gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:99</i>
	 */
	public static Pointer<Byte > g_strnfill(@org.bridj.ann.CLong long length, byte fill_char) {
		return Pointer.pointerToAddress(g_strnfill$2(length, fill_char), Byte.class);
	}
	@Ptr 
	protected native static long g_strnfill$2(@org.bridj.ann.CLong long length, byte fill_char);
	/**
	 * Original signature : <code>gchar* g_strconcat(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:101</i>
	 */
	public static Pointer<Byte > g_strconcat(Pointer<Byte > string1, Object... varArgs1) {
		return Pointer.pointerToAddress(g_strconcat(Pointer.getPeer(string1), varArgs1), Byte.class);
	}
	@Ptr 
	protected native static long g_strconcat(@Ptr long string1, Object... varArgs1);
	/**
	 * Original signature : <code>gchar* g_strjoin(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:103</i>
	 */
	public static Pointer<Byte > g_strjoin(Pointer<Byte > separator, Object... varArgs1) {
		return Pointer.pointerToAddress(g_strjoin(Pointer.getPeer(separator), varArgs1), Byte.class);
	}
	@Ptr 
	protected native static long g_strjoin(@Ptr long separator, Object... varArgs1);
	/**
	 * Make a copy of a string interpreting C string -style escape<br>
	 * sequences. Inverse of g_strescape. The recognized sequences are \b<br>
	 * \f \n \r \t \\ \" and the octal format.<br>
	 * Original signature : <code>gchar* g_strcompress(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:110</i>
	 */
	public static Pointer<Byte > g_strcompress(Pointer<Byte > source) {
		return Pointer.pointerToAddress(g_strcompress(Pointer.getPeer(source)), Byte.class);
	}
	@Ptr 
	protected native static long g_strcompress(@Ptr long source);
	/**
	 * Copy a string escaping nonprintable characters like in C strings.<br>
	 * Inverse of g_strcompress. The exceptions parameter, if non-NULL, points<br>
	 * to a string containing characters that are not to be escaped.<br>
	 * * Deprecated API: gchar* g_strescape (const gchar *source);<br>
	 * Luckily this function wasn't used much, using NULL as second parameter<br>
	 * provides mostly identical semantics.<br>
	 * Original signature : <code>gchar* g_strescape(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:120</i>
	 */
	public static Pointer<Byte > g_strescape(Pointer<Byte > source, Pointer<Byte > exceptions) {
		return Pointer.pointerToAddress(g_strescape(Pointer.getPeer(source), Pointer.getPeer(exceptions)), Byte.class);
	}
	@Ptr 
	protected native static long g_strescape(@Ptr long source, @Ptr long exceptions);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_memdup(gconstpointer, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:122</i><br>
	 * Original signature : <code>gpointer g_memdup(gconstpointer, guint)</code> * /<br>
	 * extern gpointer g_memdup(gconstpointer mem, guint byte_size);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_memdup(gconstpointer, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:122</i><br>
	 * Original signature : <code>gpointer g_memdup(gconstpointer, guint)</code> * /<br>
	 * extern gpointer g_memdup(gconstpointer mem, guint byte_size);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * NULL terminated string arrays.<br>
	 * g_strsplit(), g_strsplit_set() split up string into max_tokens tokens<br>
	 * at delim and return a newly allocated string array.<br>
	 * g_strjoinv() concatenates all of str_array's strings, sliding in an<br>
	 * optional separator, the returned string is newly allocated.<br>
	 * g_strfreev() frees the array itself and all of its strings.<br>
	 * g_strdupv() copies a NULL-terminated array of strings<br>
	 * g_strv_length() returns the length of a NULL-terminated array of strings<br>
	 * Original signature : <code>gchar** g_strsplit(const gchar*, const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:134</i>
	 */
	public static Pointer<Pointer<Byte > > g_strsplit(Pointer<Byte > string, Pointer<Byte > delimiter, int max_tokens) {
		return Pointer.pointerToAddress(g_strsplit(Pointer.getPeer(string), Pointer.getPeer(delimiter), max_tokens), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_strsplit(@Ptr long string, @Ptr long delimiter, int max_tokens);
	/**
	 * Original signature : <code>gchar** g_strsplit_set(const gchar*, const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:136</i>
	 */
	public static Pointer<Pointer<Byte > > g_strsplit_set(Pointer<Byte > string, Pointer<Byte > delimiters, int max_tokens) {
		return Pointer.pointerToAddress(g_strsplit_set(Pointer.getPeer(string), Pointer.getPeer(delimiters), max_tokens), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_strsplit_set(@Ptr long string, @Ptr long delimiters, int max_tokens);
	/**
	 * Original signature : <code>gchar* g_strjoinv(const gchar*, gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:138</i>
	 */
	public static Pointer<Byte > g_strjoinv(Pointer<Byte > separator, Pointer<Pointer<Byte > > str_array) {
		return Pointer.pointerToAddress(g_strjoinv(Pointer.getPeer(separator), Pointer.getPeer(str_array)), Byte.class);
	}
	@Ptr 
	protected native static long g_strjoinv(@Ptr long separator, @Ptr long str_array);
	/**
	 * Original signature : <code>void g_strfreev(gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:140</i>
	 */
	public static void g_strfreev(Pointer<Pointer<Byte > > str_array) {
		g_strfreev(Pointer.getPeer(str_array));
	}
	protected native static void g_strfreev(@Ptr long str_array);
	/**
	 * Original signature : <code>gchar** g_strdupv(gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:142</i>
	 */
	public static Pointer<Pointer<Byte > > g_strdupv(Pointer<Pointer<Byte > > str_array) {
		return Pointer.pointerToAddress(g_strdupv(Pointer.getPeer(str_array)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_strdupv(@Ptr long str_array);
	/**
	 * Original signature : <code>guint g_strv_length(gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:144</i>
	 */
	public static int g_strv_length(Pointer<Pointer<Byte > > str_array) {
		return g_strv_length(Pointer.getPeer(str_array));
	}
	protected native static int g_strv_length(@Ptr long str_array);
	/**
	 * Original signature : <code>gchar* g_stpcpy(gchar*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:146</i>
	 */
	public static Pointer<Byte > g_stpcpy(Pointer<Byte > dest, Pointer<Byte > src) {
		return Pointer.pointerToAddress(g_stpcpy(Pointer.getPeer(dest), Pointer.getPeer(src)), Byte.class);
	}
	@Ptr 
	protected native static long g_stpcpy(@Ptr long dest, @Ptr long src);
	/**
	 * Original signature : <code>GStringChunk* g_string_chunk_new(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstringchunk.h:3</i>
	 */
	public static Pointer<GLibLibrary.GStringChunk > g_string_chunk_new(@org.bridj.ann.CLong long size) {
		return Pointer.pointerToAddress(g_string_chunk_new$2(size), GLibLibrary.GStringChunk.class);
	}
	@Ptr 
	protected native static long g_string_chunk_new$2(@org.bridj.ann.CLong long size);
	/**
	 * Original signature : <code>void g_string_chunk_free(GStringChunk*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstringchunk.h:5</i>
	 */
	public static void g_string_chunk_free(Pointer<GLibLibrary.GStringChunk > chunk) {
		g_string_chunk_free(Pointer.getPeer(chunk));
	}
	protected native static void g_string_chunk_free(@Ptr long chunk);
	/**
	 * Original signature : <code>void g_string_chunk_clear(GStringChunk*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstringchunk.h:7</i>
	 */
	public static void g_string_chunk_clear(Pointer<GLibLibrary.GStringChunk > chunk) {
		g_string_chunk_clear(Pointer.getPeer(chunk));
	}
	protected native static void g_string_chunk_clear(@Ptr long chunk);
	/**
	 * Original signature : <code>gchar* g_string_chunk_insert(GStringChunk*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstringchunk.h:9</i>
	 */
	public static Pointer<Byte > g_string_chunk_insert(Pointer<GLibLibrary.GStringChunk > chunk, Pointer<Byte > string) {
		return Pointer.pointerToAddress(g_string_chunk_insert(Pointer.getPeer(chunk), Pointer.getPeer(string)), Byte.class);
	}
	@Ptr 
	protected native static long g_string_chunk_insert(@Ptr long chunk, @Ptr long string);
	/**
	 * Original signature : <code>gchar* g_string_chunk_insert_len(GStringChunk*, const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstringchunk.h:11</i>
	 */
	public static Pointer<Byte > g_string_chunk_insert_len(Pointer<GLibLibrary.GStringChunk > chunk, Pointer<Byte > string, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_string_chunk_insert_len(Pointer.getPeer(chunk), Pointer.getPeer(string), len), Byte.class);
	}
	@Ptr 
	protected native static long g_string_chunk_insert_len(@Ptr long chunk, @Ptr long string, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>gchar* g_string_chunk_insert_const(GStringChunk*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstringchunk.h:13</i>
	 */
	public static Pointer<Byte > g_string_chunk_insert_const(Pointer<GLibLibrary.GStringChunk > chunk, Pointer<Byte > string) {
		return Pointer.pointerToAddress(g_string_chunk_insert_const(Pointer.getPeer(chunk), Pointer.getPeer(string)), Byte.class);
	}
	@Ptr 
	protected native static long g_string_chunk_insert_const(@Ptr long chunk, @Ptr long string);
	/**
	 * Original signature : <code>int g_strcmp0(const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:7</i>
	 */
	public static int g_strcmp0(Pointer<Byte > str1, Pointer<Byte > str2) {
		return g_strcmp0(Pointer.getPeer(str1), Pointer.getPeer(str2));
	}
	protected native static int g_strcmp0(@Ptr long str1, @Ptr long str2);
	/**
	 * report performance results<br>
	 * Original signature : <code>void g_test_minimized_result(double, const char*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:12</i>
	 */
	public static void g_test_minimized_result(double minimized_quantity, Pointer<Byte > format, Object... varArgs1) {
		g_test_minimized_result(minimized_quantity, Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_test_minimized_result(double minimized_quantity, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>void g_test_maximized_result(double, const char*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:14</i>
	 */
	public static void g_test_maximized_result(double maximized_quantity, Pointer<Byte > format, Object... varArgs1) {
		g_test_maximized_result(maximized_quantity, Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_test_maximized_result(double maximized_quantity, @Ptr long format, Object... varArgs1);
	/**
	 * initialize testing framework<br>
	 * Original signature : <code>void g_test_init(int*, char***, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:19</i>
	 */
	public static void g_test_init(Pointer<Integer > argc, Pointer<Pointer<Pointer<Byte > > > argv, Object... varArgs1) {
		g_test_init(Pointer.getPeer(argc), Pointer.getPeer(argv), varArgs1);
	}
	protected native static void g_test_init(@Ptr long argc, @Ptr long argv, Object... varArgs1);
	/**
	 * Original signature : <code>gboolean g_test_subprocess()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:21</i>
	 */
	public static native GLibLibrary.gboolean g_test_subprocess();
	/**
	 * run all tests under toplevel suite (path: /)<br>
	 * Original signature : <code>int g_test_run()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:26</i>
	 */
	public static native int g_test_run();
	/**
	 * hook up a test functions under test path<br>
	 * Original signature : <code>void g_test_add_func(const char*, GTestFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:31</i>
	 */
	public static void g_test_add_func(Pointer<Byte > testpath, Pointer<GLibLibrary.GTestFunc > test_func) {
		g_test_add_func(Pointer.getPeer(testpath), Pointer.getPeer(test_func));
	}
	protected native static void g_test_add_func(@Ptr long testpath, @Ptr long test_func);
	/**
	 * Original signature : <code>void g_test_add_data_func(const char*, gconstpointer, GTestDataFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:33</i>
	 */
	public static void g_test_add_data_func(Pointer<Byte > testpath, Pointer<? > test_data, Pointer<GLibLibrary.GTestDataFunc > test_func) {
		g_test_add_data_func(Pointer.getPeer(testpath), Pointer.getPeer(test_data), Pointer.getPeer(test_func));
	}
	protected native static void g_test_add_data_func(@Ptr long testpath, @Ptr long test_data, @Ptr long test_func);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_test_add_data_func_full(const char*, gpointer, GTestDataFunc, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:35</i><br>
	 * Original signature : <code>void g_test_add_data_func_full(const char*, gpointer, GTestDataFunc, GDestroyNotify)</code> * /<br>
	 * extern void g_test_add_data_func_full(const char* testpath, gpointer test_data, GTestDataFunc test_func, GDestroyNotify data_free_func);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_test_add_data_func_full(const char*, gpointer, GTestDataFunc, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:35</i><br>
	 * Original signature : <code>void g_test_add_data_func_full(const char*, gpointer, GTestDataFunc, GDestroyNotify)</code> * /<br>
	 * extern void g_test_add_data_func_full(const char* testpath, gpointer test_data, GTestDataFunc test_func, GDestroyNotify data_free_func);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * tell about failure<br>
	 * Original signature : <code>void g_test_fail()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:40</i>
	 */
	public static native void g_test_fail();
	/**
	 * Original signature : <code>void g_test_incomplete(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:42</i>
	 */
	public static void g_test_incomplete(Pointer<Byte > msg) {
		g_test_incomplete(Pointer.getPeer(msg));
	}
	protected native static void g_test_incomplete(@Ptr long msg);
	/**
	 * Original signature : <code>void g_test_skip(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:44</i>
	 */
	public static void g_test_skip(Pointer<Byte > msg) {
		g_test_skip(Pointer.getPeer(msg));
	}
	protected native static void g_test_skip(@Ptr long msg);
	/**
	 * Original signature : <code>gboolean g_test_failed()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:46</i>
	 */
	public static native GLibLibrary.gboolean g_test_failed();
	/**
	 * Original signature : <code>void g_test_set_nonfatal_assertions()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:48</i>
	 */
	public static native void g_test_set_nonfatal_assertions();
	/**
	 * add test messages to the test report<br>
	 * Original signature : <code>void g_test_message(const char*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:53</i>
	 */
	public static void g_test_message(Pointer<Byte > format, Object... varArgs1) {
		g_test_message(Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_test_message(@Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>void g_test_bug_base(const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:55</i>
	 */
	public static void g_test_bug_base(Pointer<Byte > uri_pattern) {
		g_test_bug_base(Pointer.getPeer(uri_pattern));
	}
	protected native static void g_test_bug_base(@Ptr long uri_pattern);
	/**
	 * Original signature : <code>void g_test_bug(const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:57</i>
	 */
	public static void g_test_bug(Pointer<Byte > bug_uri_snippet) {
		g_test_bug(Pointer.getPeer(bug_uri_snippet));
	}
	protected native static void g_test_bug(@Ptr long bug_uri_snippet);
	/**
	 * measure test timings<br>
	 * Original signature : <code>void g_test_timer_start()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:62</i>
	 */
	public static native void g_test_timer_start();
	/**
	 * Original signature : <code>double g_test_timer_elapsed()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:64</i>
	 */
	public static native double g_test_timer_elapsed();
	/**
	 * Original signature : <code>double g_test_timer_last()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:66</i>
	 */
	public static native double g_test_timer_last();
	/**
	 * SKIPPED:<br>
	 * automatically g_free or g_object_unref upon teardown<br>
	 * Original signature : <code>void g_test_queue_free(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:71</i><br>
	 * automatically g_free or g_object_unref upon teardown<br>
	 * Original signature : <code>void g_test_queue_free(gpointer)</code><br>
	 * /<br>
	 * extern void g_test_queue_free(gpointer gfree_pointer);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * automatically g_free or g_object_unref upon teardown<br>
	 * Original signature : <code>void g_test_queue_free(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:71</i><br>
	 * automatically g_free or g_object_unref upon teardown<br>
	 * Original signature : <code>void g_test_queue_free(gpointer)</code><br>
	 * /<br>
	 * extern void g_test_queue_free(gpointer gfree_pointer);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_test_queue_destroy(GDestroyNotify, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:73</i><br>
	 * Original signature : <code>void g_test_queue_destroy(GDestroyNotify, gpointer)</code> * /<br>
	 * extern void g_test_queue_destroy(GDestroyNotify destroy_func, gpointer destroy_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_test_queue_destroy(GDestroyNotify, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:73</i><br>
	 * Original signature : <code>void g_test_queue_destroy(GDestroyNotify, gpointer)</code> * /<br>
	 * extern void g_test_queue_destroy(GDestroyNotify destroy_func, gpointer destroy_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gboolean g_test_trap_fork(guint64, GTestTrapFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:80</i>
	 */
	public static GLibLibrary.gboolean g_test_trap_fork(long usec_timeout, IntValuedEnum<GLibLibrary.GTestTrapFlags > test_trap_flags) {
		return g_test_trap_fork(usec_timeout, (int)test_trap_flags.value());
	}
	protected native static GLibLibrary.gboolean g_test_trap_fork(long usec_timeout, int test_trap_flags);
	/**
	 * Original signature : <code>void g_test_trap_subprocess(const char*, guint64, GTestSubprocessFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:87</i>
	 */
	public static void g_test_trap_subprocess(Pointer<Byte > test_path, long usec_timeout, IntValuedEnum<GLibLibrary.GTestSubprocessFlags > test_flags) {
		g_test_trap_subprocess(Pointer.getPeer(test_path), usec_timeout, (int)test_flags.value());
	}
	protected native static void g_test_trap_subprocess(@Ptr long test_path, long usec_timeout, int test_flags);
	/**
	 * Original signature : <code>gboolean g_test_trap_has_passed()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:89</i>
	 */
	public static native GLibLibrary.gboolean g_test_trap_has_passed();
	/**
	 * Original signature : <code>gboolean g_test_trap_reached_timeout()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:91</i>
	 */
	public static native GLibLibrary.gboolean g_test_trap_reached_timeout();
	/**
	 * Original signature : <code>gint32 g_test_rand_int()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:93</i>
	 */
	public static native int g_test_rand_int();
	/**
	 * Original signature : <code>gint32 g_test_rand_int_range(gint32, gint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:95</i>
	 */
	public static native int g_test_rand_int_range(int begin, int end);
	/**
	 * Original signature : <code>double g_test_rand_double()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:97</i>
	 */
	public static native double g_test_rand_double();
	/**
	 * Original signature : <code>double g_test_rand_double_range(double, double)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:99</i>
	 */
	public static native double g_test_rand_double_range(double range_start, double range_end);
	/**
	 * semi-internal API<br>
	 * Original signature : <code>GTestCase* g_test_create_case(const char*, gsize, gconstpointer, GTestFixtureFunc, GTestFixtureFunc, GTestFixtureFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:104</i>
	 */
	public static Pointer<GLibLibrary.GTestCase > g_test_create_case(Pointer<Byte > test_name, @org.bridj.ann.CLong long data_size, Pointer<? > test_data, Pointer<GLibLibrary.GTestFixtureFunc > data_setup, Pointer<GLibLibrary.GTestFixtureFunc > data_test, Pointer<GLibLibrary.GTestFixtureFunc > data_teardown) {
		return Pointer.pointerToAddress(g_test_create_case(Pointer.getPeer(test_name), data_size, Pointer.getPeer(test_data), Pointer.getPeer(data_setup), Pointer.getPeer(data_test), Pointer.getPeer(data_teardown)), GLibLibrary.GTestCase.class);
	}
	@Ptr 
	protected native static long g_test_create_case(@Ptr long test_name, @org.bridj.ann.CLong long data_size, @Ptr long test_data, @Ptr long data_setup, @Ptr long data_test, @Ptr long data_teardown);
	/**
	 * Original signature : <code>GTestSuite* g_test_create_suite(const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:106</i>
	 */
	public static Pointer<GLibLibrary.GTestSuite > g_test_create_suite(Pointer<Byte > suite_name) {
		return Pointer.pointerToAddress(g_test_create_suite(Pointer.getPeer(suite_name)), GLibLibrary.GTestSuite.class);
	}
	@Ptr 
	protected native static long g_test_create_suite(@Ptr long suite_name);
	/**
	 * Original signature : <code>GTestSuite* g_test_get_root()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:108</i>
	 */
	public static Pointer<GLibLibrary.GTestSuite > g_test_get_root() {
		return Pointer.pointerToAddress(g_test_get_root$2(), GLibLibrary.GTestSuite.class);
	}
	@Ptr 
	protected native static long g_test_get_root$2();
	/**
	 * Original signature : <code>void g_test_suite_add(GTestSuite*, GTestCase*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:110</i>
	 */
	public static void g_test_suite_add(Pointer<GLibLibrary.GTestSuite > suite, Pointer<GLibLibrary.GTestCase > test_case) {
		g_test_suite_add(Pointer.getPeer(suite), Pointer.getPeer(test_case));
	}
	protected native static void g_test_suite_add(@Ptr long suite, @Ptr long test_case);
	/**
	 * Original signature : <code>void g_test_suite_add_suite(GTestSuite*, GTestSuite*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:112</i>
	 */
	public static void g_test_suite_add_suite(Pointer<GLibLibrary.GTestSuite > suite, Pointer<GLibLibrary.GTestSuite > nestedsuite) {
		g_test_suite_add_suite(Pointer.getPeer(suite), Pointer.getPeer(nestedsuite));
	}
	protected native static void g_test_suite_add_suite(@Ptr long suite, @Ptr long nestedsuite);
	/**
	 * Original signature : <code>int g_test_run_suite(GTestSuite*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:114</i>
	 */
	public static int g_test_run_suite(Pointer<GLibLibrary.GTestSuite > suite) {
		return g_test_run_suite(Pointer.getPeer(suite));
	}
	protected native static int g_test_run_suite(@Ptr long suite);
	/**
	 * internal ABI<br>
	 * Original signature : <code>void g_test_trap_assertions(const char*, const char*, int, const char*, guint64, const char*)</code><br>
	 * @param assertion_flags 0-pass, 1-fail, 2-outpattern, 4-errpattern<br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:120</i>
	 */
	public static void g_test_trap_assertions(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func, long assertion_flags, Pointer<Byte > pattern) {
		g_test_trap_assertions(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func), assertion_flags, Pointer.getPeer(pattern));
	}
	protected native static void g_test_trap_assertions(@Ptr long domain, @Ptr long file, int line, @Ptr long func, long assertion_flags, @Ptr long pattern);
	/**
	 * Original signature : <code>void g_assertion_message(const char*, const char*, int, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:122</i>
	 */
	public static void g_assertion_message(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func, Pointer<Byte > message) {
		g_assertion_message(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func), Pointer.getPeer(message));
	}
	protected native static void g_assertion_message(@Ptr long domain, @Ptr long file, int line, @Ptr long func, @Ptr long message);
	/**
	 * Original signature : <code>void g_assertion_message_expr(const char*, const char*, int, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:124</i>
	 */
	public static void g_assertion_message_expr(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func, Pointer<Byte > expr) {
		g_assertion_message_expr(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func), Pointer.getPeer(expr));
	}
	protected native static void g_assertion_message_expr(@Ptr long domain, @Ptr long file, int line, @Ptr long func, @Ptr long expr);
	/**
	 * Original signature : <code>void g_assertion_message_cmpstr(const char*, const char*, int, const char*, const char*, const char*, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:126</i>
	 */
	public static void g_assertion_message_cmpstr(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func, Pointer<Byte > expr, Pointer<Byte > arg1, Pointer<Byte > cmp, Pointer<Byte > arg2) {
		g_assertion_message_cmpstr(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func), Pointer.getPeer(expr), Pointer.getPeer(arg1), Pointer.getPeer(cmp), Pointer.getPeer(arg2));
	}
	protected native static void g_assertion_message_cmpstr(@Ptr long domain, @Ptr long file, int line, @Ptr long func, @Ptr long expr, @Ptr long arg1, @Ptr long cmp, @Ptr long arg2);
	/**
	 * Original signature : <code>void g_assertion_message_cmpnum(const char*, const char*, int, const char*, const char*, long double, const char*, long double, char)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:128</i>
	 */
	public static void g_assertion_message_cmpnum(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func, Pointer<Byte > expr, double arg1, Pointer<Byte > cmp, double arg2, byte numtype) {
		g_assertion_message_cmpnum(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func), Pointer.getPeer(expr), arg1, Pointer.getPeer(cmp), arg2, numtype);
	}
	protected native static void g_assertion_message_cmpnum(@Ptr long domain, @Ptr long file, int line, @Ptr long func, @Ptr long expr, double arg1, @Ptr long cmp, double arg2, byte numtype);
	/**
	 * Original signature : <code>void g_assertion_message_error(const char*, const char*, int, const char*, const char*, const GError*, GQuark, int)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:130</i>
	 */
	public static void g_assertion_message_error(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func, Pointer<Byte > expr, Pointer<GError > error, int error_domain, int error_code) {
		g_assertion_message_error(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func), Pointer.getPeer(expr), Pointer.getPeer(error), error_domain, error_code);
	}
	protected native static void g_assertion_message_error(@Ptr long domain, @Ptr long file, int line, @Ptr long func, @Ptr long expr, @Ptr long error, int error_domain, int error_code);
	/**
	 * Original signature : <code>void g_test_add_vtable(const char*, gsize, gconstpointer, GTestFixtureFunc, GTestFixtureFunc, GTestFixtureFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:132</i>
	 */
	public static void g_test_add_vtable(Pointer<Byte > testpath, @org.bridj.ann.CLong long data_size, Pointer<? > test_data, Pointer<GLibLibrary.GTestFixtureFunc > data_setup, Pointer<GLibLibrary.GTestFixtureFunc > data_test, Pointer<GLibLibrary.GTestFixtureFunc > data_teardown) {
		g_test_add_vtable(Pointer.getPeer(testpath), data_size, Pointer.getPeer(test_data), Pointer.getPeer(data_setup), Pointer.getPeer(data_test), Pointer.getPeer(data_teardown));
	}
	protected native static void g_test_add_vtable(@Ptr long testpath, @org.bridj.ann.CLong long data_size, @Ptr long test_data, @Ptr long data_setup, @Ptr long data_test, @Ptr long data_teardown);
	/**
	 * Original signature : <code>char* g_test_log_type_name(GTestLogType)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:170</i>
	 */
	public static Pointer<Byte > g_test_log_type_name(IntValuedEnum<GLibLibrary.GTestLogType > log_type) {
		return Pointer.pointerToAddress(g_test_log_type_name((int)log_type.value()), Byte.class);
	}
	@Ptr 
	protected native static long g_test_log_type_name(int log_type);
	/**
	 * Original signature : <code>GTestLogBuffer* g_test_log_buffer_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:172</i>
	 */
	public static Pointer<GTestLogBuffer > g_test_log_buffer_new() {
		return Pointer.pointerToAddress(g_test_log_buffer_new$2(), GTestLogBuffer.class);
	}
	@Ptr 
	protected native static long g_test_log_buffer_new$2();
	/**
	 * Original signature : <code>void g_test_log_buffer_free(GTestLogBuffer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:174</i>
	 */
	public static void g_test_log_buffer_free(Pointer<GTestLogBuffer > tbuffer) {
		g_test_log_buffer_free(Pointer.getPeer(tbuffer));
	}
	protected native static void g_test_log_buffer_free(@Ptr long tbuffer);
	/**
	 * Original signature : <code>void g_test_log_buffer_push(GTestLogBuffer*, guint, const guint8*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:176</i>
	 */
	public static void g_test_log_buffer_push(Pointer<GTestLogBuffer > tbuffer, int n_bytes, Pointer<Byte > bytes) {
		g_test_log_buffer_push(Pointer.getPeer(tbuffer), n_bytes, Pointer.getPeer(bytes));
	}
	protected native static void g_test_log_buffer_push(@Ptr long tbuffer, int n_bytes, @Ptr long bytes);
	/**
	 * Original signature : <code>GTestLogMsg* g_test_log_buffer_pop(GTestLogBuffer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:178</i>
	 */
	public static Pointer<GTestLogMsg > g_test_log_buffer_pop(Pointer<GTestLogBuffer > tbuffer) {
		return Pointer.pointerToAddress(g_test_log_buffer_pop(Pointer.getPeer(tbuffer)), GTestLogMsg.class);
	}
	@Ptr 
	protected native static long g_test_log_buffer_pop(@Ptr long tbuffer);
	/**
	 * Original signature : <code>void g_test_log_msg_free(GTestLogMsg*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:180</i>
	 */
	public static void g_test_log_msg_free(Pointer<GTestLogMsg > tmsg) {
		g_test_log_msg_free(Pointer.getPeer(tmsg));
	}
	protected native static void g_test_log_msg_free(@Ptr long tmsg);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_test_log_set_fatal_handler(GTestLogFatalFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:193</i><br>
	 * Original signature : <code>void g_test_log_set_fatal_handler(GTestLogFatalFunc, gpointer)</code> * /<br>
	 * extern void g_test_log_set_fatal_handler(GTestLogFatalFunc log_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_test_log_set_fatal_handler(GTestLogFatalFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:193</i><br>
	 * Original signature : <code>void g_test_log_set_fatal_handler(GTestLogFatalFunc, gpointer)</code> * /<br>
	 * extern void g_test_log_set_fatal_handler(GTestLogFatalFunc log_func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_test_expect_message(const gchar*, GLogLevelFlags, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:195</i>
	 */
	public static void g_test_expect_message(Pointer<Byte > log_domain, IntValuedEnum<GLibLibrary.GLogLevelFlags > log_level, Pointer<Byte > pattern) {
		g_test_expect_message(Pointer.getPeer(log_domain), (int)log_level.value(), Pointer.getPeer(pattern));
	}
	protected native static void g_test_expect_message(@Ptr long log_domain, int log_level, @Ptr long pattern);
	/**
	 * Original signature : <code>void g_test_assert_expected_messages_internal(const char*, const char*, int, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:197</i>
	 */
	public static void g_test_assert_expected_messages_internal(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func) {
		g_test_assert_expected_messages_internal(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func));
	}
	protected native static void g_test_assert_expected_messages_internal(@Ptr long domain, @Ptr long file, int line, @Ptr long func);
	/**
	 * Original signature : <code>gchar* g_test_build_filename(GTestFileType, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:203</i>
	 */
	public static Pointer<Byte > g_test_build_filename(IntValuedEnum<GLibLibrary.GTestFileType > file_type, Pointer<Byte > first_path, Object... varArgs1) {
		return Pointer.pointerToAddress(g_test_build_filename((int)file_type.value(), Pointer.getPeer(first_path), varArgs1), Byte.class);
	}
	@Ptr 
	protected native static long g_test_build_filename(int file_type, @Ptr long first_path, Object... varArgs1);
	/**
	 * Original signature : <code>gchar* g_test_get_dir(GTestFileType)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:205</i>
	 */
	public static Pointer<Byte > g_test_get_dir(IntValuedEnum<GLibLibrary.GTestFileType > file_type) {
		return Pointer.pointerToAddress(g_test_get_dir((int)file_type.value()), Byte.class);
	}
	@Ptr 
	protected native static long g_test_get_dir(int file_type);
	/**
	 * Original signature : <code>gchar* g_test_get_filename(GTestFileType, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:207</i>
	 */
	public static Pointer<Byte > g_test_get_filename(IntValuedEnum<GLibLibrary.GTestFileType > file_type, Pointer<Byte > first_path, Object... varArgs1) {
		return Pointer.pointerToAddress(g_test_get_filename((int)file_type.value(), Pointer.getPeer(first_path), varArgs1), Byte.class);
	}
	@Ptr 
	protected native static long g_test_get_filename(int file_type, @Ptr long first_path, Object... varArgs1);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GThreadPool* g_thread_pool_new(GFunc, gpointer, gint, gboolean, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:8</i><br>
	 * Original signature : <code>GThreadPool* g_thread_pool_new(GFunc, gpointer, gint, gboolean, GError**)</code> * /<br>
	 * extern GThreadPool* g_thread_pool_new(GFunc func, gpointer user_data, gint max_threads, gboolean exclusive, GError** error);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GThreadPool* g_thread_pool_new(GFunc, gpointer, gint, gboolean, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:8</i><br>
	 * Original signature : <code>GThreadPool* g_thread_pool_new(GFunc, gpointer, gint, gboolean, GError**)</code> * /<br>
	 * extern GThreadPool* g_thread_pool_new(GFunc func, gpointer user_data, gint max_threads, gboolean exclusive, GError** error);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>void g_thread_pool_free(GThreadPool*, gboolean, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:10</i>
	 */
	public static void g_thread_pool_free(Pointer<GThreadPool > pool, GLibLibrary.gboolean immediate, GLibLibrary.gboolean wait_) {
		g_thread_pool_free(Pointer.getPeer(pool), immediate, wait_);
	}
	protected native static void g_thread_pool_free(@Ptr long pool, GLibLibrary.gboolean immediate, GLibLibrary.gboolean wait_);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_thread_pool_push(GThreadPool*, gpointer, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:12</i><br>
	 * Original signature : <code>gboolean g_thread_pool_push(GThreadPool*, gpointer, GError**)</code> * /<br>
	 * extern gboolean g_thread_pool_push(GThreadPool* pool, gpointer data, GError** error);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_thread_pool_push(GThreadPool*, gpointer, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:12</i><br>
	 * Original signature : <code>gboolean g_thread_pool_push(GThreadPool*, gpointer, GError**)</code> * /<br>
	 * extern gboolean g_thread_pool_push(GThreadPool* pool, gpointer data, GError** error);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>guint g_thread_pool_unprocessed(GThreadPool*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:14</i>
	 */
	public static int g_thread_pool_unprocessed(Pointer<GThreadPool > pool) {
		return g_thread_pool_unprocessed(Pointer.getPeer(pool));
	}
	protected native static int g_thread_pool_unprocessed(@Ptr long pool);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_thread_pool_set_sort_function(GThreadPool*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:16</i><br>
	 * Original signature : <code>void g_thread_pool_set_sort_function(GThreadPool*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_thread_pool_set_sort_function(GThreadPool* pool, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_thread_pool_set_sort_function(GThreadPool*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:16</i><br>
	 * Original signature : <code>void g_thread_pool_set_sort_function(GThreadPool*, GCompareDataFunc, gpointer)</code> * /<br>
	 * extern void g_thread_pool_set_sort_function(GThreadPool* pool, GCompareDataFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gboolean g_thread_pool_set_max_threads(GThreadPool*, gint, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:18</i>
	 */
	public static GLibLibrary.gboolean g_thread_pool_set_max_threads(Pointer<GThreadPool > pool, int max_threads, Pointer<Pointer<GError > > error) {
		return g_thread_pool_set_max_threads(Pointer.getPeer(pool), max_threads, Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_thread_pool_set_max_threads(@Ptr long pool, int max_threads, @Ptr long error);
	/**
	 * Original signature : <code>gint g_thread_pool_get_max_threads(GThreadPool*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:20</i>
	 */
	public static int g_thread_pool_get_max_threads(Pointer<GThreadPool > pool) {
		return g_thread_pool_get_max_threads(Pointer.getPeer(pool));
	}
	protected native static int g_thread_pool_get_max_threads(@Ptr long pool);
	/**
	 * Original signature : <code>guint g_thread_pool_get_num_threads(GThreadPool*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:22</i>
	 */
	public static int g_thread_pool_get_num_threads(Pointer<GThreadPool > pool) {
		return g_thread_pool_get_num_threads(Pointer.getPeer(pool));
	}
	protected native static int g_thread_pool_get_num_threads(@Ptr long pool);
	/**
	 * Original signature : <code>void g_thread_pool_set_max_unused_threads(gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:24</i>
	 */
	public static native void g_thread_pool_set_max_unused_threads(int max_threads);
	/**
	 * Original signature : <code>gint g_thread_pool_get_max_unused_threads()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:26</i>
	 */
	public static native int g_thread_pool_get_max_unused_threads();
	/**
	 * Original signature : <code>guint g_thread_pool_get_num_unused_threads()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:28</i>
	 */
	public static native int g_thread_pool_get_num_unused_threads();
	/**
	 * Original signature : <code>void g_thread_pool_stop_unused_threads()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:30</i>
	 */
	public static native void g_thread_pool_stop_unused_threads();
	/**
	 * Original signature : <code>void g_thread_pool_set_max_idle_time(guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:32</i>
	 */
	public static native void g_thread_pool_set_max_idle_time(int interval);
	/**
	 * Original signature : <code>guint g_thread_pool_get_max_idle_time()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:34</i>
	 */
	public static native int g_thread_pool_get_max_idle_time();
	/**
	 * Original signature : <code>GTimer* g_timer_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:4</i>
	 */
	public static Pointer<GLibLibrary.GTimer > g_timer_new() {
		return Pointer.pointerToAddress(g_timer_new$2(), GLibLibrary.GTimer.class);
	}
	@Ptr 
	protected native static long g_timer_new$2();
	/**
	 * Original signature : <code>void g_timer_destroy(GTimer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:6</i>
	 */
	public static void g_timer_destroy(Pointer<GLibLibrary.GTimer > timer) {
		g_timer_destroy(Pointer.getPeer(timer));
	}
	protected native static void g_timer_destroy(@Ptr long timer);
	/**
	 * Original signature : <code>void g_timer_start(GTimer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:8</i>
	 */
	public static void g_timer_start(Pointer<GLibLibrary.GTimer > timer) {
		g_timer_start(Pointer.getPeer(timer));
	}
	protected native static void g_timer_start(@Ptr long timer);
	/**
	 * Original signature : <code>void g_timer_stop(GTimer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:10</i>
	 */
	public static void g_timer_stop(Pointer<GLibLibrary.GTimer > timer) {
		g_timer_stop(Pointer.getPeer(timer));
	}
	protected native static void g_timer_stop(@Ptr long timer);
	/**
	 * Original signature : <code>void g_timer_reset(GTimer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:12</i>
	 */
	public static void g_timer_reset(Pointer<GLibLibrary.GTimer > timer) {
		g_timer_reset(Pointer.getPeer(timer));
	}
	protected native static void g_timer_reset(@Ptr long timer);
	/**
	 * Original signature : <code>void g_timer_continue(GTimer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:14</i>
	 */
	public static void g_timer_continue(Pointer<GLibLibrary.GTimer > timer) {
		g_timer_continue(Pointer.getPeer(timer));
	}
	protected native static void g_timer_continue(@Ptr long timer);
	/**
	 * Original signature : <code>gdouble g_timer_elapsed(GTimer*, gulong*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:16</i>
	 */
	public static double g_timer_elapsed(Pointer<GLibLibrary.GTimer > timer, Pointer<org.bridj.CLong > microseconds) {
		return g_timer_elapsed(Pointer.getPeer(timer), Pointer.getPeer(microseconds));
	}
	protected native static double g_timer_elapsed(@Ptr long timer, @Ptr long microseconds);
	/**
	 * Original signature : <code>void g_usleep(gulong)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:18</i>
	 */
	public static native void g_usleep(@org.bridj.ann.CLong long microseconds);
	/**
	 * Original signature : <code>void g_time_val_add(GTimeVal*, glong)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:20</i>
	 */
	public static void g_time_val_add(Pointer<GTimeVal > time_, @org.bridj.ann.CLong long microseconds) {
		g_time_val_add(Pointer.getPeer(time_), microseconds);
	}
	protected native static void g_time_val_add(@Ptr long time_, @org.bridj.ann.CLong long microseconds);
	/**
	 * Original signature : <code>gboolean g_time_val_from_iso8601(const gchar*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:22</i>
	 */
	public static GLibLibrary.gboolean g_time_val_from_iso8601(Pointer<Byte > iso_date, Pointer<GTimeVal > time_) {
		return g_time_val_from_iso8601(Pointer.getPeer(iso_date), Pointer.getPeer(time_));
	}
	protected native static GLibLibrary.gboolean g_time_val_from_iso8601(@Ptr long iso_date, @Ptr long time_);
	/**
	 * Original signature : <code>gchar* g_time_val_to_iso8601(GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:24</i>
	 */
	public static Pointer<Byte > g_time_val_to_iso8601(Pointer<GTimeVal > time_) {
		return Pointer.pointerToAddress(g_time_val_to_iso8601(Pointer.getPeer(time_)), Byte.class);
	}
	@Ptr 
	protected native static long g_time_val_to_iso8601(@Ptr long time_);
	/**
	 * Balanced binary trees<br>
	 * Original signature : <code>GTree* g_tree_new(GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:7</i>
	 */
	public static Pointer<GLibLibrary.GTree > g_tree_new(Pointer<GLibLibrary.GCompareFunc > key_compare_func) {
		return Pointer.pointerToAddress(g_tree_new(Pointer.getPeer(key_compare_func)), GLibLibrary.GTree.class);
	}
	@Ptr 
	protected native static long g_tree_new(@Ptr long key_compare_func);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GTree* g_tree_new_with_data(GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:9</i><br>
	 * Original signature : <code>GTree* g_tree_new_with_data(GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GTree* g_tree_new_with_data(GCompareDataFunc key_compare_func, gpointer key_compare_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GTree* g_tree_new_with_data(GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:9</i><br>
	 * Original signature : <code>GTree* g_tree_new_with_data(GCompareDataFunc, gpointer)</code> * /<br>
	 * extern GTree* g_tree_new_with_data(GCompareDataFunc key_compare_func, gpointer key_compare_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GTree* g_tree_new_full(GCompareDataFunc, gpointer, GDestroyNotify, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:11</i><br>
	 * Original signature : <code>GTree* g_tree_new_full(GCompareDataFunc, gpointer, GDestroyNotify, GDestroyNotify)</code> * /<br>
	 * extern GTree* g_tree_new_full(GCompareDataFunc key_compare_func, gpointer key_compare_data, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GTree* g_tree_new_full(GCompareDataFunc, gpointer, GDestroyNotify, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:11</i><br>
	 * Original signature : <code>GTree* g_tree_new_full(GCompareDataFunc, gpointer, GDestroyNotify, GDestroyNotify)</code> * /<br>
	 * extern GTree* g_tree_new_full(GCompareDataFunc key_compare_func, gpointer key_compare_data, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GTree* g_tree_ref(GTree*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:13</i>
	 */
	public static Pointer<GLibLibrary.GTree > g_tree_ref(Pointer<GLibLibrary.GTree > tree) {
		return Pointer.pointerToAddress(g_tree_ref(Pointer.getPeer(tree)), GLibLibrary.GTree.class);
	}
	@Ptr 
	protected native static long g_tree_ref(@Ptr long tree);
	/**
	 * Original signature : <code>void g_tree_unref(GTree*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:15</i>
	 */
	public static void g_tree_unref(Pointer<GLibLibrary.GTree > tree) {
		g_tree_unref(Pointer.getPeer(tree));
	}
	protected native static void g_tree_unref(@Ptr long tree);
	/**
	 * Original signature : <code>void g_tree_destroy(GTree*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:17</i>
	 */
	public static void g_tree_destroy(Pointer<GLibLibrary.GTree > tree) {
		g_tree_destroy(Pointer.getPeer(tree));
	}
	protected native static void g_tree_destroy(@Ptr long tree);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_tree_insert(GTree*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:19</i><br>
	 * Original signature : <code>void g_tree_insert(GTree*, gpointer, gpointer)</code> * /<br>
	 * extern void g_tree_insert(GTree* tree, gpointer key, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_tree_insert(GTree*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:19</i><br>
	 * Original signature : <code>void g_tree_insert(GTree*, gpointer, gpointer)</code> * /<br>
	 * extern void g_tree_insert(GTree* tree, gpointer key, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_tree_replace(GTree*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:21</i><br>
	 * Original signature : <code>void g_tree_replace(GTree*, gpointer, gpointer)</code> * /<br>
	 * extern void g_tree_replace(GTree* tree, gpointer key, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_tree_replace(GTree*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:21</i><br>
	 * Original signature : <code>void g_tree_replace(GTree*, gpointer, gpointer)</code> * /<br>
	 * extern void g_tree_replace(GTree* tree, gpointer key, gpointer value);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gboolean g_tree_remove(GTree*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:23</i>
	 */
	public static GLibLibrary.gboolean g_tree_remove(Pointer<GLibLibrary.GTree > tree, Pointer<? > key) {
		return g_tree_remove(Pointer.getPeer(tree), Pointer.getPeer(key));
	}
	protected native static GLibLibrary.gboolean g_tree_remove(@Ptr long tree, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_tree_steal(GTree*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:25</i>
	 */
	public static GLibLibrary.gboolean g_tree_steal(Pointer<GLibLibrary.GTree > tree, Pointer<? > key) {
		return g_tree_steal(Pointer.getPeer(tree), Pointer.getPeer(key));
	}
	protected native static GLibLibrary.gboolean g_tree_steal(@Ptr long tree, @Ptr long key);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_tree_lookup(GTree*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:27</i><br>
	 * Original signature : <code>gpointer g_tree_lookup(GTree*, gconstpointer)</code> * /<br>
	 * extern gpointer g_tree_lookup(GTree* tree, gconstpointer key);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_tree_lookup(GTree*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:27</i><br>
	 * Original signature : <code>gpointer g_tree_lookup(GTree*, gconstpointer)</code> * /<br>
	 * extern gpointer g_tree_lookup(GTree* tree, gconstpointer key);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gboolean g_tree_lookup_extended(GTree*, gconstpointer, gpointer*, gpointer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:29</i>
	 */
	public static GLibLibrary.gboolean g_tree_lookup_extended(Pointer<GLibLibrary.GTree > tree, Pointer<? > lookup_key, Pointer orig_key, Pointer value) {
		return g_tree_lookup_extended(Pointer.getPeer(tree), Pointer.getPeer(lookup_key), Pointer.getPeer(orig_key), Pointer.getPeer(value));
	}
	protected native static GLibLibrary.gboolean g_tree_lookup_extended(@Ptr long tree, @Ptr long lookup_key, @Ptr long orig_key, @Ptr long value);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_tree_foreach(GTree*, GTraverseFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:31</i><br>
	 * Original signature : <code>void g_tree_foreach(GTree*, GTraverseFunc, gpointer)</code> * /<br>
	 * extern void g_tree_foreach(GTree* tree, GTraverseFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_tree_foreach(GTree*, GTraverseFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:31</i><br>
	 * Original signature : <code>void g_tree_foreach(GTree*, GTraverseFunc, gpointer)</code> * /<br>
	 * extern void g_tree_foreach(GTree* tree, GTraverseFunc func, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_tree_traverse(GTree*, GTraverseFunc, GTraverseType, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:33</i><br>
	 * Original signature : <code>void g_tree_traverse(GTree*, GTraverseFunc, GTraverseType, gpointer)</code> * /<br>
	 * extern void g_tree_traverse(GTree* tree, GTraverseFunc traverse_func, GTraverseType traverse_type, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_tree_traverse(GTree*, GTraverseFunc, GTraverseType, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:33</i><br>
	 * Original signature : <code>void g_tree_traverse(GTree*, GTraverseFunc, GTraverseType, gpointer)</code> * /<br>
	 * extern void g_tree_traverse(GTree* tree, GTraverseFunc traverse_func, GTraverseType traverse_type, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_tree_search(GTree*, GCompareFunc, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:35</i><br>
	 * Original signature : <code>gpointer g_tree_search(GTree*, GCompareFunc, gconstpointer)</code> * /<br>
	 * extern gpointer g_tree_search(GTree* tree, GCompareFunc search_func, gconstpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gpointer g_tree_search(GTree*, GCompareFunc, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:35</i><br>
	 * Original signature : <code>gpointer g_tree_search(GTree*, GCompareFunc, gconstpointer)</code> * /<br>
	 * extern gpointer g_tree_search(GTree* tree, GCompareFunc search_func, gconstpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gint g_tree_height(GTree*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:37</i>
	 */
	public static int g_tree_height(Pointer<GLibLibrary.GTree > tree) {
		return g_tree_height(Pointer.getPeer(tree));
	}
	protected native static int g_tree_height(@Ptr long tree);
	/**
	 * Original signature : <code>gint g_tree_nnodes(GTree*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:39</i>
	 */
	public static int g_tree_nnodes(Pointer<GLibLibrary.GTree > tree) {
		return g_tree_nnodes(Pointer.getPeer(tree));
	}
	protected native static int g_tree_nnodes(@Ptr long tree);
	/**
	 * Original signature : <code>char* g_uri_unescape_string(const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gurifuncs.h:2</i>
	 */
	public static Pointer<Byte > g_uri_unescape_string(Pointer<Byte > escaped_string, Pointer<Byte > illegal_characters) {
		return Pointer.pointerToAddress(g_uri_unescape_string(Pointer.getPeer(escaped_string), Pointer.getPeer(illegal_characters)), Byte.class);
	}
	@Ptr 
	protected native static long g_uri_unescape_string(@Ptr long escaped_string, @Ptr long illegal_characters);
	/**
	 * Original signature : <code>char* g_uri_unescape_segment(const char*, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gurifuncs.h:4</i>
	 */
	public static Pointer<Byte > g_uri_unescape_segment(Pointer<Byte > escaped_string, Pointer<Byte > escaped_string_end, Pointer<Byte > illegal_characters) {
		return Pointer.pointerToAddress(g_uri_unescape_segment(Pointer.getPeer(escaped_string), Pointer.getPeer(escaped_string_end), Pointer.getPeer(illegal_characters)), Byte.class);
	}
	@Ptr 
	protected native static long g_uri_unescape_segment(@Ptr long escaped_string, @Ptr long escaped_string_end, @Ptr long illegal_characters);
	/**
	 * Original signature : <code>char* g_uri_parse_scheme(const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gurifuncs.h:6</i>
	 */
	public static Pointer<Byte > g_uri_parse_scheme(Pointer<Byte > uri) {
		return Pointer.pointerToAddress(g_uri_parse_scheme(Pointer.getPeer(uri)), Byte.class);
	}
	@Ptr 
	protected native static long g_uri_parse_scheme(@Ptr long uri);
	/**
	 * Original signature : <code>char* g_uri_escape_string(const char*, const char*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gurifuncs.h:8</i>
	 */
	public static Pointer<Byte > g_uri_escape_string(Pointer<Byte > unescaped, Pointer<Byte > reserved_chars_allowed, GLibLibrary.gboolean allow_utf8) {
		return Pointer.pointerToAddress(g_uri_escape_string(Pointer.getPeer(unescaped), Pointer.getPeer(reserved_chars_allowed), allow_utf8), Byte.class);
	}
	@Ptr 
	protected native static long g_uri_escape_string(@Ptr long unescaped, @Ptr long reserved_chars_allowed, GLibLibrary.gboolean allow_utf8);
	/**
	 * type string checking<br>
	 * Original signature : <code>gboolean g_variant_type_string_is_valid(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:13</i>
	 */
	public static GLibLibrary.gboolean g_variant_type_string_is_valid(Pointer<Byte > type_string) {
		return g_variant_type_string_is_valid(Pointer.getPeer(type_string));
	}
	protected native static GLibLibrary.gboolean g_variant_type_string_is_valid(@Ptr long type_string);
	/**
	 * Original signature : <code>gboolean g_variant_type_string_scan(const gchar*, const gchar*, const gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:15</i>
	 */
	public static GLibLibrary.gboolean g_variant_type_string_scan(Pointer<Byte > string, Pointer<Byte > limit, Pointer<Pointer<Byte > > endptr) {
		return g_variant_type_string_scan(Pointer.getPeer(string), Pointer.getPeer(limit), Pointer.getPeer(endptr));
	}
	protected native static GLibLibrary.gboolean g_variant_type_string_scan(@Ptr long string, @Ptr long limit, @Ptr long endptr);
	/**
	 * create/destroy<br>
	 * Original signature : <code>void g_variant_type_free(GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:20</i>
	 */
	public static void g_variant_type_free(Pointer<GLibLibrary.GVariantType > type) {
		g_variant_type_free(Pointer.getPeer(type));
	}
	protected native static void g_variant_type_free(@Ptr long type);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_copy(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:22</i>
	 */
	public static Pointer<GLibLibrary.GVariantType > g_variant_type_copy(Pointer<GLibLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_copy(Pointer.getPeer(type)), GLibLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_copy(@Ptr long type);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_new(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:24</i>
	 */
	public static Pointer<GLibLibrary.GVariantType > g_variant_type_new(Pointer<Byte > type_string) {
		return Pointer.pointerToAddress(g_variant_type_new(Pointer.getPeer(type_string)), GLibLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_new(@Ptr long type_string);
	/**
	 * getters<br>
	 * Original signature : <code>gsize g_variant_type_get_string_length(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:29</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_variant_type_get_string_length(Pointer<GLibLibrary.GVariantType > type) {
		return g_variant_type_get_string_length(Pointer.getPeer(type));
	}
	@org.bridj.ann.CLong 
	protected native static long g_variant_type_get_string_length(@Ptr long type);
	/**
	 * Original signature : <code>gchar* g_variant_type_peek_string(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:31</i>
	 */
	public static Pointer<Byte > g_variant_type_peek_string(Pointer<GLibLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_peek_string(Pointer.getPeer(type)), Byte.class);
	}
	@Ptr 
	protected native static long g_variant_type_peek_string(@Ptr long type);
	/**
	 * Original signature : <code>gchar* g_variant_type_dup_string(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:33</i>
	 */
	public static Pointer<Byte > g_variant_type_dup_string(Pointer<GLibLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_dup_string(Pointer.getPeer(type)), Byte.class);
	}
	@Ptr 
	protected native static long g_variant_type_dup_string(@Ptr long type);
	/**
	 * classification<br>
	 * Original signature : <code>gboolean g_variant_type_is_definite(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:38</i>
	 */
	public static GLibLibrary.gboolean g_variant_type_is_definite(Pointer<GLibLibrary.GVariantType > type) {
		return g_variant_type_is_definite(Pointer.getPeer(type));
	}
	protected native static GLibLibrary.gboolean g_variant_type_is_definite(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_is_container(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:40</i>
	 */
	public static GLibLibrary.gboolean g_variant_type_is_container(Pointer<GLibLibrary.GVariantType > type) {
		return g_variant_type_is_container(Pointer.getPeer(type));
	}
	protected native static GLibLibrary.gboolean g_variant_type_is_container(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_is_basic(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:42</i>
	 */
	public static GLibLibrary.gboolean g_variant_type_is_basic(Pointer<GLibLibrary.GVariantType > type) {
		return g_variant_type_is_basic(Pointer.getPeer(type));
	}
	protected native static GLibLibrary.gboolean g_variant_type_is_basic(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_is_maybe(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:44</i>
	 */
	public static GLibLibrary.gboolean g_variant_type_is_maybe(Pointer<GLibLibrary.GVariantType > type) {
		return g_variant_type_is_maybe(Pointer.getPeer(type));
	}
	protected native static GLibLibrary.gboolean g_variant_type_is_maybe(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_is_array(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:46</i>
	 */
	public static GLibLibrary.gboolean g_variant_type_is_array(Pointer<GLibLibrary.GVariantType > type) {
		return g_variant_type_is_array(Pointer.getPeer(type));
	}
	protected native static GLibLibrary.gboolean g_variant_type_is_array(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_is_tuple(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:48</i>
	 */
	public static GLibLibrary.gboolean g_variant_type_is_tuple(Pointer<GLibLibrary.GVariantType > type) {
		return g_variant_type_is_tuple(Pointer.getPeer(type));
	}
	protected native static GLibLibrary.gboolean g_variant_type_is_tuple(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_is_dict_entry(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:50</i>
	 */
	public static GLibLibrary.gboolean g_variant_type_is_dict_entry(Pointer<GLibLibrary.GVariantType > type) {
		return g_variant_type_is_dict_entry(Pointer.getPeer(type));
	}
	protected native static GLibLibrary.gboolean g_variant_type_is_dict_entry(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_is_variant(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:52</i>
	 */
	public static GLibLibrary.gboolean g_variant_type_is_variant(Pointer<GLibLibrary.GVariantType > type) {
		return g_variant_type_is_variant(Pointer.getPeer(type));
	}
	protected native static GLibLibrary.gboolean g_variant_type_is_variant(@Ptr long type);
	/**
	 * for hash tables<br>
	 * Original signature : <code>guint g_variant_type_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:57</i>
	 */
	public static int g_variant_type_hash(Pointer<? > type) {
		return g_variant_type_hash(Pointer.getPeer(type));
	}
	protected native static int g_variant_type_hash(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:59</i>
	 */
	public static GLibLibrary.gboolean g_variant_type_equal(Pointer<? > type1, Pointer<? > type2) {
		return g_variant_type_equal(Pointer.getPeer(type1), Pointer.getPeer(type2));
	}
	protected native static GLibLibrary.gboolean g_variant_type_equal(@Ptr long type1, @Ptr long type2);
	/**
	 * subtypes<br>
	 * Original signature : <code>gboolean g_variant_type_is_subtype_of(const GVariantType*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:64</i>
	 */
	public static GLibLibrary.gboolean g_variant_type_is_subtype_of(Pointer<GLibLibrary.GVariantType > type, Pointer<GLibLibrary.GVariantType > supertype) {
		return g_variant_type_is_subtype_of(Pointer.getPeer(type), Pointer.getPeer(supertype));
	}
	protected native static GLibLibrary.gboolean g_variant_type_is_subtype_of(@Ptr long type, @Ptr long supertype);
	/**
	 * type iterator interface<br>
	 * Original signature : <code>GVariantType* g_variant_type_element(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:69</i>
	 */
	public static Pointer<GLibLibrary.GVariantType > g_variant_type_element(Pointer<GLibLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_element(Pointer.getPeer(type)), GLibLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_element(@Ptr long type);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_first(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:71</i>
	 */
	public static Pointer<GLibLibrary.GVariantType > g_variant_type_first(Pointer<GLibLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_first(Pointer.getPeer(type)), GLibLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_first(@Ptr long type);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_next(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:73</i>
	 */
	public static Pointer<GLibLibrary.GVariantType > g_variant_type_next(Pointer<GLibLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_next(Pointer.getPeer(type)), GLibLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_next(@Ptr long type);
	/**
	 * Original signature : <code>gsize g_variant_type_n_items(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:75</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_variant_type_n_items(Pointer<GLibLibrary.GVariantType > type) {
		return g_variant_type_n_items(Pointer.getPeer(type));
	}
	@org.bridj.ann.CLong 
	protected native static long g_variant_type_n_items(@Ptr long type);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_key(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:77</i>
	 */
	public static Pointer<GLibLibrary.GVariantType > g_variant_type_key(Pointer<GLibLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_key(Pointer.getPeer(type)), GLibLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_key(@Ptr long type);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_value(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:79</i>
	 */
	public static Pointer<GLibLibrary.GVariantType > g_variant_type_value(Pointer<GLibLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_value(Pointer.getPeer(type)), GLibLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_value(@Ptr long type);
	/**
	 * constructors<br>
	 * Original signature : <code>GVariantType* g_variant_type_new_array(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:84</i>
	 */
	public static Pointer<GLibLibrary.GVariantType > g_variant_type_new_array(Pointer<GLibLibrary.GVariantType > element) {
		return Pointer.pointerToAddress(g_variant_type_new_array(Pointer.getPeer(element)), GLibLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_new_array(@Ptr long element);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_new_maybe(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:86</i>
	 */
	public static Pointer<GLibLibrary.GVariantType > g_variant_type_new_maybe(Pointer<GLibLibrary.GVariantType > element) {
		return Pointer.pointerToAddress(g_variant_type_new_maybe(Pointer.getPeer(element)), GLibLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_new_maybe(@Ptr long element);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_new_tuple(const const GVariantType**, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:88</i>
	 */
	public static Pointer<GLibLibrary.GVariantType > g_variant_type_new_tuple(Pointer<Pointer<GLibLibrary.GVariantType > > items, int length) {
		return Pointer.pointerToAddress(g_variant_type_new_tuple(Pointer.getPeer(items), length), GLibLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_new_tuple(@Ptr long items, int length);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_new_dict_entry(const GVariantType*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:90</i>
	 */
	public static Pointer<GLibLibrary.GVariantType > g_variant_type_new_dict_entry(Pointer<GLibLibrary.GVariantType > key, Pointer<GLibLibrary.GVariantType > value) {
		return Pointer.pointerToAddress(g_variant_type_new_dict_entry(Pointer.getPeer(key), Pointer.getPeer(value)), GLibLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_new_dict_entry(@Ptr long key, @Ptr long value);
	/**
	 * < private ><br>
	 * Original signature : <code>GVariantType* g_variant_type_checked_(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:95</i>
	 */
	public static Pointer<GLibLibrary.GVariantType > g_variant_type_checked_(Pointer<Byte > gcharPtr1) {
		return Pointer.pointerToAddress(g_variant_type_checked_(Pointer.getPeer(gcharPtr1)), GLibLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_checked_(@Ptr long gcharPtr1);
	/**
	 * Original signature : <code>void g_variant_unref(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:23</i>
	 */
	public static void g_variant_unref(Pointer<GLibLibrary.GVariant > value) {
		g_variant_unref(Pointer.getPeer(value));
	}
	protected native static void g_variant_unref(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_ref(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:25</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_ref(Pointer<GLibLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_ref(Pointer.getPeer(value)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_ref(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_ref_sink(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:27</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_ref_sink(Pointer<GLibLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_ref_sink(Pointer.getPeer(value)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_ref_sink(@Ptr long value);
	/**
	 * Original signature : <code>gboolean g_variant_is_floating(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:29</i>
	 */
	public static GLibLibrary.gboolean g_variant_is_floating(Pointer<GLibLibrary.GVariant > value) {
		return g_variant_is_floating(Pointer.getPeer(value));
	}
	protected native static GLibLibrary.gboolean g_variant_is_floating(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_take_ref(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:31</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_take_ref(Pointer<GLibLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_take_ref(Pointer.getPeer(value)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_take_ref(@Ptr long value);
	/**
	 * Original signature : <code>GVariantType* g_variant_get_type(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:33</i>
	 */
	public static Pointer<GLibLibrary.GVariantType > g_variant_get_type(Pointer<GLibLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_type(Pointer.getPeer(value)), GLibLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_get_type(@Ptr long value);
	/**
	 * Original signature : <code>gchar* g_variant_get_type_string(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:35</i>
	 */
	public static Pointer<Byte > g_variant_get_type_string(Pointer<GLibLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_type_string(Pointer.getPeer(value)), Byte.class);
	}
	@Ptr 
	protected native static long g_variant_get_type_string(@Ptr long value);
	/**
	 * Original signature : <code>gboolean g_variant_is_of_type(GVariant*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:37</i>
	 */
	public static GLibLibrary.gboolean g_variant_is_of_type(Pointer<GLibLibrary.GVariant > value, Pointer<GLibLibrary.GVariantType > type) {
		return g_variant_is_of_type(Pointer.getPeer(value), Pointer.getPeer(type));
	}
	protected native static GLibLibrary.gboolean g_variant_is_of_type(@Ptr long value, @Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_is_container(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:39</i>
	 */
	public static GLibLibrary.gboolean g_variant_is_container(Pointer<GLibLibrary.GVariant > value) {
		return g_variant_is_container(Pointer.getPeer(value));
	}
	protected native static GLibLibrary.gboolean g_variant_is_container(@Ptr long value);
	/**
	 * Original signature : <code>GVariantClass g_variant_classify(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:41</i>
	 */
	public static IntValuedEnum<GLibLibrary.GVariantClass > g_variant_classify(Pointer<GLibLibrary.GVariant > value) {
		return FlagSet.fromValue(g_variant_classify(Pointer.getPeer(value)), GLibLibrary.GVariantClass.class);
	}
	protected native static int g_variant_classify(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_boolean(gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:43</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_boolean(GLibLibrary.gboolean value) {
		return Pointer.pointerToAddress(g_variant_new_boolean$2(value), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_boolean$2(GLibLibrary.gboolean value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_byte(guchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:45</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_byte(byte value) {
		return Pointer.pointerToAddress(g_variant_new_byte$2(value), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_byte$2(byte value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_int16(gint16)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:47</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_int16(short value) {
		return Pointer.pointerToAddress(g_variant_new_int16$2(value), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_int16$2(short value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_uint16(guint16)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:49</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_uint16(short value) {
		return Pointer.pointerToAddress(g_variant_new_uint16$2(value), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_uint16$2(short value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_int32(gint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:51</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_int32(int value) {
		return Pointer.pointerToAddress(g_variant_new_int32$2(value), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_int32$2(int value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_uint32(guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:53</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_uint32(int value) {
		return Pointer.pointerToAddress(g_variant_new_uint32$2(value), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_uint32$2(int value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_int64(gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:55</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_int64(long value) {
		return Pointer.pointerToAddress(g_variant_new_int64$2(value), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_int64$2(long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_uint64(guint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:57</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_uint64(long value) {
		return Pointer.pointerToAddress(g_variant_new_uint64$2(value), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_uint64$2(long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_handle(gint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:59</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_handle(int value) {
		return Pointer.pointerToAddress(g_variant_new_handle$2(value), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_handle$2(int value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_double(gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:61</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_double(double value) {
		return Pointer.pointerToAddress(g_variant_new_double$2(value), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_double$2(double value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_string(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:63</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_string(Pointer<Byte > string) {
		return Pointer.pointerToAddress(g_variant_new_string(Pointer.getPeer(string)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_string(@Ptr long string);
	/**
	 * Original signature : <code>GVariant* g_variant_new_take_string(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:65</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_take_string(Pointer<Byte > string) {
		return Pointer.pointerToAddress(g_variant_new_take_string(Pointer.getPeer(string)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_take_string(@Ptr long string);
	/**
	 * Original signature : <code>GVariant* g_variant_new_printf(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:67</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_printf(Pointer<Byte > format_string, Object... varArgs1) {
		return Pointer.pointerToAddress(g_variant_new_printf(Pointer.getPeer(format_string), varArgs1), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_printf(@Ptr long format_string, Object... varArgs1);
	/**
	 * Original signature : <code>GVariant* g_variant_new_object_path(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:69</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_object_path(Pointer<Byte > object_path) {
		return Pointer.pointerToAddress(g_variant_new_object_path(Pointer.getPeer(object_path)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_object_path(@Ptr long object_path);
	/**
	 * Original signature : <code>gboolean g_variant_is_object_path(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:71</i>
	 */
	public static GLibLibrary.gboolean g_variant_is_object_path(Pointer<Byte > string) {
		return g_variant_is_object_path(Pointer.getPeer(string));
	}
	protected native static GLibLibrary.gboolean g_variant_is_object_path(@Ptr long string);
	/**
	 * Original signature : <code>GVariant* g_variant_new_signature(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:73</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_signature(Pointer<Byte > signature) {
		return Pointer.pointerToAddress(g_variant_new_signature(Pointer.getPeer(signature)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_signature(@Ptr long signature);
	/**
	 * Original signature : <code>gboolean g_variant_is_signature(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:75</i>
	 */
	public static GLibLibrary.gboolean g_variant_is_signature(Pointer<Byte > string) {
		return g_variant_is_signature(Pointer.getPeer(string));
	}
	protected native static GLibLibrary.gboolean g_variant_is_signature(@Ptr long string);
	/**
	 * Original signature : <code>GVariant* g_variant_new_variant(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:77</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_variant(Pointer<GLibLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_new_variant(Pointer.getPeer(value)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_variant(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_strv(const const gchar**, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:79</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_strv(Pointer<Pointer<Byte > > strv, @org.bridj.ann.CLong long length) {
		return Pointer.pointerToAddress(g_variant_new_strv(Pointer.getPeer(strv), length), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_strv(@Ptr long strv, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>GVariant* g_variant_new_objv(const const gchar**, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:81</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_objv(Pointer<Pointer<Byte > > strv, @org.bridj.ann.CLong long length) {
		return Pointer.pointerToAddress(g_variant_new_objv(Pointer.getPeer(strv), length), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_objv(@Ptr long strv, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>GVariant* g_variant_new_bytestring(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:83</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_bytestring(Pointer<Byte > string) {
		return Pointer.pointerToAddress(g_variant_new_bytestring(Pointer.getPeer(string)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_bytestring(@Ptr long string);
	/**
	 * Original signature : <code>GVariant* g_variant_new_bytestring_array(const const gchar**, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:85</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_bytestring_array(Pointer<Pointer<Byte > > strv, @org.bridj.ann.CLong long length) {
		return Pointer.pointerToAddress(g_variant_new_bytestring_array(Pointer.getPeer(strv), length), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_bytestring_array(@Ptr long strv, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>GVariant* g_variant_new_fixed_array(const GVariantType*, gconstpointer, gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:87</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_fixed_array(Pointer<GLibLibrary.GVariantType > element_type, Pointer<? > elements, @org.bridj.ann.CLong long n_elements, @org.bridj.ann.CLong long element_size) {
		return Pointer.pointerToAddress(g_variant_new_fixed_array(Pointer.getPeer(element_type), Pointer.getPeer(elements), n_elements, element_size), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_fixed_array(@Ptr long element_type, @Ptr long elements, @org.bridj.ann.CLong long n_elements, @org.bridj.ann.CLong long element_size);
	/**
	 * Original signature : <code>gboolean g_variant_get_boolean(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:89</i>
	 */
	public static GLibLibrary.gboolean g_variant_get_boolean(Pointer<GLibLibrary.GVariant > value) {
		return g_variant_get_boolean(Pointer.getPeer(value));
	}
	protected native static GLibLibrary.gboolean g_variant_get_boolean(@Ptr long value);
	/**
	 * Original signature : <code>guchar g_variant_get_byte(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:91</i>
	 */
	public static byte g_variant_get_byte(Pointer<GLibLibrary.GVariant > value) {
		return g_variant_get_byte(Pointer.getPeer(value));
	}
	protected native static byte g_variant_get_byte(@Ptr long value);
	/**
	 * Original signature : <code>gint16 g_variant_get_int16(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:93</i>
	 */
	public static short g_variant_get_int16(Pointer<GLibLibrary.GVariant > value) {
		return g_variant_get_int16(Pointer.getPeer(value));
	}
	protected native static short g_variant_get_int16(@Ptr long value);
	/**
	 * Original signature : <code>guint16 g_variant_get_uint16(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:95</i>
	 */
	public static short g_variant_get_uint16(Pointer<GLibLibrary.GVariant > value) {
		return g_variant_get_uint16(Pointer.getPeer(value));
	}
	protected native static short g_variant_get_uint16(@Ptr long value);
	/**
	 * Original signature : <code>gint32 g_variant_get_int32(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:97</i>
	 */
	public static int g_variant_get_int32(Pointer<GLibLibrary.GVariant > value) {
		return g_variant_get_int32(Pointer.getPeer(value));
	}
	protected native static int g_variant_get_int32(@Ptr long value);
	/**
	 * Original signature : <code>guint32 g_variant_get_uint32(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:99</i>
	 */
	public static int g_variant_get_uint32(Pointer<GLibLibrary.GVariant > value) {
		return g_variant_get_uint32(Pointer.getPeer(value));
	}
	protected native static int g_variant_get_uint32(@Ptr long value);
	/**
	 * Original signature : <code>gint64 g_variant_get_int64(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:101</i>
	 */
	public static long g_variant_get_int64(Pointer<GLibLibrary.GVariant > value) {
		return g_variant_get_int64(Pointer.getPeer(value));
	}
	protected native static long g_variant_get_int64(@Ptr long value);
	/**
	 * Original signature : <code>guint64 g_variant_get_uint64(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:103</i>
	 */
	public static long g_variant_get_uint64(Pointer<GLibLibrary.GVariant > value) {
		return g_variant_get_uint64(Pointer.getPeer(value));
	}
	protected native static long g_variant_get_uint64(@Ptr long value);
	/**
	 * Original signature : <code>gint32 g_variant_get_handle(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:105</i>
	 */
	public static int g_variant_get_handle(Pointer<GLibLibrary.GVariant > value) {
		return g_variant_get_handle(Pointer.getPeer(value));
	}
	protected native static int g_variant_get_handle(@Ptr long value);
	/**
	 * Original signature : <code>gdouble g_variant_get_double(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:107</i>
	 */
	public static double g_variant_get_double(Pointer<GLibLibrary.GVariant > value) {
		return g_variant_get_double(Pointer.getPeer(value));
	}
	protected native static double g_variant_get_double(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_get_variant(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:109</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_get_variant(Pointer<GLibLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_variant(Pointer.getPeer(value)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_get_variant(@Ptr long value);
	/**
	 * Original signature : <code>gchar* g_variant_get_string(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:111</i>
	 */
	public static Pointer<Byte > g_variant_get_string(Pointer<GLibLibrary.GVariant > value, Pointer<org.bridj.CLong > length) {
		return Pointer.pointerToAddress(g_variant_get_string(Pointer.getPeer(value), Pointer.getPeer(length)), Byte.class);
	}
	@Ptr 
	protected native static long g_variant_get_string(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar* g_variant_dup_string(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:113</i>
	 */
	public static Pointer<Byte > g_variant_dup_string(Pointer<GLibLibrary.GVariant > value, Pointer<org.bridj.CLong > length) {
		return Pointer.pointerToAddress(g_variant_dup_string(Pointer.getPeer(value), Pointer.getPeer(length)), Byte.class);
	}
	@Ptr 
	protected native static long g_variant_dup_string(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar** g_variant_get_strv(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:115</i>
	 */
	public static Pointer<Pointer<Byte > > g_variant_get_strv(Pointer<GLibLibrary.GVariant > value, Pointer<org.bridj.CLong > length) {
		return Pointer.pointerToAddress(g_variant_get_strv(Pointer.getPeer(value), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_variant_get_strv(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar** g_variant_dup_strv(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:117</i>
	 */
	public static Pointer<Pointer<Byte > > g_variant_dup_strv(Pointer<GLibLibrary.GVariant > value, Pointer<org.bridj.CLong > length) {
		return Pointer.pointerToAddress(g_variant_dup_strv(Pointer.getPeer(value), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_variant_dup_strv(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar** g_variant_get_objv(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:119</i>
	 */
	public static Pointer<Pointer<Byte > > g_variant_get_objv(Pointer<GLibLibrary.GVariant > value, Pointer<org.bridj.CLong > length) {
		return Pointer.pointerToAddress(g_variant_get_objv(Pointer.getPeer(value), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_variant_get_objv(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar** g_variant_dup_objv(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:121</i>
	 */
	public static Pointer<Pointer<Byte > > g_variant_dup_objv(Pointer<GLibLibrary.GVariant > value, Pointer<org.bridj.CLong > length) {
		return Pointer.pointerToAddress(g_variant_dup_objv(Pointer.getPeer(value), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_variant_dup_objv(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar* g_variant_get_bytestring(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:123</i>
	 */
	public static Pointer<Byte > g_variant_get_bytestring(Pointer<GLibLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_bytestring(Pointer.getPeer(value)), Byte.class);
	}
	@Ptr 
	protected native static long g_variant_get_bytestring(@Ptr long value);
	/**
	 * Original signature : <code>gchar* g_variant_dup_bytestring(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:125</i>
	 */
	public static Pointer<Byte > g_variant_dup_bytestring(Pointer<GLibLibrary.GVariant > value, Pointer<org.bridj.CLong > length) {
		return Pointer.pointerToAddress(g_variant_dup_bytestring(Pointer.getPeer(value), Pointer.getPeer(length)), Byte.class);
	}
	@Ptr 
	protected native static long g_variant_dup_bytestring(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar** g_variant_get_bytestring_array(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:127</i>
	 */
	public static Pointer<Pointer<Byte > > g_variant_get_bytestring_array(Pointer<GLibLibrary.GVariant > value, Pointer<org.bridj.CLong > length) {
		return Pointer.pointerToAddress(g_variant_get_bytestring_array(Pointer.getPeer(value), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_variant_get_bytestring_array(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar** g_variant_dup_bytestring_array(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:129</i>
	 */
	public static Pointer<Pointer<Byte > > g_variant_dup_bytestring_array(Pointer<GLibLibrary.GVariant > value, Pointer<org.bridj.CLong > length) {
		return Pointer.pointerToAddress(g_variant_dup_bytestring_array(Pointer.getPeer(value), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_variant_dup_bytestring_array(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>GVariant* g_variant_new_maybe(const GVariantType*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:131</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_maybe(Pointer<GLibLibrary.GVariantType > child_type, Pointer<GLibLibrary.GVariant > child) {
		return Pointer.pointerToAddress(g_variant_new_maybe(Pointer.getPeer(child_type), Pointer.getPeer(child)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_maybe(@Ptr long child_type, @Ptr long child);
	/**
	 * Original signature : <code>GVariant* g_variant_new_array(const GVariantType*, const GVariant**, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:133</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_array(Pointer<GLibLibrary.GVariantType > child_type, Pointer<Pointer<GLibLibrary.GVariant > > children, @org.bridj.ann.CLong long n_children) {
		return Pointer.pointerToAddress(g_variant_new_array(Pointer.getPeer(child_type), Pointer.getPeer(children), n_children), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_array(@Ptr long child_type, @Ptr long children, @org.bridj.ann.CLong long n_children);
	/**
	 * Original signature : <code>GVariant* g_variant_new_tuple(const GVariant**, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:135</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_tuple(Pointer<Pointer<GLibLibrary.GVariant > > children, @org.bridj.ann.CLong long n_children) {
		return Pointer.pointerToAddress(g_variant_new_tuple(Pointer.getPeer(children), n_children), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_tuple(@Ptr long children, @org.bridj.ann.CLong long n_children);
	/**
	 * Original signature : <code>GVariant* g_variant_new_dict_entry(GVariant*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:137</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_dict_entry(Pointer<GLibLibrary.GVariant > key, Pointer<GLibLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_new_dict_entry(Pointer.getPeer(key), Pointer.getPeer(value)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_dict_entry(@Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_get_maybe(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:139</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_get_maybe(Pointer<GLibLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_maybe(Pointer.getPeer(value)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_get_maybe(@Ptr long value);
	/**
	 * Original signature : <code>gsize g_variant_n_children(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:141</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_variant_n_children(Pointer<GLibLibrary.GVariant > value) {
		return g_variant_n_children(Pointer.getPeer(value));
	}
	@org.bridj.ann.CLong 
	protected native static long g_variant_n_children(@Ptr long value);
	/**
	 * Original signature : <code>void g_variant_get_child(GVariant*, gsize, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:143</i>
	 */
	public static void g_variant_get_child(Pointer<GLibLibrary.GVariant > value, @org.bridj.ann.CLong long index_, Pointer<Byte > format_string, Object... varArgs1) {
		g_variant_get_child(Pointer.getPeer(value), index_, Pointer.getPeer(format_string), varArgs1);
	}
	protected native static void g_variant_get_child(@Ptr long value, @org.bridj.ann.CLong long index_, @Ptr long format_string, Object... varArgs1);
	/**
	 * Original signature : <code>GVariant* g_variant_get_child_value(GVariant*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:145</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_get_child_value(Pointer<GLibLibrary.GVariant > value, @org.bridj.ann.CLong long index_) {
		return Pointer.pointerToAddress(g_variant_get_child_value(Pointer.getPeer(value), index_), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_get_child_value(@Ptr long value, @org.bridj.ann.CLong long index_);
	/**
	 * Original signature : <code>gboolean g_variant_lookup(GVariant*, const gchar*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:147</i>
	 */
	public static GLibLibrary.gboolean g_variant_lookup(Pointer<GLibLibrary.GVariant > dictionary, Pointer<Byte > key, Pointer<Byte > format_string, Object... varArgs1) {
		return g_variant_lookup(Pointer.getPeer(dictionary), Pointer.getPeer(key), Pointer.getPeer(format_string), varArgs1);
	}
	protected native static GLibLibrary.gboolean g_variant_lookup(@Ptr long dictionary, @Ptr long key, @Ptr long format_string, Object... varArgs1);
	/**
	 * Original signature : <code>GVariant* g_variant_lookup_value(GVariant*, const gchar*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:149</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_lookup_value(Pointer<GLibLibrary.GVariant > dictionary, Pointer<Byte > key, Pointer<GLibLibrary.GVariantType > expected_type) {
		return Pointer.pointerToAddress(g_variant_lookup_value(Pointer.getPeer(dictionary), Pointer.getPeer(key), Pointer.getPeer(expected_type)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_lookup_value(@Ptr long dictionary, @Ptr long key, @Ptr long expected_type);
	/**
	 * Original signature : <code>gconstpointer g_variant_get_fixed_array(GVariant*, gsize*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:151</i>
	 */
	public static Pointer<? > g_variant_get_fixed_array(Pointer<GLibLibrary.GVariant > value, Pointer<org.bridj.CLong > n_elements, @org.bridj.ann.CLong long element_size) {
		return Pointer.pointerToAddress(g_variant_get_fixed_array(Pointer.getPeer(value), Pointer.getPeer(n_elements), element_size));
	}
	@Ptr 
	protected native static long g_variant_get_fixed_array(@Ptr long value, @Ptr long n_elements, @org.bridj.ann.CLong long element_size);
	/**
	 * Original signature : <code>gsize g_variant_get_size(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:153</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_variant_get_size(Pointer<GLibLibrary.GVariant > value) {
		return g_variant_get_size(Pointer.getPeer(value));
	}
	@org.bridj.ann.CLong 
	protected native static long g_variant_get_size(@Ptr long value);
	/**
	 * Original signature : <code>gconstpointer g_variant_get_data(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:155</i>
	 */
	public static Pointer<? > g_variant_get_data(Pointer<GLibLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_data(Pointer.getPeer(value)));
	}
	@Ptr 
	protected native static long g_variant_get_data(@Ptr long value);
	/**
	 * Original signature : <code>GBytes* g_variant_get_data_as_bytes(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:157</i>
	 */
	public static Pointer<GLibLibrary.GBytes > g_variant_get_data_as_bytes(Pointer<GLibLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_data_as_bytes(Pointer.getPeer(value)), GLibLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_variant_get_data_as_bytes(@Ptr long value);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_variant_store(GVariant*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:159</i><br>
	 * Original signature : <code>void g_variant_store(GVariant*, gpointer)</code> * /<br>
	 * extern void g_variant_store(GVariant* value, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>void g_variant_store(GVariant*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:159</i><br>
	 * Original signature : <code>void g_variant_store(GVariant*, gpointer)</code> * /<br>
	 * extern void g_variant_store(GVariant* value, gpointer data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>gchar* g_variant_print(GVariant*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:161</i>
	 */
	public static Pointer<Byte > g_variant_print(Pointer<GLibLibrary.GVariant > value, GLibLibrary.gboolean type_annotate) {
		return Pointer.pointerToAddress(g_variant_print(Pointer.getPeer(value), type_annotate), Byte.class);
	}
	@Ptr 
	protected native static long g_variant_print(@Ptr long value, GLibLibrary.gboolean type_annotate);
	/**
	 * Original signature : <code>GString* g_variant_print_string(GVariant*, GString*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:163</i>
	 */
	public static Pointer<GString > g_variant_print_string(Pointer<GLibLibrary.GVariant > value, Pointer<GString > string, GLibLibrary.gboolean type_annotate) {
		return Pointer.pointerToAddress(g_variant_print_string(Pointer.getPeer(value), Pointer.getPeer(string), type_annotate), GString.class);
	}
	@Ptr 
	protected native static long g_variant_print_string(@Ptr long value, @Ptr long string, GLibLibrary.gboolean type_annotate);
	/**
	 * Original signature : <code>guint g_variant_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:165</i>
	 */
	public static int g_variant_hash(Pointer<? > value) {
		return g_variant_hash(Pointer.getPeer(value));
	}
	protected native static int g_variant_hash(@Ptr long value);
	/**
	 * Original signature : <code>gboolean g_variant_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:167</i>
	 */
	public static GLibLibrary.gboolean g_variant_equal(Pointer<? > one, Pointer<? > two) {
		return g_variant_equal(Pointer.getPeer(one), Pointer.getPeer(two));
	}
	protected native static GLibLibrary.gboolean g_variant_equal(@Ptr long one, @Ptr long two);
	/**
	 * Original signature : <code>GVariant* g_variant_get_normal_form(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:169</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_get_normal_form(Pointer<GLibLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_normal_form(Pointer.getPeer(value)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_get_normal_form(@Ptr long value);
	/**
	 * Original signature : <code>gboolean g_variant_is_normal_form(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:171</i>
	 */
	public static GLibLibrary.gboolean g_variant_is_normal_form(Pointer<GLibLibrary.GVariant > value) {
		return g_variant_is_normal_form(Pointer.getPeer(value));
	}
	protected native static GLibLibrary.gboolean g_variant_is_normal_form(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_byteswap(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:173</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_byteswap(Pointer<GLibLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_byteswap(Pointer.getPeer(value)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_byteswap(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_from_bytes(const GVariantType*, GBytes*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:175</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_from_bytes(Pointer<GLibLibrary.GVariantType > type, Pointer<GLibLibrary.GBytes > bytes, GLibLibrary.gboolean trusted) {
		return Pointer.pointerToAddress(g_variant_new_from_bytes(Pointer.getPeer(type), Pointer.getPeer(bytes), trusted), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_from_bytes(@Ptr long type, @Ptr long bytes, GLibLibrary.gboolean trusted);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GVariant* g_variant_new_from_data(const GVariantType*, gconstpointer, gsize, gboolean, GDestroyNotify, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:177</i><br>
	 * Original signature : <code>GVariant* g_variant_new_from_data(const GVariantType*, gconstpointer, gsize, gboolean, GDestroyNotify, gpointer)</code> * /<br>
	 * extern GVariant* g_variant_new_from_data(const GVariantType* type, gconstpointer data, gsize size, gboolean trusted, GDestroyNotify notify, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GVariant* g_variant_new_from_data(const GVariantType*, gconstpointer, gsize, gboolean, GDestroyNotify, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:177</i><br>
	 * Original signature : <code>GVariant* g_variant_new_from_data(const GVariantType*, gconstpointer, gsize, gboolean, GDestroyNotify, gpointer)</code> * /<br>
	 * extern GVariant* g_variant_new_from_data(const GVariantType* type, gconstpointer data, gsize size, gboolean trusted, GDestroyNotify notify, gpointer user_data);<br>
	 * Conversion Error : gpointer (Unsupported type)
	 */
	/**
	 * Original signature : <code>GVariantIter* g_variant_iter_new(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:184</i>
	 */
	public static Pointer<GVariantIter > g_variant_iter_new(Pointer<GLibLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_iter_new(Pointer.getPeer(value)), GVariantIter.class);
	}
	@Ptr 
	protected native static long g_variant_iter_new(@Ptr long value);
	/**
	 * Original signature : <code>gsize g_variant_iter_init(GVariantIter*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:186</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_variant_iter_init(Pointer<GVariantIter > iter, Pointer<GLibLibrary.GVariant > value) {
		return g_variant_iter_init(Pointer.getPeer(iter), Pointer.getPeer(value));
	}
	@org.bridj.ann.CLong 
	protected native static long g_variant_iter_init(@Ptr long iter, @Ptr long value);
	/**
	 * Original signature : <code>GVariantIter* g_variant_iter_copy(GVariantIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:188</i>
	 */
	public static Pointer<GVariantIter > g_variant_iter_copy(Pointer<GVariantIter > iter) {
		return Pointer.pointerToAddress(g_variant_iter_copy(Pointer.getPeer(iter)), GVariantIter.class);
	}
	@Ptr 
	protected native static long g_variant_iter_copy(@Ptr long iter);
	/**
	 * Original signature : <code>gsize g_variant_iter_n_children(GVariantIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:190</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_variant_iter_n_children(Pointer<GVariantIter > iter) {
		return g_variant_iter_n_children(Pointer.getPeer(iter));
	}
	@org.bridj.ann.CLong 
	protected native static long g_variant_iter_n_children(@Ptr long iter);
	/**
	 * Original signature : <code>void g_variant_iter_free(GVariantIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:192</i>
	 */
	public static void g_variant_iter_free(Pointer<GVariantIter > iter) {
		g_variant_iter_free(Pointer.getPeer(iter));
	}
	protected native static void g_variant_iter_free(@Ptr long iter);
	/**
	 * Original signature : <code>GVariant* g_variant_iter_next_value(GVariantIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:194</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_iter_next_value(Pointer<GVariantIter > iter) {
		return Pointer.pointerToAddress(g_variant_iter_next_value(Pointer.getPeer(iter)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_iter_next_value(@Ptr long iter);
	/**
	 * Original signature : <code>gboolean g_variant_iter_next(GVariantIter*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:196</i>
	 */
	public static GLibLibrary.gboolean g_variant_iter_next(Pointer<GVariantIter > iter, Pointer<Byte > format_string, Object... varArgs1) {
		return g_variant_iter_next(Pointer.getPeer(iter), Pointer.getPeer(format_string), varArgs1);
	}
	protected native static GLibLibrary.gboolean g_variant_iter_next(@Ptr long iter, @Ptr long format_string, Object... varArgs1);
	/**
	 * Original signature : <code>gboolean g_variant_iter_loop(GVariantIter*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:198</i>
	 */
	public static GLibLibrary.gboolean g_variant_iter_loop(Pointer<GVariantIter > iter, Pointer<Byte > format_string, Object... varArgs1) {
		return g_variant_iter_loop(Pointer.getPeer(iter), Pointer.getPeer(format_string), varArgs1);
	}
	protected native static GLibLibrary.gboolean g_variant_iter_loop(@Ptr long iter, @Ptr long format_string, Object... varArgs1);
	/**
	 * Original signature : <code>GQuark g_variant_parser_get_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:225</i>
	 */
	public static native int g_variant_parser_get_error_quark();
	/**
	 * Original signature : <code>GVariantBuilder* g_variant_builder_new(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:227</i>
	 */
	public static Pointer<GVariantBuilder > g_variant_builder_new(Pointer<GLibLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_builder_new(Pointer.getPeer(type)), GVariantBuilder.class);
	}
	@Ptr 
	protected native static long g_variant_builder_new(@Ptr long type);
	/**
	 * Original signature : <code>void g_variant_builder_unref(GVariantBuilder*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:229</i>
	 */
	public static void g_variant_builder_unref(Pointer<GVariantBuilder > builder) {
		g_variant_builder_unref(Pointer.getPeer(builder));
	}
	protected native static void g_variant_builder_unref(@Ptr long builder);
	/**
	 * Original signature : <code>GVariantBuilder* g_variant_builder_ref(GVariantBuilder*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:231</i>
	 */
	public static Pointer<GVariantBuilder > g_variant_builder_ref(Pointer<GVariantBuilder > builder) {
		return Pointer.pointerToAddress(g_variant_builder_ref(Pointer.getPeer(builder)), GVariantBuilder.class);
	}
	@Ptr 
	protected native static long g_variant_builder_ref(@Ptr long builder);
	/**
	 * Original signature : <code>void g_variant_builder_init(GVariantBuilder*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:233</i>
	 */
	public static void g_variant_builder_init(Pointer<GVariantBuilder > builder, Pointer<GLibLibrary.GVariantType > type) {
		g_variant_builder_init(Pointer.getPeer(builder), Pointer.getPeer(type));
	}
	protected native static void g_variant_builder_init(@Ptr long builder, @Ptr long type);
	/**
	 * Original signature : <code>GVariant* g_variant_builder_end(GVariantBuilder*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:235</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_builder_end(Pointer<GVariantBuilder > builder) {
		return Pointer.pointerToAddress(g_variant_builder_end(Pointer.getPeer(builder)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_builder_end(@Ptr long builder);
	/**
	 * Original signature : <code>void g_variant_builder_clear(GVariantBuilder*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:237</i>
	 */
	public static void g_variant_builder_clear(Pointer<GVariantBuilder > builder) {
		g_variant_builder_clear(Pointer.getPeer(builder));
	}
	protected native static void g_variant_builder_clear(@Ptr long builder);
	/**
	 * Original signature : <code>void g_variant_builder_open(GVariantBuilder*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:239</i>
	 */
	public static void g_variant_builder_open(Pointer<GVariantBuilder > builder, Pointer<GLibLibrary.GVariantType > type) {
		g_variant_builder_open(Pointer.getPeer(builder), Pointer.getPeer(type));
	}
	protected native static void g_variant_builder_open(@Ptr long builder, @Ptr long type);
	/**
	 * Original signature : <code>void g_variant_builder_close(GVariantBuilder*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:241</i>
	 */
	public static void g_variant_builder_close(Pointer<GVariantBuilder > builder) {
		g_variant_builder_close(Pointer.getPeer(builder));
	}
	protected native static void g_variant_builder_close(@Ptr long builder);
	/**
	 * Original signature : <code>void g_variant_builder_add_value(GVariantBuilder*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:243</i>
	 */
	public static void g_variant_builder_add_value(Pointer<GVariantBuilder > builder, Pointer<GLibLibrary.GVariant > value) {
		g_variant_builder_add_value(Pointer.getPeer(builder), Pointer.getPeer(value));
	}
	protected native static void g_variant_builder_add_value(@Ptr long builder, @Ptr long value);
	/**
	 * Original signature : <code>void g_variant_builder_add(GVariantBuilder*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:245</i>
	 */
	public static void g_variant_builder_add(Pointer<GVariantBuilder > builder, Pointer<Byte > format_string, Object... varArgs1) {
		g_variant_builder_add(Pointer.getPeer(builder), Pointer.getPeer(format_string), varArgs1);
	}
	protected native static void g_variant_builder_add(@Ptr long builder, @Ptr long format_string, Object... varArgs1);
	/**
	 * Original signature : <code>void g_variant_builder_add_parsed(GVariantBuilder*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:247</i>
	 */
	public static void g_variant_builder_add_parsed(Pointer<GVariantBuilder > builder, Pointer<Byte > format, Object... varArgs1) {
		g_variant_builder_add_parsed(Pointer.getPeer(builder), Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_variant_builder_add_parsed(@Ptr long builder, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>GVariant* g_variant_new(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:249</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new(Pointer<Byte > format_string, Object... varArgs1) {
		return Pointer.pointerToAddress(g_variant_new(Pointer.getPeer(format_string), varArgs1), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new(@Ptr long format_string, Object... varArgs1);
	/**
	 * Original signature : <code>void g_variant_get(GVariant*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:251</i>
	 */
	public static void g_variant_get(Pointer<GLibLibrary.GVariant > value, Pointer<Byte > format_string, Object... varArgs1) {
		g_variant_get(Pointer.getPeer(value), Pointer.getPeer(format_string), varArgs1);
	}
	protected native static void g_variant_get(@Ptr long value, @Ptr long format_string, Object... varArgs1);
	/**
	 * Original signature : <code>GVariant* g_variant_new_va(const gchar*, const gchar**, va_list*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:253</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_va(Pointer<Byte > format_string, Pointer<Pointer<Byte > > endptr, Pointer<GLibLibrary.__builtin_va_list > app) {
		return Pointer.pointerToAddress(g_variant_new_va(Pointer.getPeer(format_string), Pointer.getPeer(endptr), Pointer.getPeer(app)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_va(@Ptr long format_string, @Ptr long endptr, @Ptr long app);
	/**
	 * Original signature : <code>void g_variant_get_va(GVariant*, const gchar*, const gchar**, va_list*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:255</i>
	 */
	public static void g_variant_get_va(Pointer<GLibLibrary.GVariant > value, Pointer<Byte > format_string, Pointer<Pointer<Byte > > endptr, Pointer<GLibLibrary.__builtin_va_list > app) {
		g_variant_get_va(Pointer.getPeer(value), Pointer.getPeer(format_string), Pointer.getPeer(endptr), Pointer.getPeer(app));
	}
	protected native static void g_variant_get_va(@Ptr long value, @Ptr long format_string, @Ptr long endptr, @Ptr long app);
	/**
	 * Original signature : <code>gboolean g_variant_check_format_string(GVariant*, const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:257</i>
	 */
	public static GLibLibrary.gboolean g_variant_check_format_string(Pointer<GLibLibrary.GVariant > value, Pointer<Byte > format_string, GLibLibrary.gboolean copy_only) {
		return g_variant_check_format_string(Pointer.getPeer(value), Pointer.getPeer(format_string), copy_only);
	}
	protected native static GLibLibrary.gboolean g_variant_check_format_string(@Ptr long value, @Ptr long format_string, GLibLibrary.gboolean copy_only);
	/**
	 * Original signature : <code>GVariant* g_variant_parse(const GVariantType*, const gchar*, const gchar*, const gchar**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:259</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_parse(Pointer<GLibLibrary.GVariantType > type, Pointer<Byte > text, Pointer<Byte > limit, Pointer<Pointer<Byte > > endptr, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_variant_parse(Pointer.getPeer(type), Pointer.getPeer(text), Pointer.getPeer(limit), Pointer.getPeer(endptr), Pointer.getPeer(error)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_parse(@Ptr long type, @Ptr long text, @Ptr long limit, @Ptr long endptr, @Ptr long error);
	/**
	 * Original signature : <code>GVariant* g_variant_new_parsed(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:261</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_parsed(Pointer<Byte > format, Object... varArgs1) {
		return Pointer.pointerToAddress(g_variant_new_parsed(Pointer.getPeer(format), varArgs1), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_parsed(@Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>GVariant* g_variant_new_parsed_va(const gchar*, va_list*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:263</i>
	 */
	public static Pointer<GLibLibrary.GVariant > g_variant_new_parsed_va(Pointer<Byte > format, Pointer<GLibLibrary.__builtin_va_list > app) {
		return Pointer.pointerToAddress(g_variant_new_parsed_va(Pointer.getPeer(format), Pointer.getPeer(app)), GLibLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_parsed_va(@Ptr long format, @Ptr long app);
	/**
	 * Original signature : <code>gint g_variant_compare(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:265</i>
	 */
	public static int g_variant_compare(Pointer<? > one, Pointer<? > two) {
		return g_variant_compare(Pointer.getPeer(one), Pointer.getPeer(two));
	}
	protected native static int g_variant_compare(@Ptr long one, @Ptr long two);
	/**
	 * Original signature : <code>gchar* glib_check_version(guint, guint, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gversion.h:7</i>
	 */
	public static Pointer<Byte > glib_check_version(int required_major, int required_minor, int required_micro) {
		return Pointer.pointerToAddress(glib_check_version$2(required_major, required_minor, required_micro), Byte.class);
	}
	@Ptr 
	protected native static long glib_check_version$2(int required_major, int required_minor, int required_micro);
	/**
	 * Original signature : <code>gint g_printf(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprintf.h:2</i>
	 */
	public static int g_printf(Pointer<Byte > format, Object... varArgs1) {
		return g_printf(Pointer.getPeer(format), varArgs1);
	}
	protected native static int g_printf(@Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>gint g_fprintf(FILE*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprintf.h:4</i>
	 */
	public static int g_fprintf(Pointer file, Pointer<Byte > format, Object... varArgs1) {
		return g_fprintf(Pointer.getPeer(file), Pointer.getPeer(format), varArgs1);
	}
	protected native static int g_fprintf(@Ptr long file, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>gint g_sprintf(gchar*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprintf.h:6</i>
	 */
	public static int g_sprintf(Pointer<Byte > string, Pointer<Byte > format, Object... varArgs1) {
		return g_sprintf(Pointer.getPeer(string), Pointer.getPeer(format), varArgs1);
	}
	protected native static int g_sprintf(@Ptr long string, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>gint g_vprintf(const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprintf.h:8</i>
	 */
	public static int g_vprintf(Pointer<Byte > format, Object... args) {
		return g_vprintf(Pointer.getPeer(format), args);
	}
	protected native static int g_vprintf(@Ptr long format, Object... args);
	/**
	 * Original signature : <code>gint g_vfprintf(FILE*, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprintf.h:10</i>
	 */
	public static int g_vfprintf(Pointer file, Pointer<Byte > format, Object... args) {
		return g_vfprintf(Pointer.getPeer(file), Pointer.getPeer(format), args);
	}
	protected native static int g_vfprintf(@Ptr long file, @Ptr long format, Object... args);
	/**
	 * Original signature : <code>gint g_vsprintf(gchar*, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprintf.h:12</i>
	 */
	public static int g_vsprintf(Pointer<Byte > string, Pointer<Byte > format, Object... args) {
		return g_vsprintf(Pointer.getPeer(string), Pointer.getPeer(format), args);
	}
	protected native static int g_vsprintf(@Ptr long string, @Ptr long format, Object... args);
	/**
	 * Original signature : <code>gint g_vasprintf(gchar**, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprintf.h:14</i>
	 */
	public static int g_vasprintf(Pointer<Pointer<Byte > > string, Pointer<Byte > format, Object... args) {
		return g_vasprintf(Pointer.getPeer(string), Pointer.getPeer(format), args);
	}
	protected native static int g_vasprintf(@Ptr long string, @Ptr long format, Object... args);
	/**
	 * Original signature : <code>int g_access(const gchar*, int)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstdio.h:3</i>
	 */
	public static int g_access(Pointer<Byte > filename, int mode) {
		return g_access(Pointer.getPeer(filename), mode);
	}
	protected native static int g_access(@Ptr long filename, int mode);
	/**
	 * Original signature : <code>int g_chdir(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstdio.h:5</i>
	 */
	public static int g_chdir(Pointer<Byte > path) {
		return g_chdir(Pointer.getPeer(path));
	}
	protected native static int g_chdir(@Ptr long path);
	/**
	 * Original signature : <code>int g_unlink(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstdio.h:7</i>
	 */
	public static int g_unlink(Pointer<Byte > filename) {
		return g_unlink(Pointer.getPeer(filename));
	}
	protected native static int g_unlink(@Ptr long filename);
	/**
	 * Original signature : <code>int g_rmdir(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstdio.h:9</i>
	 */
	public static int g_rmdir(Pointer<Byte > filename) {
		return g_rmdir(Pointer.getPeer(filename));
	}
	protected native static int g_rmdir(@Ptr long filename);
	/**
	 * Original signature : <code>gboolean g_close(gint, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstdio.h:11</i>
	 */
	public static GLibLibrary.gboolean g_close(int fd, Pointer<Pointer<GError > > error) {
		return g_close(fd, Pointer.getPeer(error));
	}
	protected native static GLibLibrary.gboolean g_close(int fd, @Ptr long error);
	/**
	 * Failed to convert value g_mem_gc_friendly of type extern gboolean<br>
	 * C type : extern gboolean
	 */
	/**
	 * Memory profiler and checker, has to be enabled via g_mem_set_vtable()<br>
	 * C type : extern GMemVTable*
	 */
	public Pointer<GMemVTable > glib_mem_profiler_table() {
		try {
			return (Pointer<GMemVTable >)BridJ.getNativeLibrary("GLib").getSymbolPointer("glib_mem_profiler_table").as(DefaultParameterizedType.paramType(Pointer.class, GMemVTable.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Memory profiler and checker, has to be enabled via g_mem_set_vtable()<br>
	 * C type : extern GMemVTable*
	 */
	public GLibLibrary glib_mem_profiler_table(Pointer<GMemVTable > glib_mem_profiler_table) {
		try {
			{
				BridJ.getNativeLibrary("GLib").getSymbolPointer("glib_mem_profiler_table").as(DefaultParameterizedType.paramType(Pointer.class, GMemVTable.class)).set(glib_mem_profiler_table);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Hook for GClosure / GSource integration. Don't touch<br>
	 * C type : extern GSourceFuncs
	 */
	public GSourceFuncs g_timeout_funcs() {
		try {
			return (GSourceFuncs)BridJ.getNativeLibrary("GLib").getSymbolPointer("g_timeout_funcs").as(GSourceFuncs.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Hook for GClosure / GSource integration. Don't touch<br>
	 * C type : extern GSourceFuncs
	 */
	public GLibLibrary g_timeout_funcs(GSourceFuncs g_timeout_funcs) {
		try {
			{
				BridJ.getNativeLibrary("GLib").getSymbolPointer("g_timeout_funcs").as(GSourceFuncs.class).set(g_timeout_funcs);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern GSourceFuncs */
	public GSourceFuncs g_child_watch_funcs() {
		try {
			return (GSourceFuncs)BridJ.getNativeLibrary("GLib").getSymbolPointer("g_child_watch_funcs").as(GSourceFuncs.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern GSourceFuncs */
	public GLibLibrary g_child_watch_funcs(GSourceFuncs g_child_watch_funcs) {
		try {
			{
				BridJ.getNativeLibrary("GLib").getSymbolPointer("g_child_watch_funcs").as(GSourceFuncs.class).set(g_child_watch_funcs);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern GSourceFuncs */
	public GSourceFuncs g_idle_funcs() {
		try {
			return (GSourceFuncs)BridJ.getNativeLibrary("GLib").getSymbolPointer("g_idle_funcs").as(GSourceFuncs.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern GSourceFuncs */
	public GLibLibrary g_idle_funcs(GSourceFuncs g_idle_funcs) {
		try {
			{
				BridJ.getNativeLibrary("GLib").getSymbolPointer("g_idle_funcs").as(GSourceFuncs.class).set(g_idle_funcs);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern GSourceFuncs */
	public GSourceFuncs g_unix_signal_funcs() {
		try {
			return (GSourceFuncs)BridJ.getNativeLibrary("GLib").getSymbolPointer("g_unix_signal_funcs").as(GSourceFuncs.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern GSourceFuncs */
	public GLibLibrary g_unix_signal_funcs(GSourceFuncs g_unix_signal_funcs) {
		try {
			{
				BridJ.getNativeLibrary("GLib").getSymbolPointer("g_unix_signal_funcs").as(GSourceFuncs.class).set(g_unix_signal_funcs);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern GSourceFuncs */
	public GSourceFuncs g_unix_fd_source_funcs() {
		try {
			return (GSourceFuncs)BridJ.getNativeLibrary("GLib").getSymbolPointer("g_unix_fd_source_funcs").as(GSourceFuncs.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern GSourceFuncs */
	public GLibLibrary g_unix_fd_source_funcs(GSourceFuncs g_unix_fd_source_funcs) {
		try {
			{
				BridJ.getNativeLibrary("GLib").getSymbolPointer("g_unix_fd_source_funcs").as(GSourceFuncs.class).set(g_unix_fd_source_funcs);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Array of skip-bytes-per-initial character.<br>
	 * C type : extern const gchar*
	 */
	public Pointer<Byte > g_utf8_skip() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("GLib").getSymbolPointer("g_utf8_skip").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Array of skip-bytes-per-initial character.<br>
	 * C type : extern const gchar*
	 */
	public GLibLibrary g_utf8_skip(Pointer<Byte > g_utf8_skip) {
		try {
			{
				BridJ.getNativeLibrary("GLib").getSymbolPointer("g_utf8_skip").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).set(g_utf8_skip);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Hook for GClosure / GSource integration. Don't touch<br>
	 * C type : extern GSourceFuncs
	 */
	public GSourceFuncs g_io_watch_funcs() {
		try {
			return (GSourceFuncs)BridJ.getNativeLibrary("GLib").getSymbolPointer("g_io_watch_funcs").as(GSourceFuncs.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Hook for GClosure / GSource integration. Don't touch<br>
	 * C type : extern GSourceFuncs
	 */
	public GLibLibrary g_io_watch_funcs(GSourceFuncs g_io_watch_funcs) {
		try {
			{
				BridJ.getNativeLibrary("GLib").getSymbolPointer("g_io_watch_funcs").as(GSourceFuncs.class).set(g_io_watch_funcs);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const guint16* */
	public Pointer<Short > g_ascii_table() {
		try {
			return (Pointer<Short >)BridJ.getNativeLibrary("GLib").getSymbolPointer("g_ascii_table").as(DefaultParameterizedType.paramType(Pointer.class, Short.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const guint16* */
	public GLibLibrary g_ascii_table(Pointer<Short > g_ascii_table) {
		try {
			{
				BridJ.getNativeLibrary("GLib").getSymbolPointer("g_ascii_table").as(DefaultParameterizedType.paramType(Pointer.class, Short.class)).set(g_ascii_table);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const GTestConfig* */
	public Pointer<GTestConfig > g_test_config_vars() {
		try {
			return (Pointer<GTestConfig >)BridJ.getNativeLibrary("GLib").getSymbolPointer("g_test_config_vars").as(DefaultParameterizedType.paramType(Pointer.class, GTestConfig.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const GTestConfig* */
	public GLibLibrary g_test_config_vars(Pointer<GTestConfig > g_test_config_vars) {
		try {
			{
				BridJ.getNativeLibrary("GLib").getSymbolPointer("g_test_config_vars").as(DefaultParameterizedType.paramType(Pointer.class, GTestConfig.class)).set(g_test_config_vars);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const guint */
	public int glib_major_version() {
		try {
			return (int)BridJ.getNativeLibrary("GLib").getSymbolPointer("glib_major_version").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const guint */
	public GLibLibrary glib_major_version(int glib_major_version) {
		try {
			{
				BridJ.getNativeLibrary("GLib").getSymbolPointer("glib_major_version").as(int.class).set(glib_major_version);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const guint */
	public int glib_minor_version() {
		try {
			return (int)BridJ.getNativeLibrary("GLib").getSymbolPointer("glib_minor_version").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const guint */
	public GLibLibrary glib_minor_version(int glib_minor_version) {
		try {
			{
				BridJ.getNativeLibrary("GLib").getSymbolPointer("glib_minor_version").as(int.class).set(glib_minor_version);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const guint */
	public int glib_micro_version() {
		try {
			return (int)BridJ.getNativeLibrary("GLib").getSymbolPointer("glib_micro_version").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const guint */
	public GLibLibrary glib_micro_version(int glib_micro_version) {
		try {
			{
				BridJ.getNativeLibrary("GLib").getSymbolPointer("glib_micro_version").as(int.class).set(glib_micro_version);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const guint */
	public int glib_interface_age() {
		try {
			return (int)BridJ.getNativeLibrary("GLib").getSymbolPointer("glib_interface_age").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const guint */
	public GLibLibrary glib_interface_age(int glib_interface_age) {
		try {
			{
				BridJ.getNativeLibrary("GLib").getSymbolPointer("glib_interface_age").as(int.class).set(glib_interface_age);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const guint */
	public int glib_binary_age() {
		try {
			return (int)BridJ.getNativeLibrary("GLib").getSymbolPointer("glib_binary_age").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const guint */
	public GLibLibrary glib_binary_age(int glib_binary_age) {
		try {
			{
				BridJ.getNativeLibrary("GLib").getSymbolPointer("glib_binary_age").as(int.class).set(glib_binary_age);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public static class GIConv extends TypedPointer {
		public GIConv(long address) {
			super(address);
		}
		public GIConv(Pointer address) {
			super(address);
		}
	};
	/** Undefined type */
	public static interface GPatternSpec {
		
	};
	/** Undefined type */
	public static interface GOptionGroup {
		
	};
	/** Undefined type */
	public static interface GChecksum {
		
	};
	/** Undefined type */
	public static interface _GSequenceNode {
		
	};
	/** Undefined type */
	public static interface GBytes {
		
	};
	/** Undefined type */
	public static interface GThreadFunc {
		
	};
	/** Undefined type */
	public static interface GTree {
		
	};
	/** Undefined type */
	public static interface GKeyFile {
		
	};
	/** Undefined type */
	public static interface GTestLogFatalFunc {
		
	};
	/** Undefined type */
	public static interface GTestSuite {
		
	};
	/** Undefined type */
	public static interface GOptionContext {
		
	};
	/** Undefined type */
	public static interface GData {
		
	};
	/** Undefined type */
	public static interface GVariantType {
		
	};
	/** Undefined type */
	public static interface GSequence {
		
	};
	/** Undefined type */
	public static interface GMatchInfo {
		
	};
	/** Undefined type */
	public static interface GRegex {
		
	};
	/** Undefined type */
	public static interface _GIConv {
		
	};
	/** Undefined type */
	public static interface GNodeTraverseFunc {
		
	};
	/** Undefined type */
	public static interface GStringChunk {
		
	};
	/** Undefined type */
	public static interface GTraverseFunc {
		
	};
	/** Undefined type */
	public static interface GBookmarkFile {
		
	};
	/** Undefined type */
	public static interface GTimer {
		
	};
	/** Undefined type */
	public static interface GSourcePrivate {
		
	};
	/** Undefined type */
	public static interface GIOFunc {
		
	};
	/** Undefined type */
	public static interface GHashTable {
		
	};
	/** Undefined type */
	public static interface GRand {
		
	};
	/** Undefined type */
	public static interface GHookFindFunc {
		
	};
	/** Undefined type */
	public static interface GHmac {
		
	};
	/** Undefined type */
	public static interface GVariant {
		
	};
	/** Undefined type */
	public static interface GDateTime {
		
	};
	/** Undefined type */
	public static interface GMappedFile {
		
	};
	/** Undefined type */
	public static interface GTestCase {
		
	};
	/** Undefined type */
	public static interface GAsyncQueue {
		
	};
	/** Undefined type */
	public static interface GSourceFunc {
		
	};
	/** Undefined type */
	public static interface GHRFunc {
		
	};
	/** Undefined type */
	public static interface GTimeZone {
		
	};
	/** Undefined type */
	public static interface __builtin_va_list {
		
	};
	/** Undefined type */
	public static interface GMainContext {
		
	};
	/** Undefined type */
	public static interface GMainLoop {
		
	};
	/** Undefined type */
	public static interface GMarkupParseContext {
		
	};
	/** Undefined type */
	public static interface GDir {
		
	};
	/** Undefined type */
	public static interface GRegexEvalCallback {
		
	};
}
