package glib;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : glib-2.0/glib/gmain.h:128</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GLib") 
public class GSourceCallbackFuncs extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : ref_callback* */
	@Field(0) 
	public Pointer<GSourceCallbackFuncs.ref_callback > ref() {
		return this.io.getPointerField(this, 0);
	}
	/** C type : ref_callback* */
	@Field(0) 
	public GSourceCallbackFuncs ref(Pointer<GSourceCallbackFuncs.ref_callback > ref) {
		this.io.setPointerField(this, 0, ref);
		return this;
	}
	/** C type : unref_callback* */
	@Field(1) 
	public Pointer<GSourceCallbackFuncs.unref_callback > unref() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : unref_callback* */
	@Field(1) 
	public GSourceCallbackFuncs unref(Pointer<GSourceCallbackFuncs.unref_callback > unref) {
		this.io.setPointerField(this, 1, unref);
		return this;
	}
	/** C type : get_callback* */
	@Field(2) 
	public Pointer<GSourceCallbackFuncs.get_callback > get() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : get_callback* */
	@Field(2) 
	public GSourceCallbackFuncs get(Pointer<GSourceCallbackFuncs.get_callback > get) {
		this.io.setPointerField(this, 2, get);
		return this;
	}
	/** <i>native declaration : glib-2.0/glib/gmain.h:125</i> */
	public static abstract class ref_callback extends Callback<ref_callback > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gmain.h</i><br>
		 * void ref_callback(gpointer cb_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gmain.h</i><br>
		 * void ref_callback(gpointer cb_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gmain.h:126</i> */
	public static abstract class unref_callback extends Callback<unref_callback > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gmain.h</i><br>
		 * void unref_callback(gpointer cb_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gmain.h</i><br>
		 * void unref_callback(gpointer cb_data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/glib/gmain.h:127</i> */
	public static abstract class get_callback extends Callback<get_callback > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gmain.h</i><br>
		 * void get_callback(gpointer cb_data, GSource* source, GSourceFunc* func, gpointer* data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/glib/gmain.h</i><br>
		 * void get_callback(gpointer cb_data, GSource* source, GSourceFunc* func, gpointer* data);<br>
		 * Conversion Error : gpointer (Unsupported type)
		 */
	};
	public GSourceCallbackFuncs() {
		super();
	}
	public GSourceCallbackFuncs(Pointer pointer) {
		super(pointer);
	}
}
