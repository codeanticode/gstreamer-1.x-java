package glib;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Bits;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : glib-2.0/glib/gscanner.h:93</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GLib") 
public class GScannerConfig extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * Character sets<br>
	 * default: " \t\n"<br>
	 * C type : gchar*
	 */
	@Field(0) 
	public Pointer<Byte > cset_skip_characters() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * Character sets<br>
	 * default: " \t\n"<br>
	 * C type : gchar*
	 */
	@Field(0) 
	public GScannerConfig cset_skip_characters(Pointer<Byte > cset_skip_characters) {
		this.io.setPointerField(this, 0, cset_skip_characters);
		return this;
	}
	/** C type : gchar* */
	@Field(1) 
	public Pointer<Byte > cset_identifier_first() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : gchar* */
	@Field(1) 
	public GScannerConfig cset_identifier_first(Pointer<Byte > cset_identifier_first) {
		this.io.setPointerField(this, 1, cset_identifier_first);
		return this;
	}
	/** C type : gchar* */
	@Field(2) 
	public Pointer<Byte > cset_identifier_nth() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : gchar* */
	@Field(2) 
	public GScannerConfig cset_identifier_nth(Pointer<Byte > cset_identifier_nth) {
		this.io.setPointerField(this, 2, cset_identifier_nth);
		return this;
	}
	/**
	 * default: "#\n"<br>
	 * C type : gchar*
	 */
	@Field(3) 
	public Pointer<Byte > cpair_comment_single() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * default: "#\n"<br>
	 * C type : gchar*
	 */
	@Field(3) 
	public GScannerConfig cpair_comment_single(Pointer<Byte > cpair_comment_single) {
		this.io.setPointerField(this, 3, cpair_comment_single);
		return this;
	}
	/**
	 * Should symbol lookup work case sensitive?<br>
	 * C type : guint
	 */
	@Field(4) 
	@Bits(1) 
	public int case_sensitive() {
		return this.io.getIntField(this, 4);
	}
	/**
	 * Should symbol lookup work case sensitive?<br>
	 * C type : guint
	 */
	@Field(4) 
	@Bits(1) 
	public GScannerConfig case_sensitive(int case_sensitive) {
		this.io.setIntField(this, 4, case_sensitive);
		return this;
	}
	/**
	 * Boolean values to be adjusted "on the fly"<br>
	 * to configure scanning behaviour.<br>
	 * C like comment<br>
	 * C type : guint
	 */
	@Field(5) 
	@Bits(1) 
	public int skip_comment_multi() {
		return this.io.getIntField(this, 5);
	}
	/**
	 * Boolean values to be adjusted "on the fly"<br>
	 * to configure scanning behaviour.<br>
	 * C like comment<br>
	 * C type : guint
	 */
	@Field(5) 
	@Bits(1) 
	public GScannerConfig skip_comment_multi(int skip_comment_multi) {
		this.io.setIntField(this, 5, skip_comment_multi);
		return this;
	}
	/**
	 * single line comment<br>
	 * C type : guint
	 */
	@Field(6) 
	@Bits(1) 
	public int skip_comment_single() {
		return this.io.getIntField(this, 6);
	}
	/**
	 * single line comment<br>
	 * C type : guint
	 */
	@Field(6) 
	@Bits(1) 
	public GScannerConfig skip_comment_single(int skip_comment_single) {
		this.io.setIntField(this, 6, skip_comment_single);
		return this;
	}
	/**
	 * scan multi line comments?<br>
	 * C type : guint
	 */
	@Field(7) 
	@Bits(1) 
	public int scan_comment_multi() {
		return this.io.getIntField(this, 7);
	}
	/**
	 * scan multi line comments?<br>
	 * C type : guint
	 */
	@Field(7) 
	@Bits(1) 
	public GScannerConfig scan_comment_multi(int scan_comment_multi) {
		this.io.setIntField(this, 7, scan_comment_multi);
		return this;
	}
	/** C type : guint */
	@Field(8) 
	@Bits(1) 
	public int scan_identifier() {
		return this.io.getIntField(this, 8);
	}
	/** C type : guint */
	@Field(8) 
	@Bits(1) 
	public GScannerConfig scan_identifier(int scan_identifier) {
		this.io.setIntField(this, 8, scan_identifier);
		return this;
	}
	/** C type : guint */
	@Field(9) 
	@Bits(1) 
	public int scan_identifier_1char() {
		return this.io.getIntField(this, 9);
	}
	/** C type : guint */
	@Field(9) 
	@Bits(1) 
	public GScannerConfig scan_identifier_1char(int scan_identifier_1char) {
		this.io.setIntField(this, 9, scan_identifier_1char);
		return this;
	}
	/** C type : guint */
	@Field(10) 
	@Bits(1) 
	public int scan_identifier_NULL() {
		return this.io.getIntField(this, 10);
	}
	/** C type : guint */
	@Field(10) 
	@Bits(1) 
	public GScannerConfig scan_identifier_NULL(int scan_identifier_NULL) {
		this.io.setIntField(this, 10, scan_identifier_NULL);
		return this;
	}
	/** C type : guint */
	@Field(11) 
	@Bits(1) 
	public int scan_symbols() {
		return this.io.getIntField(this, 11);
	}
	/** C type : guint */
	@Field(11) 
	@Bits(1) 
	public GScannerConfig scan_symbols(int scan_symbols) {
		this.io.setIntField(this, 11, scan_symbols);
		return this;
	}
	/** C type : guint */
	@Field(12) 
	@Bits(1) 
	public int scan_binary() {
		return this.io.getIntField(this, 12);
	}
	/** C type : guint */
	@Field(12) 
	@Bits(1) 
	public GScannerConfig scan_binary(int scan_binary) {
		this.io.setIntField(this, 12, scan_binary);
		return this;
	}
	/** C type : guint */
	@Field(13) 
	@Bits(1) 
	public int scan_octal() {
		return this.io.getIntField(this, 13);
	}
	/** C type : guint */
	@Field(13) 
	@Bits(1) 
	public GScannerConfig scan_octal(int scan_octal) {
		this.io.setIntField(this, 13, scan_octal);
		return this;
	}
	/** C type : guint */
	@Field(14) 
	@Bits(1) 
	public int scan_float() {
		return this.io.getIntField(this, 14);
	}
	/** C type : guint */
	@Field(14) 
	@Bits(1) 
	public GScannerConfig scan_float(int scan_float) {
		this.io.setIntField(this, 14, scan_float);
		return this;
	}
	/**
	 * '0x0ff0'<br>
	 * C type : guint
	 */
	@Field(15) 
	@Bits(1) 
	public int scan_hex() {
		return this.io.getIntField(this, 15);
	}
	/**
	 * '0x0ff0'<br>
	 * C type : guint
	 */
	@Field(15) 
	@Bits(1) 
	public GScannerConfig scan_hex(int scan_hex) {
		this.io.setIntField(this, 15, scan_hex);
		return this;
	}
	/**
	 * '$0ff0'<br>
	 * C type : guint
	 */
	@Field(16) 
	@Bits(1) 
	public int scan_hex_dollar() {
		return this.io.getIntField(this, 16);
	}
	/**
	 * '$0ff0'<br>
	 * C type : guint
	 */
	@Field(16) 
	@Bits(1) 
	public GScannerConfig scan_hex_dollar(int scan_hex_dollar) {
		this.io.setIntField(this, 16, scan_hex_dollar);
		return this;
	}
	/**
	 * string: 'anything'<br>
	 * C type : guint
	 */
	@Field(17) 
	@Bits(1) 
	public int scan_string_sq() {
		return this.io.getIntField(this, 17);
	}
	/**
	 * string: 'anything'<br>
	 * C type : guint
	 */
	@Field(17) 
	@Bits(1) 
	public GScannerConfig scan_string_sq(int scan_string_sq) {
		this.io.setIntField(this, 17, scan_string_sq);
		return this;
	}
	/**
	 * string: "\\-escapes!\n"<br>
	 * C type : guint
	 */
	@Field(18) 
	@Bits(1) 
	public int scan_string_dq() {
		return this.io.getIntField(this, 18);
	}
	/**
	 * string: "\\-escapes!\n"<br>
	 * C type : guint
	 */
	@Field(18) 
	@Bits(1) 
	public GScannerConfig scan_string_dq(int scan_string_dq) {
		this.io.setIntField(this, 18, scan_string_dq);
		return this;
	}
	/**
	 * bin, octal, hex => int<br>
	 * C type : guint
	 */
	@Field(19) 
	@Bits(1) 
	public int numbers_2_int() {
		return this.io.getIntField(this, 19);
	}
	/**
	 * bin, octal, hex => int<br>
	 * C type : guint
	 */
	@Field(19) 
	@Bits(1) 
	public GScannerConfig numbers_2_int(int numbers_2_int) {
		this.io.setIntField(this, 19, numbers_2_int);
		return this;
	}
	/**
	 * int => G_TOKEN_FLOAT?<br>
	 * C type : guint
	 */
	@Field(20) 
	@Bits(1) 
	public int int_2_float() {
		return this.io.getIntField(this, 20);
	}
	/**
	 * int => G_TOKEN_FLOAT?<br>
	 * C type : guint
	 */
	@Field(20) 
	@Bits(1) 
	public GScannerConfig int_2_float(int int_2_float) {
		this.io.setIntField(this, 20, int_2_float);
		return this;
	}
	/** C type : guint */
	@Field(21) 
	@Bits(1) 
	public int identifier_2_string() {
		return this.io.getIntField(this, 21);
	}
	/** C type : guint */
	@Field(21) 
	@Bits(1) 
	public GScannerConfig identifier_2_string(int identifier_2_string) {
		this.io.setIntField(this, 21, identifier_2_string);
		return this;
	}
	/**
	 * return G_TOKEN_CHAR?<br>
	 * C type : guint
	 */
	@Field(22) 
	@Bits(1) 
	public int char_2_token() {
		return this.io.getIntField(this, 22);
	}
	/**
	 * return G_TOKEN_CHAR?<br>
	 * C type : guint
	 */
	@Field(22) 
	@Bits(1) 
	public GScannerConfig char_2_token(int char_2_token) {
		this.io.setIntField(this, 22, char_2_token);
		return this;
	}
	/** C type : guint */
	@Field(23) 
	@Bits(1) 
	public int symbol_2_token() {
		return this.io.getIntField(this, 23);
	}
	/** C type : guint */
	@Field(23) 
	@Bits(1) 
	public GScannerConfig symbol_2_token(int symbol_2_token) {
		this.io.setIntField(this, 23, symbol_2_token);
		return this;
	}
	/**
	 * try scope 0 on lookups?<br>
	 * C type : guint
	 */
	@Field(24) 
	@Bits(1) 
	public int scope_0_fallback() {
		return this.io.getIntField(this, 24);
	}
	/**
	 * try scope 0 on lookups?<br>
	 * C type : guint
	 */
	@Field(24) 
	@Bits(1) 
	public GScannerConfig scope_0_fallback(int scope_0_fallback) {
		this.io.setIntField(this, 24, scope_0_fallback);
		return this;
	}
	/**
	 * use value.v_int64 rather than v_int<br>
	 * C type : guint
	 */
	@Field(25) 
	@Bits(1) 
	public int store_int64() {
		return this.io.getIntField(this, 25);
	}
	/**
	 * use value.v_int64 rather than v_int<br>
	 * C type : guint
	 */
	@Field(25) 
	@Bits(1) 
	public GScannerConfig store_int64(int store_int64) {
		this.io.setIntField(this, 25, store_int64);
		return this;
	}
	/**
	 * < private ><br>
	 * C type : guint
	 */
	@Field(26) 
	public int padding_dummy() {
		return this.io.getIntField(this, 26);
	}
	/**
	 * < private ><br>
	 * C type : guint
	 */
	@Field(26) 
	public GScannerConfig padding_dummy(int padding_dummy) {
		this.io.setIntField(this, 26, padding_dummy);
		return this;
	}
	public GScannerConfig() {
		super();
	}
	public GScannerConfig(Pointer pointer) {
		super(pointer);
	}
}
