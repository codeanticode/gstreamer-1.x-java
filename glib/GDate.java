package glib;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Bits;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * Note: directly manipulating structs is generally a bad idea, but<br>
 * in this case it's an *incredibly* bad idea, because all or part<br>
 * of this struct can be invalid at any given time. Use the functions,<br>
 * or you will get hosed, I promise.<br>
 * <i>native declaration : glib-2.0/glib/gdate.h:55</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GLib") 
public class GDate extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * julian days representation - we use a<br>
	 *  bitfield hoping that 64 bit platforms<br>
	 *  will pack this whole struct in one big<br>
	 *  int<br>
	 * C type : guint
	 */
	@Field(0) 
	@Bits(32) 
	public int julian_days() {
		return this.io.getIntField(this, 0);
	}
	/**
	 * julian days representation - we use a<br>
	 *  bitfield hoping that 64 bit platforms<br>
	 *  will pack this whole struct in one big<br>
	 *  int<br>
	 * C type : guint
	 */
	@Field(0) 
	@Bits(32) 
	public GDate julian_days(int julian_days) {
		this.io.setIntField(this, 0, julian_days);
		return this;
	}
	/**
	 * julian is valid<br>
	 * C type : guint
	 */
	@Field(1) 
	@Bits(1) 
	public int julian() {
		return this.io.getIntField(this, 1);
	}
	/**
	 * julian is valid<br>
	 * C type : guint
	 */
	@Field(1) 
	@Bits(1) 
	public GDate julian(int julian) {
		this.io.setIntField(this, 1, julian);
		return this;
	}
	/**
	 * dmy is valid<br>
	 * C type : guint
	 */
	@Field(2) 
	@Bits(1) 
	public int dmy() {
		return this.io.getIntField(this, 2);
	}
	/**
	 * dmy is valid<br>
	 * C type : guint
	 */
	@Field(2) 
	@Bits(1) 
	public GDate dmy(int dmy) {
		this.io.setIntField(this, 2, dmy);
		return this;
	}
	/**
	 * DMY representation<br>
	 * C type : guint
	 */
	@Field(3) 
	@Bits(6) 
	public int day() {
		return this.io.getIntField(this, 3);
	}
	/**
	 * DMY representation<br>
	 * C type : guint
	 */
	@Field(3) 
	@Bits(6) 
	public GDate day(int day) {
		this.io.setIntField(this, 3, day);
		return this;
	}
	/** C type : guint */
	@Field(4) 
	@Bits(4) 
	public int month() {
		return this.io.getIntField(this, 4);
	}
	/** C type : guint */
	@Field(4) 
	@Bits(4) 
	public GDate month(int month) {
		this.io.setIntField(this, 4, month);
		return this;
	}
	/** C type : guint */
	@Field(5) 
	@Bits(16) 
	public int year() {
		return this.io.getIntField(this, 5);
	}
	/** C type : guint */
	@Field(5) 
	@Bits(16) 
	public GDate year(int year) {
		this.io.setIntField(this, 5, year);
		return this;
	}
	public GDate() {
		super();
	}
	public GDate(Pointer pointer) {
		super(pointer);
	}
}
