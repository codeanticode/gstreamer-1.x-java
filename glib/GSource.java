package gtk;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : glib-2.0/glib/gmain.h:120</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("Gtk") 
public abstract class GSource extends StructObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : gpointer (Unsupported type) */
	/** C type : GSourceCallbackFuncs* */
	@Field(1) 
	public Pointer<GSourceCallbackFuncs > callback_funcs() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : GSourceCallbackFuncs* */
	@Field(1) 
	public GSource callback_funcs(Pointer<GSourceCallbackFuncs > callback_funcs) {
		this.io.setPointerField(this, 1, callback_funcs);
		return this;
	}
	/** C type : const GSourceFuncs* */
	@Field(2) 
	public Pointer<GSourceFuncs > source_funcs() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : const GSourceFuncs* */
	@Field(2) 
	public GSource source_funcs(Pointer<GSourceFuncs > source_funcs) {
		this.io.setPointerField(this, 2, source_funcs);
		return this;
	}
	/** C type : guint */
	@Field(3) 
	public int ref_count() {
		return this.io.getIntField(this, 3);
	}
	/** C type : guint */
	@Field(3) 
	public GSource ref_count(int ref_count) {
		this.io.setIntField(this, 3, ref_count);
		return this;
	}
	/** Conversion Error : GMainContext* (failed to convert type to Java (undefined type)) */
	/** Conversion Error : gint (Unsupported type) */
	/** C type : guint */
	@Field(6) 
	public int flags() {
		return this.io.getIntField(this, 6);
	}
	/** C type : guint */
	@Field(6) 
	public GSource flags(int flags) {
		this.io.setIntField(this, 6, flags);
		return this;
	}
	/** C type : guint */
	@Field(7) 
	public int source_id() {
		return this.io.getIntField(this, 7);
	}
	/** C type : guint */
	@Field(7) 
	public GSource source_id(int source_id) {
		this.io.setIntField(this, 7, source_id);
		return this;
	}
	/** C type : GSList* */
	@Field(8) 
	public Pointer<GSList > poll_fds() {
		return this.io.getPointerField(this, 8);
	}
	/** C type : GSList* */
	@Field(8) 
	public GSource poll_fds(Pointer<GSList > poll_fds) {
		this.io.setPointerField(this, 8, poll_fds);
		return this;
	}
	/** C type : GSource* */
	@Field(9) 
	public Pointer<GSource > prev() {
		return this.io.getPointerField(this, 9);
	}
	/** C type : GSource* */
	@Field(9) 
	public GSource prev(Pointer<GSource > prev) {
		this.io.setPointerField(this, 9, prev);
		return this;
	}
	/** C type : GSource* */
	@Field(10) 
	public Pointer<GSource > next() {
		return this.io.getPointerField(this, 10);
	}
	/** C type : GSource* */
	@Field(10) 
	public GSource next(Pointer<GSource > next) {
		this.io.setPointerField(this, 10, next);
		return this;
	}
	/** C type : char* */
	@Field(11) 
	public Pointer<Byte > name() {
		return this.io.getPointerField(this, 11);
	}
	/** C type : char* */
	@Field(11) 
	public GSource name(Pointer<Byte > name) {
		this.io.setPointerField(this, 11, name);
		return this;
	}
	/** Conversion Error : GSourcePrivate* (failed to convert type to Java (undefined type)) */
}
