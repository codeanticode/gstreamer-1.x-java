package gio;
import gio.GIOLibrary.GAsyncReadyCallback;
import gio.GIOLibrary.GAsyncResult;
import gio.GIOLibrary.GNetworkMonitor;
import gio.GIOLibrary.GSocketConnectable;
import gio.GIOLibrary.gboolean;
import gio.GIOLibrary.gpointer;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * <i>native declaration : glib-2.0/gio/gnetworkmonitor.h:12</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GNetworkMonitorInterface extends StructObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GTypeInterface (Unsupported type) */
	/** C type : network_changed_callback* */
	@Field(1) 
	public Pointer<GNetworkMonitorInterface.network_changed_callback > network_changed() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : network_changed_callback* */
	@Field(1) 
	public GNetworkMonitorInterface network_changed(Pointer<GNetworkMonitorInterface.network_changed_callback > network_changed) {
		this.io.setPointerField(this, 1, network_changed);
		return this;
	}
	/** C type : can_reach_callback* */
	@Field(2) 
	public Pointer<GNetworkMonitorInterface.can_reach_callback > can_reach() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : can_reach_callback* */
	@Field(2) 
	public GNetworkMonitorInterface can_reach(Pointer<GNetworkMonitorInterface.can_reach_callback > can_reach) {
		this.io.setPointerField(this, 2, can_reach);
		return this;
	}
	/** C type : can_reach_async_callback* */
	@Field(3) 
	public Pointer<GNetworkMonitorInterface.can_reach_async_callback > can_reach_async() {
		return this.io.getPointerField(this, 3);
	}
	/** C type : can_reach_async_callback* */
	@Field(3) 
	public GNetworkMonitorInterface can_reach_async(Pointer<GNetworkMonitorInterface.can_reach_async_callback > can_reach_async) {
		this.io.setPointerField(this, 3, can_reach_async);
		return this;
	}
	/** C type : can_reach_finish_callback* */
	@Field(4) 
	public Pointer<GNetworkMonitorInterface.can_reach_finish_callback > can_reach_finish() {
		return this.io.getPointerField(this, 4);
	}
	/** C type : can_reach_finish_callback* */
	@Field(4) 
	public GNetworkMonitorInterface can_reach_finish(Pointer<GNetworkMonitorInterface.can_reach_finish_callback > can_reach_finish) {
		this.io.setPointerField(this, 4, can_reach_finish);
		return this;
	}
	/** <i>native declaration : glib-2.0/gio/gnetworkmonitor.h:8</i> */
	public static abstract class network_changed_callback extends Callback<network_changed_callback > {
		public final void apply(Pointer<GNetworkMonitor > monitor, gboolean available) {
			apply(Pointer.getPeer(monitor), available);
		}
		public abstract void apply(@Ptr long monitor, gboolean available);
	};
	/** <i>native declaration : glib-2.0/gio/gnetworkmonitor.h:9</i> */
	public static abstract class can_reach_callback extends Callback<can_reach_callback > {
		public final gboolean apply(Pointer<GNetworkMonitor > monitor, Pointer<GSocketConnectable > connectable, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
			return apply(Pointer.getPeer(monitor), Pointer.getPeer(connectable), Pointer.getPeer(cancellable), Pointer.getPeer(error));
		}
		public abstract gboolean apply(@Ptr long monitor, @Ptr long connectable, @Ptr long cancellable, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gnetworkmonitor.h:10</i> */
	public static abstract class can_reach_async_callback extends Callback<can_reach_async_callback > {
		public final void apply(Pointer<GNetworkMonitor > monitor, Pointer<GSocketConnectable > connectable, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(monitor), Pointer.getPeer(connectable), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long monitor, @Ptr long connectable, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gnetworkmonitor.h:11</i> */
	public static abstract class can_reach_finish_callback extends Callback<can_reach_finish_callback > {
		public final gboolean apply(Pointer<GNetworkMonitor > monitor, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			return apply(Pointer.getPeer(monitor), Pointer.getPeer(result), Pointer.getPeer(error));
		}
		public abstract gboolean apply(@Ptr long monitor, @Ptr long result, @Ptr long error);
	};
}
