package gio;
import gio.GIOLibrary.GAsyncReadyCallback;
import gio.GIOLibrary.GAsyncResult;
import gio.GIOLibrary.gpointer;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
/**
 * <i>native declaration : glib-2.0/gio/gpermission.h:27</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GPermissionClass extends CPPObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GObjectClass (Unsupported type) */
	/** C type : acquire_async_callback* */
	@Field(1) 
	public Pointer<GPermissionClass.acquire_async_callback > acquire_async() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : acquire_async_callback* */
	@Field(1) 
	public GPermissionClass acquire_async(Pointer<GPermissionClass.acquire_async_callback > acquire_async) {
		this.io.setPointerField(this, 1, acquire_async);
		return this;
	}
	/** C type : release_async_callback* */
	@Field(2) 
	public Pointer<GPermissionClass.release_async_callback > release_async() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : release_async_callback* */
	@Field(2) 
	public GPermissionClass release_async(Pointer<GPermissionClass.release_async_callback > release_async) {
		this.io.setPointerField(this, 2, release_async);
		return this;
	}
	/** C type : gpointer[16] */
	@Array({16}) 
	@Field(3) 
	public Pointer<gpointer > reserved() {
		return this.io.getPointerField(this, 3);
	}
	/** <i>native declaration : glib-2.0/gio/gpermission.h:21</i> */
	public static abstract class gboolean_callback extends Callback<gboolean_callback > {
		public final void apply(Pointer<GPermission > permission, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
			apply(Pointer.getPeer(permission), Pointer.getPeer(cancellable), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long permission, @Ptr long cancellable, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gpermission.h:22</i> */
	public static abstract class acquire_async_callback extends Callback<acquire_async_callback > {
		public final void apply(Pointer<GPermission > permission, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(permission), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long permission, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gpermission.h:23</i> */
	public static abstract class gboolean_callback2 extends Callback<gboolean_callback2 > {
		public final void apply(Pointer<GPermission > permission, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			apply(Pointer.getPeer(permission), Pointer.getPeer(result), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long permission, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gpermission.h:24</i> */
	public static abstract class gboolean_callback3 extends Callback<gboolean_callback3 > {
		public final void apply(Pointer<GPermission > permission, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
			apply(Pointer.getPeer(permission), Pointer.getPeer(cancellable), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long permission, @Ptr long cancellable, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gpermission.h:25</i> */
	public static abstract class release_async_callback extends Callback<release_async_callback > {
		public final void apply(Pointer<GPermission > permission, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(permission), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long permission, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gpermission.h:26</i> */
	public static abstract class gboolean_callback4 extends Callback<gboolean_callback4 > {
		public final void apply(Pointer<GPermission > permission, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			apply(Pointer.getPeer(permission), Pointer.getPeer(result), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long permission, @Ptr long result, @Ptr long error);
	};
}
