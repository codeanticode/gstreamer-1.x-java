package gio;
import gio.GIOLibrary.GAsyncReadyCallback;
import gio.GIOLibrary.GAsyncResult;
import gio.GIOLibrary.GDrive;
import gio.GIOLibrary.GDriveStartFlags;
import gio.GIOLibrary.GIcon;
import gio.GIOLibrary.GMountUnmountFlags;
import gio.GIOLibrary.gpointer;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
import org.bridj.util.DefaultParameterizedType;
/**
 * <i>native declaration : glib-2.0/gio/gdrive.h:122</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GDriveIface extends CPPObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GTypeInterface (Unsupported type) */
	/**
	 * signals<br>
	 * C type : changed_callback*
	 */
	@Field(1) 
	public Pointer<gio.GVolumeIface.changed_callback > changed() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * signals<br>
	 * C type : changed_callback*
	 */
	@Field(1) 
	public GDriveIface changed(Pointer<gio.GVolumeIface.changed_callback > changed) {
		this.io.setPointerField(this, 1, changed);
		return this;
	}
	/** C type : disconnected_callback* */
	@Field(2) 
	public Pointer<GDriveIface.disconnected_callback > disconnected() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : disconnected_callback* */
	@Field(2) 
	public GDriveIface disconnected(Pointer<GDriveIface.disconnected_callback > disconnected) {
		this.io.setPointerField(this, 2, disconnected);
		return this;
	}
	/** C type : eject_button_callback* */
	@Field(3) 
	public Pointer<GDriveIface.eject_button_callback > eject_button() {
		return this.io.getPointerField(this, 3);
	}
	/** C type : eject_button_callback* */
	@Field(3) 
	public GDriveIface eject_button(Pointer<GDriveIface.eject_button_callback > eject_button) {
		this.io.setPointerField(this, 3, eject_button);
		return this;
	}
	/**
	 * Virtual Table<br>
	 * C type : get_name_callback*
	 */
	@Field(4) 
	public Pointer<gio.GVolumeIface.get_name_callback > get_name() {
		return this.io.getPointerField(this, 4);
	}
	/**
	 * Virtual Table<br>
	 * C type : get_name_callback*
	 */
	@Field(4) 
	public GDriveIface get_name(Pointer<gio.GVolumeIface.get_name_callback > get_name) {
		this.io.setPointerField(this, 4, get_name);
		return this;
	}
	/** C type : get_icon_callback* */
	@Field(5) 
	public Pointer<gio.GVolumeIface.get_icon_callback > get_icon() {
		return this.io.getPointerField(this, 5);
	}
	/** C type : get_icon_callback* */
	@Field(5) 
	public GDriveIface get_icon(Pointer<gio.GVolumeIface.get_icon_callback > get_icon) {
		this.io.setPointerField(this, 5, get_icon);
		return this;
	}
	/** C type : get_volumes_callback* */
	@Field(6) 
	public Pointer<gio.GVolumeMonitorClass.get_volumes_callback > get_volumes() {
		return this.io.getPointerField(this, 6);
	}
	/** C type : get_volumes_callback* */
	@Field(6) 
	public GDriveIface get_volumes(Pointer<gio.GVolumeMonitorClass.get_volumes_callback > get_volumes) {
		this.io.setPointerField(this, 6, get_volumes);
		return this;
	}
	/** C type : eject_callback* */
	@Field(7) 
	public Pointer<gio.GVolumeIface.eject_callback > eject() {
		return this.io.getPointerField(this, 7);
	}
	/** C type : eject_callback* */
	@Field(7) 
	public GDriveIface eject(Pointer<gio.GVolumeIface.eject_callback > eject) {
		this.io.setPointerField(this, 7, eject);
		return this;
	}
	/** C type : poll_for_media_callback* */
	@Field(8) 
	public Pointer<GDriveIface.poll_for_media_callback > poll_for_media() {
		return this.io.getPointerField(this, 8);
	}
	/** C type : poll_for_media_callback* */
	@Field(8) 
	public GDriveIface poll_for_media(Pointer<GDriveIface.poll_for_media_callback > poll_for_media) {
		this.io.setPointerField(this, 8, poll_for_media);
		return this;
	}
	/** C type : get_identifier_callback* */
	@Field(9) 
	public Pointer<gio.GVolumeIface.get_identifier_callback > get_identifier() {
		return this.io.getPointerField(this, 9);
	}
	/** C type : get_identifier_callback* */
	@Field(9) 
	public GDriveIface get_identifier(Pointer<gio.GVolumeIface.get_identifier_callback > get_identifier) {
		this.io.setPointerField(this, 9, get_identifier);
		return this;
	}
	/** C type : enumerate_identifiers_callback* */
	@Field(10) 
	public Pointer<gio.GVolumeIface.enumerate_identifiers_callback > enumerate_identifiers() {
		return this.io.getPointerField(this, 10);
	}
	/** C type : enumerate_identifiers_callback* */
	@Field(10) 
	public GDriveIface enumerate_identifiers(Pointer<gio.GVolumeIface.enumerate_identifiers_callback > enumerate_identifiers) {
		this.io.setPointerField(this, 10, enumerate_identifiers);
		return this;
	}
	/** C type : start_callback* */
	@Field(11) 
	public Pointer<GDriveIface.start_callback > start() {
		return this.io.getPointerField(this, 11);
	}
	/** C type : start_callback* */
	@Field(11) 
	public GDriveIface start(Pointer<GDriveIface.start_callback > start) {
		this.io.setPointerField(this, 11, start);
		return this;
	}
	/** C type : stop_callback* */
	@Field(12) 
	public Pointer<GDriveIface.stop_callback > stop() {
		return this.io.getPointerField(this, 12);
	}
	/** C type : stop_callback* */
	@Field(12) 
	public GDriveIface stop(Pointer<GDriveIface.stop_callback > stop) {
		this.io.setPointerField(this, 12, stop);
		return this;
	}
	/**
	 * signal, not VFunc<br>
	 * C type : stop_button_callback*
	 */
	@Field(13) 
	public Pointer<GDriveIface.stop_button_callback > stop_button() {
		return this.io.getPointerField(this, 13);
	}
	/**
	 * signal, not VFunc<br>
	 * C type : stop_button_callback*
	 */
	@Field(13) 
	public GDriveIface stop_button(Pointer<GDriveIface.stop_button_callback > stop_button) {
		this.io.setPointerField(this, 13, stop_button);
		return this;
	}
	/** C type : eject_with_operation_callback* */
	@Field(14) 
	public Pointer<gio.GVolumeIface.eject_with_operation_callback > eject_with_operation() {
		return this.io.getPointerField(this, 14);
	}
	/** C type : eject_with_operation_callback* */
	@Field(14) 
	public GDriveIface eject_with_operation(Pointer<gio.GVolumeIface.eject_with_operation_callback > eject_with_operation) {
		this.io.setPointerField(this, 14, eject_with_operation);
		return this;
	}
	/** C type : get_sort_key_callback* */
	@Field(15) 
	public Pointer<gio.GVolumeIface.get_sort_key_callback > get_sort_key() {
		return this.io.getPointerField(this, 15);
	}
	/** C type : get_sort_key_callback* */
	@Field(15) 
	public GDriveIface get_sort_key(Pointer<gio.GVolumeIface.get_sort_key_callback > get_sort_key) {
		this.io.setPointerField(this, 15, get_sort_key);
		return this;
	}
	/** C type : get_symbolic_icon_callback* */
	@Field(16) 
	public Pointer<gio.GVolumeIface.get_symbolic_icon_callback > get_symbolic_icon() {
		return this.io.getPointerField(this, 16);
	}
	/** C type : get_symbolic_icon_callback* */
	@Field(16) 
	public GDriveIface get_symbolic_icon(Pointer<gio.GVolumeIface.get_symbolic_icon_callback > get_symbolic_icon) {
		this.io.setPointerField(this, 16, get_symbolic_icon);
		return this;
	}
	/** <i>native declaration : glib-2.0/gio/gdrive.h:91</i> */
	public static abstract class changed_callback extends Callback<changed_callback > {
		public final void apply(Pointer<GDrive > drive) {
			apply(Pointer.getPeer(drive));
		}
		public abstract void apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:92</i> */
	public static abstract class disconnected_callback extends Callback<disconnected_callback > {
		public final void apply(Pointer<GDrive > drive) {
			apply(Pointer.getPeer(drive));
		}
		public abstract void apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:93</i> */
	public static abstract class eject_button_callback extends Callback<eject_button_callback > {
		public final void apply(Pointer<GDrive > drive) {
			apply(Pointer.getPeer(drive));
		}
		public abstract void apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:94</i> */
	public static abstract class get_name_callback extends Callback<get_name_callback > {
		public final Pointer<Byte > apply(Pointer<GDrive > drive) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(drive)), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:95</i> */
	public static abstract class get_icon_callback extends Callback<get_icon_callback > {
		public final Pointer<GIcon > apply(Pointer<GDrive > drive) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(drive)), GIcon.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:96</i> */
	public static abstract class gboolean_callback extends Callback<gboolean_callback > {
		public final void apply(Pointer<GDrive > drive) {
			apply(Pointer.getPeer(drive));
		}
		public abstract void apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:97</i> */
	public static abstract class get_volumes_callback extends Callback<get_volumes_callback > {
		public final Pointer apply(Pointer<GDrive > drive) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(drive)));
		}
		@Ptr 
		public abstract long apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:98</i> */
	public static abstract class gboolean_callback2 extends Callback<gboolean_callback2 > {
		public final void apply(Pointer<GDrive > drive) {
			apply(Pointer.getPeer(drive));
		}
		public abstract void apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:99</i> */
	public static abstract class gboolean_callback3 extends Callback<gboolean_callback3 > {
		public final void apply(Pointer<GDrive > drive) {
			apply(Pointer.getPeer(drive));
		}
		public abstract void apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:100</i> */
	public static abstract class gboolean_callback4 extends Callback<gboolean_callback4 > {
		public final void apply(Pointer<GDrive > drive) {
			apply(Pointer.getPeer(drive));
		}
		public abstract void apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:101</i> */
	public static abstract class gboolean_callback5 extends Callback<gboolean_callback5 > {
		public final void apply(Pointer<GDrive > drive) {
			apply(Pointer.getPeer(drive));
		}
		public abstract void apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:102</i> */
	public static abstract class gboolean_callback6 extends Callback<gboolean_callback6 > {
		public final void apply(Pointer<GDrive > drive) {
			apply(Pointer.getPeer(drive));
		}
		public abstract void apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:103</i> */
	public static abstract class eject_callback extends Callback<eject_callback > {
		public final void apply(Pointer<GDrive > drive, IntValuedEnum<GMountUnmountFlags > flags, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(drive), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long drive, int flags, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:104</i> */
	public static abstract class gboolean_callback7 extends Callback<gboolean_callback7 > {
		public final void apply(Pointer<GDrive > drive, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			apply(Pointer.getPeer(drive), Pointer.getPeer(result), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long drive, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:105</i> */
	public static abstract class poll_for_media_callback extends Callback<poll_for_media_callback > {
		public final void apply(Pointer<GDrive > drive, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(drive), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long drive, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:106</i> */
	public static abstract class gboolean_callback8 extends Callback<gboolean_callback8 > {
		public final void apply(Pointer<GDrive > drive, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			apply(Pointer.getPeer(drive), Pointer.getPeer(result), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long drive, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:107</i> */
	public static abstract class get_identifier_callback extends Callback<get_identifier_callback > {
		public final Pointer<Byte > apply(Pointer<GDrive > drive, Pointer<Byte > kind) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(drive), Pointer.getPeer(kind)), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long drive, @Ptr long kind);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:108</i> */
	public static abstract class enumerate_identifiers_callback extends Callback<enumerate_identifiers_callback > {
		public final Pointer<Pointer<Byte > > apply(Pointer<GDrive > drive) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(drive)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
		}
		@Ptr 
		public abstract long apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:109</i> */
	public static abstract class GDriveStartStopType_callback extends Callback<GDriveStartStopType_callback > {
		public final void apply(Pointer<GDrive > drive) {
			apply(Pointer.getPeer(drive));
		}
		public abstract void apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:110</i> */
	public static abstract class gboolean_callback9 extends Callback<gboolean_callback9 > {
		public final void apply(Pointer<GDrive > drive) {
			apply(Pointer.getPeer(drive));
		}
		public abstract void apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:111</i> */
	public static abstract class gboolean_callback10 extends Callback<gboolean_callback10 > {
		public final void apply(Pointer<GDrive > drive) {
			apply(Pointer.getPeer(drive));
		}
		public abstract void apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:112</i> */
	public static abstract class start_callback extends Callback<start_callback > {
		public final void apply(Pointer<GDrive > drive, IntValuedEnum<GDriveStartFlags > flags, Pointer<GMountOperation > mount_operation, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(drive), (int)flags.value(), Pointer.getPeer(mount_operation), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long drive, int flags, @Ptr long mount_operation, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:113</i> */
	public static abstract class gboolean_callback11 extends Callback<gboolean_callback11 > {
		public final void apply(Pointer<GDrive > drive, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			apply(Pointer.getPeer(drive), Pointer.getPeer(result), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long drive, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:114</i> */
	public static abstract class gboolean_callback12 extends Callback<gboolean_callback12 > {
		public final void apply(Pointer<GDrive > drive) {
			apply(Pointer.getPeer(drive));
		}
		public abstract void apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:115</i> */
	public static abstract class stop_callback extends Callback<stop_callback > {
		public final void apply(Pointer<GDrive > drive, IntValuedEnum<GMountUnmountFlags > flags, Pointer<GMountOperation > mount_operation, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(drive), (int)flags.value(), Pointer.getPeer(mount_operation), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long drive, int flags, @Ptr long mount_operation, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:116</i> */
	public static abstract class gboolean_callback13 extends Callback<gboolean_callback13 > {
		public final void apply(Pointer<GDrive > drive, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			apply(Pointer.getPeer(drive), Pointer.getPeer(result), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long drive, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:117</i> */
	public static abstract class stop_button_callback extends Callback<stop_button_callback > {
		public final void apply(Pointer<GDrive > drive) {
			apply(Pointer.getPeer(drive));
		}
		public abstract void apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:118</i> */
	public static abstract class eject_with_operation_callback extends Callback<eject_with_operation_callback > {
		public final void apply(Pointer<GDrive > drive, IntValuedEnum<GMountUnmountFlags > flags, Pointer<GMountOperation > mount_operation, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(drive), (int)flags.value(), Pointer.getPeer(mount_operation), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long drive, int flags, @Ptr long mount_operation, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:119</i> */
	public static abstract class gboolean_callback14 extends Callback<gboolean_callback14 > {
		public final void apply(Pointer<GDrive > drive, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			apply(Pointer.getPeer(drive), Pointer.getPeer(result), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long drive, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:120</i> */
	public static abstract class get_sort_key_callback extends Callback<get_sort_key_callback > {
		public final Pointer<Byte > apply(Pointer<GDrive > drive) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(drive)), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long drive);
	};
	/** <i>native declaration : glib-2.0/gio/gdrive.h:121</i> */
	public static abstract class get_symbolic_icon_callback extends Callback<get_symbolic_icon_callback > {
		public final Pointer<GIcon > apply(Pointer<GDrive > drive) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(drive)), GIcon.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long drive);
	};
}
