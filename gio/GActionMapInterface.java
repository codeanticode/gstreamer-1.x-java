package gio;
import gio.GIOLibrary.GAction;
import gio.GIOLibrary.GActionMap;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * <i>native declaration : glib-2.0/gio/gactionmap.h:11</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GActionMapInterface extends StructObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GTypeInterface (Unsupported type) */
	/** C type : lookup_action_callback* */
	@Field(1) 
	public Pointer<GActionMapInterface.lookup_action_callback > lookup_action() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : lookup_action_callback* */
	@Field(1) 
	public GActionMapInterface lookup_action(Pointer<GActionMapInterface.lookup_action_callback > lookup_action) {
		this.io.setPointerField(this, 1, lookup_action);
		return this;
	}
	/** C type : add_action_callback* */
	@Field(2) 
	public Pointer<GActionMapInterface.add_action_callback > add_action() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : add_action_callback* */
	@Field(2) 
	public GActionMapInterface add_action(Pointer<GActionMapInterface.add_action_callback > add_action) {
		this.io.setPointerField(this, 2, add_action);
		return this;
	}
	/** C type : remove_action_callback* */
	@Field(3) 
	public Pointer<GActionMapInterface.remove_action_callback > remove_action() {
		return this.io.getPointerField(this, 3);
	}
	/** C type : remove_action_callback* */
	@Field(3) 
	public GActionMapInterface remove_action(Pointer<GActionMapInterface.remove_action_callback > remove_action) {
		this.io.setPointerField(this, 3, remove_action);
		return this;
	}
	/** <i>native declaration : glib-2.0/gio/gactionmap.h:8</i> */
	public static abstract class lookup_action_callback extends Callback<lookup_action_callback > {
		public final Pointer<GAction > apply(Pointer<GActionMap > action_map, Pointer<Byte > action_name) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(action_map), Pointer.getPeer(action_name)), GAction.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long action_map, @Ptr long action_name);
	};
	/** <i>native declaration : glib-2.0/gio/gactionmap.h:9</i> */
	public static abstract class add_action_callback extends Callback<add_action_callback > {
		public final void apply(Pointer<GActionMap > action_map, Pointer<GAction > action) {
			apply(Pointer.getPeer(action_map), Pointer.getPeer(action));
		}
		public abstract void apply(@Ptr long action_map, @Ptr long action);
	};
	/** <i>native declaration : glib-2.0/gio/gactionmap.h:10</i> */
	public static abstract class remove_action_callback extends Callback<remove_action_callback > {
		public final void apply(Pointer<GActionMap > action_map, Pointer<Byte > action_name) {
			apply(Pointer.getPeer(action_map), Pointer.getPeer(action_name));
		}
		public abstract void apply(@Ptr long action_map, @Ptr long action_name);
	};
}
