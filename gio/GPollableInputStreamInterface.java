package gio;
import gio.GIOLibrary.GPollableInputStream;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.CLong;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
/**
 * GPollableInputStreamInterface:<br>
 * @g_iface: The parent interface.<br>
 * @can_poll: Checks if the #GPollableInputStream instance is actually pollable<br>
 * @is_readable: Checks if the stream is readable<br>
 * @create_source: Creates a #GSource to poll the stream<br>
 * @read_nonblocking: Does a non-blocking read or returns<br>
 *   %G_IO_ERROR_WOULD_BLOCK<br>
 * * The interface for pollable input streams.<br>
 * * The default implementation of @can_poll always returns %TRUE.<br>
 * * The default implementation of @read_nonblocking calls<br>
 * g_pollable_input_stream_is_readable(), and then calls<br>
 * g_input_stream_read() if it returns %TRUE. This means you only need<br>
 * to override it if it is possible that your @is_readable<br>
 * implementation may return %TRUE when the stream is not actually<br>
 * readable.<br>
 * * Since: 2.28<br>
 * <i>native declaration : glib-2.0/gio/gpollableinputstream.h:41</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GPollableInputStreamInterface extends CPPObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GTypeInterface (Unsupported type) */
	/** C type : create_source_callback* */
	@Field(1) 
	public Pointer<gio.GPollableOutputStreamInterface.create_source_callback > create_source() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : create_source_callback* */
	@Field(1) 
	public GPollableInputStreamInterface create_source(Pointer<gio.GPollableOutputStreamInterface.create_source_callback > create_source) {
		this.io.setPointerField(this, 1, create_source);
		return this;
	}
	/** <i>native declaration : glib-2.0/gio/gpollableinputstream.h:37</i> */
	public static abstract class gboolean_callback extends Callback<gboolean_callback > {
		public final void apply(Pointer<GPollableInputStream > stream) {
			apply(Pointer.getPeer(stream));
		}
		public abstract void apply(@Ptr long stream);
	};
	/** <i>native declaration : glib-2.0/gio/gpollableinputstream.h:38</i> */
	public static abstract class gboolean_callback2 extends Callback<gboolean_callback2 > {
		public final void apply(Pointer<GPollableInputStream > stream) {
			apply(Pointer.getPeer(stream));
		}
		public abstract void apply(@Ptr long stream);
	};
	/** <i>native declaration : glib-2.0/gio/gpollableinputstream.h:39</i> */
	public static abstract class create_source_callback extends Callback<create_source_callback > {
		public final Pointer apply(Pointer<GPollableInputStream > stream, Pointer<GCancellable > cancellable) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(stream), Pointer.getPeer(cancellable)));
		}
		@Ptr 
		public abstract long apply(@Ptr long stream, @Ptr long cancellable);
	};
	/** <i>native declaration : glib-2.0/gio/gpollableinputstream.h:40</i> */
	public static abstract class gssize_callback extends Callback<gssize_callback > {
		public final void apply(Pointer<GPollableInputStream > stream, Pointer<? > buffer, @CLong long count, Pointer<Pointer > error) {
			apply(Pointer.getPeer(stream), Pointer.getPeer(buffer), count, Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long stream, @Ptr long buffer, @CLong long count, @Ptr long error);
	};
}
