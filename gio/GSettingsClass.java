package gio;
import gio.GIOLibrary.gpointer;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
/**
 * <i>native declaration : glib-2.0/gio/gsettings.h:17</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GSettingsClass extends CPPObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GObjectClass (Unsupported type) */
	/**
	 * Signals<br>
	 * C type : writable_changed_callback*
	 */
	@Field(1) 
	public Pointer<GSettingsClass.writable_changed_callback > writable_changed() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * Signals<br>
	 * C type : writable_changed_callback*
	 */
	@Field(1) 
	public GSettingsClass writable_changed(Pointer<GSettingsClass.writable_changed_callback > writable_changed) {
		this.io.setPointerField(this, 1, writable_changed);
		return this;
	}
	/** C type : changed_callback* */
	@Field(2) 
	public Pointer<gio.GVolumeIface.changed_callback > changed() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : changed_callback* */
	@Field(2) 
	public GSettingsClass changed(Pointer<gio.GVolumeIface.changed_callback > changed) {
		this.io.setPointerField(this, 2, changed);
		return this;
	}
	/** C type : gpointer[20] */
	@Array({20}) 
	@Field(3) 
	public Pointer<gpointer > padding() {
		return this.io.getPointerField(this, 3);
	}
	/** <i>native declaration : glib-2.0/gio/gsettings.h:13</i> */
	public static abstract class writable_changed_callback extends Callback<writable_changed_callback > {
		public final void apply(Pointer<GSettings > settings, Pointer<Byte > key) {
			apply(Pointer.getPeer(settings), Pointer.getPeer(key));
		}
		public abstract void apply(@Ptr long settings, @Ptr long key);
	};
	/** <i>native declaration : glib-2.0/gio/gsettings.h:14</i> */
	public static abstract class changed_callback extends Callback<changed_callback > {
		public final void apply(Pointer<GSettings > settings, Pointer<Byte > key) {
			apply(Pointer.getPeer(settings), Pointer.getPeer(key));
		}
		public abstract void apply(@Ptr long settings, @Ptr long key);
	};
	/** <i>native declaration : glib-2.0/gio/gsettings.h:15</i> */
	public static abstract class gboolean_callback extends Callback<gboolean_callback > {
		public final void apply(Pointer<GSettings > settings, int key) {
			apply(Pointer.getPeer(settings), key);
		}
		public abstract void apply(@Ptr long settings, int key);
	};
	/** <i>native declaration : glib-2.0/gio/gsettings.h:16</i> */
	public static abstract class gboolean_callback2 extends Callback<gboolean_callback2 > {
		public final void apply(Pointer<GSettings > settings, Pointer<Integer > keys, int n_keys) {
			apply(Pointer.getPeer(settings), Pointer.getPeer(keys), n_keys);
		}
		public abstract void apply(@Ptr long settings, @Ptr long keys, int n_keys);
	};
}
