package gio;
import gio.GIOLibrary.GSocketConnectable;
import gio.GIOLibrary.gpointer;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
/**
 * <i>native declaration : glib-2.0/gio/gtlscertificate.h:14</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GTlsCertificateClass extends CPPObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GObjectClass (Unsupported type) */
	/**
	 * Padding for future expansion<br>
	 * C type : gpointer[8]
	 */
	@Array({8}) 
	@Field(1) 
	public Pointer<gpointer > padding() {
		return this.io.getPointerField(this, 1);
	}
	/** <i>native declaration : glib-2.0/gio/gtlscertificate.h:13</i> */
	public static abstract class GTlsCertificateFlags_callback extends Callback<GTlsCertificateFlags_callback > {
		public final void apply(Pointer<GTlsCertificate > cert, Pointer<GSocketConnectable > identity, Pointer<GTlsCertificate > trusted_ca) {
			apply(Pointer.getPeer(cert), Pointer.getPeer(identity), Pointer.getPeer(trusted_ca));
		}
		public abstract void apply(@Ptr long cert, @Ptr long identity, @Ptr long trusted_ca);
	};
}
