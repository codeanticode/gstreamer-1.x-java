package gio;
import gio.GIOLibrary.GAsyncReadyCallback;
import gio.GIOLibrary.GAsyncResult;
import gio.GIOLibrary.GSocketConnectable;
import gio.GIOLibrary.GTlsDatabaseLookupFlags;
import gio.GIOLibrary.GTlsDatabaseVerifyFlags;
import gio.GIOLibrary.gpointer;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
/**
 * <i>native declaration : glib-2.0/gio/gtlsdatabase.h:39</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GTlsDatabaseClass extends CPPObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GObjectClass (Unsupported type) */
	/** C type : verify_chain_async_callback* */
	@Field(1) 
	public Pointer<GTlsDatabaseClass.verify_chain_async_callback > verify_chain_async() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : verify_chain_async_callback* */
	@Field(1) 
	public GTlsDatabaseClass verify_chain_async(Pointer<GTlsDatabaseClass.verify_chain_async_callback > verify_chain_async) {
		this.io.setPointerField(this, 1, verify_chain_async);
		return this;
	}
	/** C type : create_certificate_handle_callback* */
	@Field(2) 
	public Pointer<GTlsDatabaseClass.create_certificate_handle_callback > create_certificate_handle() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : create_certificate_handle_callback* */
	@Field(2) 
	public GTlsDatabaseClass create_certificate_handle(Pointer<GTlsDatabaseClass.create_certificate_handle_callback > create_certificate_handle) {
		this.io.setPointerField(this, 2, create_certificate_handle);
		return this;
	}
	/** C type : lookup_certificate_for_handle_callback* */
	@Field(3) 
	public Pointer<GTlsDatabaseClass.lookup_certificate_for_handle_callback > lookup_certificate_for_handle() {
		return this.io.getPointerField(this, 3);
	}
	/** C type : lookup_certificate_for_handle_callback* */
	@Field(3) 
	public GTlsDatabaseClass lookup_certificate_for_handle(Pointer<GTlsDatabaseClass.lookup_certificate_for_handle_callback > lookup_certificate_for_handle) {
		this.io.setPointerField(this, 3, lookup_certificate_for_handle);
		return this;
	}
	/** C type : lookup_certificate_for_handle_async_callback* */
	@Field(4) 
	public Pointer<GTlsDatabaseClass.lookup_certificate_for_handle_async_callback > lookup_certificate_for_handle_async() {
		return this.io.getPointerField(this, 4);
	}
	/** C type : lookup_certificate_for_handle_async_callback* */
	@Field(4) 
	public GTlsDatabaseClass lookup_certificate_for_handle_async(Pointer<GTlsDatabaseClass.lookup_certificate_for_handle_async_callback > lookup_certificate_for_handle_async) {
		this.io.setPointerField(this, 4, lookup_certificate_for_handle_async);
		return this;
	}
	/** C type : lookup_certificate_for_handle_finish_callback* */
	@Field(5) 
	public Pointer<GTlsDatabaseClass.lookup_certificate_for_handle_finish_callback > lookup_certificate_for_handle_finish() {
		return this.io.getPointerField(this, 5);
	}
	/** C type : lookup_certificate_for_handle_finish_callback* */
	@Field(5) 
	public GTlsDatabaseClass lookup_certificate_for_handle_finish(Pointer<GTlsDatabaseClass.lookup_certificate_for_handle_finish_callback > lookup_certificate_for_handle_finish) {
		this.io.setPointerField(this, 5, lookup_certificate_for_handle_finish);
		return this;
	}
	/** C type : lookup_certificate_issuer_callback* */
	@Field(6) 
	public Pointer<GTlsDatabaseClass.lookup_certificate_issuer_callback > lookup_certificate_issuer() {
		return this.io.getPointerField(this, 6);
	}
	/** C type : lookup_certificate_issuer_callback* */
	@Field(6) 
	public GTlsDatabaseClass lookup_certificate_issuer(Pointer<GTlsDatabaseClass.lookup_certificate_issuer_callback > lookup_certificate_issuer) {
		this.io.setPointerField(this, 6, lookup_certificate_issuer);
		return this;
	}
	/** C type : lookup_certificate_issuer_async_callback* */
	@Field(7) 
	public Pointer<GTlsDatabaseClass.lookup_certificate_issuer_async_callback > lookup_certificate_issuer_async() {
		return this.io.getPointerField(this, 7);
	}
	/** C type : lookup_certificate_issuer_async_callback* */
	@Field(7) 
	public GTlsDatabaseClass lookup_certificate_issuer_async(Pointer<GTlsDatabaseClass.lookup_certificate_issuer_async_callback > lookup_certificate_issuer_async) {
		this.io.setPointerField(this, 7, lookup_certificate_issuer_async);
		return this;
	}
	/** C type : lookup_certificate_issuer_finish_callback* */
	@Field(8) 
	public Pointer<GTlsDatabaseClass.lookup_certificate_issuer_finish_callback > lookup_certificate_issuer_finish() {
		return this.io.getPointerField(this, 8);
	}
	/** C type : lookup_certificate_issuer_finish_callback* */
	@Field(8) 
	public GTlsDatabaseClass lookup_certificate_issuer_finish(Pointer<GTlsDatabaseClass.lookup_certificate_issuer_finish_callback > lookup_certificate_issuer_finish) {
		this.io.setPointerField(this, 8, lookup_certificate_issuer_finish);
		return this;
	}
	/** C type : lookup_certificates_issued_by_callback* */
	@Field(9) 
	public Pointer<GTlsDatabaseClass.lookup_certificates_issued_by_callback > lookup_certificates_issued_by() {
		return this.io.getPointerField(this, 9);
	}
	/** C type : lookup_certificates_issued_by_callback* */
	@Field(9) 
	public GTlsDatabaseClass lookup_certificates_issued_by(Pointer<GTlsDatabaseClass.lookup_certificates_issued_by_callback > lookup_certificates_issued_by) {
		this.io.setPointerField(this, 9, lookup_certificates_issued_by);
		return this;
	}
	/** C type : lookup_certificates_issued_by_async_callback* */
	@Field(10) 
	public Pointer<GTlsDatabaseClass.lookup_certificates_issued_by_async_callback > lookup_certificates_issued_by_async() {
		return this.io.getPointerField(this, 10);
	}
	/** C type : lookup_certificates_issued_by_async_callback* */
	@Field(10) 
	public GTlsDatabaseClass lookup_certificates_issued_by_async(Pointer<GTlsDatabaseClass.lookup_certificates_issued_by_async_callback > lookup_certificates_issued_by_async) {
		this.io.setPointerField(this, 10, lookup_certificates_issued_by_async);
		return this;
	}
	/** C type : lookup_certificates_issued_by_finish_callback* */
	@Field(11) 
	public Pointer<GTlsDatabaseClass.lookup_certificates_issued_by_finish_callback > lookup_certificates_issued_by_finish() {
		return this.io.getPointerField(this, 11);
	}
	/** C type : lookup_certificates_issued_by_finish_callback* */
	@Field(11) 
	public GTlsDatabaseClass lookup_certificates_issued_by_finish(Pointer<GTlsDatabaseClass.lookup_certificates_issued_by_finish_callback > lookup_certificates_issued_by_finish) {
		this.io.setPointerField(this, 11, lookup_certificates_issued_by_finish);
		return this;
	}
	/**
	 * Padding for future expansion<br>
	 * C type : gpointer[16]
	 */
	@Array({16}) 
	@Field(12) 
	public Pointer<gpointer > padding() {
		return this.io.getPointerField(this, 12);
	}
	/** <i>native declaration : glib-2.0/gio/gtlsdatabase.h:26</i> */
	public static abstract class GTlsCertificateFlags_callback extends Callback<GTlsCertificateFlags_callback > {
		public final void apply(Pointer<GTlsDatabase > self, Pointer<GTlsCertificate > chain, Pointer<Byte > purpose, Pointer<GSocketConnectable > identity, Pointer<GTlsInteraction > interaction, IntValuedEnum<GTlsDatabaseVerifyFlags > flags, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
			apply(Pointer.getPeer(self), Pointer.getPeer(chain), Pointer.getPeer(purpose), Pointer.getPeer(identity), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long self, @Ptr long chain, @Ptr long purpose, @Ptr long identity, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gtlsdatabase.h:27</i> */
	public static abstract class verify_chain_async_callback extends Callback<verify_chain_async_callback > {
		public final void apply(Pointer<GTlsDatabase > self, Pointer<GTlsCertificate > chain, Pointer<Byte > purpose, Pointer<GSocketConnectable > identity, Pointer<GTlsInteraction > interaction, IntValuedEnum<GTlsDatabaseVerifyFlags > flags, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(self), Pointer.getPeer(chain), Pointer.getPeer(purpose), Pointer.getPeer(identity), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long self, @Ptr long chain, @Ptr long purpose, @Ptr long identity, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gtlsdatabase.h:28</i> */
	public static abstract class GTlsCertificateFlags_callback2 extends Callback<GTlsCertificateFlags_callback2 > {
		public final void apply(Pointer<GTlsDatabase > self, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			apply(Pointer.getPeer(self), Pointer.getPeer(result), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long self, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gtlsdatabase.h:29</i> */
	public static abstract class create_certificate_handle_callback extends Callback<create_certificate_handle_callback > {
		public final Pointer<Byte > apply(Pointer<GTlsDatabase > self, Pointer<GTlsCertificate > certificate) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(self), Pointer.getPeer(certificate)), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long self, @Ptr long certificate);
	};
	/** <i>native declaration : glib-2.0/gio/gtlsdatabase.h:30</i> */
	public static abstract class lookup_certificate_for_handle_callback extends Callback<lookup_certificate_for_handle_callback > {
		public final Pointer<GTlsCertificate > apply(Pointer<GTlsDatabase > self, Pointer<Byte > handle, Pointer<GTlsInteraction > interaction, IntValuedEnum<GTlsDatabaseLookupFlags > flags, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(self), Pointer.getPeer(handle), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GTlsCertificate.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long self, @Ptr long handle, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gtlsdatabase.h:31</i> */
	public static abstract class lookup_certificate_for_handle_async_callback extends Callback<lookup_certificate_for_handle_async_callback > {
		public final void apply(Pointer<GTlsDatabase > self, Pointer<Byte > handle, Pointer<GTlsInteraction > interaction, IntValuedEnum<GTlsDatabaseLookupFlags > flags, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(self), Pointer.getPeer(handle), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long self, @Ptr long handle, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gtlsdatabase.h:32</i> */
	public static abstract class lookup_certificate_for_handle_finish_callback extends Callback<lookup_certificate_for_handle_finish_callback > {
		public final Pointer<GTlsCertificate > apply(Pointer<GTlsDatabase > self, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(self), Pointer.getPeer(result), Pointer.getPeer(error)), GTlsCertificate.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long self, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gtlsdatabase.h:33</i> */
	public static abstract class lookup_certificate_issuer_callback extends Callback<lookup_certificate_issuer_callback > {
		public final Pointer<GTlsCertificate > apply(Pointer<GTlsDatabase > self, Pointer<GTlsCertificate > certificate, Pointer<GTlsInteraction > interaction, IntValuedEnum<GTlsDatabaseLookupFlags > flags, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(self), Pointer.getPeer(certificate), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GTlsCertificate.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long self, @Ptr long certificate, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gtlsdatabase.h:34</i> */
	public static abstract class lookup_certificate_issuer_async_callback extends Callback<lookup_certificate_issuer_async_callback > {
		public final void apply(Pointer<GTlsDatabase > self, Pointer<GTlsCertificate > certificate, Pointer<GTlsInteraction > interaction, IntValuedEnum<GTlsDatabaseLookupFlags > flags, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(self), Pointer.getPeer(certificate), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long self, @Ptr long certificate, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gtlsdatabase.h:35</i> */
	public static abstract class lookup_certificate_issuer_finish_callback extends Callback<lookup_certificate_issuer_finish_callback > {
		public final Pointer<GTlsCertificate > apply(Pointer<GTlsDatabase > self, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(self), Pointer.getPeer(result), Pointer.getPeer(error)), GTlsCertificate.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long self, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gtlsdatabase.h:36</i> */
	public static abstract class lookup_certificates_issued_by_callback extends Callback<lookup_certificates_issued_by_callback > {
		public final Pointer apply(Pointer<GTlsDatabase > self, Pointer issuer_raw_dn, Pointer<GTlsInteraction > interaction, IntValuedEnum<GTlsDatabaseLookupFlags > flags, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(self), Pointer.getPeer(issuer_raw_dn), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(error)));
		}
		@Ptr 
		public abstract long apply(@Ptr long self, @Ptr long issuer_raw_dn, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gtlsdatabase.h:37</i> */
	public static abstract class lookup_certificates_issued_by_async_callback extends Callback<lookup_certificates_issued_by_async_callback > {
		public final void apply(Pointer<GTlsDatabase > self, Pointer issuer_raw_dn, Pointer<GTlsInteraction > interaction, IntValuedEnum<GTlsDatabaseLookupFlags > flags, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(self), Pointer.getPeer(issuer_raw_dn), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long self, @Ptr long issuer_raw_dn, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gtlsdatabase.h:38</i> */
	public static abstract class lookup_certificates_issued_by_finish_callback extends Callback<lookup_certificates_issued_by_finish_callback > {
		public final Pointer apply(Pointer<GTlsDatabase > self, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(self), Pointer.getPeer(result), Pointer.getPeer(error)));
		}
		@Ptr 
		public abstract long apply(@Ptr long self, @Ptr long result, @Ptr long error);
	};
}
