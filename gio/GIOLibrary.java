package gio;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.TypedPointer;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.cpp.CPPRuntime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>GIO</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
@Runtime(CPPRuntime.class) 
public class GIOLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:14</i>
	 */
	public enum GAppInfoCreateFlags implements IntValuedEnum<GAppInfoCreateFlags > {
		/** < nick=none > */
		G_APP_INFO_CREATE_NONE(0),
		/** < nick=needs-terminal > */
		G_APP_INFO_CREATE_NEEDS_TERMINAL((1 << 0)),
		/** < nick=supports-uris > */
		G_APP_INFO_CREATE_SUPPORTS_URIS((1 << 1)),
		/** < nick=supports-startup-notification > */
		G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION((1 << 2));
		GAppInfoCreateFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GAppInfoCreateFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GAppInfoCreateFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:27</i>
	 */
	public enum GConverterFlags implements IntValuedEnum<GConverterFlags > {
		/** < nick=none > */
		G_CONVERTER_NO_FLAGS(0),
		/** < nick=input-at-end > */
		G_CONVERTER_INPUT_AT_END((1 << 0)),
		/** < nick=flush > */
		G_CONVERTER_FLUSH((1 << 1));
		GConverterFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GConverterFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GConverterFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:42</i>
	 */
	public enum GConverterResult implements IntValuedEnum<GConverterResult > {
		/** < nick=error > */
		G_CONVERTER_ERROR(0),
		/** < nick=converted > */
		G_CONVERTER_CONVERTED(1),
		/** < nick=finished > */
		G_CONVERTER_FINISHED(2),
		/** < nick=flushed > */
		G_CONVERTER_FLUSHED(3);
		GConverterResult(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GConverterResult > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GConverterResult > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:56</i>
	 */
	public enum GDataStreamByteOrder implements IntValuedEnum<GDataStreamByteOrder > {
		G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN(0),
		G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN(1),
		G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN(2);
		GDataStreamByteOrder(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDataStreamByteOrder > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDataStreamByteOrder > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:70</i>
	 */
	public enum GDataStreamNewlineType implements IntValuedEnum<GDataStreamNewlineType > {
		G_DATA_STREAM_NEWLINE_TYPE_LF(0),
		G_DATA_STREAM_NEWLINE_TYPE_CR(1),
		G_DATA_STREAM_NEWLINE_TYPE_CR_LF(2),
		G_DATA_STREAM_NEWLINE_TYPE_ANY(3);
		GDataStreamNewlineType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDataStreamNewlineType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDataStreamNewlineType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:96</i>
	 */
	public enum GFileAttributeType implements IntValuedEnum<GFileAttributeType > {
		G_FILE_ATTRIBUTE_TYPE_INVALID(0),
		G_FILE_ATTRIBUTE_TYPE_STRING(1),
		/** zero terminated string of non-zero bytes */
		G_FILE_ATTRIBUTE_TYPE_BYTE_STRING(2),
		G_FILE_ATTRIBUTE_TYPE_BOOLEAN(3),
		G_FILE_ATTRIBUTE_TYPE_UINT32(4),
		G_FILE_ATTRIBUTE_TYPE_INT32(5),
		G_FILE_ATTRIBUTE_TYPE_UINT64(6),
		G_FILE_ATTRIBUTE_TYPE_INT64(7),
		G_FILE_ATTRIBUTE_TYPE_OBJECT(8),
		G_FILE_ATTRIBUTE_TYPE_STRINGV(9);
		GFileAttributeType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GFileAttributeType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GFileAttributeType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:108</i>
	 */
	public enum GFileAttributeInfoFlags implements IntValuedEnum<GFileAttributeInfoFlags > {
		G_FILE_ATTRIBUTE_INFO_NONE(0),
		G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE((1 << 0)),
		G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED((1 << 1));
		GFileAttributeInfoFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GFileAttributeInfoFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GFileAttributeInfoFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:120</i>
	 */
	public enum GFileAttributeStatus implements IntValuedEnum<GFileAttributeStatus > {
		G_FILE_ATTRIBUTE_STATUS_UNSET(0),
		G_FILE_ATTRIBUTE_STATUS_SET(1),
		G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING(2);
		GFileAttributeStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GFileAttributeStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GFileAttributeStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:130</i>
	 */
	public enum GFileQueryInfoFlags implements IntValuedEnum<GFileQueryInfoFlags > {
		G_FILE_QUERY_INFO_NONE(0),
		/** < nick=nofollow-symlinks > */
		G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS((1 << 0));
		GFileQueryInfoFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GFileQueryInfoFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GFileQueryInfoFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:150</i>
	 */
	public enum GFileCreateFlags implements IntValuedEnum<GFileCreateFlags > {
		G_FILE_CREATE_NONE(0),
		G_FILE_CREATE_PRIVATE((1 << 0)),
		G_FILE_CREATE_REPLACE_DESTINATION((1 << 1));
		GFileCreateFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GFileCreateFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GFileCreateFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:171</i>
	 */
	public enum GFileMeasureFlags implements IntValuedEnum<GFileMeasureFlags > {
		G_FILE_MEASURE_NONE(0),
		G_FILE_MEASURE_REPORT_ANY_ERROR((1 << 1)),
		G_FILE_MEASURE_APPARENT_SIZE((1 << 2)),
		G_FILE_MEASURE_NO_XDEV((1 << 3));
		GFileMeasureFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GFileMeasureFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GFileMeasureFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:179</i>
	 */
	public enum GMountMountFlags implements IntValuedEnum<GMountMountFlags > {
		G_MOUNT_MOUNT_NONE(0);
		GMountMountFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GMountMountFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GMountMountFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:190</i>
	 */
	public enum GMountUnmountFlags implements IntValuedEnum<GMountUnmountFlags > {
		G_MOUNT_UNMOUNT_NONE(0),
		G_MOUNT_UNMOUNT_FORCE((1 << 0));
		GMountUnmountFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GMountUnmountFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GMountUnmountFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:199</i>
	 */
	public enum GDriveStartFlags implements IntValuedEnum<GDriveStartFlags > {
		G_DRIVE_START_NONE(0);
		GDriveStartFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDriveStartFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDriveStartFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:224</i>
	 */
	public enum GDriveStartStopType implements IntValuedEnum<GDriveStartStopType > {
		G_DRIVE_START_STOP_TYPE_UNKNOWN(0),
		G_DRIVE_START_STOP_TYPE_SHUTDOWN(1),
		G_DRIVE_START_STOP_TYPE_NETWORK(2),
		G_DRIVE_START_STOP_TYPE_MULTIDISK(3),
		G_DRIVE_START_STOP_TYPE_PASSWORD(4);
		GDriveStartStopType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDriveStartStopType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDriveStartStopType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:244</i>
	 */
	public enum GFileCopyFlags implements IntValuedEnum<GFileCopyFlags > {
		/** < nick=none > */
		G_FILE_COPY_NONE(0),
		G_FILE_COPY_OVERWRITE((1 << 0)),
		G_FILE_COPY_BACKUP((1 << 1)),
		G_FILE_COPY_NOFOLLOW_SYMLINKS((1 << 2)),
		G_FILE_COPY_ALL_METADATA((1 << 3)),
		G_FILE_COPY_NO_FALLBACK_FOR_MOVE((1 << 4)),
		G_FILE_COPY_TARGET_DEFAULT_PERMS((1 << 5));
		GFileCopyFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GFileCopyFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GFileCopyFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:263</i>
	 */
	public enum GFileMonitorFlags implements IntValuedEnum<GFileMonitorFlags > {
		G_FILE_MONITOR_NONE(0),
		G_FILE_MONITOR_WATCH_MOUNTS((1 << 0)),
		G_FILE_MONITOR_SEND_MOVED((1 << 1)),
		G_FILE_MONITOR_WATCH_HARD_LINKS((1 << 2));
		GFileMonitorFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GFileMonitorFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GFileMonitorFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:285</i>
	 */
	public enum GFileType implements IntValuedEnum<GFileType > {
		G_FILE_TYPE_UNKNOWN(0),
		G_FILE_TYPE_REGULAR(1),
		G_FILE_TYPE_DIRECTORY(2),
		G_FILE_TYPE_SYMBOLIC_LINK(3),
		/** socket, fifo, blockdev, chardev */
		G_FILE_TYPE_SPECIAL(4),
		G_FILE_TYPE_SHORTCUT(5),
		G_FILE_TYPE_MOUNTABLE(6);
		GFileType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GFileType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GFileType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:299</i>
	 */
	public enum GFilesystemPreviewType implements IntValuedEnum<GFilesystemPreviewType > {
		G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS(0),
		G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL(1),
		G_FILESYSTEM_PREVIEW_TYPE_NEVER(2);
		GFilesystemPreviewType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GFilesystemPreviewType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GFilesystemPreviewType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:321</i>
	 */
	public enum GFileMonitorEvent implements IntValuedEnum<GFileMonitorEvent > {
		G_FILE_MONITOR_EVENT_CHANGED(0),
		G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT(1),
		G_FILE_MONITOR_EVENT_DELETED(2),
		G_FILE_MONITOR_EVENT_CREATED(3),
		G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED(4),
		G_FILE_MONITOR_EVENT_PRE_UNMOUNT(5),
		G_FILE_MONITOR_EVENT_UNMOUNTED(6),
		G_FILE_MONITOR_EVENT_MOVED(7);
		GFileMonitorEvent(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GFileMonitorEvent > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GFileMonitorEvent > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:426</i>
	 */
	public enum GIOErrorEnum implements IntValuedEnum<GIOErrorEnum > {
		G_IO_ERROR_FAILED(0),
		G_IO_ERROR_NOT_FOUND(1),
		G_IO_ERROR_EXISTS(2),
		G_IO_ERROR_IS_DIRECTORY(3),
		G_IO_ERROR_NOT_DIRECTORY(4),
		G_IO_ERROR_NOT_EMPTY(5),
		G_IO_ERROR_NOT_REGULAR_FILE(6),
		G_IO_ERROR_NOT_SYMBOLIC_LINK(7),
		G_IO_ERROR_NOT_MOUNTABLE_FILE(8),
		G_IO_ERROR_FILENAME_TOO_LONG(9),
		G_IO_ERROR_INVALID_FILENAME(10),
		G_IO_ERROR_TOO_MANY_LINKS(11),
		G_IO_ERROR_NO_SPACE(12),
		G_IO_ERROR_INVALID_ARGUMENT(13),
		G_IO_ERROR_PERMISSION_DENIED(14),
		G_IO_ERROR_NOT_SUPPORTED(15),
		G_IO_ERROR_NOT_MOUNTED(16),
		G_IO_ERROR_ALREADY_MOUNTED(17),
		G_IO_ERROR_CLOSED(18),
		G_IO_ERROR_CANCELLED(19),
		G_IO_ERROR_PENDING(20),
		G_IO_ERROR_READ_ONLY(21),
		G_IO_ERROR_CANT_CREATE_BACKUP(22),
		G_IO_ERROR_WRONG_ETAG(23),
		G_IO_ERROR_TIMED_OUT(24),
		G_IO_ERROR_WOULD_RECURSE(25),
		G_IO_ERROR_BUSY(26),
		G_IO_ERROR_WOULD_BLOCK(27),
		G_IO_ERROR_HOST_NOT_FOUND(28),
		G_IO_ERROR_WOULD_MERGE(29),
		G_IO_ERROR_FAILED_HANDLED(30),
		G_IO_ERROR_TOO_MANY_OPEN_FILES(31),
		G_IO_ERROR_NOT_INITIALIZED(32),
		G_IO_ERROR_ADDRESS_IN_USE(33),
		G_IO_ERROR_PARTIAL_INPUT(34),
		G_IO_ERROR_INVALID_DATA(35),
		G_IO_ERROR_DBUS_ERROR(36),
		G_IO_ERROR_HOST_UNREACHABLE(37),
		G_IO_ERROR_NETWORK_UNREACHABLE(38),
		G_IO_ERROR_CONNECTION_REFUSED(39),
		G_IO_ERROR_PROXY_FAILED(40),
		G_IO_ERROR_PROXY_AUTH_FAILED(41),
		G_IO_ERROR_PROXY_NEED_AUTH(42),
		G_IO_ERROR_PROXY_NOT_ALLOWED(43),
		G_IO_ERROR_BROKEN_PIPE(44);
		GIOErrorEnum(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GIOErrorEnum > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GIOErrorEnum > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:444</i>
	 */
	public enum GAskPasswordFlags implements IntValuedEnum<GAskPasswordFlags > {
		G_ASK_PASSWORD_NEED_PASSWORD((1 << 0)),
		G_ASK_PASSWORD_NEED_USERNAME((1 << 1)),
		G_ASK_PASSWORD_NEED_DOMAIN((1 << 2)),
		G_ASK_PASSWORD_SAVING_SUPPORTED((1 << 3)),
		G_ASK_PASSWORD_ANONYMOUS_SUPPORTED((1 << 4));
		GAskPasswordFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GAskPasswordFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GAskPasswordFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:458</i>
	 */
	public enum GPasswordSave implements IntValuedEnum<GPasswordSave > {
		G_PASSWORD_SAVE_NEVER(0),
		G_PASSWORD_SAVE_FOR_SESSION(1),
		G_PASSWORD_SAVE_PERMANENTLY(2);
		GPasswordSave(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GPasswordSave > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GPasswordSave > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:474</i>
	 */
	public enum GMountOperationResult implements IntValuedEnum<GMountOperationResult > {
		G_MOUNT_OPERATION_HANDLED(0),
		G_MOUNT_OPERATION_ABORTED(1),
		G_MOUNT_OPERATION_UNHANDLED(2);
		GMountOperationResult(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GMountOperationResult > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GMountOperationResult > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:488</i>
	 */
	public enum GOutputStreamSpliceFlags implements IntValuedEnum<GOutputStreamSpliceFlags > {
		G_OUTPUT_STREAM_SPLICE_NONE(0),
		G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE((1 << 0)),
		G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET((1 << 1));
		GOutputStreamSpliceFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GOutputStreamSpliceFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GOutputStreamSpliceFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:506</i>
	 */
	public enum GIOStreamSpliceFlags implements IntValuedEnum<GIOStreamSpliceFlags > {
		G_IO_STREAM_SPLICE_NONE(0),
		G_IO_STREAM_SPLICE_CLOSE_STREAM1((1 << 0)),
		G_IO_STREAM_SPLICE_CLOSE_STREAM2((1 << 1)),
		G_IO_STREAM_SPLICE_WAIT_FOR_BOTH((1 << 2));
		GIOStreamSpliceFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GIOStreamSpliceFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GIOStreamSpliceFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:522</i>
	 */
	public enum GEmblemOrigin implements IntValuedEnum<GEmblemOrigin > {
		G_EMBLEM_ORIGIN_UNKNOWN(0),
		G_EMBLEM_ORIGIN_DEVICE(1),
		G_EMBLEM_ORIGIN_LIVEMETADATA(2),
		G_EMBLEM_ORIGIN_TAG(3);
		GEmblemOrigin(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GEmblemOrigin > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GEmblemOrigin > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:538</i>
	 */
	public enum GResolverError implements IntValuedEnum<GResolverError > {
		G_RESOLVER_ERROR_NOT_FOUND(0),
		G_RESOLVER_ERROR_TEMPORARY_FAILURE(1),
		G_RESOLVER_ERROR_INTERNAL(2);
		GResolverError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GResolverError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GResolverError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:573</i>
	 */
	public enum GResolverRecordType implements IntValuedEnum<GResolverRecordType > {
		G_RESOLVER_RECORD_SRV(1),
		G_RESOLVER_RECORD_MX(2),
		G_RESOLVER_RECORD_TXT(3),
		G_RESOLVER_RECORD_SOA(4),
		G_RESOLVER_RECORD_NS(5);
		GResolverRecordType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GResolverRecordType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GResolverRecordType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:585</i>
	 */
	public enum GResourceError implements IntValuedEnum<GResourceError > {
		G_RESOURCE_ERROR_NOT_FOUND(0),
		G_RESOURCE_ERROR_INTERNAL(1);
		GResourceError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GResourceError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GResourceError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:598</i>
	 */
	public enum GResourceFlags implements IntValuedEnum<GResourceFlags > {
		G_RESOURCE_FLAGS_NONE(0),
		G_RESOURCE_FLAGS_COMPRESSED((1 << 0));
		GResourceFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GResourceFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GResourceFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:608</i>
	 */
	public enum GResourceLookupFlags implements IntValuedEnum<GResourceLookupFlags > {
		G_RESOURCE_LOOKUP_FLAGS_NONE(0);
		GResourceLookupFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GResourceLookupFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GResourceLookupFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:625</i>
	 */
	public enum GSocketFamily implements IntValuedEnum<GSocketFamily > {
		G_SOCKET_FAMILY_INVALID(0),
		G_SOCKET_FAMILY_UNIX(1),
		G_SOCKET_FAMILY_IPV4(2),
		G_SOCKET_FAMILY_IPV6(30);
		GSocketFamily(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GSocketFamily > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GSocketFamily > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:643</i>
	 */
	public enum GSocketType implements IntValuedEnum<GSocketType > {
		G_SOCKET_TYPE_INVALID(0),
		G_SOCKET_TYPE_STREAM(1),
		G_SOCKET_TYPE_DATAGRAM(2),
		G_SOCKET_TYPE_SEQPACKET(3);
		GSocketType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GSocketType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GSocketType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:664</i>
	 */
	public enum GSocketMsgFlags implements IntValuedEnum<GSocketMsgFlags > {
		G_SOCKET_MSG_NONE(0),
		G_SOCKET_MSG_OOB(1),
		G_SOCKET_MSG_PEEK(2),
		G_SOCKET_MSG_DONTROUTE(4);
		GSocketMsgFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GSocketMsgFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GSocketMsgFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:686</i>
	 */
	public enum GSocketProtocol implements IntValuedEnum<GSocketProtocol > {
		G_SOCKET_PROTOCOL_UNKNOWN(-1),
		G_SOCKET_PROTOCOL_DEFAULT(0),
		G_SOCKET_PROTOCOL_TCP(6),
		G_SOCKET_PROTOCOL_UDP(17),
		G_SOCKET_PROTOCOL_SCTP(132);
		GSocketProtocol(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GSocketProtocol > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GSocketProtocol > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:700</i>
	 */
	public enum GZlibCompressorFormat implements IntValuedEnum<GZlibCompressorFormat > {
		G_ZLIB_COMPRESSOR_FORMAT_ZLIB(0),
		G_ZLIB_COMPRESSOR_FORMAT_GZIP(1),
		G_ZLIB_COMPRESSOR_FORMAT_RAW(2);
		GZlibCompressorFormat(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GZlibCompressorFormat > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GZlibCompressorFormat > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:730</i>
	 */
	public enum GUnixSocketAddressType implements IntValuedEnum<GUnixSocketAddressType > {
		G_UNIX_SOCKET_ADDRESS_INVALID(0),
		G_UNIX_SOCKET_ADDRESS_ANONYMOUS(1),
		G_UNIX_SOCKET_ADDRESS_PATH(2),
		G_UNIX_SOCKET_ADDRESS_ABSTRACT(3),
		G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED(4);
		GUnixSocketAddressType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GUnixSocketAddressType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GUnixSocketAddressType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:745</i>
	 */
	public enum GBusType implements IntValuedEnum<GBusType > {
		G_BUS_TYPE_STARTER(-1),
		G_BUS_TYPE_NONE(0),
		G_BUS_TYPE_SYSTEM(1),
		G_BUS_TYPE_SESSION(2);
		GBusType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GBusType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GBusType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:759</i>
	 */
	public enum GBusNameOwnerFlags implements IntValuedEnum<GBusNameOwnerFlags > {
		/** < nick=none > */
		G_BUS_NAME_OWNER_FLAGS_NONE(0),
		/** < nick=allow-replacement > */
		G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT((1 << 0)),
		/** < nick=replace > */
		G_BUS_NAME_OWNER_FLAGS_REPLACE((1 << 1));
		GBusNameOwnerFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GBusNameOwnerFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GBusNameOwnerFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:772</i>
	 */
	public enum GBusNameWatcherFlags implements IntValuedEnum<GBusNameWatcherFlags > {
		G_BUS_NAME_WATCHER_FLAGS_NONE(0),
		G_BUS_NAME_WATCHER_FLAGS_AUTO_START((1 << 0));
		GBusNameWatcherFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GBusNameWatcherFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GBusNameWatcherFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:791</i>
	 */
	public enum GDBusProxyFlags implements IntValuedEnum<GDBusProxyFlags > {
		G_DBUS_PROXY_FLAGS_NONE(0),
		G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES((1 << 0)),
		G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS((1 << 1)),
		G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START((1 << 2)),
		G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES((1 << 3));
		GDBusProxyFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusProxyFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusProxyFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:932</i>
	 */
	public enum GDBusError implements IntValuedEnum<GDBusError > {
		/**
		 * Well-known errors in the org.freedesktop.DBus.Error namespace<br>
		 * org.freedesktop.DBus.Error.Failed
		 */
		G_DBUS_ERROR_FAILED(0),
		/** org.freedesktop.DBus.Error.NoMemory */
		G_DBUS_ERROR_NO_MEMORY(1),
		/** org.freedesktop.DBus.Error.ServiceUnknown */
		G_DBUS_ERROR_SERVICE_UNKNOWN(2),
		/** org.freedesktop.DBus.Error.NameHasNoOwner */
		G_DBUS_ERROR_NAME_HAS_NO_OWNER(3),
		/** org.freedesktop.DBus.Error.NoReply */
		G_DBUS_ERROR_NO_REPLY(4),
		/** org.freedesktop.DBus.Error.IOError */
		G_DBUS_ERROR_IO_ERROR(5),
		/** org.freedesktop.DBus.Error.BadAddress */
		G_DBUS_ERROR_BAD_ADDRESS(6),
		/** org.freedesktop.DBus.Error.NotSupported */
		G_DBUS_ERROR_NOT_SUPPORTED(7),
		/** org.freedesktop.DBus.Error.LimitsExceeded */
		G_DBUS_ERROR_LIMITS_EXCEEDED(8),
		/** org.freedesktop.DBus.Error.AccessDenied */
		G_DBUS_ERROR_ACCESS_DENIED(9),
		/** org.freedesktop.DBus.Error.AuthFailed */
		G_DBUS_ERROR_AUTH_FAILED(10),
		/** org.freedesktop.DBus.Error.NoServer */
		G_DBUS_ERROR_NO_SERVER(11),
		/** org.freedesktop.DBus.Error.Timeout */
		G_DBUS_ERROR_TIMEOUT(12),
		/** org.freedesktop.DBus.Error.NoNetwork */
		G_DBUS_ERROR_NO_NETWORK(13),
		/** org.freedesktop.DBus.Error.AddressInUse */
		G_DBUS_ERROR_ADDRESS_IN_USE(14),
		/** org.freedesktop.DBus.Error.Disconnected */
		G_DBUS_ERROR_DISCONNECTED(15),
		/** org.freedesktop.DBus.Error.InvalidArgs */
		G_DBUS_ERROR_INVALID_ARGS(16),
		/** org.freedesktop.DBus.Error.FileNotFound */
		G_DBUS_ERROR_FILE_NOT_FOUND(17),
		/** org.freedesktop.DBus.Error.FileExists */
		G_DBUS_ERROR_FILE_EXISTS(18),
		/** org.freedesktop.DBus.Error.UnknownMethod */
		G_DBUS_ERROR_UNKNOWN_METHOD(19),
		/** org.freedesktop.DBus.Error.TimedOut */
		G_DBUS_ERROR_TIMED_OUT(20),
		/** org.freedesktop.DBus.Error.MatchRuleNotFound */
		G_DBUS_ERROR_MATCH_RULE_NOT_FOUND(21),
		/** org.freedesktop.DBus.Error.MatchRuleInvalid */
		G_DBUS_ERROR_MATCH_RULE_INVALID(22),
		/** org.freedesktop.DBus.Error.Spawn.ExecFailed */
		G_DBUS_ERROR_SPAWN_EXEC_FAILED(23),
		/** org.freedesktop.DBus.Error.Spawn.ForkFailed */
		G_DBUS_ERROR_SPAWN_FORK_FAILED(24),
		/** org.freedesktop.DBus.Error.Spawn.ChildExited */
		G_DBUS_ERROR_SPAWN_CHILD_EXITED(25),
		/** org.freedesktop.DBus.Error.Spawn.ChildSignaled */
		G_DBUS_ERROR_SPAWN_CHILD_SIGNALED(26),
		/** org.freedesktop.DBus.Error.Spawn.Failed */
		G_DBUS_ERROR_SPAWN_FAILED(27),
		/** org.freedesktop.DBus.Error.Spawn.FailedToSetup */
		G_DBUS_ERROR_SPAWN_SETUP_FAILED(28),
		/** org.freedesktop.DBus.Error.Spawn.ConfigInvalid */
		G_DBUS_ERROR_SPAWN_CONFIG_INVALID(29),
		/** org.freedesktop.DBus.Error.Spawn.ServiceNotValid */
		G_DBUS_ERROR_SPAWN_SERVICE_INVALID(30),
		/** org.freedesktop.DBus.Error.Spawn.ServiceNotFound */
		G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND(31),
		/** org.freedesktop.DBus.Error.Spawn.PermissionsInvalid */
		G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID(32),
		/** org.freedesktop.DBus.Error.Spawn.FileInvalid */
		G_DBUS_ERROR_SPAWN_FILE_INVALID(33),
		/** org.freedesktop.DBus.Error.Spawn.NoMemory */
		G_DBUS_ERROR_SPAWN_NO_MEMORY(34),
		/** org.freedesktop.DBus.Error.UnixProcessIdUnknown */
		G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN(35),
		/** org.freedesktop.DBus.Error.InvalidSignature */
		G_DBUS_ERROR_INVALID_SIGNATURE(36),
		/** org.freedesktop.DBus.Error.InvalidFileContent */
		G_DBUS_ERROR_INVALID_FILE_CONTENT(37),
		/** org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown */
		G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN(38),
		/** org.freedesktop.DBus.Error.AdtAuditDataUnknown */
		G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN(39),
		/** org.freedesktop.DBus.Error.ObjectPathInUse */
		G_DBUS_ERROR_OBJECT_PATH_IN_USE(40);
		GDBusError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:955</i>
	 */
	public enum GDBusConnectionFlags implements IntValuedEnum<GDBusConnectionFlags > {
		G_DBUS_CONNECTION_FLAGS_NONE(0),
		G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT((1 << 0)),
		G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER((1 << 1)),
		G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS((1 << 2)),
		G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION((1 << 3)),
		G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING((1 << 4));
		GDBusConnectionFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusConnectionFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusConnectionFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:967</i>
	 */
	public enum GDBusCapabilityFlags implements IntValuedEnum<GDBusCapabilityFlags > {
		G_DBUS_CAPABILITY_FLAGS_NONE(0),
		G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING((1 << 0));
		GDBusCapabilityFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusCapabilityFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusCapabilityFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:980</i>
	 */
	public enum GDBusCallFlags implements IntValuedEnum<GDBusCallFlags > {
		G_DBUS_CALL_FLAGS_NONE(0),
		G_DBUS_CALL_FLAGS_NO_AUTO_START((1 << 0));
		GDBusCallFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusCallFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusCallFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:997</i>
	 */
	public enum GDBusMessageType implements IntValuedEnum<GDBusMessageType > {
		G_DBUS_MESSAGE_TYPE_INVALID(0),
		G_DBUS_MESSAGE_TYPE_METHOD_CALL(1),
		G_DBUS_MESSAGE_TYPE_METHOD_RETURN(2),
		G_DBUS_MESSAGE_TYPE_ERROR(3),
		G_DBUS_MESSAGE_TYPE_SIGNAL(4);
		GDBusMessageType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusMessageType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusMessageType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1011</i>
	 */
	public enum GDBusMessageFlags implements IntValuedEnum<GDBusMessageFlags > {
		G_DBUS_MESSAGE_FLAGS_NONE(0),
		G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED((1 << 0)),
		G_DBUS_MESSAGE_FLAGS_NO_AUTO_START((1 << 1));
		GDBusMessageFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusMessageFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusMessageFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1038</i>
	 */
	public enum GDBusMessageHeaderField implements IntValuedEnum<GDBusMessageHeaderField > {
		G_DBUS_MESSAGE_HEADER_FIELD_INVALID(0),
		G_DBUS_MESSAGE_HEADER_FIELD_PATH(1),
		G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE(2),
		G_DBUS_MESSAGE_HEADER_FIELD_MEMBER(3),
		G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME(4),
		G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL(5),
		G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION(6),
		G_DBUS_MESSAGE_HEADER_FIELD_SENDER(7),
		G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE(8),
		G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS(9);
		GDBusMessageHeaderField(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusMessageHeaderField > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusMessageHeaderField > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1051</i>
	 */
	public enum GDBusPropertyInfoFlags implements IntValuedEnum<GDBusPropertyInfoFlags > {
		G_DBUS_PROPERTY_INFO_FLAGS_NONE(0),
		G_DBUS_PROPERTY_INFO_FLAGS_READABLE((1 << 0)),
		G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE((1 << 1));
		GDBusPropertyInfoFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusPropertyInfoFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusPropertyInfoFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1064</i>
	 */
	public enum GDBusSubtreeFlags implements IntValuedEnum<GDBusSubtreeFlags > {
		G_DBUS_SUBTREE_FLAGS_NONE(0),
		G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES((1 << 0));
		GDBusSubtreeFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusSubtreeFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusSubtreeFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1080</i>
	 */
	public enum GDBusServerFlags implements IntValuedEnum<GDBusServerFlags > {
		G_DBUS_SERVER_FLAGS_NONE(0),
		G_DBUS_SERVER_FLAGS_RUN_IN_THREAD((1 << 0)),
		G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS((1 << 1));
		GDBusServerFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusServerFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusServerFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1100</i>
	 */
	public enum GDBusSignalFlags implements IntValuedEnum<GDBusSignalFlags > {
		G_DBUS_SIGNAL_FLAGS_NONE(0),
		G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE((1 << 0)),
		G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE((1 << 1)),
		G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH((1 << 2));
		GDBusSignalFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusSignalFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusSignalFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1113</i>
	 */
	public enum GDBusSendMessageFlags implements IntValuedEnum<GDBusSendMessageFlags > {
		G_DBUS_SEND_MESSAGE_FLAGS_NONE(0),
		G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL((1 << 0));
		GDBusSendMessageFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusSendMessageFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusSendMessageFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1128</i>
	 */
	public enum GCredentialsType implements IntValuedEnum<GCredentialsType > {
		G_CREDENTIALS_TYPE_INVALID(0),
		G_CREDENTIALS_TYPE_LINUX_UCRED(1),
		G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED(2),
		G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED(3);
		GCredentialsType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GCredentialsType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GCredentialsType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1139</i>
	 */
	public enum GDBusMessageByteOrder implements IntValuedEnum<GDBusMessageByteOrder > {
		G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN('B'),
		G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN('l');
		GDBusMessageByteOrder(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusMessageByteOrder > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusMessageByteOrder > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1182</i>
	 */
	public enum GApplicationFlags implements IntValuedEnum<GApplicationFlags > {
		G_APPLICATION_FLAGS_NONE(0),
		G_APPLICATION_IS_SERVICE((1 << 0)),
		G_APPLICATION_IS_LAUNCHER((1 << 1)),
		G_APPLICATION_HANDLES_OPEN((1 << 2)),
		G_APPLICATION_HANDLES_COMMAND_LINE((1 << 3)),
		G_APPLICATION_SEND_ENVIRONMENT((1 << 4)),
		G_APPLICATION_NON_UNIQUE((1 << 5));
		GApplicationFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GApplicationFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GApplicationFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1210</i>
	 */
	public enum GTlsError implements IntValuedEnum<GTlsError > {
		G_TLS_ERROR_UNAVAILABLE(0),
		G_TLS_ERROR_MISC(1),
		G_TLS_ERROR_BAD_CERTIFICATE(2),
		G_TLS_ERROR_NOT_TLS(3),
		G_TLS_ERROR_HANDSHAKE(4),
		G_TLS_ERROR_CERTIFICATE_REQUIRED(5),
		G_TLS_ERROR_EOF(6);
		GTlsError(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTlsError > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTlsError > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1244</i>
	 */
	public enum GTlsCertificateFlags implements IntValuedEnum<GTlsCertificateFlags > {
		G_TLS_CERTIFICATE_UNKNOWN_CA((1 << 0)),
		G_TLS_CERTIFICATE_BAD_IDENTITY((1 << 1)),
		G_TLS_CERTIFICATE_NOT_ACTIVATED((1 << 2)),
		G_TLS_CERTIFICATE_EXPIRED((1 << 3)),
		G_TLS_CERTIFICATE_REVOKED((1 << 4)),
		G_TLS_CERTIFICATE_INSECURE((1 << 5)),
		G_TLS_CERTIFICATE_GENERIC_ERROR((1 << 6)),
		G_TLS_CERTIFICATE_VALIDATE_ALL(0x007f);
		GTlsCertificateFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTlsCertificateFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTlsCertificateFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1257</i>
	 */
	public enum GTlsAuthenticationMode implements IntValuedEnum<GTlsAuthenticationMode > {
		G_TLS_AUTHENTICATION_NONE(0),
		G_TLS_AUTHENTICATION_REQUESTED(1),
		G_TLS_AUTHENTICATION_REQUIRED(2);
		GTlsAuthenticationMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTlsAuthenticationMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTlsAuthenticationMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1271</i>
	 */
	public enum GTlsRehandshakeMode implements IntValuedEnum<GTlsRehandshakeMode > {
		G_TLS_REHANDSHAKE_NEVER(0),
		G_TLS_REHANDSHAKE_SAFELY(1),
		G_TLS_REHANDSHAKE_UNSAFELY(2);
		GTlsRehandshakeMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTlsRehandshakeMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTlsRehandshakeMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1277</i>
	 */
	public enum GTlsPasswordFlags implements IntValuedEnum<GTlsPasswordFlags > {
		G_TLS_PASSWORD_NONE(0),
		G_TLS_PASSWORD_RETRY(1 << 1),
		G_TLS_PASSWORD_MANY_TRIES(1 << 2),
		G_TLS_PASSWORD_FINAL_TRY(1 << 3);
		GTlsPasswordFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTlsPasswordFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTlsPasswordFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1294</i>
	 */
	public enum GTlsInteractionResult implements IntValuedEnum<GTlsInteractionResult > {
		G_TLS_INTERACTION_UNHANDLED(0),
		G_TLS_INTERACTION_HANDLED(1),
		G_TLS_INTERACTION_FAILED(2);
		GTlsInteractionResult(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTlsInteractionResult > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTlsInteractionResult > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1308</i>
	 */
	public enum GDBusInterfaceSkeletonFlags implements IntValuedEnum<GDBusInterfaceSkeletonFlags > {
		G_DBUS_INTERFACE_SKELETON_FLAGS_NONE(0),
		G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD((1 << 0));
		GDBusInterfaceSkeletonFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusInterfaceSkeletonFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusInterfaceSkeletonFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1322</i>
	 */
	public enum GDBusObjectManagerClientFlags implements IntValuedEnum<GDBusObjectManagerClientFlags > {
		G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE(0),
		G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START((1 << 0));
		GDBusObjectManagerClientFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GDBusObjectManagerClientFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GDBusObjectManagerClientFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1331</i>
	 */
	public enum GTlsDatabaseVerifyFlags implements IntValuedEnum<GTlsDatabaseVerifyFlags > {
		G_TLS_DATABASE_VERIFY_NONE(0);
		GTlsDatabaseVerifyFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTlsDatabaseVerifyFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTlsDatabaseVerifyFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1345</i>
	 */
	public enum GTlsDatabaseLookupFlags implements IntValuedEnum<GTlsDatabaseLookupFlags > {
		G_TLS_DATABASE_LOOKUP_NONE(0),
		G_TLS_DATABASE_LOOKUP_KEYPAIR(1);
		GTlsDatabaseLookupFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTlsDatabaseLookupFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTlsDatabaseLookupFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1358</i>
	 */
	public enum GIOModuleScopeFlags implements IntValuedEnum<GIOModuleScopeFlags > {
		G_IO_MODULE_SCOPE_NONE(0),
		G_IO_MODULE_SCOPE_BLOCK_DUPLICATES(1);
		GIOModuleScopeFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GIOModuleScopeFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GIOModuleScopeFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1392</i>
	 */
	public enum GSocketClientEvent implements IntValuedEnum<GSocketClientEvent > {
		G_SOCKET_CLIENT_RESOLVING(0),
		G_SOCKET_CLIENT_RESOLVED(1),
		G_SOCKET_CLIENT_CONNECTING(2),
		G_SOCKET_CLIENT_CONNECTED(3),
		G_SOCKET_CLIENT_PROXY_NEGOTIATING(4),
		G_SOCKET_CLIENT_PROXY_NEGOTIATED(5),
		G_SOCKET_CLIENT_TLS_HANDSHAKING(6),
		G_SOCKET_CLIENT_TLS_HANDSHAKED(7),
		G_SOCKET_CLIENT_COMPLETE(8);
		GSocketClientEvent(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GSocketClientEvent > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GSocketClientEvent > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gioenums.h:1401</i>
	 */
	public enum GTestDBusFlags implements IntValuedEnum<GTestDBusFlags > {
		G_TEST_DBUS_NONE(0);
		GTestDBusFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTestDBusFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTestDBusFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:165</i>
	 */
	public enum GSettingsBindFlags implements IntValuedEnum<GSettingsBindFlags > {
		G_SETTINGS_BIND_DEFAULT(0),
		G_SETTINGS_BIND_GET((1 << 0)),
		G_SETTINGS_BIND_SET((1 << 1)),
		G_SETTINGS_BIND_NO_SENSITIVITY((1 << 2)),
		G_SETTINGS_BIND_GET_NO_CHANGES((1 << 3)),
		G_SETTINGS_BIND_INVERT_BOOLEAN((1 << 4));
		GSettingsBindFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GSettingsBindFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GSettingsBindFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_TIME_ACCESS_USEC = (String)"time::access-usec";
	/** <i>native declaration : glib-2.0/gio/gvolume.h</i> */
	public static final String G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT = (String)"nfs-mount";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_PREVIEW_ICON = (String)"preview::icon";
	/** <i>native declaration : glib-2.0/gio/gvolume.h</i> */
	public static final String G_VOLUME_IDENTIFIER_KIND_CLASS = (String)"class";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_THUMBNAILING_FAILED = (String)"thumbnail::failed";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_ACCESS_CAN_READ = (String)"access::can-read";
	/** <i>native declaration : glib-2.0/gio/gvolume.h</i> */
	public static final String G_VOLUME_IDENTIFIER_KIND_HAL_UDI = (String)"hal-udi";
	/** <i>native declaration : glib-2.0/gio/gmenumodel.h</i> */
	public static final String G_MENU_LINK_SECTION = (String)"section";
	/** <i>native declaration : glib-2.0/gio/gproxy.h</i> */
	public static final String G_PROXY_EXTENSION_POINT_NAME = (String)"gio-proxy";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_NAME = (String)"standard::name";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_DOS_IS_SYSTEM = (String)"dos::is-system";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_TYPE = (String)"standard::type";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_FILESYSTEM_FREE = (String)"filesystem::free";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = (String)"mountable::can-eject";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_UNIX_RDEV = (String)"unix::rdev";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_COPY_NAME = (String)"standard::copy-name";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = (String)"standard::is-virtual";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_GVFS_BACKEND = (String)"gvfs::backend";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = (String)"standard::is-symlink";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_UNIX_MODE = (String)"unix::mode";
	/** <i>native declaration : glib-2.0/gio/gmenumodel.h</i> */
	public static final String G_MENU_ATTRIBUTE_ACTION = (String)"action";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE = (String)"access::can-write";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_TRASH_DELETION_DATE = (String)"trash::deletion-date";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = (String)"standard::is-hidden";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_TARGET_URI = (String)"standard::target-uri";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_UNIX_GID = (String)"unix::gid";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_TIME_CREATED = (String)"time::created";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP = (String)"standard::is-backup";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE = (String)"mountable::start-stop-type";
	/** <i>native declaration : glib-2.0/gio/gvolume.h</i> */
	public static final String G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = (String)"unix-device";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = (String)"filesystem::use-preview";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_TIME_CREATED_USEC = (String)"time::created-usec";
	/** <i>native declaration : glib-2.0/gio/gmenumodel.h</i> */
	public static final String G_MENU_LINK_SUBMENU = (String)"submenu";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = (String)"unix::block-size";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = (String)"mountable::hal-udi";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE = (String)"access::can-delete";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_TIME_CHANGED = (String)"time::changed";
	/** <i>native declaration : glib-2.0/gio/gmenumodel.h</i> */
	public static final String G_MENU_ATTRIBUTE_TARGET = (String)"target";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT = (String)"trash::item-count";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_UNIX_BLOCKS = (String)"unix::blocks";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = (String)"mountable::is-media-check-automatic";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION = (String)"standard::description";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE = (String)"standard::allocated-size";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_FILESYSTEM_TYPE = (String)"filesystem::type";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_ICON = (String)"standard::icon";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC = (String)"time::modified-usec";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = (String)"unix::is-mountpoint";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = (String)"mountable::can-poll";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME = (String)"access::can-rename";
	/** <i>native declaration : glib-2.0/gio/gmenumodel.h</i> */
	public static final String G_MENU_ATTRIBUTE_LABEL = (String)"label";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = (String)"standard::fast-content-type";
	/** <i>native declaration : glib-2.0/gio/gvolume.h</i> */
	public static final String G_VOLUME_IDENTIFIER_KIND_UUID = (String)"uuid";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_FILESYSTEM_USED = (String)"filesystem::used";
	/** <i>native declaration : glib-2.0/gio/gvfs.h</i> */
	public static final String G_VFS_EXTENSION_POINT_NAME = (String)"gio-vfs";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_TIME_ACCESS = (String)"time::access";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_UNIX_NLINK = (String)"unix::nlink";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = (String)"standard::display-name";
	/** <i>native declaration : glib-2.0/gio/gsettingsbackend.h</i> */
	public static final String G_SETTINGS_BACKEND_EXTENSION_POINT_NAME = (String)"gsettings-backend";
	/** <i>native declaration : glib-2.0/gio/gtlsdatabase.h</i> */
	public static final String G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = (String)"1.3.6.1.5.5.7.3.2";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_TIME_MODIFIED = (String)"time::modified";
	/** <i>native declaration : glib-2.0/gio/gnativevolumemonitor.h</i> */
	public static final String G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = (String)"gio-native-volume-monitor";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_OWNER_USER = (String)"owner::user";
	/** <i>native declaration : glib-2.0/gio/gnetworkmonitor.h</i> */
	public static final String G_NETWORK_MONITOR_EXTENSION_POINT_NAME = (String)"gio-network-monitor";
	/** <i>native declaration : glib-2.0/gio/gtlsbackend.h</i> */
	public static final String G_TLS_BACKEND_EXTENSION_POINT_NAME = (String)"gio-tls-backend";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_THUMBNAIL_PATH = (String)"thumbnail::path";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED = (String)"mountable::can-start-degraded";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_ID_FILE = (String)"id::file";
	/** <i>native declaration : glib-2.0/gio/gtlsdatabase.h</i> */
	public static final String G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = (String)"1.3.6.1.5.5.7.3.1";
	/** <i>native declaration : glib-2.0/gio/gmenumodel.h</i> */
	public static final String G_MENU_ATTRIBUTE_ICON = (String)"icon";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = (String)"mountable::can-mount";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER = (String)"standard::sort-order";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON = (String)"standard::symbolic-icon";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = (String)"mountable::can-unmount";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_TRASH_ORIG_PATH = (String)"trash::orig-path";
	/** <i>native declaration : glib-2.0/gio/gvolume.h</i> */
	public static final String G_VOLUME_IDENTIFIER_KIND_LABEL = (String)"label";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_FILESYSTEM_READONLY = (String)"filesystem::readonly";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_UNIX_DEVICE = (String)"unix::device";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = (String)"mountable::can-stop";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME = (String)"standard::edit-name";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_SELINUX_CONTEXT = (String)"selinux::context";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = (String)"mountable::unix-device";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_OWNER_GROUP = (String)"owner::group";
	/** <i>native declaration : glib-2.0/gio/gmenumodel.h</i> */
	public static final String G_MENU_ATTRIBUTE_ACTION_NAMESPACE = (String)"action-namespace";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_ETAG_VALUE = (String)"etag::value";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = (String)"standard::symlink-target";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START = (String)"mountable::can-start";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_OWNER_USER_REAL = (String)"owner::user-real";
	/** <i>native declaration : glib-2.0/gio/gproxyresolver.h</i> */
	public static final String G_PROXY_RESOLVER_EXTENSION_POINT_NAME = (String)"gio-proxy-resolver";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_FILESYSTEM_SIZE = (String)"filesystem::size";
	/** <i>native declaration : glib-2.0/gio/gvolumemonitor.h</i> */
	public static final String G_VOLUME_MONITOR_EXTENSION_POINT_NAME = (String)"gio-volume-monitor";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_UNIX_INODE = (String)"unix::inode";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE = (String)"mountable::unix-device-file";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_TIME_CHANGED_USEC = (String)"time::changed-usec";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH = (String)"access::can-trash";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_ID_FILESYSTEM = (String)"id::filesystem";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE = (String)"dos::is-archive";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_UNIX_UID = (String)"unix::uid";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = (String)"access::can-execute";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_SIZE = (String)"standard::size";
	/** <i>native declaration : glib-2.0/gio/gfileinfo.h</i> */
	public static final String G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = (String)"standard::content-type";
	/** <i>native declaration : glib-2.0/gio/giotypes.h:190</i> */
	public static abstract class GAsyncReadyCallback extends Callback<GAsyncReadyCallback > {
		public final void apply(Pointer source_object, Pointer<GIOLibrary.GAsyncResult > res, GIOLibrary.gpointer user_data) {
			apply(Pointer.getPeer(source_object), Pointer.getPeer(res), user_data);
		}
		public abstract void apply(@Ptr long source_object, @Ptr long res, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/giotypes.h:200</i> */
	public static abstract class GFileProgressCallback extends Callback<GFileProgressCallback > {
		public abstract void apply(long current_num_bytes, long total_num_bytes, GIOLibrary.gpointer user_data);
	};
	/**
	 * GFileReadMoreCallback:<br>
	 * @file_contents: the data as currently read.<br>
	 * @file_size: the size of the data currently read.<br>
	 * @callback_data: data passed to the callback.<br>
	 * * When loading the partial contents of a file with g_file_load_partial_contents_async(),<br>
	 * it may become necessary to determine if any more data from the file should be loaded.<br>
	 * A #GFileReadMoreCallback function facilitates this by returning %TRUE if more data<br>
	 * should be read, or %FALSE otherwise.<br>
	 * * Returns: %TRUE if more data should be read back. %FALSE otherwise.<br>
	 * <i>native declaration : glib-2.0/gio/giotypes.h:212</i>
	 */
	public static abstract class gboolean extends Callback<gboolean > {
		public final gio.GMenuLinkIterClass.gboolean_callback apply(Pointer<? > GFileReadMoreCallback) {
			return apply(Pointer.getPeer(GFileReadMoreCallback));
		}
		public abstract gio.GMenuLinkIterClass.gboolean_callback apply(@Ptr long GFileReadMoreCallback);
	};
	/** <i>native declaration : glib-2.0/gio/giotypes.h:243</i> */
	public static abstract class GFileMeasureProgressCallback extends Callback<GFileMeasureProgressCallback > {
		public abstract void apply(GIOLibrary.gboolean reporting, long current_size, long num_dirs, long num_files, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/giotypes.h:255</i> */
	public static abstract class GIOSchedulerJobFunc extends Callback<GIOSchedulerJobFunc > {
		public final GIOLibrary.gboolean apply(Pointer<GIOLibrary.GIOSchedulerJob > job, Pointer<GCancellable > cancellable, GIOLibrary.gpointer user_data) {
			return apply(Pointer.getPeer(job), Pointer.getPeer(cancellable), user_data);
		}
		public abstract GIOLibrary.gboolean apply(@Ptr long job, @Ptr long cancellable, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/giotypes.h:264</i> */
	public static abstract class GSimpleAsyncThreadFunc extends Callback<GSimpleAsyncThreadFunc > {
		public final void apply(Pointer<GIOLibrary.GSimpleAsyncResult > res, Pointer object, Pointer<GCancellable > cancellable) {
			apply(Pointer.getPeer(res), Pointer.getPeer(object), Pointer.getPeer(cancellable));
		}
		public abstract void apply(@Ptr long res, @Ptr long object, @Ptr long cancellable);
	};
	/** <i>native declaration : glib-2.0/gio/giotypes.h:275</i> */
	public static abstract class GSocketSourceFunc extends Callback<GSocketSourceFunc > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/gio/giotypes.h</i><br>
		 * gboolean GSocketSourceFunc(GSocket* socket, GIOCondition condition, gpointer user_data);<br>
		 * Conversion Error : GIOCondition (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/gio/giotypes.h</i><br>
		 * gboolean GSocketSourceFunc(GSocket* socket, GIOCondition condition, gpointer user_data);<br>
		 * Conversion Error : GIOCondition (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/gio/giotypes.h:334</i> */
	public static abstract class GCancellableSourceFunc extends Callback<GCancellableSourceFunc > {
		public final GIOLibrary.gboolean apply(Pointer<GCancellable > cancellable, GIOLibrary.gpointer user_data) {
			return apply(Pointer.getPeer(cancellable), user_data);
		}
		public abstract GIOLibrary.gboolean apply(@Ptr long cancellable, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/giotypes.h:345</i> */
	public static abstract class GPollableSourceFunc extends Callback<GPollableSourceFunc > {
		public final GIOLibrary.gboolean apply(Pointer pollable_stream, GIOLibrary.gpointer user_data) {
			return apply(Pointer.getPeer(pollable_stream), user_data);
		}
		public abstract GIOLibrary.gboolean apply(@Ptr long pollable_stream, GIOLibrary.gpointer user_data);
	};
	/**
	 * GDBusProxyTypeFunc:<br>
	 * @manager: A #GDBusObjectManagerClient.<br>
	 * @object_path: The object path of the remote object.<br>
	 * @interface_name: (allow-none): The interface name of the remote object or %NULL if a #GDBusObjectProxy #GType is requested.<br>
	 * @user_data: User data.<br>
	 * * Function signature for a function used to determine the #GType to<br>
	 * use for an interface proxy (if @interface_name is not %NULL) or<br>
	 * object proxy (if @interface_name is %NULL).<br>
	 * * This function is called in the<br>
	 * <link linkend="g-main-context-push-thread-default">thread-default main loop</link><br>
	 * that @manager was constructed in.<br>
	 * * Returns: A #GType to use for the remote object. The returned type<br>
	 *   must be a #GDBusProxy<!-- -->- or #GDBusObjectProxy<!-- -->-derived<br>
	 *   type.<br>
	 * * Since: 2.30<br>
	 * <i>native declaration : glib-2.0/gio/giotypes.h:371</i>
	 */
	public static abstract class GType extends Callback<GType > {
		public final gio.GTlsBackendInterface.GType_callback apply(Pointer<? > GDBusProxyTypeFunc) {
			return apply(Pointer.getPeer(GDBusProxyTypeFunc));
		}
		public abstract gio.GTlsBackendInterface.GType_callback apply(@Ptr long GDBusProxyTypeFunc);
	};
	/** <i>native declaration : glib-2.0/gio/giotypes.h:373</i> */
	public static abstract class gboolean_callback extends Callback<gboolean_callback > {
		public final int apply(Pointer<Byte > file_contents, long file_size, GIOLibrary.gpointer callback_data) {
			return apply(Pointer.getPeer(file_contents), file_size, callback_data);
		}
		public abstract int apply(@Ptr long file_contents, long file_size, GIOLibrary.gpointer callback_data);
	};
	/** <i>native declaration : glib-2.0/gio/giotypes.h:374</i> */
	public static abstract class GType_callback extends Callback<GType_callback > {
		public final int apply(Pointer<GDBusObjectManagerClient > manager, Pointer<Byte > object_path, Pointer<Byte > interface_name, GIOLibrary.gpointer user_data) {
			return apply(Pointer.getPeer(manager), Pointer.getPeer(object_path), Pointer.getPeer(interface_name), user_data);
		}
		public abstract int apply(@Ptr long manager, @Ptr long object_path, @Ptr long interface_name, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusconnection.h:88</i> */
	public static abstract class GDBusInterfaceMethodCallFunc extends Callback<GDBusInterfaceMethodCallFunc > {
		public final void apply(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > sender, Pointer<Byte > object_path, Pointer<Byte > interface_name, Pointer<Byte > method_name, Pointer<GIOLibrary.GVariant > parameters, Pointer<GIOLibrary.GDBusMethodInvocation > invocation, GIOLibrary.gpointer user_data) {
			apply(Pointer.getPeer(connection), Pointer.getPeer(sender), Pointer.getPeer(object_path), Pointer.getPeer(interface_name), Pointer.getPeer(method_name), Pointer.getPeer(parameters), Pointer.getPeer(invocation), user_data);
		}
		public abstract void apply(@Ptr long connection, @Ptr long sender, @Ptr long object_path, @Ptr long interface_name, @Ptr long method_name, @Ptr long parameters, @Ptr long invocation, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusconnection.h:104</i> */
	public static abstract class GDBusInterfaceGetPropertyFunc extends Callback<GDBusInterfaceGetPropertyFunc > {
		public final Pointer<GIOLibrary.GVariant > apply(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > sender, Pointer<Byte > object_path, Pointer<Byte > interface_name, Pointer<Byte > property_name, Pointer<Pointer > error, GIOLibrary.gpointer user_data) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(connection), Pointer.getPeer(sender), Pointer.getPeer(object_path), Pointer.getPeer(interface_name), Pointer.getPeer(property_name), Pointer.getPeer(error), user_data), GIOLibrary.GVariant.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long connection, @Ptr long sender, @Ptr long object_path, @Ptr long interface_name, @Ptr long property_name, @Ptr long error, GIOLibrary.gpointer user_data);
	};
	/**
	 * GDBusInterfaceSetPropertyFunc:<br>
	 * @connection: A #GDBusConnection.<br>
	 * @sender: The unique bus name of the remote caller.<br>
	 * @object_path: The object path that the method was invoked on.<br>
	 * @interface_name: The D-Bus interface name for the property.<br>
	 * @property_name: The name of the property to get the value of.<br>
	 * @value: The value to set the property to.<br>
	 * @error: Return location for error.<br>
	 * @user_data: The @user_data #gpointer passed to g_dbus_connection_register_object().<br>
	 * * The type of the @set_property function in #GDBusInterfaceVTable.<br>
	 * * Returns: %TRUE if the property was set to @value, %FALSE if @error is set.<br>
	 * * Since: 2.26<br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:119</i>
	 */
	public static abstract class gboolean2 extends Callback<gboolean2 > {
		public final gio.GMenuLinkIterClass.gboolean_callback apply(Pointer<? > GDBusInterfaceSetPropertyFunc) {
			return apply(Pointer.getPeer(GDBusInterfaceSetPropertyFunc));
		}
		public abstract gio.GMenuLinkIterClass.gboolean_callback apply(@Ptr long GDBusInterfaceSetPropertyFunc);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusconnection.h:189</i> */
	public static abstract class GDBusSubtreeEnumerateFunc extends Callback<GDBusSubtreeEnumerateFunc > {
		public final Pointer<Pointer<Byte > > apply(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > sender, Pointer<Byte > object_path, GIOLibrary.gpointer user_data) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(connection), Pointer.getPeer(sender), Pointer.getPeer(object_path), user_data), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
		}
		@Ptr 
		public abstract long apply(@Ptr long connection, @Ptr long sender, @Ptr long object_path, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusconnection.h:214</i> */
	public static abstract class GDBusSubtreeIntrospectFunc extends Callback<GDBusSubtreeIntrospectFunc > {
		public final Pointer<Pointer<GDBusInterfaceInfo > > apply(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > sender, Pointer<Byte > object_path, Pointer<Byte > node, GIOLibrary.gpointer user_data) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(connection), Pointer.getPeer(sender), Pointer.getPeer(object_path), Pointer.getPeer(node), user_data), DefaultParameterizedType.paramType(Pointer.class, GDBusInterfaceInfo.class));
		}
		@Ptr 
		public abstract long apply(@Ptr long connection, @Ptr long sender, @Ptr long object_path, @Ptr long node, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusconnection.h:230</i> */
	public static abstract class GDBusSubtreeDispatchFunc extends Callback<GDBusSubtreeDispatchFunc > {
		public final Pointer<GDBusInterfaceVTable > apply(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > sender, Pointer<Byte > object_path, Pointer<Byte > interface_name, Pointer<Byte > node, Pointer<GIOLibrary.gpointer > out_user_data, GIOLibrary.gpointer user_data) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(connection), Pointer.getPeer(sender), Pointer.getPeer(object_path), Pointer.getPeer(interface_name), Pointer.getPeer(node), Pointer.getPeer(out_user_data), user_data), GDBusInterfaceVTable.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long connection, @Ptr long sender, @Ptr long object_path, @Ptr long interface_name, @Ptr long node, @Ptr long out_user_data, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusconnection.h:266</i> */
	public static abstract class GDBusSignalCallback extends Callback<GDBusSignalCallback > {
		public final void apply(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > sender_name, Pointer<Byte > object_path, Pointer<Byte > interface_name, Pointer<Byte > signal_name, Pointer<GIOLibrary.GVariant > parameters, GIOLibrary.gpointer user_data) {
			apply(Pointer.getPeer(connection), Pointer.getPeer(sender_name), Pointer.getPeer(object_path), Pointer.getPeer(interface_name), Pointer.getPeer(signal_name), Pointer.getPeer(parameters), user_data);
		}
		public abstract void apply(@Ptr long connection, @Ptr long sender_name, @Ptr long object_path, @Ptr long interface_name, @Ptr long signal_name, @Ptr long parameters, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusconnection.h:338</i> */
	public static abstract class GDBusMessageFilterFunction extends Callback<GDBusMessageFilterFunction > {
		public final Pointer<GIOLibrary.GDBusMessage > apply(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<GIOLibrary.GDBusMessage > message, GIOLibrary.gboolean incoming, GIOLibrary.gpointer user_data) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(connection), Pointer.getPeer(message), incoming, user_data), GIOLibrary.GDBusMessage.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long connection, @Ptr long message, GIOLibrary.gboolean incoming, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusconnection.h:343</i> */
	public static abstract class gboolean_callback2 extends Callback<gboolean_callback2 > {
		public final int apply(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > sender, Pointer<Byte > object_path, Pointer<Byte > interface_name, Pointer<Byte > property_name, Pointer<GIOLibrary.GVariant > value, Pointer<Pointer > error, GIOLibrary.gpointer user_data) {
			return apply(Pointer.getPeer(connection), Pointer.getPeer(sender), Pointer.getPeer(object_path), Pointer.getPeer(interface_name), Pointer.getPeer(property_name), Pointer.getPeer(value), Pointer.getPeer(error), user_data);
		}
		public abstract int apply(@Ptr long connection, @Ptr long sender, @Ptr long object_path, @Ptr long interface_name, @Ptr long property_name, @Ptr long value, @Ptr long error, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusnameowning.h:9</i> */
	public static abstract class GBusAcquiredCallback extends Callback<GBusAcquiredCallback > {
		public final void apply(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > name, GIOLibrary.gpointer user_data) {
			apply(Pointer.getPeer(connection), Pointer.getPeer(name), user_data);
		}
		public abstract void apply(@Ptr long connection, @Ptr long name, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusnameowning.h:18</i> */
	public static abstract class GBusNameAcquiredCallback extends Callback<GBusNameAcquiredCallback > {
		public final void apply(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > name, GIOLibrary.gpointer user_data) {
			apply(Pointer.getPeer(connection), Pointer.getPeer(name), user_data);
		}
		public abstract void apply(@Ptr long connection, @Ptr long name, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusnameowning.h:28</i> */
	public static abstract class GBusNameLostCallback extends Callback<GBusNameLostCallback > {
		public final void apply(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > name, GIOLibrary.gpointer user_data) {
			apply(Pointer.getPeer(connection), Pointer.getPeer(name), user_data);
		}
		public abstract void apply(@Ptr long connection, @Ptr long name, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusnamewatching.h:10</i> */
	public static abstract class GBusNameAppearedCallback extends Callback<GBusNameAppearedCallback > {
		public final void apply(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > name, Pointer<Byte > name_owner, GIOLibrary.gpointer user_data) {
			apply(Pointer.getPeer(connection), Pointer.getPeer(name), Pointer.getPeer(name_owner), user_data);
		}
		public abstract void apply(@Ptr long connection, @Ptr long name, @Ptr long name_owner, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusnamewatching.h:23</i> */
	public static abstract class GBusNameVanishedCallback extends Callback<GBusNameVanishedCallback > {
		public final void apply(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > name, GIOLibrary.gpointer user_data) {
			apply(Pointer.getPeer(connection), Pointer.getPeer(name), user_data);
		}
		public abstract void apply(@Ptr long connection, @Ptr long name, GIOLibrary.gpointer user_data);
	};
	/**
	 * GReallocFunc:<br>
	 * @data: memory block to reallocate<br>
	 * @size: size to reallocate @data to<br>
	 * * Changes the size of the memory block pointed to by @data to<br>
	 * @size bytes.<br>
	 * * The function should have the same semantics as realloc().<br>
	 * * Returns: a pointer to the reallocated memory<br>
	 * <i>native declaration : glib-2.0/gio/gmemoryoutputstream.h:35</i>
	 */
	public static abstract class gpointer extends Callback<gpointer > {
		public final GIOLibrary.gpointer_callback apply(Pointer<? > GReallocFunc) {
			return apply(Pointer.getPeer(GReallocFunc));
		}
		public abstract GIOLibrary.gpointer_callback apply(@Ptr long GReallocFunc);
	};
	/** <i>native declaration : glib-2.0/gio/gmemoryoutputstream.h:52</i> */
	public static abstract class gpointer_callback extends Callback<gpointer_callback > {
		public abstract int apply(GIOLibrary.gpointer data, @org.bridj.ann.CLong long size);
	};
	/** <i>native declaration : glib-2.0/gio/gsettings.h:112</i> */
	public static abstract class GSettingsBindSetMapping extends Callback<GSettingsBindSetMapping > {
		public final Pointer<GIOLibrary.GVariant > apply(Pointer value, Pointer<GIOLibrary.GVariantType > expected_type, GIOLibrary.gpointer user_data) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(value), Pointer.getPeer(expected_type), user_data), GIOLibrary.GVariant.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long value, @Ptr long expected_type, GIOLibrary.gpointer user_data);
	};
	/**
	 * GSettingsBindGetMapping:<br>
	 * @value: return location for the property value<br>
	 * @variant: the #GVariant<br>
	 * @user_data: user data that was specified when the binding was created<br>
	 * * The type for the function that is used to convert from #GSettings to<br>
	 * an object property. The @value is already initialized to hold values<br>
	 * of the appropriate type.<br>
	 * * Returns: %TRUE if the conversion succeeded, %FALSE in case of an error<br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:123</i>
	 */
	public static abstract class gboolean3 extends Callback<gboolean3 > {
		public final gio.GMenuLinkIterClass.gboolean_callback apply(Pointer<? > GSettingsBindGetMapping) {
			return apply(Pointer.getPeer(GSettingsBindGetMapping));
		}
		public abstract gio.GMenuLinkIterClass.gboolean_callback apply(@Ptr long GSettingsBindGetMapping);
	};
	/** <i>native declaration : glib-2.0/gio/gsettings.h:140</i> */
	public static abstract class GSettingsGetMapping extends Callback<GSettingsGetMapping > {
		public final GIOLibrary.gboolean apply(Pointer<GIOLibrary.GVariant > value, Pointer<GIOLibrary.gpointer > result, GIOLibrary.gpointer user_data) {
			return apply(Pointer.getPeer(value), Pointer.getPeer(result), user_data);
		}
		public abstract GIOLibrary.gboolean apply(@Ptr long value, @Ptr long result, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gsettings.h:178</i> */
	public static abstract class gboolean_callback3 extends Callback<gboolean_callback3 > {
		public final int apply(Pointer value, Pointer<GIOLibrary.GVariant > variant, GIOLibrary.gpointer user_data) {
			return apply(Pointer.getPeer(value), Pointer.getPeer(variant), user_data);
		}
		public abstract int apply(@Ptr long value, @Ptr long variant, GIOLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gtask.h:34</i> */
	public static abstract class GTaskThreadFunc extends Callback<GTaskThreadFunc > {
		public final void apply(Pointer<GIOLibrary.GTask > task, GIOLibrary.gpointer source_object, GIOLibrary.gpointer task_data, Pointer<GCancellable > cancellable) {
			apply(Pointer.getPeer(task), source_object, task_data, Pointer.getPeer(cancellable));
		}
		public abstract void apply(@Ptr long task, GIOLibrary.gpointer source_object, GIOLibrary.gpointer task_data, @Ptr long cancellable);
	};
	/**
	 * Original signature : <code>GType g_action_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gaction.h:24</i>
	 */
	public static native GIOLibrary.GType g_action_get_type();
	/**
	 * Original signature : <code>gchar* g_action_get_name(GAction*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gaction.h:26</i>
	 */
	public static Pointer<Byte > g_action_get_name(Pointer<GIOLibrary.GAction > action) {
		return Pointer.pointerToAddress(g_action_get_name(Pointer.getPeer(action)), Byte.class);
	}
	@Ptr 
	protected native static long g_action_get_name(@Ptr long action);
	/**
	 * Original signature : <code>GVariantType* g_action_get_parameter_type(GAction*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gaction.h:28</i>
	 */
	public static Pointer<GIOLibrary.GVariantType > g_action_get_parameter_type(Pointer<GIOLibrary.GAction > action) {
		return Pointer.pointerToAddress(g_action_get_parameter_type(Pointer.getPeer(action)), GIOLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_action_get_parameter_type(@Ptr long action);
	/**
	 * Original signature : <code>GVariantType* g_action_get_state_type(GAction*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gaction.h:30</i>
	 */
	public static Pointer<GIOLibrary.GVariantType > g_action_get_state_type(Pointer<GIOLibrary.GAction > action) {
		return Pointer.pointerToAddress(g_action_get_state_type(Pointer.getPeer(action)), GIOLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_action_get_state_type(@Ptr long action);
	/**
	 * Original signature : <code>GVariant* g_action_get_state_hint(GAction*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gaction.h:32</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_action_get_state_hint(Pointer<GIOLibrary.GAction > action) {
		return Pointer.pointerToAddress(g_action_get_state_hint(Pointer.getPeer(action)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_action_get_state_hint(@Ptr long action);
	/**
	 * Original signature : <code>gboolean g_action_get_enabled(GAction*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gaction.h:34</i>
	 */
	public static GIOLibrary.gboolean g_action_get_enabled(Pointer<GIOLibrary.GAction > action) {
		return g_action_get_enabled(Pointer.getPeer(action));
	}
	protected native static GIOLibrary.gboolean g_action_get_enabled(@Ptr long action);
	/**
	 * Original signature : <code>GVariant* g_action_get_state(GAction*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gaction.h:36</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_action_get_state(Pointer<GIOLibrary.GAction > action) {
		return Pointer.pointerToAddress(g_action_get_state(Pointer.getPeer(action)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_action_get_state(@Ptr long action);
	/**
	 * Original signature : <code>void g_action_change_state(GAction*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gaction.h:38</i>
	 */
	public static void g_action_change_state(Pointer<GIOLibrary.GAction > action, Pointer<GIOLibrary.GVariant > value) {
		g_action_change_state(Pointer.getPeer(action), Pointer.getPeer(value));
	}
	protected native static void g_action_change_state(@Ptr long action, @Ptr long value);
	/**
	 * Original signature : <code>void g_action_activate(GAction*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gaction.h:40</i>
	 */
	public static void g_action_activate(Pointer<GIOLibrary.GAction > action, Pointer<GIOLibrary.GVariant > parameter) {
		g_action_activate(Pointer.getPeer(action), Pointer.getPeer(parameter));
	}
	protected native static void g_action_activate(@Ptr long action, @Ptr long parameter);
	/**
	 * Original signature : <code>gboolean g_action_name_is_valid(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gaction.h:42</i>
	 */
	public static GIOLibrary.gboolean g_action_name_is_valid(Pointer<Byte > action_name) {
		return g_action_name_is_valid(Pointer.getPeer(action_name));
	}
	protected native static GIOLibrary.gboolean g_action_name_is_valid(@Ptr long action_name);
	/**
	 * Original signature : <code>gboolean g_action_parse_detailed_name(const gchar*, gchar**, GVariant**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gaction.h:44</i>
	 */
	public static GIOLibrary.gboolean g_action_parse_detailed_name(Pointer<Byte > detailed_name, Pointer<Pointer<Byte > > action_name, Pointer<Pointer<GIOLibrary.GVariant > > target_value, Pointer<Pointer > error) {
		return g_action_parse_detailed_name(Pointer.getPeer(detailed_name), Pointer.getPeer(action_name), Pointer.getPeer(target_value), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_action_parse_detailed_name(@Ptr long detailed_name, @Ptr long action_name, @Ptr long target_value, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_action_print_detailed_name(const gchar*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gaction.h:46</i>
	 */
	public static Pointer<Byte > g_action_print_detailed_name(Pointer<Byte > action_name, Pointer<GIOLibrary.GVariant > parameter) {
		return Pointer.pointerToAddress(g_action_print_detailed_name(Pointer.getPeer(action_name), Pointer.getPeer(parameter)), Byte.class);
	}
	@Ptr 
	protected native static long g_action_print_detailed_name(@Ptr long action_name, @Ptr long parameter);
	/**
	 * Original signature : <code>GType g_action_group_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroup.h:41</i>
	 */
	public static native GIOLibrary.GType g_action_group_get_type();
	/**
	 * Original signature : <code>gboolean g_action_group_has_action(GActionGroup*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroup.h:43</i>
	 */
	public static GIOLibrary.gboolean g_action_group_has_action(Pointer<GIOLibrary.GActionGroup > action_group, Pointer<Byte > action_name) {
		return g_action_group_has_action(Pointer.getPeer(action_group), Pointer.getPeer(action_name));
	}
	protected native static GIOLibrary.gboolean g_action_group_has_action(@Ptr long action_group, @Ptr long action_name);
	/**
	 * Original signature : <code>gchar** g_action_group_list_actions(GActionGroup*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroup.h:45</i>
	 */
	public static Pointer<Pointer<Byte > > g_action_group_list_actions(Pointer<GIOLibrary.GActionGroup > action_group) {
		return Pointer.pointerToAddress(g_action_group_list_actions(Pointer.getPeer(action_group)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_action_group_list_actions(@Ptr long action_group);
	/**
	 * Original signature : <code>GVariantType* g_action_group_get_action_parameter_type(GActionGroup*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroup.h:47</i>
	 */
	public static Pointer<GIOLibrary.GVariantType > g_action_group_get_action_parameter_type(Pointer<GIOLibrary.GActionGroup > action_group, Pointer<Byte > action_name) {
		return Pointer.pointerToAddress(g_action_group_get_action_parameter_type(Pointer.getPeer(action_group), Pointer.getPeer(action_name)), GIOLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_action_group_get_action_parameter_type(@Ptr long action_group, @Ptr long action_name);
	/**
	 * Original signature : <code>GVariantType* g_action_group_get_action_state_type(GActionGroup*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroup.h:49</i>
	 */
	public static Pointer<GIOLibrary.GVariantType > g_action_group_get_action_state_type(Pointer<GIOLibrary.GActionGroup > action_group, Pointer<Byte > action_name) {
		return Pointer.pointerToAddress(g_action_group_get_action_state_type(Pointer.getPeer(action_group), Pointer.getPeer(action_name)), GIOLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_action_group_get_action_state_type(@Ptr long action_group, @Ptr long action_name);
	/**
	 * Original signature : <code>GVariant* g_action_group_get_action_state_hint(GActionGroup*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroup.h:51</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_action_group_get_action_state_hint(Pointer<GIOLibrary.GActionGroup > action_group, Pointer<Byte > action_name) {
		return Pointer.pointerToAddress(g_action_group_get_action_state_hint(Pointer.getPeer(action_group), Pointer.getPeer(action_name)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_action_group_get_action_state_hint(@Ptr long action_group, @Ptr long action_name);
	/**
	 * Original signature : <code>gboolean g_action_group_get_action_enabled(GActionGroup*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroup.h:53</i>
	 */
	public static GIOLibrary.gboolean g_action_group_get_action_enabled(Pointer<GIOLibrary.GActionGroup > action_group, Pointer<Byte > action_name) {
		return g_action_group_get_action_enabled(Pointer.getPeer(action_group), Pointer.getPeer(action_name));
	}
	protected native static GIOLibrary.gboolean g_action_group_get_action_enabled(@Ptr long action_group, @Ptr long action_name);
	/**
	 * Original signature : <code>GVariant* g_action_group_get_action_state(GActionGroup*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroup.h:55</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_action_group_get_action_state(Pointer<GIOLibrary.GActionGroup > action_group, Pointer<Byte > action_name) {
		return Pointer.pointerToAddress(g_action_group_get_action_state(Pointer.getPeer(action_group), Pointer.getPeer(action_name)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_action_group_get_action_state(@Ptr long action_group, @Ptr long action_name);
	/**
	 * Original signature : <code>void g_action_group_change_action_state(GActionGroup*, const gchar*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroup.h:57</i>
	 */
	public static void g_action_group_change_action_state(Pointer<GIOLibrary.GActionGroup > action_group, Pointer<Byte > action_name, Pointer<GIOLibrary.GVariant > value) {
		g_action_group_change_action_state(Pointer.getPeer(action_group), Pointer.getPeer(action_name), Pointer.getPeer(value));
	}
	protected native static void g_action_group_change_action_state(@Ptr long action_group, @Ptr long action_name, @Ptr long value);
	/**
	 * Original signature : <code>void g_action_group_activate_action(GActionGroup*, const gchar*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroup.h:59</i>
	 */
	public static void g_action_group_activate_action(Pointer<GIOLibrary.GActionGroup > action_group, Pointer<Byte > action_name, Pointer<GIOLibrary.GVariant > parameter) {
		g_action_group_activate_action(Pointer.getPeer(action_group), Pointer.getPeer(action_name), Pointer.getPeer(parameter));
	}
	protected native static void g_action_group_activate_action(@Ptr long action_group, @Ptr long action_name, @Ptr long parameter);
	/**
	 * signals<br>
	 * Original signature : <code>void g_action_group_action_added(GActionGroup*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroup.h:64</i>
	 */
	public static void g_action_group_action_added(Pointer<GIOLibrary.GActionGroup > action_group, Pointer<Byte > action_name) {
		g_action_group_action_added(Pointer.getPeer(action_group), Pointer.getPeer(action_name));
	}
	protected native static void g_action_group_action_added(@Ptr long action_group, @Ptr long action_name);
	/**
	 * Original signature : <code>void g_action_group_action_removed(GActionGroup*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroup.h:66</i>
	 */
	public static void g_action_group_action_removed(Pointer<GIOLibrary.GActionGroup > action_group, Pointer<Byte > action_name) {
		g_action_group_action_removed(Pointer.getPeer(action_group), Pointer.getPeer(action_name));
	}
	protected native static void g_action_group_action_removed(@Ptr long action_group, @Ptr long action_name);
	/**
	 * Original signature : <code>void g_action_group_action_enabled_changed(GActionGroup*, const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroup.h:68</i>
	 */
	public static void g_action_group_action_enabled_changed(Pointer<GIOLibrary.GActionGroup > action_group, Pointer<Byte > action_name, GIOLibrary.gboolean enabled) {
		g_action_group_action_enabled_changed(Pointer.getPeer(action_group), Pointer.getPeer(action_name), enabled);
	}
	protected native static void g_action_group_action_enabled_changed(@Ptr long action_group, @Ptr long action_name, GIOLibrary.gboolean enabled);
	/**
	 * Original signature : <code>void g_action_group_action_state_changed(GActionGroup*, const gchar*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroup.h:70</i>
	 */
	public static void g_action_group_action_state_changed(Pointer<GIOLibrary.GActionGroup > action_group, Pointer<Byte > action_name, Pointer<GIOLibrary.GVariant > state) {
		g_action_group_action_state_changed(Pointer.getPeer(action_group), Pointer.getPeer(action_name), Pointer.getPeer(state));
	}
	protected native static void g_action_group_action_state_changed(@Ptr long action_group, @Ptr long action_name, @Ptr long state);
	/**
	 * Original signature : <code>gboolean g_action_group_query_action(GActionGroup*, const gchar*, gboolean*, const GVariantType**, const GVariantType**, GVariant**, GVariant**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroup.h:72</i>
	 */
	public static GIOLibrary.gboolean g_action_group_query_action(Pointer<GIOLibrary.GActionGroup > action_group, Pointer<Byte > action_name, Pointer<GIOLibrary.gboolean > enabled, Pointer<Pointer<GIOLibrary.GVariantType > > parameter_type, Pointer<Pointer<GIOLibrary.GVariantType > > state_type, Pointer<Pointer<GIOLibrary.GVariant > > state_hint, Pointer<Pointer<GIOLibrary.GVariant > > state) {
		return g_action_group_query_action(Pointer.getPeer(action_group), Pointer.getPeer(action_name), Pointer.getPeer(enabled), Pointer.getPeer(parameter_type), Pointer.getPeer(state_type), Pointer.getPeer(state_hint), Pointer.getPeer(state));
	}
	protected native static GIOLibrary.gboolean g_action_group_query_action(@Ptr long action_group, @Ptr long action_name, @Ptr long enabled, @Ptr long parameter_type, @Ptr long state_type, @Ptr long state_hint, @Ptr long state);
	/**
	 * Original signature : <code>guint g_dbus_connection_export_action_group(GDBusConnection*, const gchar*, GActionGroup*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroupexporter.h:2</i>
	 */
	public static int g_dbus_connection_export_action_group(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > object_path, Pointer<GIOLibrary.GActionGroup > action_group, Pointer<Pointer > error) {
		return g_dbus_connection_export_action_group(Pointer.getPeer(connection), Pointer.getPeer(object_path), Pointer.getPeer(action_group), Pointer.getPeer(error));
	}
	protected native static int g_dbus_connection_export_action_group(@Ptr long connection, @Ptr long object_path, @Ptr long action_group, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_connection_unexport_action_group(GDBusConnection*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactiongroupexporter.h:4</i>
	 */
	public static void g_dbus_connection_unexport_action_group(Pointer<GIOLibrary.GDBusConnection > connection, int export_id) {
		g_dbus_connection_unexport_action_group(Pointer.getPeer(connection), export_id);
	}
	protected native static void g_dbus_connection_unexport_action_group(@Ptr long connection, int export_id);
	/**
	 * Original signature : <code>GType g_action_map_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gactionmap.h:24</i>
	 */
	public static native GIOLibrary.GType g_action_map_get_type();
	/**
	 * Original signature : <code>GAction* g_action_map_lookup_action(GActionMap*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactionmap.h:26</i>
	 */
	public static Pointer<GIOLibrary.GAction > g_action_map_lookup_action(Pointer<GIOLibrary.GActionMap > action_map, Pointer<Byte > action_name) {
		return Pointer.pointerToAddress(g_action_map_lookup_action(Pointer.getPeer(action_map), Pointer.getPeer(action_name)), GIOLibrary.GAction.class);
	}
	@Ptr 
	protected native static long g_action_map_lookup_action(@Ptr long action_map, @Ptr long action_name);
	/**
	 * Original signature : <code>void g_action_map_add_action(GActionMap*, GAction*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactionmap.h:28</i>
	 */
	public static void g_action_map_add_action(Pointer<GIOLibrary.GActionMap > action_map, Pointer<GIOLibrary.GAction > action) {
		g_action_map_add_action(Pointer.getPeer(action_map), Pointer.getPeer(action));
	}
	protected native static void g_action_map_add_action(@Ptr long action_map, @Ptr long action);
	/**
	 * Original signature : <code>void g_action_map_remove_action(GActionMap*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactionmap.h:30</i>
	 */
	public static void g_action_map_remove_action(Pointer<GIOLibrary.GActionMap > action_map, Pointer<Byte > action_name) {
		g_action_map_remove_action(Pointer.getPeer(action_map), Pointer.getPeer(action_name));
	}
	protected native static void g_action_map_remove_action(@Ptr long action_map, @Ptr long action_name);
	/**
	 * Original signature : <code>void g_action_map_add_action_entries(GActionMap*, const GActionEntry*, gint, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gactionmap.h:32</i>
	 */
	public static void g_action_map_add_action_entries(Pointer<GIOLibrary.GActionMap > action_map, Pointer<GActionEntry > entries, int n_entries, GIOLibrary.gpointer user_data) {
		g_action_map_add_action_entries(Pointer.getPeer(action_map), Pointer.getPeer(entries), n_entries, user_data);
	}
	protected native static void g_action_map_add_action_entries(@Ptr long action_map, @Ptr long entries, int n_entries, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GType g_app_info_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:100</i>
	 */
	public static native GIOLibrary.GType g_app_info_get_type();
	/**
	 * Original signature : <code>GAppInfo* g_app_info_create_from_commandline(const char*, const char*, GAppInfoCreateFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:102</i>
	 */
	public static Pointer<GIOLibrary.GAppInfo > g_app_info_create_from_commandline(Pointer<Byte > commandline, Pointer<Byte > application_name, IntValuedEnum<GIOLibrary.GAppInfoCreateFlags > flags, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_app_info_create_from_commandline(Pointer.getPeer(commandline), Pointer.getPeer(application_name), (int)flags.value(), Pointer.getPeer(error)), GIOLibrary.GAppInfo.class);
	}
	@Ptr 
	protected native static long g_app_info_create_from_commandline(@Ptr long commandline, @Ptr long application_name, int flags, @Ptr long error);
	/**
	 * Original signature : <code>GAppInfo* g_app_info_dup(GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:104</i>
	 */
	public static Pointer<GIOLibrary.GAppInfo > g_app_info_dup(Pointer<GIOLibrary.GAppInfo > appinfo) {
		return Pointer.pointerToAddress(g_app_info_dup(Pointer.getPeer(appinfo)), GIOLibrary.GAppInfo.class);
	}
	@Ptr 
	protected native static long g_app_info_dup(@Ptr long appinfo);
	/**
	 * Original signature : <code>gboolean g_app_info_equal(GAppInfo*, GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:106</i>
	 */
	public static GIOLibrary.gboolean g_app_info_equal(Pointer<GIOLibrary.GAppInfo > appinfo1, Pointer<GIOLibrary.GAppInfo > appinfo2) {
		return g_app_info_equal(Pointer.getPeer(appinfo1), Pointer.getPeer(appinfo2));
	}
	protected native static GIOLibrary.gboolean g_app_info_equal(@Ptr long appinfo1, @Ptr long appinfo2);
	/**
	 * Original signature : <code>char* g_app_info_get_id(GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:108</i>
	 */
	public static Pointer<Byte > g_app_info_get_id(Pointer<GIOLibrary.GAppInfo > appinfo) {
		return Pointer.pointerToAddress(g_app_info_get_id(Pointer.getPeer(appinfo)), Byte.class);
	}
	@Ptr 
	protected native static long g_app_info_get_id(@Ptr long appinfo);
	/**
	 * Original signature : <code>char* g_app_info_get_name(GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:110</i>
	 */
	public static Pointer<Byte > g_app_info_get_name(Pointer<GIOLibrary.GAppInfo > appinfo) {
		return Pointer.pointerToAddress(g_app_info_get_name(Pointer.getPeer(appinfo)), Byte.class);
	}
	@Ptr 
	protected native static long g_app_info_get_name(@Ptr long appinfo);
	/**
	 * Original signature : <code>char* g_app_info_get_display_name(GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:112</i>
	 */
	public static Pointer<Byte > g_app_info_get_display_name(Pointer<GIOLibrary.GAppInfo > appinfo) {
		return Pointer.pointerToAddress(g_app_info_get_display_name(Pointer.getPeer(appinfo)), Byte.class);
	}
	@Ptr 
	protected native static long g_app_info_get_display_name(@Ptr long appinfo);
	/**
	 * Original signature : <code>char* g_app_info_get_description(GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:114</i>
	 */
	public static Pointer<Byte > g_app_info_get_description(Pointer<GIOLibrary.GAppInfo > appinfo) {
		return Pointer.pointerToAddress(g_app_info_get_description(Pointer.getPeer(appinfo)), Byte.class);
	}
	@Ptr 
	protected native static long g_app_info_get_description(@Ptr long appinfo);
	/**
	 * Original signature : <code>char* g_app_info_get_executable(GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:116</i>
	 */
	public static Pointer<Byte > g_app_info_get_executable(Pointer<GIOLibrary.GAppInfo > appinfo) {
		return Pointer.pointerToAddress(g_app_info_get_executable(Pointer.getPeer(appinfo)), Byte.class);
	}
	@Ptr 
	protected native static long g_app_info_get_executable(@Ptr long appinfo);
	/**
	 * Original signature : <code>char* g_app_info_get_commandline(GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:118</i>
	 */
	public static Pointer<Byte > g_app_info_get_commandline(Pointer<GIOLibrary.GAppInfo > appinfo) {
		return Pointer.pointerToAddress(g_app_info_get_commandline(Pointer.getPeer(appinfo)), Byte.class);
	}
	@Ptr 
	protected native static long g_app_info_get_commandline(@Ptr long appinfo);
	/**
	 * Original signature : <code>GIcon* g_app_info_get_icon(GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:120</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_app_info_get_icon(Pointer<GIOLibrary.GAppInfo > appinfo) {
		return Pointer.pointerToAddress(g_app_info_get_icon(Pointer.getPeer(appinfo)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_app_info_get_icon(@Ptr long appinfo);
	/**
	 * Original signature : <code>gboolean g_app_info_launch(GAppInfo*, GList*, GAppLaunchContext*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:122</i>
	 */
	public static GIOLibrary.gboolean g_app_info_launch(Pointer<GIOLibrary.GAppInfo > appinfo, Pointer files, Pointer<GAppLaunchContext > launch_context, Pointer<Pointer > error) {
		return g_app_info_launch(Pointer.getPeer(appinfo), Pointer.getPeer(files), Pointer.getPeer(launch_context), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_app_info_launch(@Ptr long appinfo, @Ptr long files, @Ptr long launch_context, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_app_info_supports_uris(GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:124</i>
	 */
	public static GIOLibrary.gboolean g_app_info_supports_uris(Pointer<GIOLibrary.GAppInfo > appinfo) {
		return g_app_info_supports_uris(Pointer.getPeer(appinfo));
	}
	protected native static GIOLibrary.gboolean g_app_info_supports_uris(@Ptr long appinfo);
	/**
	 * Original signature : <code>gboolean g_app_info_supports_files(GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:126</i>
	 */
	public static GIOLibrary.gboolean g_app_info_supports_files(Pointer<GIOLibrary.GAppInfo > appinfo) {
		return g_app_info_supports_files(Pointer.getPeer(appinfo));
	}
	protected native static GIOLibrary.gboolean g_app_info_supports_files(@Ptr long appinfo);
	/**
	 * Original signature : <code>gboolean g_app_info_launch_uris(GAppInfo*, GList*, GAppLaunchContext*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:128</i>
	 */
	public static GIOLibrary.gboolean g_app_info_launch_uris(Pointer<GIOLibrary.GAppInfo > appinfo, Pointer uris, Pointer<GAppLaunchContext > launch_context, Pointer<Pointer > error) {
		return g_app_info_launch_uris(Pointer.getPeer(appinfo), Pointer.getPeer(uris), Pointer.getPeer(launch_context), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_app_info_launch_uris(@Ptr long appinfo, @Ptr long uris, @Ptr long launch_context, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_app_info_should_show(GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:130</i>
	 */
	public static GIOLibrary.gboolean g_app_info_should_show(Pointer<GIOLibrary.GAppInfo > appinfo) {
		return g_app_info_should_show(Pointer.getPeer(appinfo));
	}
	protected native static GIOLibrary.gboolean g_app_info_should_show(@Ptr long appinfo);
	/**
	 * Original signature : <code>gboolean g_app_info_set_as_default_for_type(GAppInfo*, const char*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:132</i>
	 */
	public static GIOLibrary.gboolean g_app_info_set_as_default_for_type(Pointer<GIOLibrary.GAppInfo > appinfo, Pointer<Byte > content_type, Pointer<Pointer > error) {
		return g_app_info_set_as_default_for_type(Pointer.getPeer(appinfo), Pointer.getPeer(content_type), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_app_info_set_as_default_for_type(@Ptr long appinfo, @Ptr long content_type, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_app_info_set_as_default_for_extension(GAppInfo*, const char*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:134</i>
	 */
	public static GIOLibrary.gboolean g_app_info_set_as_default_for_extension(Pointer<GIOLibrary.GAppInfo > appinfo, Pointer<Byte > extension, Pointer<Pointer > error) {
		return g_app_info_set_as_default_for_extension(Pointer.getPeer(appinfo), Pointer.getPeer(extension), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_app_info_set_as_default_for_extension(@Ptr long appinfo, @Ptr long extension, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_app_info_add_supports_type(GAppInfo*, const char*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:136</i>
	 */
	public static GIOLibrary.gboolean g_app_info_add_supports_type(Pointer<GIOLibrary.GAppInfo > appinfo, Pointer<Byte > content_type, Pointer<Pointer > error) {
		return g_app_info_add_supports_type(Pointer.getPeer(appinfo), Pointer.getPeer(content_type), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_app_info_add_supports_type(@Ptr long appinfo, @Ptr long content_type, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_app_info_can_remove_supports_type(GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:138</i>
	 */
	public static GIOLibrary.gboolean g_app_info_can_remove_supports_type(Pointer<GIOLibrary.GAppInfo > appinfo) {
		return g_app_info_can_remove_supports_type(Pointer.getPeer(appinfo));
	}
	protected native static GIOLibrary.gboolean g_app_info_can_remove_supports_type(@Ptr long appinfo);
	/**
	 * Original signature : <code>gboolean g_app_info_remove_supports_type(GAppInfo*, const char*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:140</i>
	 */
	public static GIOLibrary.gboolean g_app_info_remove_supports_type(Pointer<GIOLibrary.GAppInfo > appinfo, Pointer<Byte > content_type, Pointer<Pointer > error) {
		return g_app_info_remove_supports_type(Pointer.getPeer(appinfo), Pointer.getPeer(content_type), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_app_info_remove_supports_type(@Ptr long appinfo, @Ptr long content_type, @Ptr long error);
	/**
	 * Original signature : <code>char** g_app_info_get_supported_types(GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:142</i>
	 */
	public static Pointer<Pointer<Byte > > g_app_info_get_supported_types(Pointer<GIOLibrary.GAppInfo > appinfo) {
		return Pointer.pointerToAddress(g_app_info_get_supported_types(Pointer.getPeer(appinfo)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_app_info_get_supported_types(@Ptr long appinfo);
	/**
	 * Original signature : <code>gboolean g_app_info_can_delete(GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:144</i>
	 */
	public static GIOLibrary.gboolean g_app_info_can_delete(Pointer<GIOLibrary.GAppInfo > appinfo) {
		return g_app_info_can_delete(Pointer.getPeer(appinfo));
	}
	protected native static GIOLibrary.gboolean g_app_info_can_delete(@Ptr long appinfo);
	/**
	 * Original signature : <code>gboolean g_app_info_delete(GAppInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:146</i>
	 */
	public static GIOLibrary.gboolean g_app_info_delete(Pointer<GIOLibrary.GAppInfo > appinfo) {
		return g_app_info_delete(Pointer.getPeer(appinfo));
	}
	protected native static GIOLibrary.gboolean g_app_info_delete(@Ptr long appinfo);
	/**
	 * Original signature : <code>gboolean g_app_info_set_as_last_used_for_type(GAppInfo*, const char*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:148</i>
	 */
	public static GIOLibrary.gboolean g_app_info_set_as_last_used_for_type(Pointer<GIOLibrary.GAppInfo > appinfo, Pointer<Byte > content_type, Pointer<Pointer > error) {
		return g_app_info_set_as_last_used_for_type(Pointer.getPeer(appinfo), Pointer.getPeer(content_type), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_app_info_set_as_last_used_for_type(@Ptr long appinfo, @Ptr long content_type, @Ptr long error);
	/**
	 * Original signature : <code>GList* g_app_info_get_all()</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:150</i>
	 */
	public static Pointer g_app_info_get_all() {
		return Pointer.pointerToAddress(g_app_info_get_all$2());
	}
	@Ptr 
	protected native static long g_app_info_get_all$2();
	/**
	 * Original signature : <code>GList* g_app_info_get_all_for_type(const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:152</i>
	 */
	public static Pointer g_app_info_get_all_for_type(Pointer<Byte > content_type) {
		return Pointer.pointerToAddress(g_app_info_get_all_for_type(Pointer.getPeer(content_type)));
	}
	@Ptr 
	protected native static long g_app_info_get_all_for_type(@Ptr long content_type);
	/**
	 * Original signature : <code>GList* g_app_info_get_recommended_for_type(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:154</i>
	 */
	public static Pointer g_app_info_get_recommended_for_type(Pointer<Byte > content_type) {
		return Pointer.pointerToAddress(g_app_info_get_recommended_for_type(Pointer.getPeer(content_type)));
	}
	@Ptr 
	protected native static long g_app_info_get_recommended_for_type(@Ptr long content_type);
	/**
	 * Original signature : <code>GList* g_app_info_get_fallback_for_type(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:156</i>
	 */
	public static Pointer g_app_info_get_fallback_for_type(Pointer<Byte > content_type) {
		return Pointer.pointerToAddress(g_app_info_get_fallback_for_type(Pointer.getPeer(content_type)));
	}
	@Ptr 
	protected native static long g_app_info_get_fallback_for_type(@Ptr long content_type);
	/**
	 * Original signature : <code>void g_app_info_reset_type_associations(const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:158</i>
	 */
	public static void g_app_info_reset_type_associations(Pointer<Byte > content_type) {
		g_app_info_reset_type_associations(Pointer.getPeer(content_type));
	}
	protected native static void g_app_info_reset_type_associations(@Ptr long content_type);
	/**
	 * Original signature : <code>GAppInfo* g_app_info_get_default_for_type(const char*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:160</i>
	 */
	public static Pointer<GIOLibrary.GAppInfo > g_app_info_get_default_for_type(Pointer<Byte > content_type, GIOLibrary.gboolean must_support_uris) {
		return Pointer.pointerToAddress(g_app_info_get_default_for_type(Pointer.getPeer(content_type), must_support_uris), GIOLibrary.GAppInfo.class);
	}
	@Ptr 
	protected native static long g_app_info_get_default_for_type(@Ptr long content_type, GIOLibrary.gboolean must_support_uris);
	/**
	 * Original signature : <code>GAppInfo* g_app_info_get_default_for_uri_scheme(const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:162</i>
	 */
	public static Pointer<GIOLibrary.GAppInfo > g_app_info_get_default_for_uri_scheme(Pointer<Byte > uri_scheme) {
		return Pointer.pointerToAddress(g_app_info_get_default_for_uri_scheme(Pointer.getPeer(uri_scheme)), GIOLibrary.GAppInfo.class);
	}
	@Ptr 
	protected native static long g_app_info_get_default_for_uri_scheme(@Ptr long uri_scheme);
	/**
	 * Original signature : <code>gboolean g_app_info_launch_default_for_uri(const char*, GAppLaunchContext*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:164</i>
	 */
	public static GIOLibrary.gboolean g_app_info_launch_default_for_uri(Pointer<Byte > uri, Pointer<GAppLaunchContext > launch_context, Pointer<Pointer > error) {
		return g_app_info_launch_default_for_uri(Pointer.getPeer(uri), Pointer.getPeer(launch_context), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_app_info_launch_default_for_uri(@Ptr long uri, @Ptr long launch_context, @Ptr long error);
	/**
	 * Original signature : <code>GType g_app_launch_context_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:197</i>
	 */
	public static native GIOLibrary.GType g_app_launch_context_get_type();
	/**
	 * Original signature : <code>GAppLaunchContext* g_app_launch_context_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:199</i>
	 */
	public static Pointer<GAppLaunchContext > g_app_launch_context_new() {
		return Pointer.pointerToAddress(g_app_launch_context_new$2(), GAppLaunchContext.class);
	}
	@Ptr 
	protected native static long g_app_launch_context_new$2();
	/**
	 * Original signature : <code>void g_app_launch_context_setenv(GAppLaunchContext*, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:201</i>
	 */
	public static void g_app_launch_context_setenv(Pointer<GAppLaunchContext > context, Pointer<Byte > variable, Pointer<Byte > value) {
		g_app_launch_context_setenv(Pointer.getPeer(context), Pointer.getPeer(variable), Pointer.getPeer(value));
	}
	protected native static void g_app_launch_context_setenv(@Ptr long context, @Ptr long variable, @Ptr long value);
	/**
	 * Original signature : <code>void g_app_launch_context_unsetenv(GAppLaunchContext*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:203</i>
	 */
	public static void g_app_launch_context_unsetenv(Pointer<GAppLaunchContext > context, Pointer<Byte > variable) {
		g_app_launch_context_unsetenv(Pointer.getPeer(context), Pointer.getPeer(variable));
	}
	protected native static void g_app_launch_context_unsetenv(@Ptr long context, @Ptr long variable);
	/**
	 * Original signature : <code>char** g_app_launch_context_get_environment(GAppLaunchContext*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:205</i>
	 */
	public static Pointer<Pointer<Byte > > g_app_launch_context_get_environment(Pointer<GAppLaunchContext > context) {
		return Pointer.pointerToAddress(g_app_launch_context_get_environment(Pointer.getPeer(context)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_app_launch_context_get_environment(@Ptr long context);
	/**
	 * Original signature : <code>char* g_app_launch_context_get_display(GAppLaunchContext*, GAppInfo*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:207</i>
	 */
	public static Pointer<Byte > g_app_launch_context_get_display(Pointer<GAppLaunchContext > context, Pointer<GIOLibrary.GAppInfo > info, Pointer files) {
		return Pointer.pointerToAddress(g_app_launch_context_get_display(Pointer.getPeer(context), Pointer.getPeer(info), Pointer.getPeer(files)), Byte.class);
	}
	@Ptr 
	protected native static long g_app_launch_context_get_display(@Ptr long context, @Ptr long info, @Ptr long files);
	/**
	 * Original signature : <code>char* g_app_launch_context_get_startup_notify_id(GAppLaunchContext*, GAppInfo*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:209</i>
	 */
	public static Pointer<Byte > g_app_launch_context_get_startup_notify_id(Pointer<GAppLaunchContext > context, Pointer<GIOLibrary.GAppInfo > info, Pointer files) {
		return Pointer.pointerToAddress(g_app_launch_context_get_startup_notify_id(Pointer.getPeer(context), Pointer.getPeer(info), Pointer.getPeer(files)), Byte.class);
	}
	@Ptr 
	protected native static long g_app_launch_context_get_startup_notify_id(@Ptr long context, @Ptr long info, @Ptr long files);
	/**
	 * Original signature : <code>void g_app_launch_context_launch_failed(GAppLaunchContext*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gappinfo.h:211</i>
	 */
	public static void g_app_launch_context_launch_failed(Pointer<GAppLaunchContext > context, Pointer<Byte > startup_notify_id) {
		g_app_launch_context_launch_failed(Pointer.getPeer(context), Pointer.getPeer(startup_notify_id));
	}
	protected native static void g_app_launch_context_launch_failed(@Ptr long context, @Ptr long startup_notify_id);
	/**
	 * Original signature : <code>GType g_application_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:63</i>
	 */
	public static native GIOLibrary.GType g_application_get_type();
	/**
	 * Original signature : <code>gboolean g_application_id_is_valid(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:65</i>
	 */
	public static GIOLibrary.gboolean g_application_id_is_valid(Pointer<Byte > application_id) {
		return g_application_id_is_valid(Pointer.getPeer(application_id));
	}
	protected native static GIOLibrary.gboolean g_application_id_is_valid(@Ptr long application_id);
	/**
	 * Original signature : <code>GApplication* g_application_new(const gchar*, GApplicationFlags)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:67</i>
	 */
	public static Pointer<GApplication > g_application_new(Pointer<Byte > application_id, IntValuedEnum<GIOLibrary.GApplicationFlags > flags) {
		return Pointer.pointerToAddress(g_application_new(Pointer.getPeer(application_id), (int)flags.value()), GApplication.class);
	}
	@Ptr 
	protected native static long g_application_new(@Ptr long application_id, int flags);
	/**
	 * Original signature : <code>gchar* g_application_get_application_id(GApplication*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:69</i>
	 */
	public static Pointer<Byte > g_application_get_application_id(Pointer<GApplication > application) {
		return Pointer.pointerToAddress(g_application_get_application_id(Pointer.getPeer(application)), Byte.class);
	}
	@Ptr 
	protected native static long g_application_get_application_id(@Ptr long application);
	/**
	 * Original signature : <code>void g_application_set_application_id(GApplication*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:71</i>
	 */
	public static void g_application_set_application_id(Pointer<GApplication > application, Pointer<Byte > application_id) {
		g_application_set_application_id(Pointer.getPeer(application), Pointer.getPeer(application_id));
	}
	protected native static void g_application_set_application_id(@Ptr long application, @Ptr long application_id);
	/**
	 * Original signature : <code>GDBusConnection* g_application_get_dbus_connection(GApplication*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:73</i>
	 */
	public static Pointer<GIOLibrary.GDBusConnection > g_application_get_dbus_connection(Pointer<GApplication > application) {
		return Pointer.pointerToAddress(g_application_get_dbus_connection(Pointer.getPeer(application)), GIOLibrary.GDBusConnection.class);
	}
	@Ptr 
	protected native static long g_application_get_dbus_connection(@Ptr long application);
	/**
	 * Original signature : <code>gchar* g_application_get_dbus_object_path(GApplication*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:75</i>
	 */
	public static Pointer<Byte > g_application_get_dbus_object_path(Pointer<GApplication > application) {
		return Pointer.pointerToAddress(g_application_get_dbus_object_path(Pointer.getPeer(application)), Byte.class);
	}
	@Ptr 
	protected native static long g_application_get_dbus_object_path(@Ptr long application);
	/**
	 * Original signature : <code>guint g_application_get_inactivity_timeout(GApplication*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:77</i>
	 */
	public static int g_application_get_inactivity_timeout(Pointer<GApplication > application) {
		return g_application_get_inactivity_timeout(Pointer.getPeer(application));
	}
	protected native static int g_application_get_inactivity_timeout(@Ptr long application);
	/**
	 * Original signature : <code>void g_application_set_inactivity_timeout(GApplication*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:79</i>
	 */
	public static void g_application_set_inactivity_timeout(Pointer<GApplication > application, int inactivity_timeout) {
		g_application_set_inactivity_timeout(Pointer.getPeer(application), inactivity_timeout);
	}
	protected native static void g_application_set_inactivity_timeout(@Ptr long application, int inactivity_timeout);
	/**
	 * Original signature : <code>GApplicationFlags g_application_get_flags(GApplication*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:81</i>
	 */
	public static IntValuedEnum<GIOLibrary.GApplicationFlags > g_application_get_flags(Pointer<GApplication > application) {
		return FlagSet.fromValue(g_application_get_flags(Pointer.getPeer(application)), GIOLibrary.GApplicationFlags.class);
	}
	protected native static int g_application_get_flags(@Ptr long application);
	/**
	 * Original signature : <code>void g_application_set_flags(GApplication*, GApplicationFlags)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:83</i>
	 */
	public static void g_application_set_flags(Pointer<GApplication > application, IntValuedEnum<GIOLibrary.GApplicationFlags > flags) {
		g_application_set_flags(Pointer.getPeer(application), (int)flags.value());
	}
	protected native static void g_application_set_flags(@Ptr long application, int flags);
	/**
	 * Original signature : <code>void g_application_set_action_group(GApplication*, GActionGroup*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:85</i>
	 */
	public static void g_application_set_action_group(Pointer<GApplication > application, Pointer<GIOLibrary.GActionGroup > action_group) {
		g_application_set_action_group(Pointer.getPeer(application), Pointer.getPeer(action_group));
	}
	protected native static void g_application_set_action_group(@Ptr long application, @Ptr long action_group);
	/**
	 * Original signature : <code>gboolean g_application_get_is_registered(GApplication*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:87</i>
	 */
	public static GIOLibrary.gboolean g_application_get_is_registered(Pointer<GApplication > application) {
		return g_application_get_is_registered(Pointer.getPeer(application));
	}
	protected native static GIOLibrary.gboolean g_application_get_is_registered(@Ptr long application);
	/**
	 * Original signature : <code>gboolean g_application_get_is_remote(GApplication*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:89</i>
	 */
	public static GIOLibrary.gboolean g_application_get_is_remote(Pointer<GApplication > application) {
		return g_application_get_is_remote(Pointer.getPeer(application));
	}
	protected native static GIOLibrary.gboolean g_application_get_is_remote(@Ptr long application);
	/**
	 * Original signature : <code>gboolean g_application_register(GApplication*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:91</i>
	 */
	public static GIOLibrary.gboolean g_application_register(Pointer<GApplication > application, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_application_register(Pointer.getPeer(application), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_application_register(@Ptr long application, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_application_hold(GApplication*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:93</i>
	 */
	public static void g_application_hold(Pointer<GApplication > application) {
		g_application_hold(Pointer.getPeer(application));
	}
	protected native static void g_application_hold(@Ptr long application);
	/**
	 * Original signature : <code>void g_application_release(GApplication*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:95</i>
	 */
	public static void g_application_release(Pointer<GApplication > application) {
		g_application_release(Pointer.getPeer(application));
	}
	protected native static void g_application_release(@Ptr long application);
	/**
	 * Original signature : <code>void g_application_activate(GApplication*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:97</i>
	 */
	public static void g_application_activate(Pointer<GApplication > application) {
		g_application_activate(Pointer.getPeer(application));
	}
	protected native static void g_application_activate(@Ptr long application);
	/**
	 * Original signature : <code>void g_application_open(GApplication*, GFile**, gint, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:99</i>
	 */
	public static void g_application_open(Pointer<GApplication > application, Pointer<Pointer<GIOLibrary.GFile > > files, int n_files, Pointer<Byte > hint) {
		g_application_open(Pointer.getPeer(application), Pointer.getPeer(files), n_files, Pointer.getPeer(hint));
	}
	protected native static void g_application_open(@Ptr long application, @Ptr long files, int n_files, @Ptr long hint);
	/**
	 * Original signature : <code>int g_application_run(GApplication*, int, char**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:101</i>
	 */
	public static int g_application_run(Pointer<GApplication > application, int argc, Pointer<Pointer<Byte > > argv) {
		return g_application_run(Pointer.getPeer(application), argc, Pointer.getPeer(argv));
	}
	protected native static int g_application_run(@Ptr long application, int argc, @Ptr long argv);
	/**
	 * Original signature : <code>void g_application_quit(GApplication*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:103</i>
	 */
	public static void g_application_quit(Pointer<GApplication > application) {
		g_application_quit(Pointer.getPeer(application));
	}
	protected native static void g_application_quit(@Ptr long application);
	/**
	 * Original signature : <code>GApplication* g_application_get_default()</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:105</i>
	 */
	public static Pointer<GApplication > g_application_get_default() {
		return Pointer.pointerToAddress(g_application_get_default$2(), GApplication.class);
	}
	@Ptr 
	protected native static long g_application_get_default$2();
	/**
	 * Original signature : <code>void g_application_set_default(GApplication*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:107</i>
	 */
	public static void g_application_set_default(Pointer<GApplication > application) {
		g_application_set_default(Pointer.getPeer(application));
	}
	protected native static void g_application_set_default(@Ptr long application);
	/**
	 * Original signature : <code>void g_application_mark_busy(GApplication*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:109</i>
	 */
	public static void g_application_mark_busy(Pointer<GApplication > application) {
		g_application_mark_busy(Pointer.getPeer(application));
	}
	protected native static void g_application_mark_busy(@Ptr long application);
	/**
	 * Original signature : <code>void g_application_unmark_busy(GApplication*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplication.h:111</i>
	 */
	public static void g_application_unmark_busy(Pointer<GApplication > application) {
		g_application_unmark_busy(Pointer.getPeer(application));
	}
	protected native static void g_application_unmark_busy(@Ptr long application);
	/**
	 * Original signature : <code>GType g_application_command_line_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplicationcommandline.h:20</i>
	 */
	public static native GIOLibrary.GType g_application_command_line_get_type();
	/**
	 * Original signature : <code>gchar** g_application_command_line_get_arguments(GApplicationCommandLine*, int*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplicationcommandline.h:22</i>
	 */
	public static Pointer<Pointer<Byte > > g_application_command_line_get_arguments(Pointer<GApplicationCommandLine > cmdline, Pointer<Integer > argc) {
		return Pointer.pointerToAddress(g_application_command_line_get_arguments(Pointer.getPeer(cmdline), Pointer.getPeer(argc)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_application_command_line_get_arguments(@Ptr long cmdline, @Ptr long argc);
	/**
	 * Original signature : <code>GInputStream* g_application_command_line_get_stdin(GApplicationCommandLine*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplicationcommandline.h:24</i>
	 */
	public static Pointer<GInputStream > g_application_command_line_get_stdin(Pointer<GApplicationCommandLine > cmdline) {
		return Pointer.pointerToAddress(g_application_command_line_get_stdin(Pointer.getPeer(cmdline)), GInputStream.class);
	}
	@Ptr 
	protected native static long g_application_command_line_get_stdin(@Ptr long cmdline);
	/**
	 * Original signature : <code>const gchar** g_application_command_line_get_environ(GApplicationCommandLine*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplicationcommandline.h:26</i>
	 */
	public static Pointer<Pointer<Byte > > g_application_command_line_get_environ(Pointer<GApplicationCommandLine > cmdline) {
		return Pointer.pointerToAddress(g_application_command_line_get_environ(Pointer.getPeer(cmdline)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_application_command_line_get_environ(@Ptr long cmdline);
	/**
	 * Original signature : <code>gchar* g_application_command_line_getenv(GApplicationCommandLine*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplicationcommandline.h:28</i>
	 */
	public static Pointer<Byte > g_application_command_line_getenv(Pointer<GApplicationCommandLine > cmdline, Pointer<Byte > name) {
		return Pointer.pointerToAddress(g_application_command_line_getenv(Pointer.getPeer(cmdline), Pointer.getPeer(name)), Byte.class);
	}
	@Ptr 
	protected native static long g_application_command_line_getenv(@Ptr long cmdline, @Ptr long name);
	/**
	 * Original signature : <code>gchar* g_application_command_line_get_cwd(GApplicationCommandLine*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplicationcommandline.h:30</i>
	 */
	public static Pointer<Byte > g_application_command_line_get_cwd(Pointer<GApplicationCommandLine > cmdline) {
		return Pointer.pointerToAddress(g_application_command_line_get_cwd(Pointer.getPeer(cmdline)), Byte.class);
	}
	@Ptr 
	protected native static long g_application_command_line_get_cwd(@Ptr long cmdline);
	/**
	 * Original signature : <code>gboolean g_application_command_line_get_is_remote(GApplicationCommandLine*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplicationcommandline.h:32</i>
	 */
	public static GIOLibrary.gboolean g_application_command_line_get_is_remote(Pointer<GApplicationCommandLine > cmdline) {
		return g_application_command_line_get_is_remote(Pointer.getPeer(cmdline));
	}
	protected native static GIOLibrary.gboolean g_application_command_line_get_is_remote(@Ptr long cmdline);
	/**
	 * Original signature : <code>void g_application_command_line_print(GApplicationCommandLine*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplicationcommandline.h:34</i>
	 */
	public static void g_application_command_line_print(Pointer<GApplicationCommandLine > cmdline, Pointer<Byte > format, Object... varArgs1) {
		g_application_command_line_print(Pointer.getPeer(cmdline), Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_application_command_line_print(@Ptr long cmdline, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>void g_application_command_line_printerr(GApplicationCommandLine*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplicationcommandline.h:36</i>
	 */
	public static void g_application_command_line_printerr(Pointer<GApplicationCommandLine > cmdline, Pointer<Byte > format, Object... varArgs1) {
		g_application_command_line_printerr(Pointer.getPeer(cmdline), Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_application_command_line_printerr(@Ptr long cmdline, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>int g_application_command_line_get_exit_status(GApplicationCommandLine*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplicationcommandline.h:38</i>
	 */
	public static int g_application_command_line_get_exit_status(Pointer<GApplicationCommandLine > cmdline) {
		return g_application_command_line_get_exit_status(Pointer.getPeer(cmdline));
	}
	protected native static int g_application_command_line_get_exit_status(@Ptr long cmdline);
	/**
	 * Original signature : <code>void g_application_command_line_set_exit_status(GApplicationCommandLine*, int)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplicationcommandline.h:40</i>
	 */
	public static void g_application_command_line_set_exit_status(Pointer<GApplicationCommandLine > cmdline, int exit_status) {
		g_application_command_line_set_exit_status(Pointer.getPeer(cmdline), exit_status);
	}
	protected native static void g_application_command_line_set_exit_status(@Ptr long cmdline, int exit_status);
	/**
	 * Original signature : <code>GVariant* g_application_command_line_get_platform_data(GApplicationCommandLine*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplicationcommandline.h:42</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_application_command_line_get_platform_data(Pointer<GApplicationCommandLine > cmdline) {
		return Pointer.pointerToAddress(g_application_command_line_get_platform_data(Pointer.getPeer(cmdline)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_application_command_line_get_platform_data(@Ptr long cmdline);
	/**
	 * Original signature : <code>GFile* g_application_command_line_create_file_for_arg(GApplicationCommandLine*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gapplicationcommandline.h:44</i>
	 */
	public static Pointer<GIOLibrary.GFile > g_application_command_line_create_file_for_arg(Pointer<GApplicationCommandLine > cmdline, Pointer<Byte > arg) {
		return Pointer.pointerToAddress(g_application_command_line_create_file_for_arg(Pointer.getPeer(cmdline), Pointer.getPeer(arg)), GIOLibrary.GFile.class);
	}
	@Ptr 
	protected native static long g_application_command_line_create_file_for_arg(@Ptr long cmdline, @Ptr long arg);
	/**
	 * Original signature : <code>GType g_initable_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/ginitable.h:22</i>
	 */
	public static native GIOLibrary.GType g_initable_get_type();
	/**
	 * Original signature : <code>gboolean g_initable_init(GInitable*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginitable.h:24</i>
	 */
	public static GIOLibrary.gboolean g_initable_init(Pointer<GIOLibrary.GInitable > initable, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_initable_init(Pointer.getPeer(initable), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_initable_init(@Ptr long initable, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gpointer g_initable_new(GType, GCancellable*, GError**, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginitable.h:26</i>
	 */
	public static GIOLibrary.gpointer g_initable_new(GIOLibrary.GType object_type, Pointer<GCancellable > cancellable, Pointer<Pointer > error, Pointer<Byte > first_property_name, Object... varArgs1) {
		return g_initable_new(object_type, Pointer.getPeer(cancellable), Pointer.getPeer(error), Pointer.getPeer(first_property_name), varArgs1);
	}
	protected native static GIOLibrary.gpointer g_initable_new(GIOLibrary.GType object_type, @Ptr long cancellable, @Ptr long error, @Ptr long first_property_name, Object... varArgs1);
	/**
	 * Original signature : <code>gpointer g_initable_newv(GType, guint, GParameter*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginitable.h:28</i>
	 */
	public static GIOLibrary.gpointer g_initable_newv(GIOLibrary.GType object_type, int n_parameters, Pointer parameters, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_initable_newv(object_type, n_parameters, Pointer.getPeer(parameters), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gpointer g_initable_newv(GIOLibrary.GType object_type, int n_parameters, @Ptr long parameters, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>GObject* g_initable_new_valist(GType, const gchar*, va_list, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginitable.h:30</i>
	 */
	public static Pointer g_initable_new_valist(GIOLibrary.GType object_type, Pointer<Byte > first_property_name, Pointer<GCancellable > var_args, Pointer<Pointer > cancellable, Object... var_args) {
		return Pointer.pointerToAddress(g_initable_new_valist(object_type, Pointer.getPeer(first_property_name), Pointer.getPeer(var_args), Pointer.getPeer(cancellable), var_args));
	}
	@Ptr 
	protected native static long g_initable_new_valist(GIOLibrary.GType object_type, @Ptr long first_property_name, @Ptr long var_args, @Ptr long cancellable, Object... var_args);
	/**
	 * Original signature : <code>GType g_async_initable_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gasyncinitable.h:25</i>
	 */
	public static native GIOLibrary.GType g_async_initable_get_type();
	/**
	 * Original signature : <code>void g_async_initable_init_async(GAsyncInitable*, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gasyncinitable.h:27</i>
	 */
	public static void g_async_initable_init_async(Pointer<GIOLibrary.GAsyncInitable > initable, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_async_initable_init_async(Pointer.getPeer(initable), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_async_initable_init_async(@Ptr long initable, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_async_initable_init_finish(GAsyncInitable*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gasyncinitable.h:29</i>
	 */
	public static GIOLibrary.gboolean g_async_initable_init_finish(Pointer<GIOLibrary.GAsyncInitable > initable, Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return g_async_initable_init_finish(Pointer.getPeer(initable), Pointer.getPeer(res), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_async_initable_init_finish(@Ptr long initable, @Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>void g_async_initable_new_async(GType, int, GCancellable*, GAsyncReadyCallback, gpointer, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gasyncinitable.h:31</i>
	 */
	public static void g_async_initable_new_async(GIOLibrary.GType object_type, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data, Pointer<Byte > first_property_name, Object... varArgs1) {
		g_async_initable_new_async(object_type, io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data, Pointer.getPeer(first_property_name), varArgs1);
	}
	protected native static void g_async_initable_new_async(GIOLibrary.GType object_type, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data, @Ptr long first_property_name, Object... varArgs1);
	/**
	 * Original signature : <code>void g_async_initable_newv_async(GType, guint, GParameter*, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gasyncinitable.h:33</i>
	 */
	public static void g_async_initable_newv_async(GIOLibrary.GType object_type, int n_parameters, Pointer parameters, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_async_initable_newv_async(object_type, n_parameters, Pointer.getPeer(parameters), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_async_initable_newv_async(GIOLibrary.GType object_type, int n_parameters, @Ptr long parameters, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>void g_async_initable_new_valist_async(GType, const gchar*, va_list, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gasyncinitable.h:35</i>
	 */
	public static void g_async_initable_new_valist_async(GIOLibrary.GType object_type, Pointer<Byte > first_property_name, int var_args, Pointer<GCancellable > io_priority, Pointer<GIOLibrary.GAsyncReadyCallback > cancellable, GIOLibrary.gpointer callback, Object... var_args) {
		g_async_initable_new_valist_async(object_type, Pointer.getPeer(first_property_name), var_args, Pointer.getPeer(io_priority), Pointer.getPeer(cancellable), callback, var_args);
	}
	protected native static void g_async_initable_new_valist_async(GIOLibrary.GType object_type, @Ptr long first_property_name, int var_args, @Ptr long io_priority, @Ptr long cancellable, GIOLibrary.gpointer callback, Object... var_args);
	/**
	 * Original signature : <code>GObject* g_async_initable_new_finish(GAsyncInitable*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gasyncinitable.h:37</i>
	 */
	public static Pointer g_async_initable_new_finish(Pointer<GIOLibrary.GAsyncInitable > initable, Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_async_initable_new_finish(Pointer.getPeer(initable), Pointer.getPeer(res), Pointer.getPeer(error)));
	}
	@Ptr 
	protected native static long g_async_initable_new_finish(@Ptr long initable, @Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>GType g_async_result_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gasyncresult.h:27</i>
	 */
	public static native GIOLibrary.GType g_async_result_get_type();
	/**
	 * Original signature : <code>gpointer g_async_result_get_user_data(GAsyncResult*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gasyncresult.h:29</i>
	 */
	public static GIOLibrary.gpointer g_async_result_get_user_data(Pointer<GIOLibrary.GAsyncResult > res) {
		return g_async_result_get_user_data(Pointer.getPeer(res));
	}
	protected native static GIOLibrary.gpointer g_async_result_get_user_data(@Ptr long res);
	/**
	 * Original signature : <code>GObject* g_async_result_get_source_object(GAsyncResult*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gasyncresult.h:31</i>
	 */
	public static Pointer g_async_result_get_source_object(Pointer<GIOLibrary.GAsyncResult > res) {
		return Pointer.pointerToAddress(g_async_result_get_source_object(Pointer.getPeer(res)));
	}
	@Ptr 
	protected native static long g_async_result_get_source_object(@Ptr long res);
	/**
	 * Original signature : <code>gboolean g_async_result_legacy_propagate_error(GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gasyncresult.h:33</i>
	 */
	public static GIOLibrary.gboolean g_async_result_legacy_propagate_error(Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return g_async_result_legacy_propagate_error(Pointer.getPeer(res), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_async_result_legacy_propagate_error(@Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_async_result_is_tagged(GAsyncResult*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gasyncresult.h:35</i>
	 */
	public static GIOLibrary.gboolean g_async_result_is_tagged(Pointer<GIOLibrary.GAsyncResult > res, GIOLibrary.gpointer source_tag) {
		return g_async_result_is_tagged(Pointer.getPeer(res), source_tag);
	}
	protected native static GIOLibrary.gboolean g_async_result_is_tagged(@Ptr long res, GIOLibrary.gpointer source_tag);
	/**
	 * Original signature : <code>GType g_input_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:52</i>
	 */
	public static native GIOLibrary.GType g_input_stream_get_type();
	/**
	 * Original signature : <code>gssize g_input_stream_read(GInputStream*, void*, gsize, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:54</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_input_stream_read(Pointer<GInputStream > stream, Pointer<? > buffer, @org.bridj.ann.CLong long count, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_input_stream_read(Pointer.getPeer(stream), Pointer.getPeer(buffer), count, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_input_stream_read(@Ptr long stream, @Ptr long buffer, @org.bridj.ann.CLong long count, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_input_stream_read_all(GInputStream*, void*, gsize, gsize*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:56</i>
	 */
	public static GIOLibrary.gboolean g_input_stream_read_all(Pointer<GInputStream > stream, Pointer<? > buffer, @org.bridj.ann.CLong long count, Pointer<org.bridj.CLong > bytes_read, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_input_stream_read_all(Pointer.getPeer(stream), Pointer.getPeer(buffer), count, Pointer.getPeer(bytes_read), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_input_stream_read_all(@Ptr long stream, @Ptr long buffer, @org.bridj.ann.CLong long count, @Ptr long bytes_read, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>GBytes* g_input_stream_read_bytes(GInputStream*, gsize, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:58</i>
	 */
	public static Pointer<GIOLibrary.GBytes > g_input_stream_read_bytes(Pointer<GInputStream > stream, @org.bridj.ann.CLong long count, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_input_stream_read_bytes(Pointer.getPeer(stream), count, Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_input_stream_read_bytes(@Ptr long stream, @org.bridj.ann.CLong long count, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_input_stream_skip(GInputStream*, gsize, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:60</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_input_stream_skip(Pointer<GInputStream > stream, @org.bridj.ann.CLong long count, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_input_stream_skip(Pointer.getPeer(stream), count, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_input_stream_skip(@Ptr long stream, @org.bridj.ann.CLong long count, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_input_stream_close(GInputStream*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:62</i>
	 */
	public static GIOLibrary.gboolean g_input_stream_close(Pointer<GInputStream > stream, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_input_stream_close(Pointer.getPeer(stream), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_input_stream_close(@Ptr long stream, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_input_stream_read_async(GInputStream*, void*, gsize, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:64</i>
	 */
	public static void g_input_stream_read_async(Pointer<GInputStream > stream, Pointer<? > buffer, @org.bridj.ann.CLong long count, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_input_stream_read_async(Pointer.getPeer(stream), Pointer.getPeer(buffer), count, io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_input_stream_read_async(@Ptr long stream, @Ptr long buffer, @org.bridj.ann.CLong long count, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gssize g_input_stream_read_finish(GInputStream*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:66</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_input_stream_read_finish(Pointer<GInputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_input_stream_read_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_input_stream_read_finish(@Ptr long stream, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_input_stream_read_bytes_async(GInputStream*, gsize, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:68</i>
	 */
	public static void g_input_stream_read_bytes_async(Pointer<GInputStream > stream, @org.bridj.ann.CLong long count, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_input_stream_read_bytes_async(Pointer.getPeer(stream), count, io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_input_stream_read_bytes_async(@Ptr long stream, @org.bridj.ann.CLong long count, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GBytes* g_input_stream_read_bytes_finish(GInputStream*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:70</i>
	 */
	public static Pointer<GIOLibrary.GBytes > g_input_stream_read_bytes_finish(Pointer<GInputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_input_stream_read_bytes_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(error)), GIOLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_input_stream_read_bytes_finish(@Ptr long stream, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_input_stream_skip_async(GInputStream*, gsize, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:72</i>
	 */
	public static void g_input_stream_skip_async(Pointer<GInputStream > stream, @org.bridj.ann.CLong long count, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_input_stream_skip_async(Pointer.getPeer(stream), count, io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_input_stream_skip_async(@Ptr long stream, @org.bridj.ann.CLong long count, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gssize g_input_stream_skip_finish(GInputStream*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:74</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_input_stream_skip_finish(Pointer<GInputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_input_stream_skip_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_input_stream_skip_finish(@Ptr long stream, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_input_stream_close_async(GInputStream*, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:76</i>
	 */
	public static void g_input_stream_close_async(Pointer<GInputStream > stream, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_input_stream_close_async(Pointer.getPeer(stream), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_input_stream_close_async(@Ptr long stream, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_input_stream_close_finish(GInputStream*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:78</i>
	 */
	public static GIOLibrary.gboolean g_input_stream_close_finish(Pointer<GInputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_input_stream_close_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_input_stream_close_finish(@Ptr long stream, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_input_stream_is_closed(GInputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:80</i>
	 */
	public static GIOLibrary.gboolean g_input_stream_is_closed(Pointer<GInputStream > stream) {
		return g_input_stream_is_closed(Pointer.getPeer(stream));
	}
	protected native static GIOLibrary.gboolean g_input_stream_is_closed(@Ptr long stream);
	/**
	 * Original signature : <code>gboolean g_input_stream_has_pending(GInputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:82</i>
	 */
	public static GIOLibrary.gboolean g_input_stream_has_pending(Pointer<GInputStream > stream) {
		return g_input_stream_has_pending(Pointer.getPeer(stream));
	}
	protected native static GIOLibrary.gboolean g_input_stream_has_pending(@Ptr long stream);
	/**
	 * Original signature : <code>gboolean g_input_stream_set_pending(GInputStream*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:84</i>
	 */
	public static GIOLibrary.gboolean g_input_stream_set_pending(Pointer<GInputStream > stream, Pointer<Pointer > error) {
		return g_input_stream_set_pending(Pointer.getPeer(stream), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_input_stream_set_pending(@Ptr long stream, @Ptr long error);
	/**
	 * Original signature : <code>void g_input_stream_clear_pending(GInputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginputstream.h:86</i>
	 */
	public static void g_input_stream_clear_pending(Pointer<GInputStream > stream) {
		g_input_stream_clear_pending(Pointer.getPeer(stream));
	}
	protected native static void g_input_stream_clear_pending(@Ptr long stream);
	/**
	 * Original signature : <code>GType g_filter_input_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilterinputstream.h:22</i>
	 */
	public static native GIOLibrary.GType g_filter_input_stream_get_type();
	/**
	 * Original signature : <code>GInputStream* g_filter_input_stream_get_base_stream(GFilterInputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilterinputstream.h:24</i>
	 */
	public static Pointer<GInputStream > g_filter_input_stream_get_base_stream(Pointer<GFilterInputStream > stream) {
		return Pointer.pointerToAddress(g_filter_input_stream_get_base_stream(Pointer.getPeer(stream)), GInputStream.class);
	}
	@Ptr 
	protected native static long g_filter_input_stream_get_base_stream(@Ptr long stream);
	/**
	 * Original signature : <code>gboolean g_filter_input_stream_get_close_base_stream(GFilterInputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilterinputstream.h:26</i>
	 */
	public static GIOLibrary.gboolean g_filter_input_stream_get_close_base_stream(Pointer<GFilterInputStream > stream) {
		return g_filter_input_stream_get_close_base_stream(Pointer.getPeer(stream));
	}
	protected native static GIOLibrary.gboolean g_filter_input_stream_get_close_base_stream(@Ptr long stream);
	/**
	 * Original signature : <code>void g_filter_input_stream_set_close_base_stream(GFilterInputStream*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilterinputstream.h:28</i>
	 */
	public static void g_filter_input_stream_set_close_base_stream(Pointer<GFilterInputStream > stream, GIOLibrary.gboolean close_base) {
		g_filter_input_stream_set_close_base_stream(Pointer.getPeer(stream), close_base);
	}
	protected native static void g_filter_input_stream_set_close_base_stream(@Ptr long stream, GIOLibrary.gboolean close_base);
	/**
	 * Original signature : <code>GType g_buffered_input_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedinputstream.h:35</i>
	 */
	public static native GIOLibrary.GType g_buffered_input_stream_get_type();
	/**
	 * Original signature : <code>GInputStream* g_buffered_input_stream_new(GInputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedinputstream.h:37</i>
	 */
	public static Pointer<GInputStream > g_buffered_input_stream_new(Pointer<GInputStream > base_stream) {
		return Pointer.pointerToAddress(g_buffered_input_stream_new(Pointer.getPeer(base_stream)), GInputStream.class);
	}
	@Ptr 
	protected native static long g_buffered_input_stream_new(@Ptr long base_stream);
	/**
	 * Original signature : <code>GInputStream* g_buffered_input_stream_new_sized(GInputStream*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedinputstream.h:39</i>
	 */
	public static Pointer<GInputStream > g_buffered_input_stream_new_sized(Pointer<GInputStream > base_stream, @org.bridj.ann.CLong long size) {
		return Pointer.pointerToAddress(g_buffered_input_stream_new_sized(Pointer.getPeer(base_stream), size), GInputStream.class);
	}
	@Ptr 
	protected native static long g_buffered_input_stream_new_sized(@Ptr long base_stream, @org.bridj.ann.CLong long size);
	/**
	 * Original signature : <code>gsize g_buffered_input_stream_get_buffer_size(GBufferedInputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedinputstream.h:41</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_buffered_input_stream_get_buffer_size(Pointer<GBufferedInputStream > stream) {
		return g_buffered_input_stream_get_buffer_size(Pointer.getPeer(stream));
	}
	@org.bridj.ann.CLong 
	protected native static long g_buffered_input_stream_get_buffer_size(@Ptr long stream);
	/**
	 * Original signature : <code>void g_buffered_input_stream_set_buffer_size(GBufferedInputStream*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedinputstream.h:43</i>
	 */
	public static void g_buffered_input_stream_set_buffer_size(Pointer<GBufferedInputStream > stream, @org.bridj.ann.CLong long size) {
		g_buffered_input_stream_set_buffer_size(Pointer.getPeer(stream), size);
	}
	protected native static void g_buffered_input_stream_set_buffer_size(@Ptr long stream, @org.bridj.ann.CLong long size);
	/**
	 * Original signature : <code>gsize g_buffered_input_stream_get_available(GBufferedInputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedinputstream.h:45</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_buffered_input_stream_get_available(Pointer<GBufferedInputStream > stream) {
		return g_buffered_input_stream_get_available(Pointer.getPeer(stream));
	}
	@org.bridj.ann.CLong 
	protected native static long g_buffered_input_stream_get_available(@Ptr long stream);
	/**
	 * Original signature : <code>gsize g_buffered_input_stream_peek(GBufferedInputStream*, void*, gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedinputstream.h:47</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_buffered_input_stream_peek(Pointer<GBufferedInputStream > stream, Pointer<? > buffer, @org.bridj.ann.CLong long offset, @org.bridj.ann.CLong long count) {
		return g_buffered_input_stream_peek(Pointer.getPeer(stream), Pointer.getPeer(buffer), offset, count);
	}
	@org.bridj.ann.CLong 
	protected native static long g_buffered_input_stream_peek(@Ptr long stream, @Ptr long buffer, @org.bridj.ann.CLong long offset, @org.bridj.ann.CLong long count);
	/**
	 * Original signature : <code>void* g_buffered_input_stream_peek_buffer(GBufferedInputStream*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedinputstream.h:49</i>
	 */
	public static Pointer<? > g_buffered_input_stream_peek_buffer(Pointer<GBufferedInputStream > stream, Pointer<org.bridj.CLong > count) {
		return Pointer.pointerToAddress(g_buffered_input_stream_peek_buffer(Pointer.getPeer(stream), Pointer.getPeer(count)));
	}
	@Ptr 
	protected native static long g_buffered_input_stream_peek_buffer(@Ptr long stream, @Ptr long count);
	/**
	 * Original signature : <code>gssize g_buffered_input_stream_fill(GBufferedInputStream*, gssize, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedinputstream.h:51</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_buffered_input_stream_fill(Pointer<GBufferedInputStream > stream, @org.bridj.ann.CLong long count, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_buffered_input_stream_fill(Pointer.getPeer(stream), count, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_buffered_input_stream_fill(@Ptr long stream, @org.bridj.ann.CLong long count, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_buffered_input_stream_fill_async(GBufferedInputStream*, gssize, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedinputstream.h:53</i>
	 */
	public static void g_buffered_input_stream_fill_async(Pointer<GBufferedInputStream > stream, @org.bridj.ann.CLong long count, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_buffered_input_stream_fill_async(Pointer.getPeer(stream), count, io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_buffered_input_stream_fill_async(@Ptr long stream, @org.bridj.ann.CLong long count, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gssize g_buffered_input_stream_fill_finish(GBufferedInputStream*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedinputstream.h:55</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_buffered_input_stream_fill_finish(Pointer<GBufferedInputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_buffered_input_stream_fill_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_buffered_input_stream_fill_finish(@Ptr long stream, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>int g_buffered_input_stream_read_byte(GBufferedInputStream*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedinputstream.h:57</i>
	 */
	public static int g_buffered_input_stream_read_byte(Pointer<GBufferedInputStream > stream, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_buffered_input_stream_read_byte(Pointer.getPeer(stream), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static int g_buffered_input_stream_read_byte(@Ptr long stream, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>GType g_output_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:68</i>
	 */
	public static native GIOLibrary.GType g_output_stream_get_type();
	/**
	 * Original signature : <code>gssize g_output_stream_write(GOutputStream*, const void*, gsize, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:70</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_output_stream_write(Pointer<GOutputStream > stream, Pointer<? > buffer, @org.bridj.ann.CLong long count, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_output_stream_write(Pointer.getPeer(stream), Pointer.getPeer(buffer), count, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_output_stream_write(@Ptr long stream, @Ptr long buffer, @org.bridj.ann.CLong long count, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_output_stream_write_all(GOutputStream*, const void*, gsize, gsize*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:72</i>
	 */
	public static GIOLibrary.gboolean g_output_stream_write_all(Pointer<GOutputStream > stream, Pointer<? > buffer, @org.bridj.ann.CLong long count, Pointer<org.bridj.CLong > bytes_written, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_output_stream_write_all(Pointer.getPeer(stream), Pointer.getPeer(buffer), count, Pointer.getPeer(bytes_written), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_output_stream_write_all(@Ptr long stream, @Ptr long buffer, @org.bridj.ann.CLong long count, @Ptr long bytes_written, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_output_stream_write_bytes(GOutputStream*, GBytes*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:74</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_output_stream_write_bytes(Pointer<GOutputStream > stream, Pointer<GIOLibrary.GBytes > bytes, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_output_stream_write_bytes(Pointer.getPeer(stream), Pointer.getPeer(bytes), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_output_stream_write_bytes(@Ptr long stream, @Ptr long bytes, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_output_stream_splice(GOutputStream*, GInputStream*, GOutputStreamSpliceFlags, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:76</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_output_stream_splice(Pointer<GOutputStream > stream, Pointer<GInputStream > source, IntValuedEnum<GIOLibrary.GOutputStreamSpliceFlags > flags, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_output_stream_splice(Pointer.getPeer(stream), Pointer.getPeer(source), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_output_stream_splice(@Ptr long stream, @Ptr long source, int flags, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_output_stream_flush(GOutputStream*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:78</i>
	 */
	public static GIOLibrary.gboolean g_output_stream_flush(Pointer<GOutputStream > stream, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_output_stream_flush(Pointer.getPeer(stream), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_output_stream_flush(@Ptr long stream, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_output_stream_close(GOutputStream*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:80</i>
	 */
	public static GIOLibrary.gboolean g_output_stream_close(Pointer<GOutputStream > stream, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_output_stream_close(Pointer.getPeer(stream), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_output_stream_close(@Ptr long stream, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_output_stream_write_async(GOutputStream*, const void*, gsize, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:82</i>
	 */
	public static void g_output_stream_write_async(Pointer<GOutputStream > stream, Pointer<? > buffer, @org.bridj.ann.CLong long count, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_output_stream_write_async(Pointer.getPeer(stream), Pointer.getPeer(buffer), count, io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_output_stream_write_async(@Ptr long stream, @Ptr long buffer, @org.bridj.ann.CLong long count, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gssize g_output_stream_write_finish(GOutputStream*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:84</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_output_stream_write_finish(Pointer<GOutputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_output_stream_write_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_output_stream_write_finish(@Ptr long stream, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_output_stream_write_bytes_async(GOutputStream*, GBytes*, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:86</i>
	 */
	public static void g_output_stream_write_bytes_async(Pointer<GOutputStream > stream, Pointer<GIOLibrary.GBytes > bytes, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_output_stream_write_bytes_async(Pointer.getPeer(stream), Pointer.getPeer(bytes), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_output_stream_write_bytes_async(@Ptr long stream, @Ptr long bytes, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gssize g_output_stream_write_bytes_finish(GOutputStream*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:88</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_output_stream_write_bytes_finish(Pointer<GOutputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_output_stream_write_bytes_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_output_stream_write_bytes_finish(@Ptr long stream, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_output_stream_splice_async(GOutputStream*, GInputStream*, GOutputStreamSpliceFlags, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:90</i>
	 */
	public static void g_output_stream_splice_async(Pointer<GOutputStream > stream, Pointer<GInputStream > source, IntValuedEnum<GIOLibrary.GOutputStreamSpliceFlags > flags, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_output_stream_splice_async(Pointer.getPeer(stream), Pointer.getPeer(source), (int)flags.value(), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_output_stream_splice_async(@Ptr long stream, @Ptr long source, int flags, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gssize g_output_stream_splice_finish(GOutputStream*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:92</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_output_stream_splice_finish(Pointer<GOutputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_output_stream_splice_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_output_stream_splice_finish(@Ptr long stream, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_output_stream_flush_async(GOutputStream*, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:94</i>
	 */
	public static void g_output_stream_flush_async(Pointer<GOutputStream > stream, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_output_stream_flush_async(Pointer.getPeer(stream), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_output_stream_flush_async(@Ptr long stream, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_output_stream_flush_finish(GOutputStream*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:96</i>
	 */
	public static GIOLibrary.gboolean g_output_stream_flush_finish(Pointer<GOutputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_output_stream_flush_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_output_stream_flush_finish(@Ptr long stream, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_output_stream_close_async(GOutputStream*, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:98</i>
	 */
	public static void g_output_stream_close_async(Pointer<GOutputStream > stream, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_output_stream_close_async(Pointer.getPeer(stream), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_output_stream_close_async(@Ptr long stream, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_output_stream_close_finish(GOutputStream*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:100</i>
	 */
	public static GIOLibrary.gboolean g_output_stream_close_finish(Pointer<GOutputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_output_stream_close_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_output_stream_close_finish(@Ptr long stream, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_output_stream_is_closed(GOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:102</i>
	 */
	public static GIOLibrary.gboolean g_output_stream_is_closed(Pointer<GOutputStream > stream) {
		return g_output_stream_is_closed(Pointer.getPeer(stream));
	}
	protected native static GIOLibrary.gboolean g_output_stream_is_closed(@Ptr long stream);
	/**
	 * Original signature : <code>gboolean g_output_stream_is_closing(GOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:104</i>
	 */
	public static GIOLibrary.gboolean g_output_stream_is_closing(Pointer<GOutputStream > stream) {
		return g_output_stream_is_closing(Pointer.getPeer(stream));
	}
	protected native static GIOLibrary.gboolean g_output_stream_is_closing(@Ptr long stream);
	/**
	 * Original signature : <code>gboolean g_output_stream_has_pending(GOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:106</i>
	 */
	public static GIOLibrary.gboolean g_output_stream_has_pending(Pointer<GOutputStream > stream) {
		return g_output_stream_has_pending(Pointer.getPeer(stream));
	}
	protected native static GIOLibrary.gboolean g_output_stream_has_pending(@Ptr long stream);
	/**
	 * Original signature : <code>gboolean g_output_stream_set_pending(GOutputStream*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:108</i>
	 */
	public static GIOLibrary.gboolean g_output_stream_set_pending(Pointer<GOutputStream > stream, Pointer<Pointer > error) {
		return g_output_stream_set_pending(Pointer.getPeer(stream), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_output_stream_set_pending(@Ptr long stream, @Ptr long error);
	/**
	 * Original signature : <code>void g_output_stream_clear_pending(GOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/goutputstream.h:110</i>
	 */
	public static void g_output_stream_clear_pending(Pointer<GOutputStream > stream) {
		g_output_stream_clear_pending(Pointer.getPeer(stream));
	}
	protected native static void g_output_stream_clear_pending(@Ptr long stream);
	/**
	 * Original signature : <code>GType g_filter_output_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilteroutputstream.h:22</i>
	 */
	public static native GIOLibrary.GType g_filter_output_stream_get_type();
	/**
	 * Original signature : <code>GOutputStream* g_filter_output_stream_get_base_stream(GFilterOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilteroutputstream.h:24</i>
	 */
	public static Pointer<GOutputStream > g_filter_output_stream_get_base_stream(Pointer<GFilterOutputStream > stream) {
		return Pointer.pointerToAddress(g_filter_output_stream_get_base_stream(Pointer.getPeer(stream)), GOutputStream.class);
	}
	@Ptr 
	protected native static long g_filter_output_stream_get_base_stream(@Ptr long stream);
	/**
	 * Original signature : <code>gboolean g_filter_output_stream_get_close_base_stream(GFilterOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilteroutputstream.h:26</i>
	 */
	public static GIOLibrary.gboolean g_filter_output_stream_get_close_base_stream(Pointer<GFilterOutputStream > stream) {
		return g_filter_output_stream_get_close_base_stream(Pointer.getPeer(stream));
	}
	protected native static GIOLibrary.gboolean g_filter_output_stream_get_close_base_stream(@Ptr long stream);
	/**
	 * Original signature : <code>void g_filter_output_stream_set_close_base_stream(GFilterOutputStream*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilteroutputstream.h:28</i>
	 */
	public static void g_filter_output_stream_set_close_base_stream(Pointer<GFilterOutputStream > stream, GIOLibrary.gboolean close_base) {
		g_filter_output_stream_set_close_base_stream(Pointer.getPeer(stream), close_base);
	}
	protected native static void g_filter_output_stream_set_close_base_stream(@Ptr long stream, GIOLibrary.gboolean close_base);
	/**
	 * Original signature : <code>GType g_buffered_output_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedoutputstream.h:21</i>
	 */
	public static native GIOLibrary.GType g_buffered_output_stream_get_type();
	/**
	 * Original signature : <code>GOutputStream* g_buffered_output_stream_new(GOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedoutputstream.h:23</i>
	 */
	public static Pointer<GOutputStream > g_buffered_output_stream_new(Pointer<GOutputStream > base_stream) {
		return Pointer.pointerToAddress(g_buffered_output_stream_new(Pointer.getPeer(base_stream)), GOutputStream.class);
	}
	@Ptr 
	protected native static long g_buffered_output_stream_new(@Ptr long base_stream);
	/**
	 * Original signature : <code>GOutputStream* g_buffered_output_stream_new_sized(GOutputStream*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedoutputstream.h:25</i>
	 */
	public static Pointer<GOutputStream > g_buffered_output_stream_new_sized(Pointer<GOutputStream > base_stream, @org.bridj.ann.CLong long size) {
		return Pointer.pointerToAddress(g_buffered_output_stream_new_sized(Pointer.getPeer(base_stream), size), GOutputStream.class);
	}
	@Ptr 
	protected native static long g_buffered_output_stream_new_sized(@Ptr long base_stream, @org.bridj.ann.CLong long size);
	/**
	 * Original signature : <code>gsize g_buffered_output_stream_get_buffer_size(GBufferedOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedoutputstream.h:27</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_buffered_output_stream_get_buffer_size(Pointer<GBufferedOutputStream > stream) {
		return g_buffered_output_stream_get_buffer_size(Pointer.getPeer(stream));
	}
	@org.bridj.ann.CLong 
	protected native static long g_buffered_output_stream_get_buffer_size(@Ptr long stream);
	/**
	 * Original signature : <code>void g_buffered_output_stream_set_buffer_size(GBufferedOutputStream*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedoutputstream.h:29</i>
	 */
	public static void g_buffered_output_stream_set_buffer_size(Pointer<GBufferedOutputStream > stream, @org.bridj.ann.CLong long size) {
		g_buffered_output_stream_set_buffer_size(Pointer.getPeer(stream), size);
	}
	protected native static void g_buffered_output_stream_set_buffer_size(@Ptr long stream, @org.bridj.ann.CLong long size);
	/**
	 * Original signature : <code>gboolean g_buffered_output_stream_get_auto_grow(GBufferedOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedoutputstream.h:31</i>
	 */
	public static GIOLibrary.gboolean g_buffered_output_stream_get_auto_grow(Pointer<GBufferedOutputStream > stream) {
		return g_buffered_output_stream_get_auto_grow(Pointer.getPeer(stream));
	}
	protected native static GIOLibrary.gboolean g_buffered_output_stream_get_auto_grow(@Ptr long stream);
	/**
	 * Original signature : <code>void g_buffered_output_stream_set_auto_grow(GBufferedOutputStream*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbufferedoutputstream.h:33</i>
	 */
	public static void g_buffered_output_stream_set_auto_grow(Pointer<GBufferedOutputStream > stream, GIOLibrary.gboolean auto_grow) {
		g_buffered_output_stream_set_auto_grow(Pointer.getPeer(stream), auto_grow);
	}
	protected native static void g_buffered_output_stream_set_auto_grow(@Ptr long stream, GIOLibrary.gboolean auto_grow);
	/**
	 * GBytesIcon:<br>
	 * * Gets an icon for a #GBytes. Implements #GLoadableIcon.<br>
	 * Original signature : <code>GType g_bytes_icon_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gbytesicon.h:6</i>
	 */
	public static native GIOLibrary.GType g_bytes_icon_get_type();
	/**
	 * Original signature : <code>GIcon* g_bytes_icon_new(GBytes*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbytesicon.h:8</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_bytes_icon_new(Pointer<GIOLibrary.GBytes > bytes) {
		return Pointer.pointerToAddress(g_bytes_icon_new(Pointer.getPeer(bytes)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_bytes_icon_new(@Ptr long bytes);
	/**
	 * Original signature : <code>GBytes* g_bytes_icon_get_bytes(GBytesIcon*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gbytesicon.h:10</i>
	 */
	public static Pointer<GIOLibrary.GBytes > g_bytes_icon_get_bytes(Pointer<GIOLibrary.GBytesIcon > icon) {
		return Pointer.pointerToAddress(g_bytes_icon_get_bytes(Pointer.getPeer(icon)), GIOLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_bytes_icon_get_bytes(@Ptr long icon);
	/**
	 * Original signature : <code>GType g_cancellable_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gcancellable.h:29</i>
	 */
	public static native GIOLibrary.GType g_cancellable_get_type();
	/**
	 * Original signature : <code>GCancellable* g_cancellable_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gcancellable.h:31</i>
	 */
	public static Pointer<GCancellable > g_cancellable_new() {
		return Pointer.pointerToAddress(g_cancellable_new$2(), GCancellable.class);
	}
	@Ptr 
	protected native static long g_cancellable_new$2();
	/**
	 * These are only safe to call inside a cancellable op<br>
	 * Original signature : <code>gboolean g_cancellable_is_cancelled(GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcancellable.h:36</i>
	 */
	public static GIOLibrary.gboolean g_cancellable_is_cancelled(Pointer<GCancellable > cancellable) {
		return g_cancellable_is_cancelled(Pointer.getPeer(cancellable));
	}
	protected native static GIOLibrary.gboolean g_cancellable_is_cancelled(@Ptr long cancellable);
	/**
	 * Original signature : <code>gboolean g_cancellable_set_error_if_cancelled(GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcancellable.h:38</i>
	 */
	public static GIOLibrary.gboolean g_cancellable_set_error_if_cancelled(Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_cancellable_set_error_if_cancelled(Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_cancellable_set_error_if_cancelled(@Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>int g_cancellable_get_fd(GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcancellable.h:40</i>
	 */
	public static int g_cancellable_get_fd(Pointer<GCancellable > cancellable) {
		return g_cancellable_get_fd(Pointer.getPeer(cancellable));
	}
	protected native static int g_cancellable_get_fd(@Ptr long cancellable);
	/**
	 * Original signature : <code>gboolean g_cancellable_make_pollfd(GCancellable*, GPollFD*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcancellable.h:42</i>
	 */
	public static GIOLibrary.gboolean g_cancellable_make_pollfd(Pointer<GCancellable > cancellable, Pointer pollfd) {
		return g_cancellable_make_pollfd(Pointer.getPeer(cancellable), Pointer.getPeer(pollfd));
	}
	protected native static GIOLibrary.gboolean g_cancellable_make_pollfd(@Ptr long cancellable, @Ptr long pollfd);
	/**
	 * Original signature : <code>void g_cancellable_release_fd(GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcancellable.h:44</i>
	 */
	public static void g_cancellable_release_fd(Pointer<GCancellable > cancellable) {
		g_cancellable_release_fd(Pointer.getPeer(cancellable));
	}
	protected native static void g_cancellable_release_fd(@Ptr long cancellable);
	/**
	 * Original signature : <code>GSource* g_cancellable_source_new(GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcancellable.h:46</i>
	 */
	public static Pointer g_cancellable_source_new(Pointer<GCancellable > cancellable) {
		return Pointer.pointerToAddress(g_cancellable_source_new(Pointer.getPeer(cancellable)));
	}
	@Ptr 
	protected native static long g_cancellable_source_new(@Ptr long cancellable);
	/**
	 * Original signature : <code>GCancellable* g_cancellable_get_current()</code><br>
	 * <i>native declaration : glib-2.0/gio/gcancellable.h:48</i>
	 */
	public static Pointer<GCancellable > g_cancellable_get_current() {
		return Pointer.pointerToAddress(g_cancellable_get_current$2(), GCancellable.class);
	}
	@Ptr 
	protected native static long g_cancellable_get_current$2();
	/**
	 * Original signature : <code>void g_cancellable_push_current(GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcancellable.h:50</i>
	 */
	public static void g_cancellable_push_current(Pointer<GCancellable > cancellable) {
		g_cancellable_push_current(Pointer.getPeer(cancellable));
	}
	protected native static void g_cancellable_push_current(@Ptr long cancellable);
	/**
	 * Original signature : <code>void g_cancellable_pop_current(GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcancellable.h:52</i>
	 */
	public static void g_cancellable_pop_current(Pointer<GCancellable > cancellable) {
		g_cancellable_pop_current(Pointer.getPeer(cancellable));
	}
	protected native static void g_cancellable_pop_current(@Ptr long cancellable);
	/**
	 * Original signature : <code>void g_cancellable_reset(GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcancellable.h:54</i>
	 */
	public static void g_cancellable_reset(Pointer<GCancellable > cancellable) {
		g_cancellable_reset(Pointer.getPeer(cancellable));
	}
	protected native static void g_cancellable_reset(@Ptr long cancellable);
	/**
	 * Original signature : <code>gulong g_cancellable_connect(GCancellable*, GCallback, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcancellable.h:56</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_cancellable_connect(Pointer<GCancellable > cancellable, GIOLibrary.GCallback callback, GIOLibrary.gpointer data, GIOLibrary.GDestroyNotify data_destroy_func) {
		return g_cancellable_connect(Pointer.getPeer(cancellable), Pointer.getPeer(callback), data, Pointer.getPeer(data_destroy_func));
	}
	@org.bridj.ann.CLong 
	protected native static long g_cancellable_connect(@Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer data, @Ptr long data_destroy_func);
	/**
	 * Original signature : <code>void g_cancellable_disconnect(GCancellable*, gulong)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcancellable.h:58</i>
	 */
	public static void g_cancellable_disconnect(Pointer<GCancellable > cancellable, @org.bridj.ann.CLong long handler_id) {
		g_cancellable_disconnect(Pointer.getPeer(cancellable), handler_id);
	}
	protected native static void g_cancellable_disconnect(@Ptr long cancellable, @org.bridj.ann.CLong long handler_id);
	/**
	 * This is safe to call from another thread<br>
	 * Original signature : <code>void g_cancellable_cancel(GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcancellable.h:63</i>
	 */
	public static void g_cancellable_cancel(Pointer<GCancellable > cancellable) {
		g_cancellable_cancel(Pointer.getPeer(cancellable));
	}
	protected native static void g_cancellable_cancel(@Ptr long cancellable);
	/**
	 * Original signature : <code>GType g_converter_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gconverter.h:26</i>
	 */
	public static native GIOLibrary.GType g_converter_get_type();
	/**
	 * Original signature : <code>GConverterResult g_converter_convert(GConverter*, const void*, gsize, void*, gsize, GConverterFlags, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gconverter.h:28</i>
	 */
	public static IntValuedEnum<GIOLibrary.GConverterResult > g_converter_convert(Pointer<GIOLibrary.GConverter > converter, Pointer<? > inbuf, @org.bridj.ann.CLong long inbuf_size, Pointer<? > outbuf, @org.bridj.ann.CLong long outbuf_size, IntValuedEnum<GIOLibrary.GConverterFlags > flags, Pointer<org.bridj.CLong > bytes_read, Pointer<org.bridj.CLong > bytes_written, Pointer<Pointer > error) {
		return FlagSet.fromValue(g_converter_convert(Pointer.getPeer(converter), Pointer.getPeer(inbuf), inbuf_size, Pointer.getPeer(outbuf), outbuf_size, (int)flags.value(), Pointer.getPeer(bytes_read), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), GIOLibrary.GConverterResult.class);
	}
	protected native static int g_converter_convert(@Ptr long converter, @Ptr long inbuf, @org.bridj.ann.CLong long inbuf_size, @Ptr long outbuf, @org.bridj.ann.CLong long outbuf_size, int flags, @Ptr long bytes_read, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Original signature : <code>void g_converter_reset(GConverter*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gconverter.h:30</i>
	 */
	public static void g_converter_reset(Pointer<GIOLibrary.GConverter > converter) {
		g_converter_reset(Pointer.getPeer(converter));
	}
	protected native static void g_converter_reset(@Ptr long converter);
	/**
	 * Original signature : <code>GType g_charset_converter_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gcharsetconverter.h:6</i>
	 */
	public static native GIOLibrary.GType g_charset_converter_get_type();
	/**
	 * Original signature : <code>GCharsetConverter* g_charset_converter_new(const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcharsetconverter.h:8</i>
	 */
	public static Pointer<GIOLibrary.GCharsetConverter > g_charset_converter_new(Pointer<Byte > to_charset, Pointer<Byte > from_charset, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_charset_converter_new(Pointer.getPeer(to_charset), Pointer.getPeer(from_charset), Pointer.getPeer(error)), GIOLibrary.GCharsetConverter.class);
	}
	@Ptr 
	protected native static long g_charset_converter_new(@Ptr long to_charset, @Ptr long from_charset, @Ptr long error);
	/**
	 * Original signature : <code>void g_charset_converter_set_use_fallback(GCharsetConverter*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcharsetconverter.h:10</i>
	 */
	public static void g_charset_converter_set_use_fallback(Pointer<GIOLibrary.GCharsetConverter > converter, GIOLibrary.gboolean use_fallback) {
		g_charset_converter_set_use_fallback(Pointer.getPeer(converter), use_fallback);
	}
	protected native static void g_charset_converter_set_use_fallback(@Ptr long converter, GIOLibrary.gboolean use_fallback);
	/**
	 * Original signature : <code>gboolean g_charset_converter_get_use_fallback(GCharsetConverter*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcharsetconverter.h:12</i>
	 */
	public static GIOLibrary.gboolean g_charset_converter_get_use_fallback(Pointer<GIOLibrary.GCharsetConverter > converter) {
		return g_charset_converter_get_use_fallback(Pointer.getPeer(converter));
	}
	protected native static GIOLibrary.gboolean g_charset_converter_get_use_fallback(@Ptr long converter);
	/**
	 * Original signature : <code>guint g_charset_converter_get_num_fallbacks(GCharsetConverter*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcharsetconverter.h:14</i>
	 */
	public static int g_charset_converter_get_num_fallbacks(Pointer<GIOLibrary.GCharsetConverter > converter) {
		return g_charset_converter_get_num_fallbacks(Pointer.getPeer(converter));
	}
	protected native static int g_charset_converter_get_num_fallbacks(@Ptr long converter);
	/**
	 * Original signature : <code>gboolean g_content_type_equals(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcontenttype.h:2</i>
	 */
	public static GIOLibrary.gboolean g_content_type_equals(Pointer<Byte > type1, Pointer<Byte > type2) {
		return g_content_type_equals(Pointer.getPeer(type1), Pointer.getPeer(type2));
	}
	protected native static GIOLibrary.gboolean g_content_type_equals(@Ptr long type1, @Ptr long type2);
	/**
	 * Original signature : <code>gboolean g_content_type_is_a(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcontenttype.h:4</i>
	 */
	public static GIOLibrary.gboolean g_content_type_is_a(Pointer<Byte > type, Pointer<Byte > supertype) {
		return g_content_type_is_a(Pointer.getPeer(type), Pointer.getPeer(supertype));
	}
	protected native static GIOLibrary.gboolean g_content_type_is_a(@Ptr long type, @Ptr long supertype);
	/**
	 * Original signature : <code>gboolean g_content_type_is_unknown(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcontenttype.h:6</i>
	 */
	public static GIOLibrary.gboolean g_content_type_is_unknown(Pointer<Byte > type) {
		return g_content_type_is_unknown(Pointer.getPeer(type));
	}
	protected native static GIOLibrary.gboolean g_content_type_is_unknown(@Ptr long type);
	/**
	 * Original signature : <code>gchar* g_content_type_get_description(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcontenttype.h:8</i>
	 */
	public static Pointer<Byte > g_content_type_get_description(Pointer<Byte > type) {
		return Pointer.pointerToAddress(g_content_type_get_description(Pointer.getPeer(type)), Byte.class);
	}
	@Ptr 
	protected native static long g_content_type_get_description(@Ptr long type);
	/**
	 * Original signature : <code>gchar* g_content_type_get_mime_type(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcontenttype.h:10</i>
	 */
	public static Pointer<Byte > g_content_type_get_mime_type(Pointer<Byte > type) {
		return Pointer.pointerToAddress(g_content_type_get_mime_type(Pointer.getPeer(type)), Byte.class);
	}
	@Ptr 
	protected native static long g_content_type_get_mime_type(@Ptr long type);
	/**
	 * Original signature : <code>GIcon* g_content_type_get_icon(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcontenttype.h:12</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_content_type_get_icon(Pointer<Byte > type) {
		return Pointer.pointerToAddress(g_content_type_get_icon(Pointer.getPeer(type)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_content_type_get_icon(@Ptr long type);
	/**
	 * Original signature : <code>GIcon* g_content_type_get_symbolic_icon(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcontenttype.h:14</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_content_type_get_symbolic_icon(Pointer<Byte > type) {
		return Pointer.pointerToAddress(g_content_type_get_symbolic_icon(Pointer.getPeer(type)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_content_type_get_symbolic_icon(@Ptr long type);
	/**
	 * Original signature : <code>gchar* g_content_type_get_generic_icon_name(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcontenttype.h:16</i>
	 */
	public static Pointer<Byte > g_content_type_get_generic_icon_name(Pointer<Byte > type) {
		return Pointer.pointerToAddress(g_content_type_get_generic_icon_name(Pointer.getPeer(type)), Byte.class);
	}
	@Ptr 
	protected native static long g_content_type_get_generic_icon_name(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_content_type_can_be_executable(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcontenttype.h:18</i>
	 */
	public static GIOLibrary.gboolean g_content_type_can_be_executable(Pointer<Byte > type) {
		return g_content_type_can_be_executable(Pointer.getPeer(type));
	}
	protected native static GIOLibrary.gboolean g_content_type_can_be_executable(@Ptr long type);
	/**
	 * Original signature : <code>gchar* g_content_type_from_mime_type(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcontenttype.h:20</i>
	 */
	public static Pointer<Byte > g_content_type_from_mime_type(Pointer<Byte > mime_type) {
		return Pointer.pointerToAddress(g_content_type_from_mime_type(Pointer.getPeer(mime_type)), Byte.class);
	}
	@Ptr 
	protected native static long g_content_type_from_mime_type(@Ptr long mime_type);
	/**
	 * Original signature : <code>gchar* g_content_type_guess(const gchar*, const guchar*, gsize, gboolean*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcontenttype.h:22</i>
	 */
	public static Pointer<Byte > g_content_type_guess(Pointer<Byte > filename, Pointer<Byte > data, @org.bridj.ann.CLong long data_size, Pointer<GIOLibrary.gboolean > result_uncertain) {
		return Pointer.pointerToAddress(g_content_type_guess(Pointer.getPeer(filename), Pointer.getPeer(data), data_size, Pointer.getPeer(result_uncertain)), Byte.class);
	}
	@Ptr 
	protected native static long g_content_type_guess(@Ptr long filename, @Ptr long data, @org.bridj.ann.CLong long data_size, @Ptr long result_uncertain);
	/**
	 * Original signature : <code>gchar** g_content_type_guess_for_tree(GFile*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcontenttype.h:24</i>
	 */
	public static Pointer<Pointer<Byte > > g_content_type_guess_for_tree(Pointer<GIOLibrary.GFile > root) {
		return Pointer.pointerToAddress(g_content_type_guess_for_tree(Pointer.getPeer(root)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_content_type_guess_for_tree(@Ptr long root);
	/**
	 * Original signature : <code>GList* g_content_types_get_registered()</code><br>
	 * <i>native declaration : glib-2.0/gio/gcontenttype.h:26</i>
	 */
	public static Pointer g_content_types_get_registered() {
		return Pointer.pointerToAddress(g_content_types_get_registered$2());
	}
	@Ptr 
	protected native static long g_content_types_get_registered$2();
	/**
	 * Original signature : <code>GType g_converter_input_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gconverterinputstream.h:28</i>
	 */
	public static native GIOLibrary.GType g_converter_input_stream_get_type();
	/**
	 * Original signature : <code>GInputStream* g_converter_input_stream_new(GInputStream*, GConverter*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gconverterinputstream.h:30</i>
	 */
	public static Pointer<GInputStream > g_converter_input_stream_new(Pointer<GInputStream > base_stream, Pointer<GIOLibrary.GConverter > converter) {
		return Pointer.pointerToAddress(g_converter_input_stream_new(Pointer.getPeer(base_stream), Pointer.getPeer(converter)), GInputStream.class);
	}
	@Ptr 
	protected native static long g_converter_input_stream_new(@Ptr long base_stream, @Ptr long converter);
	/**
	 * Original signature : <code>GConverter* g_converter_input_stream_get_converter(GConverterInputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gconverterinputstream.h:32</i>
	 */
	public static Pointer<GIOLibrary.GConverter > g_converter_input_stream_get_converter(Pointer<GConverterInputStream > converter_stream) {
		return Pointer.pointerToAddress(g_converter_input_stream_get_converter(Pointer.getPeer(converter_stream)), GIOLibrary.GConverter.class);
	}
	@Ptr 
	protected native static long g_converter_input_stream_get_converter(@Ptr long converter_stream);
	/**
	 * Original signature : <code>GType g_converter_output_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gconverteroutputstream.h:28</i>
	 */
	public static native GIOLibrary.GType g_converter_output_stream_get_type();
	/**
	 * Original signature : <code>GOutputStream* g_converter_output_stream_new(GOutputStream*, GConverter*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gconverteroutputstream.h:30</i>
	 */
	public static Pointer<GOutputStream > g_converter_output_stream_new(Pointer<GOutputStream > base_stream, Pointer<GIOLibrary.GConverter > converter) {
		return Pointer.pointerToAddress(g_converter_output_stream_new(Pointer.getPeer(base_stream), Pointer.getPeer(converter)), GOutputStream.class);
	}
	@Ptr 
	protected native static long g_converter_output_stream_new(@Ptr long base_stream, @Ptr long converter);
	/**
	 * Original signature : <code>GConverter* g_converter_output_stream_get_converter(GConverterOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gconverteroutputstream.h:32</i>
	 */
	public static Pointer<GIOLibrary.GConverter > g_converter_output_stream_get_converter(Pointer<GConverterOutputStream > converter_stream) {
		return Pointer.pointerToAddress(g_converter_output_stream_get_converter(Pointer.getPeer(converter_stream)), GIOLibrary.GConverter.class);
	}
	@Ptr 
	protected native static long g_converter_output_stream_get_converter(@Ptr long converter_stream);
	/**
	 * Original signature : <code>GType g_credentials_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gcredentials.h:3</i>
	 */
	public static native GIOLibrary.GType g_credentials_get_type();
	/**
	 * Original signature : <code>GCredentials* g_credentials_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gcredentials.h:5</i>
	 */
	public static Pointer<GIOLibrary.GCredentials > g_credentials_new() {
		return Pointer.pointerToAddress(g_credentials_new$2(), GIOLibrary.GCredentials.class);
	}
	@Ptr 
	protected native static long g_credentials_new$2();
	/**
	 * Original signature : <code>gchar* g_credentials_to_string(GCredentials*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcredentials.h:7</i>
	 */
	public static Pointer<Byte > g_credentials_to_string(Pointer<GIOLibrary.GCredentials > credentials) {
		return Pointer.pointerToAddress(g_credentials_to_string(Pointer.getPeer(credentials)), Byte.class);
	}
	@Ptr 
	protected native static long g_credentials_to_string(@Ptr long credentials);
	/**
	 * Original signature : <code>gpointer g_credentials_get_native(GCredentials*, GCredentialsType)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcredentials.h:9</i>
	 */
	public static GIOLibrary.gpointer g_credentials_get_native(Pointer<GIOLibrary.GCredentials > credentials, IntValuedEnum<GIOLibrary.GCredentialsType > native_type) {
		return g_credentials_get_native(Pointer.getPeer(credentials), (int)native_type.value());
	}
	protected native static GIOLibrary.gpointer g_credentials_get_native(@Ptr long credentials, int native_type);
	/**
	 * Original signature : <code>void g_credentials_set_native(GCredentials*, GCredentialsType, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcredentials.h:11</i>
	 */
	public static void g_credentials_set_native(Pointer<GIOLibrary.GCredentials > credentials, IntValuedEnum<GIOLibrary.GCredentialsType > native_type, GIOLibrary.gpointer native$) {
		g_credentials_set_native(Pointer.getPeer(credentials), (int)native_type.value(), native$);
	}
	protected native static void g_credentials_set_native(@Ptr long credentials, int native_type, GIOLibrary.gpointer native$);
	/**
	 * Original signature : <code>gboolean g_credentials_is_same_user(GCredentials*, GCredentials*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcredentials.h:13</i>
	 */
	public static GIOLibrary.gboolean g_credentials_is_same_user(Pointer<GIOLibrary.GCredentials > credentials, Pointer<GIOLibrary.GCredentials > other_credentials, Pointer<Pointer > error) {
		return g_credentials_is_same_user(Pointer.getPeer(credentials), Pointer.getPeer(other_credentials), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_credentials_is_same_user(@Ptr long credentials, @Ptr long other_credentials, @Ptr long error);
	/**
	 * Original signature : <code>pid_t g_credentials_get_unix_pid(GCredentials*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcredentials.h:15</i>
	 */
	public static int g_credentials_get_unix_pid(Pointer<GIOLibrary.GCredentials > credentials, Pointer<Pointer > error) {
		return g_credentials_get_unix_pid(Pointer.getPeer(credentials), Pointer.getPeer(error));
	}
	protected native static int g_credentials_get_unix_pid(@Ptr long credentials, @Ptr long error);
	/**
	 * Original signature : <code>uid_t g_credentials_get_unix_user(GCredentials*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcredentials.h:17</i>
	 */
	public static int g_credentials_get_unix_user(Pointer<GIOLibrary.GCredentials > credentials, Pointer<Pointer > error) {
		return g_credentials_get_unix_user(Pointer.getPeer(credentials), Pointer.getPeer(error));
	}
	protected native static int g_credentials_get_unix_user(@Ptr long credentials, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_credentials_set_unix_user(GCredentials*, uid_t, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gcredentials.h:19</i>
	 */
	public static GIOLibrary.gboolean g_credentials_set_unix_user(Pointer<GIOLibrary.GCredentials > credentials, int uid, Pointer<Pointer > error) {
		return g_credentials_set_unix_user(Pointer.getPeer(credentials), uid, Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_credentials_set_unix_user(@Ptr long credentials, int uid, @Ptr long error);
	/**
	 * Original signature : <code>GType g_data_input_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:28</i>
	 */
	public static native GIOLibrary.GType g_data_input_stream_get_type();
	/**
	 * Original signature : <code>GDataInputStream* g_data_input_stream_new(GInputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:30</i>
	 */
	public static Pointer<GDataInputStream > g_data_input_stream_new(Pointer<GInputStream > base_stream) {
		return Pointer.pointerToAddress(g_data_input_stream_new(Pointer.getPeer(base_stream)), GDataInputStream.class);
	}
	@Ptr 
	protected native static long g_data_input_stream_new(@Ptr long base_stream);
	/**
	 * Original signature : <code>void g_data_input_stream_set_byte_order(GDataInputStream*, GDataStreamByteOrder)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:32</i>
	 */
	public static void g_data_input_stream_set_byte_order(Pointer<GDataInputStream > stream, IntValuedEnum<GIOLibrary.GDataStreamByteOrder > order) {
		g_data_input_stream_set_byte_order(Pointer.getPeer(stream), (int)order.value());
	}
	protected native static void g_data_input_stream_set_byte_order(@Ptr long stream, int order);
	/**
	 * Original signature : <code>GDataStreamByteOrder g_data_input_stream_get_byte_order(GDataInputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:34</i>
	 */
	public static IntValuedEnum<GIOLibrary.GDataStreamByteOrder > g_data_input_stream_get_byte_order(Pointer<GDataInputStream > stream) {
		return FlagSet.fromValue(g_data_input_stream_get_byte_order(Pointer.getPeer(stream)), GIOLibrary.GDataStreamByteOrder.class);
	}
	protected native static int g_data_input_stream_get_byte_order(@Ptr long stream);
	/**
	 * Original signature : <code>void g_data_input_stream_set_newline_type(GDataInputStream*, GDataStreamNewlineType)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:36</i>
	 */
	public static void g_data_input_stream_set_newline_type(Pointer<GDataInputStream > stream, IntValuedEnum<GIOLibrary.GDataStreamNewlineType > type) {
		g_data_input_stream_set_newline_type(Pointer.getPeer(stream), (int)type.value());
	}
	protected native static void g_data_input_stream_set_newline_type(@Ptr long stream, int type);
	/**
	 * Original signature : <code>GDataStreamNewlineType g_data_input_stream_get_newline_type(GDataInputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:38</i>
	 */
	public static IntValuedEnum<GIOLibrary.GDataStreamNewlineType > g_data_input_stream_get_newline_type(Pointer<GDataInputStream > stream) {
		return FlagSet.fromValue(g_data_input_stream_get_newline_type(Pointer.getPeer(stream)), GIOLibrary.GDataStreamNewlineType.class);
	}
	protected native static int g_data_input_stream_get_newline_type(@Ptr long stream);
	/**
	 * Original signature : <code>guchar g_data_input_stream_read_byte(GDataInputStream*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:40</i>
	 */
	public static byte g_data_input_stream_read_byte(Pointer<GDataInputStream > stream, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_data_input_stream_read_byte(Pointer.getPeer(stream), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static byte g_data_input_stream_read_byte(@Ptr long stream, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gint16 g_data_input_stream_read_int16(GDataInputStream*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:42</i>
	 */
	public static short g_data_input_stream_read_int16(Pointer<GDataInputStream > stream, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_data_input_stream_read_int16(Pointer.getPeer(stream), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static short g_data_input_stream_read_int16(@Ptr long stream, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>guint16 g_data_input_stream_read_uint16(GDataInputStream*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:44</i>
	 */
	public static short g_data_input_stream_read_uint16(Pointer<GDataInputStream > stream, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_data_input_stream_read_uint16(Pointer.getPeer(stream), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static short g_data_input_stream_read_uint16(@Ptr long stream, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gint32 g_data_input_stream_read_int32(GDataInputStream*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:46</i>
	 */
	public static int g_data_input_stream_read_int32(Pointer<GDataInputStream > stream, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_data_input_stream_read_int32(Pointer.getPeer(stream), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static int g_data_input_stream_read_int32(@Ptr long stream, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>guint32 g_data_input_stream_read_uint32(GDataInputStream*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:48</i>
	 */
	public static int g_data_input_stream_read_uint32(Pointer<GDataInputStream > stream, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_data_input_stream_read_uint32(Pointer.getPeer(stream), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static int g_data_input_stream_read_uint32(@Ptr long stream, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gint64 g_data_input_stream_read_int64(GDataInputStream*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:50</i>
	 */
	public static long g_data_input_stream_read_int64(Pointer<GDataInputStream > stream, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_data_input_stream_read_int64(Pointer.getPeer(stream), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static long g_data_input_stream_read_int64(@Ptr long stream, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>guint64 g_data_input_stream_read_uint64(GDataInputStream*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:52</i>
	 */
	public static long g_data_input_stream_read_uint64(Pointer<GDataInputStream > stream, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_data_input_stream_read_uint64(Pointer.getPeer(stream), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static long g_data_input_stream_read_uint64(@Ptr long stream, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>char* g_data_input_stream_read_line(GDataInputStream*, gsize*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:54</i>
	 */
	public static Pointer<Byte > g_data_input_stream_read_line(Pointer<GDataInputStream > stream, Pointer<org.bridj.CLong > length, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_data_input_stream_read_line(Pointer.getPeer(stream), Pointer.getPeer(length), Pointer.getPeer(cancellable), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_data_input_stream_read_line(@Ptr long stream, @Ptr long length, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>char* g_data_input_stream_read_line_utf8(GDataInputStream*, gsize*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:56</i>
	 */
	public static Pointer<Byte > g_data_input_stream_read_line_utf8(Pointer<GDataInputStream > stream, Pointer<org.bridj.CLong > length, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_data_input_stream_read_line_utf8(Pointer.getPeer(stream), Pointer.getPeer(length), Pointer.getPeer(cancellable), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_data_input_stream_read_line_utf8(@Ptr long stream, @Ptr long length, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_data_input_stream_read_line_async(GDataInputStream*, gint, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:58</i>
	 */
	public static void g_data_input_stream_read_line_async(Pointer<GDataInputStream > stream, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_data_input_stream_read_line_async(Pointer.getPeer(stream), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_data_input_stream_read_line_async(@Ptr long stream, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>char* g_data_input_stream_read_line_finish(GDataInputStream*, GAsyncResult*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:60</i>
	 */
	public static Pointer<Byte > g_data_input_stream_read_line_finish(Pointer<GDataInputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<org.bridj.CLong > length, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_data_input_stream_read_line_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(length), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_data_input_stream_read_line_finish(@Ptr long stream, @Ptr long result, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>char* g_data_input_stream_read_line_finish_utf8(GDataInputStream*, GAsyncResult*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:62</i>
	 */
	public static Pointer<Byte > g_data_input_stream_read_line_finish_utf8(Pointer<GDataInputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<org.bridj.CLong > length, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_data_input_stream_read_line_finish_utf8(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(length), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_data_input_stream_read_line_finish_utf8(@Ptr long stream, @Ptr long result, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>char* g_data_input_stream_read_until(GDataInputStream*, const gchar*, gsize*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:64</i>
	 */
	public static Pointer<Byte > g_data_input_stream_read_until(Pointer<GDataInputStream > stream, Pointer<Byte > stop_chars, Pointer<org.bridj.CLong > length, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_data_input_stream_read_until(Pointer.getPeer(stream), Pointer.getPeer(stop_chars), Pointer.getPeer(length), Pointer.getPeer(cancellable), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_data_input_stream_read_until(@Ptr long stream, @Ptr long stop_chars, @Ptr long length, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_data_input_stream_read_until_async(GDataInputStream*, const gchar*, gint, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:66</i>
	 */
	public static void g_data_input_stream_read_until_async(Pointer<GDataInputStream > stream, Pointer<Byte > stop_chars, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_data_input_stream_read_until_async(Pointer.getPeer(stream), Pointer.getPeer(stop_chars), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_data_input_stream_read_until_async(@Ptr long stream, @Ptr long stop_chars, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>char* g_data_input_stream_read_until_finish(GDataInputStream*, GAsyncResult*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:68</i>
	 */
	public static Pointer<Byte > g_data_input_stream_read_until_finish(Pointer<GDataInputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<org.bridj.CLong > length, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_data_input_stream_read_until_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(length), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_data_input_stream_read_until_finish(@Ptr long stream, @Ptr long result, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>char* g_data_input_stream_read_upto(GDataInputStream*, const gchar*, gssize, gsize*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:70</i>
	 */
	public static Pointer<Byte > g_data_input_stream_read_upto(Pointer<GDataInputStream > stream, Pointer<Byte > stop_chars, @org.bridj.ann.CLong long stop_chars_len, Pointer<org.bridj.CLong > length, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_data_input_stream_read_upto(Pointer.getPeer(stream), Pointer.getPeer(stop_chars), stop_chars_len, Pointer.getPeer(length), Pointer.getPeer(cancellable), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_data_input_stream_read_upto(@Ptr long stream, @Ptr long stop_chars, @org.bridj.ann.CLong long stop_chars_len, @Ptr long length, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_data_input_stream_read_upto_async(GDataInputStream*, const gchar*, gssize, gint, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:72</i>
	 */
	public static void g_data_input_stream_read_upto_async(Pointer<GDataInputStream > stream, Pointer<Byte > stop_chars, @org.bridj.ann.CLong long stop_chars_len, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_data_input_stream_read_upto_async(Pointer.getPeer(stream), Pointer.getPeer(stop_chars), stop_chars_len, io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_data_input_stream_read_upto_async(@Ptr long stream, @Ptr long stop_chars, @org.bridj.ann.CLong long stop_chars_len, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>char* g_data_input_stream_read_upto_finish(GDataInputStream*, GAsyncResult*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdatainputstream.h:74</i>
	 */
	public static Pointer<Byte > g_data_input_stream_read_upto_finish(Pointer<GDataInputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<org.bridj.CLong > length, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_data_input_stream_read_upto_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(length), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_data_input_stream_read_upto_finish(@Ptr long stream, @Ptr long result, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>GType g_data_output_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdataoutputstream.h:29</i>
	 */
	public static native GIOLibrary.GType g_data_output_stream_get_type();
	/**
	 * Original signature : <code>GDataOutputStream* g_data_output_stream_new(GOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdataoutputstream.h:31</i>
	 */
	public static Pointer<GDataOutputStream > g_data_output_stream_new(Pointer<GOutputStream > base_stream) {
		return Pointer.pointerToAddress(g_data_output_stream_new(Pointer.getPeer(base_stream)), GDataOutputStream.class);
	}
	@Ptr 
	protected native static long g_data_output_stream_new(@Ptr long base_stream);
	/**
	 * Original signature : <code>void g_data_output_stream_set_byte_order(GDataOutputStream*, GDataStreamByteOrder)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdataoutputstream.h:33</i>
	 */
	public static void g_data_output_stream_set_byte_order(Pointer<GDataOutputStream > stream, IntValuedEnum<GIOLibrary.GDataStreamByteOrder > order) {
		g_data_output_stream_set_byte_order(Pointer.getPeer(stream), (int)order.value());
	}
	protected native static void g_data_output_stream_set_byte_order(@Ptr long stream, int order);
	/**
	 * Original signature : <code>GDataStreamByteOrder g_data_output_stream_get_byte_order(GDataOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdataoutputstream.h:35</i>
	 */
	public static IntValuedEnum<GIOLibrary.GDataStreamByteOrder > g_data_output_stream_get_byte_order(Pointer<GDataOutputStream > stream) {
		return FlagSet.fromValue(g_data_output_stream_get_byte_order(Pointer.getPeer(stream)), GIOLibrary.GDataStreamByteOrder.class);
	}
	protected native static int g_data_output_stream_get_byte_order(@Ptr long stream);
	/**
	 * Original signature : <code>gboolean g_data_output_stream_put_byte(GDataOutputStream*, guchar, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdataoutputstream.h:37</i>
	 */
	public static GIOLibrary.gboolean g_data_output_stream_put_byte(Pointer<GDataOutputStream > stream, byte data, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_data_output_stream_put_byte(Pointer.getPeer(stream), data, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_data_output_stream_put_byte(@Ptr long stream, byte data, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_data_output_stream_put_int16(GDataOutputStream*, gint16, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdataoutputstream.h:39</i>
	 */
	public static GIOLibrary.gboolean g_data_output_stream_put_int16(Pointer<GDataOutputStream > stream, short data, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_data_output_stream_put_int16(Pointer.getPeer(stream), data, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_data_output_stream_put_int16(@Ptr long stream, short data, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_data_output_stream_put_uint16(GDataOutputStream*, guint16, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdataoutputstream.h:41</i>
	 */
	public static GIOLibrary.gboolean g_data_output_stream_put_uint16(Pointer<GDataOutputStream > stream, short data, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_data_output_stream_put_uint16(Pointer.getPeer(stream), data, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_data_output_stream_put_uint16(@Ptr long stream, short data, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_data_output_stream_put_int32(GDataOutputStream*, gint32, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdataoutputstream.h:43</i>
	 */
	public static GIOLibrary.gboolean g_data_output_stream_put_int32(Pointer<GDataOutputStream > stream, int data, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_data_output_stream_put_int32(Pointer.getPeer(stream), data, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_data_output_stream_put_int32(@Ptr long stream, int data, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_data_output_stream_put_uint32(GDataOutputStream*, guint32, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdataoutputstream.h:45</i>
	 */
	public static GIOLibrary.gboolean g_data_output_stream_put_uint32(Pointer<GDataOutputStream > stream, int data, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_data_output_stream_put_uint32(Pointer.getPeer(stream), data, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_data_output_stream_put_uint32(@Ptr long stream, int data, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_data_output_stream_put_int64(GDataOutputStream*, gint64, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdataoutputstream.h:47</i>
	 */
	public static GIOLibrary.gboolean g_data_output_stream_put_int64(Pointer<GDataOutputStream > stream, long data, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_data_output_stream_put_int64(Pointer.getPeer(stream), data, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_data_output_stream_put_int64(@Ptr long stream, long data, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_data_output_stream_put_uint64(GDataOutputStream*, guint64, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdataoutputstream.h:49</i>
	 */
	public static GIOLibrary.gboolean g_data_output_stream_put_uint64(Pointer<GDataOutputStream > stream, long data, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_data_output_stream_put_uint64(Pointer.getPeer(stream), data, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_data_output_stream_put_uint64(@Ptr long stream, long data, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_data_output_stream_put_string(GDataOutputStream*, const char*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdataoutputstream.h:51</i>
	 */
	public static GIOLibrary.gboolean g_data_output_stream_put_string(Pointer<GDataOutputStream > stream, Pointer<Byte > str, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_data_output_stream_put_string(Pointer.getPeer(stream), Pointer.getPeer(str), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_data_output_stream_put_string(@Ptr long stream, @Ptr long str, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_dbus_address_escape_value(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusaddress.h:2</i>
	 */
	public static Pointer<Byte > g_dbus_address_escape_value(Pointer<Byte > string) {
		return Pointer.pointerToAddress(g_dbus_address_escape_value(Pointer.getPeer(string)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_address_escape_value(@Ptr long string);
	/**
	 * Original signature : <code>gboolean g_dbus_is_address(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusaddress.h:4</i>
	 */
	public static GIOLibrary.gboolean g_dbus_is_address(Pointer<Byte > string) {
		return g_dbus_is_address(Pointer.getPeer(string));
	}
	protected native static GIOLibrary.gboolean g_dbus_is_address(@Ptr long string);
	/**
	 * Original signature : <code>gboolean g_dbus_is_supported_address(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusaddress.h:6</i>
	 */
	public static GIOLibrary.gboolean g_dbus_is_supported_address(Pointer<Byte > string, Pointer<Pointer > error) {
		return g_dbus_is_supported_address(Pointer.getPeer(string), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_dbus_is_supported_address(@Ptr long string, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_address_get_stream(const gchar*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusaddress.h:8</i>
	 */
	public static void g_dbus_address_get_stream(Pointer<Byte > address, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_dbus_address_get_stream(Pointer.getPeer(address), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_dbus_address_get_stream(@Ptr long address, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GIOStream* g_dbus_address_get_stream_finish(GAsyncResult*, gchar**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusaddress.h:10</i>
	 */
	public static Pointer<GIOStream > g_dbus_address_get_stream_finish(Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer<Byte > > out_guid, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_address_get_stream_finish(Pointer.getPeer(res), Pointer.getPeer(out_guid), Pointer.getPeer(error)), GIOStream.class);
	}
	@Ptr 
	protected native static long g_dbus_address_get_stream_finish(@Ptr long res, @Ptr long out_guid, @Ptr long error);
	/**
	 * Original signature : <code>GIOStream* g_dbus_address_get_stream_sync(const gchar*, gchar**, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusaddress.h:12</i>
	 */
	public static Pointer<GIOStream > g_dbus_address_get_stream_sync(Pointer<Byte > address, Pointer<Pointer<Byte > > out_guid, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_address_get_stream_sync(Pointer.getPeer(address), Pointer.getPeer(out_guid), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOStream.class);
	}
	@Ptr 
	protected native static long g_dbus_address_get_stream_sync(@Ptr long address, @Ptr long out_guid, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_dbus_address_get_for_bus_sync(GBusType, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusaddress.h:14</i>
	 */
	public static Pointer<Byte > g_dbus_address_get_for_bus_sync(IntValuedEnum<GIOLibrary.GBusType > bus_type, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_address_get_for_bus_sync((int)bus_type.value(), Pointer.getPeer(cancellable), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_address_get_for_bus_sync(int bus_type, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>GType g_dbus_auth_observer_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusauthobserver.h:2</i>
	 */
	public static native GIOLibrary.GType g_dbus_auth_observer_get_type();
	/**
	 * Original signature : <code>GDBusAuthObserver* g_dbus_auth_observer_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusauthobserver.h:4</i>
	 */
	public static Pointer<GIOLibrary.GDBusAuthObserver > g_dbus_auth_observer_new() {
		return Pointer.pointerToAddress(g_dbus_auth_observer_new$2(), GIOLibrary.GDBusAuthObserver.class);
	}
	@Ptr 
	protected native static long g_dbus_auth_observer_new$2();
	/**
	 * Original signature : <code>gboolean g_dbus_auth_observer_authorize_authenticated_peer(GDBusAuthObserver*, GIOStream*, GCredentials*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusauthobserver.h:6</i>
	 */
	public static GIOLibrary.gboolean g_dbus_auth_observer_authorize_authenticated_peer(Pointer<GIOLibrary.GDBusAuthObserver > observer, Pointer<GIOStream > stream, Pointer<GIOLibrary.GCredentials > credentials) {
		return g_dbus_auth_observer_authorize_authenticated_peer(Pointer.getPeer(observer), Pointer.getPeer(stream), Pointer.getPeer(credentials));
	}
	protected native static GIOLibrary.gboolean g_dbus_auth_observer_authorize_authenticated_peer(@Ptr long observer, @Ptr long stream, @Ptr long credentials);
	/**
	 * Original signature : <code>gboolean g_dbus_auth_observer_allow_mechanism(GDBusAuthObserver*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusauthobserver.h:8</i>
	 */
	public static GIOLibrary.gboolean g_dbus_auth_observer_allow_mechanism(Pointer<GIOLibrary.GDBusAuthObserver > observer, Pointer<Byte > mechanism) {
		return g_dbus_auth_observer_allow_mechanism(Pointer.getPeer(observer), Pointer.getPeer(mechanism));
	}
	protected native static GIOLibrary.gboolean g_dbus_auth_observer_allow_mechanism(@Ptr long observer, @Ptr long mechanism);
	/**
	 * Original signature : <code>GType g_dbus_connection_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:2</i>
	 */
	public static native GIOLibrary.GType g_dbus_connection_get_type();
	/**
	 * Original signature : <code>void g_bus_get(GBusType, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:4</i>
	 */
	public static void g_bus_get(IntValuedEnum<GIOLibrary.GBusType > bus_type, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_bus_get((int)bus_type.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_bus_get(int bus_type, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GDBusConnection* g_bus_get_finish(GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:6</i>
	 */
	public static Pointer<GIOLibrary.GDBusConnection > g_bus_get_finish(Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_bus_get_finish(Pointer.getPeer(res), Pointer.getPeer(error)), GIOLibrary.GDBusConnection.class);
	}
	@Ptr 
	protected native static long g_bus_get_finish(@Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>GDBusConnection* g_bus_get_sync(GBusType, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:8</i>
	 */
	public static Pointer<GIOLibrary.GDBusConnection > g_bus_get_sync(IntValuedEnum<GIOLibrary.GBusType > bus_type, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_bus_get_sync((int)bus_type.value(), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GDBusConnection.class);
	}
	@Ptr 
	protected native static long g_bus_get_sync(int bus_type, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_connection_new(GIOStream*, const gchar*, GDBusConnectionFlags, GDBusAuthObserver*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:10</i>
	 */
	public static void g_dbus_connection_new(Pointer<GIOStream > stream, Pointer<Byte > guid, IntValuedEnum<GIOLibrary.GDBusConnectionFlags > flags, Pointer<GIOLibrary.GDBusAuthObserver > observer, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_dbus_connection_new(Pointer.getPeer(stream), Pointer.getPeer(guid), (int)flags.value(), Pointer.getPeer(observer), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_dbus_connection_new(@Ptr long stream, @Ptr long guid, int flags, @Ptr long observer, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GDBusConnection* g_dbus_connection_new_finish(GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:12</i>
	 */
	public static Pointer<GIOLibrary.GDBusConnection > g_dbus_connection_new_finish(Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_connection_new_finish(Pointer.getPeer(res), Pointer.getPeer(error)), GIOLibrary.GDBusConnection.class);
	}
	@Ptr 
	protected native static long g_dbus_connection_new_finish(@Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>GDBusConnection* g_dbus_connection_new_sync(GIOStream*, const gchar*, GDBusConnectionFlags, GDBusAuthObserver*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:14</i>
	 */
	public static Pointer<GIOLibrary.GDBusConnection > g_dbus_connection_new_sync(Pointer<GIOStream > stream, Pointer<Byte > guid, IntValuedEnum<GIOLibrary.GDBusConnectionFlags > flags, Pointer<GIOLibrary.GDBusAuthObserver > observer, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_connection_new_sync(Pointer.getPeer(stream), Pointer.getPeer(guid), (int)flags.value(), Pointer.getPeer(observer), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GDBusConnection.class);
	}
	@Ptr 
	protected native static long g_dbus_connection_new_sync(@Ptr long stream, @Ptr long guid, int flags, @Ptr long observer, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_connection_new_for_address(const gchar*, GDBusConnectionFlags, GDBusAuthObserver*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:16</i>
	 */
	public static void g_dbus_connection_new_for_address(Pointer<Byte > address, IntValuedEnum<GIOLibrary.GDBusConnectionFlags > flags, Pointer<GIOLibrary.GDBusAuthObserver > observer, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_dbus_connection_new_for_address(Pointer.getPeer(address), (int)flags.value(), Pointer.getPeer(observer), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_dbus_connection_new_for_address(@Ptr long address, int flags, @Ptr long observer, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GDBusConnection* g_dbus_connection_new_for_address_finish(GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:18</i>
	 */
	public static Pointer<GIOLibrary.GDBusConnection > g_dbus_connection_new_for_address_finish(Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_connection_new_for_address_finish(Pointer.getPeer(res), Pointer.getPeer(error)), GIOLibrary.GDBusConnection.class);
	}
	@Ptr 
	protected native static long g_dbus_connection_new_for_address_finish(@Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>GDBusConnection* g_dbus_connection_new_for_address_sync(const gchar*, GDBusConnectionFlags, GDBusAuthObserver*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:20</i>
	 */
	public static Pointer<GIOLibrary.GDBusConnection > g_dbus_connection_new_for_address_sync(Pointer<Byte > address, IntValuedEnum<GIOLibrary.GDBusConnectionFlags > flags, Pointer<GIOLibrary.GDBusAuthObserver > observer, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_connection_new_for_address_sync(Pointer.getPeer(address), (int)flags.value(), Pointer.getPeer(observer), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GDBusConnection.class);
	}
	@Ptr 
	protected native static long g_dbus_connection_new_for_address_sync(@Ptr long address, int flags, @Ptr long observer, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_connection_start_message_processing(GDBusConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:22</i>
	 */
	public static void g_dbus_connection_start_message_processing(Pointer<GIOLibrary.GDBusConnection > connection) {
		g_dbus_connection_start_message_processing(Pointer.getPeer(connection));
	}
	protected native static void g_dbus_connection_start_message_processing(@Ptr long connection);
	/**
	 * Original signature : <code>gboolean g_dbus_connection_is_closed(GDBusConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:24</i>
	 */
	public static GIOLibrary.gboolean g_dbus_connection_is_closed(Pointer<GIOLibrary.GDBusConnection > connection) {
		return g_dbus_connection_is_closed(Pointer.getPeer(connection));
	}
	protected native static GIOLibrary.gboolean g_dbus_connection_is_closed(@Ptr long connection);
	/**
	 * Original signature : <code>GIOStream* g_dbus_connection_get_stream(GDBusConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:26</i>
	 */
	public static Pointer<GIOStream > g_dbus_connection_get_stream(Pointer<GIOLibrary.GDBusConnection > connection) {
		return Pointer.pointerToAddress(g_dbus_connection_get_stream(Pointer.getPeer(connection)), GIOStream.class);
	}
	@Ptr 
	protected native static long g_dbus_connection_get_stream(@Ptr long connection);
	/**
	 * Original signature : <code>gchar* g_dbus_connection_get_guid(GDBusConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:28</i>
	 */
	public static Pointer<Byte > g_dbus_connection_get_guid(Pointer<GIOLibrary.GDBusConnection > connection) {
		return Pointer.pointerToAddress(g_dbus_connection_get_guid(Pointer.getPeer(connection)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_connection_get_guid(@Ptr long connection);
	/**
	 * Original signature : <code>gchar* g_dbus_connection_get_unique_name(GDBusConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:30</i>
	 */
	public static Pointer<Byte > g_dbus_connection_get_unique_name(Pointer<GIOLibrary.GDBusConnection > connection) {
		return Pointer.pointerToAddress(g_dbus_connection_get_unique_name(Pointer.getPeer(connection)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_connection_get_unique_name(@Ptr long connection);
	/**
	 * Original signature : <code>GCredentials* g_dbus_connection_get_peer_credentials(GDBusConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:32</i>
	 */
	public static Pointer<GIOLibrary.GCredentials > g_dbus_connection_get_peer_credentials(Pointer<GIOLibrary.GDBusConnection > connection) {
		return Pointer.pointerToAddress(g_dbus_connection_get_peer_credentials(Pointer.getPeer(connection)), GIOLibrary.GCredentials.class);
	}
	@Ptr 
	protected native static long g_dbus_connection_get_peer_credentials(@Ptr long connection);
	/**
	 * Original signature : <code>guint32 g_dbus_connection_get_last_serial(GDBusConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:34</i>
	 */
	public static int g_dbus_connection_get_last_serial(Pointer<GIOLibrary.GDBusConnection > connection) {
		return g_dbus_connection_get_last_serial(Pointer.getPeer(connection));
	}
	protected native static int g_dbus_connection_get_last_serial(@Ptr long connection);
	/**
	 * Original signature : <code>gboolean g_dbus_connection_get_exit_on_close(GDBusConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:36</i>
	 */
	public static GIOLibrary.gboolean g_dbus_connection_get_exit_on_close(Pointer<GIOLibrary.GDBusConnection > connection) {
		return g_dbus_connection_get_exit_on_close(Pointer.getPeer(connection));
	}
	protected native static GIOLibrary.gboolean g_dbus_connection_get_exit_on_close(@Ptr long connection);
	/**
	 * Original signature : <code>void g_dbus_connection_set_exit_on_close(GDBusConnection*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:38</i>
	 */
	public static void g_dbus_connection_set_exit_on_close(Pointer<GIOLibrary.GDBusConnection > connection, GIOLibrary.gboolean exit_on_close) {
		g_dbus_connection_set_exit_on_close(Pointer.getPeer(connection), exit_on_close);
	}
	protected native static void g_dbus_connection_set_exit_on_close(@Ptr long connection, GIOLibrary.gboolean exit_on_close);
	/**
	 * Original signature : <code>GDBusCapabilityFlags g_dbus_connection_get_capabilities(GDBusConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:40</i>
	 */
	public static IntValuedEnum<GIOLibrary.GDBusCapabilityFlags > g_dbus_connection_get_capabilities(Pointer<GIOLibrary.GDBusConnection > connection) {
		return FlagSet.fromValue(g_dbus_connection_get_capabilities(Pointer.getPeer(connection)), GIOLibrary.GDBusCapabilityFlags.class);
	}
	protected native static int g_dbus_connection_get_capabilities(@Ptr long connection);
	/**
	 * Original signature : <code>void g_dbus_connection_close(GDBusConnection*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:42</i>
	 */
	public static void g_dbus_connection_close(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_dbus_connection_close(Pointer.getPeer(connection), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_dbus_connection_close(@Ptr long connection, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_dbus_connection_close_finish(GDBusConnection*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:44</i>
	 */
	public static GIOLibrary.gboolean g_dbus_connection_close_finish(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return g_dbus_connection_close_finish(Pointer.getPeer(connection), Pointer.getPeer(res), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_dbus_connection_close_finish(@Ptr long connection, @Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_dbus_connection_close_sync(GDBusConnection*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:46</i>
	 */
	public static GIOLibrary.gboolean g_dbus_connection_close_sync(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_dbus_connection_close_sync(Pointer.getPeer(connection), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_dbus_connection_close_sync(@Ptr long connection, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_connection_flush(GDBusConnection*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:48</i>
	 */
	public static void g_dbus_connection_flush(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_dbus_connection_flush(Pointer.getPeer(connection), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_dbus_connection_flush(@Ptr long connection, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_dbus_connection_flush_finish(GDBusConnection*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:50</i>
	 */
	public static GIOLibrary.gboolean g_dbus_connection_flush_finish(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return g_dbus_connection_flush_finish(Pointer.getPeer(connection), Pointer.getPeer(res), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_dbus_connection_flush_finish(@Ptr long connection, @Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_dbus_connection_flush_sync(GDBusConnection*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:52</i>
	 */
	public static GIOLibrary.gboolean g_dbus_connection_flush_sync(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_dbus_connection_flush_sync(Pointer.getPeer(connection), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_dbus_connection_flush_sync(@Ptr long connection, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_dbus_connection_send_message(GDBusConnection*, GDBusMessage*, GDBusSendMessageFlags, volatile guint32*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:54</i>
	 */
	public static GIOLibrary.gboolean g_dbus_connection_send_message(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<GIOLibrary.GDBusMessage > message, IntValuedEnum<GIOLibrary.GDBusSendMessageFlags > flags, Pointer<Integer > out_serial, Pointer<Pointer > error) {
		return g_dbus_connection_send_message(Pointer.getPeer(connection), Pointer.getPeer(message), (int)flags.value(), Pointer.getPeer(out_serial), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_dbus_connection_send_message(@Ptr long connection, @Ptr long message, int flags, @Ptr long out_serial, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_connection_send_message_with_reply(GDBusConnection*, GDBusMessage*, GDBusSendMessageFlags, gint, volatile guint32*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:56</i>
	 */
	public static void g_dbus_connection_send_message_with_reply(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<GIOLibrary.GDBusMessage > message, IntValuedEnum<GIOLibrary.GDBusSendMessageFlags > flags, int timeout_msec, Pointer<Integer > out_serial, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_dbus_connection_send_message_with_reply(Pointer.getPeer(connection), Pointer.getPeer(message), (int)flags.value(), timeout_msec, Pointer.getPeer(out_serial), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_dbus_connection_send_message_with_reply(@Ptr long connection, @Ptr long message, int flags, int timeout_msec, @Ptr long out_serial, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GDBusMessage* g_dbus_connection_send_message_with_reply_finish(GDBusConnection*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:58</i>
	 */
	public static Pointer<GIOLibrary.GDBusMessage > g_dbus_connection_send_message_with_reply_finish(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_connection_send_message_with_reply_finish(Pointer.getPeer(connection), Pointer.getPeer(res), Pointer.getPeer(error)), GIOLibrary.GDBusMessage.class);
	}
	@Ptr 
	protected native static long g_dbus_connection_send_message_with_reply_finish(@Ptr long connection, @Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>GDBusMessage* g_dbus_connection_send_message_with_reply_sync(GDBusConnection*, GDBusMessage*, GDBusSendMessageFlags, gint, volatile guint32*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:60</i>
	 */
	public static Pointer<GIOLibrary.GDBusMessage > g_dbus_connection_send_message_with_reply_sync(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<GIOLibrary.GDBusMessage > message, IntValuedEnum<GIOLibrary.GDBusSendMessageFlags > flags, int timeout_msec, Pointer<Integer > out_serial, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_connection_send_message_with_reply_sync(Pointer.getPeer(connection), Pointer.getPeer(message), (int)flags.value(), timeout_msec, Pointer.getPeer(out_serial), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GDBusMessage.class);
	}
	@Ptr 
	protected native static long g_dbus_connection_send_message_with_reply_sync(@Ptr long connection, @Ptr long message, int flags, int timeout_msec, @Ptr long out_serial, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_dbus_connection_emit_signal(GDBusConnection*, const gchar*, const gchar*, const gchar*, const gchar*, GVariant*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:62</i>
	 */
	public static GIOLibrary.gboolean g_dbus_connection_emit_signal(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > destination_bus_name, Pointer<Byte > object_path, Pointer<Byte > interface_name, Pointer<Byte > signal_name, Pointer<GIOLibrary.GVariant > parameters, Pointer<Pointer > error) {
		return g_dbus_connection_emit_signal(Pointer.getPeer(connection), Pointer.getPeer(destination_bus_name), Pointer.getPeer(object_path), Pointer.getPeer(interface_name), Pointer.getPeer(signal_name), Pointer.getPeer(parameters), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_dbus_connection_emit_signal(@Ptr long connection, @Ptr long destination_bus_name, @Ptr long object_path, @Ptr long interface_name, @Ptr long signal_name, @Ptr long parameters, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_connection_call(GDBusConnection*, const gchar*, const gchar*, const gchar*, const gchar*, GVariant*, const GVariantType*, GDBusCallFlags, gint, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:64</i>
	 */
	public static void g_dbus_connection_call(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > bus_name, Pointer<Byte > object_path, Pointer<Byte > interface_name, Pointer<Byte > method_name, Pointer<GIOLibrary.GVariant > parameters, Pointer<GIOLibrary.GVariantType > reply_type, IntValuedEnum<GIOLibrary.GDBusCallFlags > flags, int timeout_msec, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_dbus_connection_call(Pointer.getPeer(connection), Pointer.getPeer(bus_name), Pointer.getPeer(object_path), Pointer.getPeer(interface_name), Pointer.getPeer(method_name), Pointer.getPeer(parameters), Pointer.getPeer(reply_type), (int)flags.value(), timeout_msec, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_dbus_connection_call(@Ptr long connection, @Ptr long bus_name, @Ptr long object_path, @Ptr long interface_name, @Ptr long method_name, @Ptr long parameters, @Ptr long reply_type, int flags, int timeout_msec, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GVariant* g_dbus_connection_call_finish(GDBusConnection*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:66</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_dbus_connection_call_finish(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_connection_call_finish(Pointer.getPeer(connection), Pointer.getPeer(res), Pointer.getPeer(error)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_dbus_connection_call_finish(@Ptr long connection, @Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>GVariant* g_dbus_connection_call_sync(GDBusConnection*, const gchar*, const gchar*, const gchar*, const gchar*, GVariant*, const GVariantType*, GDBusCallFlags, gint, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:68</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_dbus_connection_call_sync(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > bus_name, Pointer<Byte > object_path, Pointer<Byte > interface_name, Pointer<Byte > method_name, Pointer<GIOLibrary.GVariant > parameters, Pointer<GIOLibrary.GVariantType > reply_type, IntValuedEnum<GIOLibrary.GDBusCallFlags > flags, int timeout_msec, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_connection_call_sync(Pointer.getPeer(connection), Pointer.getPeer(bus_name), Pointer.getPeer(object_path), Pointer.getPeer(interface_name), Pointer.getPeer(method_name), Pointer.getPeer(parameters), Pointer.getPeer(reply_type), (int)flags.value(), timeout_msec, Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_dbus_connection_call_sync(@Ptr long connection, @Ptr long bus_name, @Ptr long object_path, @Ptr long interface_name, @Ptr long method_name, @Ptr long parameters, @Ptr long reply_type, int flags, int timeout_msec, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_connection_call_with_unix_fd_list(GDBusConnection*, const gchar*, const gchar*, const gchar*, const gchar*, GVariant*, const GVariantType*, GDBusCallFlags, gint, GUnixFDList*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:70</i>
	 */
	public static void g_dbus_connection_call_with_unix_fd_list(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > bus_name, Pointer<Byte > object_path, Pointer<Byte > interface_name, Pointer<Byte > method_name, Pointer<GIOLibrary.GVariant > parameters, Pointer<GIOLibrary.GVariantType > reply_type, IntValuedEnum<GIOLibrary.GDBusCallFlags > flags, int timeout_msec, Pointer<GIOLibrary.GUnixFDList > fd_list, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_dbus_connection_call_with_unix_fd_list(Pointer.getPeer(connection), Pointer.getPeer(bus_name), Pointer.getPeer(object_path), Pointer.getPeer(interface_name), Pointer.getPeer(method_name), Pointer.getPeer(parameters), Pointer.getPeer(reply_type), (int)flags.value(), timeout_msec, Pointer.getPeer(fd_list), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_dbus_connection_call_with_unix_fd_list(@Ptr long connection, @Ptr long bus_name, @Ptr long object_path, @Ptr long interface_name, @Ptr long method_name, @Ptr long parameters, @Ptr long reply_type, int flags, int timeout_msec, @Ptr long fd_list, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GVariant* g_dbus_connection_call_with_unix_fd_list_finish(GDBusConnection*, GUnixFDList**, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:72</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_dbus_connection_call_with_unix_fd_list_finish(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Pointer<GIOLibrary.GUnixFDList > > out_fd_list, Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_connection_call_with_unix_fd_list_finish(Pointer.getPeer(connection), Pointer.getPeer(out_fd_list), Pointer.getPeer(res), Pointer.getPeer(error)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_dbus_connection_call_with_unix_fd_list_finish(@Ptr long connection, @Ptr long out_fd_list, @Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>GVariant* g_dbus_connection_call_with_unix_fd_list_sync(GDBusConnection*, const gchar*, const gchar*, const gchar*, const gchar*, GVariant*, const GVariantType*, GDBusCallFlags, gint, GUnixFDList*, GUnixFDList**, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:74</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_dbus_connection_call_with_unix_fd_list_sync(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > bus_name, Pointer<Byte > object_path, Pointer<Byte > interface_name, Pointer<Byte > method_name, Pointer<GIOLibrary.GVariant > parameters, Pointer<GIOLibrary.GVariantType > reply_type, IntValuedEnum<GIOLibrary.GDBusCallFlags > flags, int timeout_msec, Pointer<GIOLibrary.GUnixFDList > fd_list, Pointer<Pointer<GIOLibrary.GUnixFDList > > out_fd_list, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_connection_call_with_unix_fd_list_sync(Pointer.getPeer(connection), Pointer.getPeer(bus_name), Pointer.getPeer(object_path), Pointer.getPeer(interface_name), Pointer.getPeer(method_name), Pointer.getPeer(parameters), Pointer.getPeer(reply_type), (int)flags.value(), timeout_msec, Pointer.getPeer(fd_list), Pointer.getPeer(out_fd_list), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_dbus_connection_call_with_unix_fd_list_sync(@Ptr long connection, @Ptr long bus_name, @Ptr long object_path, @Ptr long interface_name, @Ptr long method_name, @Ptr long parameters, @Ptr long reply_type, int flags, int timeout_msec, @Ptr long fd_list, @Ptr long out_fd_list, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>guint g_dbus_connection_register_object(GDBusConnection*, const gchar*, GDBusInterfaceInfo*, const GDBusInterfaceVTable*, gpointer, GDestroyNotify, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:169</i>
	 */
	public static int g_dbus_connection_register_object(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > object_path, Pointer<GDBusInterfaceInfo > interface_info, Pointer<GDBusInterfaceVTable > vtable, GIOLibrary.gpointer user_data, GIOLibrary.GDestroyNotify user_data_free_func, Pointer<Pointer > error) {
		return g_dbus_connection_register_object(Pointer.getPeer(connection), Pointer.getPeer(object_path), Pointer.getPeer(interface_info), Pointer.getPeer(vtable), user_data, Pointer.getPeer(user_data_free_func), Pointer.getPeer(error));
	}
	protected native static int g_dbus_connection_register_object(@Ptr long connection, @Ptr long object_path, @Ptr long interface_info, @Ptr long vtable, GIOLibrary.gpointer user_data, @Ptr long user_data_free_func, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_dbus_connection_unregister_object(GDBusConnection*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:171</i>
	 */
	public static GIOLibrary.gboolean g_dbus_connection_unregister_object(Pointer<GIOLibrary.GDBusConnection > connection, int registration_id) {
		return g_dbus_connection_unregister_object(Pointer.getPeer(connection), registration_id);
	}
	protected native static GIOLibrary.gboolean g_dbus_connection_unregister_object(@Ptr long connection, int registration_id);
	/**
	 * Original signature : <code>guint g_dbus_connection_register_subtree(GDBusConnection*, const gchar*, const GDBusSubtreeVTable*, GDBusSubtreeFlags, gpointer, GDestroyNotify, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:251</i>
	 */
	public static int g_dbus_connection_register_subtree(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > object_path, Pointer<GDBusSubtreeVTable > vtable, IntValuedEnum<GIOLibrary.GDBusSubtreeFlags > flags, GIOLibrary.gpointer user_data, GIOLibrary.GDestroyNotify user_data_free_func, Pointer<Pointer > error) {
		return g_dbus_connection_register_subtree(Pointer.getPeer(connection), Pointer.getPeer(object_path), Pointer.getPeer(vtable), (int)flags.value(), user_data, Pointer.getPeer(user_data_free_func), Pointer.getPeer(error));
	}
	protected native static int g_dbus_connection_register_subtree(@Ptr long connection, @Ptr long object_path, @Ptr long vtable, int flags, GIOLibrary.gpointer user_data, @Ptr long user_data_free_func, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_dbus_connection_unregister_subtree(GDBusConnection*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:253</i>
	 */
	public static GIOLibrary.gboolean g_dbus_connection_unregister_subtree(Pointer<GIOLibrary.GDBusConnection > connection, int registration_id) {
		return g_dbus_connection_unregister_subtree(Pointer.getPeer(connection), registration_id);
	}
	protected native static GIOLibrary.gboolean g_dbus_connection_unregister_subtree(@Ptr long connection, int registration_id);
	/**
	 * Original signature : <code>guint g_dbus_connection_signal_subscribe(GDBusConnection*, const gchar*, const gchar*, const gchar*, const gchar*, const gchar*, GDBusSignalFlags, GDBusSignalCallback, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:268</i>
	 */
	public static int g_dbus_connection_signal_subscribe(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > sender, Pointer<Byte > interface_name, Pointer<Byte > member, Pointer<Byte > object_path, Pointer<Byte > arg0, IntValuedEnum<GIOLibrary.GDBusSignalFlags > flags, Pointer<GIOLibrary.GDBusSignalCallback > callback, GIOLibrary.gpointer user_data, GIOLibrary.GDestroyNotify user_data_free_func) {
		return g_dbus_connection_signal_subscribe(Pointer.getPeer(connection), Pointer.getPeer(sender), Pointer.getPeer(interface_name), Pointer.getPeer(member), Pointer.getPeer(object_path), Pointer.getPeer(arg0), (int)flags.value(), Pointer.getPeer(callback), user_data, Pointer.getPeer(user_data_free_func));
	}
	protected native static int g_dbus_connection_signal_subscribe(@Ptr long connection, @Ptr long sender, @Ptr long interface_name, @Ptr long member, @Ptr long object_path, @Ptr long arg0, int flags, @Ptr long callback, GIOLibrary.gpointer user_data, @Ptr long user_data_free_func);
	/**
	 * Original signature : <code>void g_dbus_connection_signal_unsubscribe(GDBusConnection*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:270</i>
	 */
	public static void g_dbus_connection_signal_unsubscribe(Pointer<GIOLibrary.GDBusConnection > connection, int subscription_id) {
		g_dbus_connection_signal_unsubscribe(Pointer.getPeer(connection), subscription_id);
	}
	protected native static void g_dbus_connection_signal_unsubscribe(@Ptr long connection, int subscription_id);
	/**
	 * Original signature : <code>guint g_dbus_connection_add_filter(GDBusConnection*, GDBusMessageFilterFunction, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:340</i>
	 */
	public static int g_dbus_connection_add_filter(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<GIOLibrary.GDBusMessageFilterFunction > filter_function, GIOLibrary.gpointer user_data, GIOLibrary.GDestroyNotify user_data_free_func) {
		return g_dbus_connection_add_filter(Pointer.getPeer(connection), Pointer.getPeer(filter_function), user_data, Pointer.getPeer(user_data_free_func));
	}
	protected native static int g_dbus_connection_add_filter(@Ptr long connection, @Ptr long filter_function, GIOLibrary.gpointer user_data, @Ptr long user_data_free_func);
	/**
	 * Original signature : <code>void g_dbus_connection_remove_filter(GDBusConnection*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusconnection.h:342</i>
	 */
	public static void g_dbus_connection_remove_filter(Pointer<GIOLibrary.GDBusConnection > connection, int filter_id) {
		g_dbus_connection_remove_filter(Pointer.getPeer(connection), filter_id);
	}
	protected native static void g_dbus_connection_remove_filter(@Ptr long connection, int filter_id);
	/**
	 * Original signature : <code>GQuark g_dbus_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbuserror.h:2</i>
	 */
	public static native int g_dbus_error_quark();
	/**
	 * Used by applications to check, get and strip the D-Bus error name<br>
	 * Original signature : <code>gboolean g_dbus_error_is_remote_error(const GError*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbuserror.h:7</i>
	 */
	public static GIOLibrary.gboolean g_dbus_error_is_remote_error(Pointer error) {
		return g_dbus_error_is_remote_error(Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_dbus_error_is_remote_error(@Ptr long error);
	/**
	 * Original signature : <code>gchar* g_dbus_error_get_remote_error(const GError*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbuserror.h:9</i>
	 */
	public static Pointer<Byte > g_dbus_error_get_remote_error(Pointer error) {
		return Pointer.pointerToAddress(g_dbus_error_get_remote_error(Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_error_get_remote_error(@Ptr long error);
	/**
	 * Original signature : <code>gboolean g_dbus_error_strip_remote_error(GError*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbuserror.h:11</i>
	 */
	public static GIOLibrary.gboolean g_dbus_error_strip_remote_error(Pointer error) {
		return g_dbus_error_strip_remote_error(Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_dbus_error_strip_remote_error(@Ptr long error);
	/**
	 * Original signature : <code>gboolean g_dbus_error_register_error(GQuark, gint, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbuserror.h:24</i>
	 */
	public static GIOLibrary.gboolean g_dbus_error_register_error(int error_domain, int error_code, Pointer<Byte > dbus_error_name) {
		return g_dbus_error_register_error(error_domain, error_code, Pointer.getPeer(dbus_error_name));
	}
	protected native static GIOLibrary.gboolean g_dbus_error_register_error(int error_domain, int error_code, @Ptr long dbus_error_name);
	/**
	 * Original signature : <code>gboolean g_dbus_error_unregister_error(GQuark, gint, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbuserror.h:26</i>
	 */
	public static GIOLibrary.gboolean g_dbus_error_unregister_error(int error_domain, int error_code, Pointer<Byte > dbus_error_name) {
		return g_dbus_error_unregister_error(error_domain, error_code, Pointer.getPeer(dbus_error_name));
	}
	protected native static GIOLibrary.gboolean g_dbus_error_unregister_error(int error_domain, int error_code, @Ptr long dbus_error_name);
	/**
	 * Original signature : <code>void g_dbus_error_register_error_domain(const gchar*, volatile gsize*, const GDBusErrorEntry*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbuserror.h:28</i>
	 */
	public static void g_dbus_error_register_error_domain(Pointer<Byte > error_domain_quark_name, Pointer<org.bridj.CLong > quark_volatile, Pointer<GDBusErrorEntry > entries, int num_entries) {
		g_dbus_error_register_error_domain(Pointer.getPeer(error_domain_quark_name), Pointer.getPeer(quark_volatile), Pointer.getPeer(entries), num_entries);
	}
	protected native static void g_dbus_error_register_error_domain(@Ptr long error_domain_quark_name, @Ptr long quark_volatile, @Ptr long entries, int num_entries);
	/**
	 * Only used by object mappings to map back and forth to GError<br>
	 * Original signature : <code>GError* g_dbus_error_new_for_dbus_error(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbuserror.h:33</i>
	 */
	public static Pointer g_dbus_error_new_for_dbus_error(Pointer<Byte > dbus_error_name, Pointer<Byte > dbus_error_message) {
		return Pointer.pointerToAddress(g_dbus_error_new_for_dbus_error(Pointer.getPeer(dbus_error_name), Pointer.getPeer(dbus_error_message)));
	}
	@Ptr 
	protected native static long g_dbus_error_new_for_dbus_error(@Ptr long dbus_error_name, @Ptr long dbus_error_message);
	/**
	 * Original signature : <code>void g_dbus_error_set_dbus_error(GError**, const gchar*, const gchar*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbuserror.h:35</i>
	 */
	public static void g_dbus_error_set_dbus_error(Pointer<Pointer > error, Pointer<Byte > dbus_error_name, Pointer<Byte > dbus_error_message, Pointer<Byte > format, Object... varArgs1) {
		g_dbus_error_set_dbus_error(Pointer.getPeer(error), Pointer.getPeer(dbus_error_name), Pointer.getPeer(dbus_error_message), Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_dbus_error_set_dbus_error(@Ptr long error, @Ptr long dbus_error_name, @Ptr long dbus_error_message, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>void g_dbus_error_set_dbus_error_valist(GError**, const gchar*, const gchar*, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbuserror.h:37</i>
	 */
	public static void g_dbus_error_set_dbus_error_valist(Pointer<Pointer > error, Pointer<Byte > dbus_error_name, Pointer<Byte > dbus_error_message, Pointer<Byte > format, Object... var_args) {
		g_dbus_error_set_dbus_error_valist(Pointer.getPeer(error), Pointer.getPeer(dbus_error_name), Pointer.getPeer(dbus_error_message), Pointer.getPeer(format), var_args);
	}
	protected native static void g_dbus_error_set_dbus_error_valist(@Ptr long error, @Ptr long dbus_error_name, @Ptr long dbus_error_message, @Ptr long format, Object... var_args);
	/**
	 * Original signature : <code>gchar* g_dbus_error_encode_gerror(const GError*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbuserror.h:39</i>
	 */
	public static Pointer<Byte > g_dbus_error_encode_gerror(Pointer error) {
		return Pointer.pointerToAddress(g_dbus_error_encode_gerror(Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_error_encode_gerror(@Ptr long error);
	/**
	 * Original signature : <code>gchar* g_dbus_annotation_info_lookup(GDBusAnnotationInfo**, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:124</i>
	 */
	public static Pointer<Byte > g_dbus_annotation_info_lookup(Pointer<Pointer<GDBusAnnotationInfo > > annotations, Pointer<Byte > name) {
		return Pointer.pointerToAddress(g_dbus_annotation_info_lookup(Pointer.getPeer(annotations), Pointer.getPeer(name)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_annotation_info_lookup(@Ptr long annotations, @Ptr long name);
	/**
	 * Original signature : <code>GDBusMethodInfo* g_dbus_interface_info_lookup_method(GDBusInterfaceInfo*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:126</i>
	 */
	public static Pointer<GDBusMethodInfo > g_dbus_interface_info_lookup_method(Pointer<GDBusInterfaceInfo > info, Pointer<Byte > name) {
		return Pointer.pointerToAddress(g_dbus_interface_info_lookup_method(Pointer.getPeer(info), Pointer.getPeer(name)), GDBusMethodInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_interface_info_lookup_method(@Ptr long info, @Ptr long name);
	/**
	 * Original signature : <code>GDBusSignalInfo* g_dbus_interface_info_lookup_signal(GDBusInterfaceInfo*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:128</i>
	 */
	public static Pointer<GDBusSignalInfo > g_dbus_interface_info_lookup_signal(Pointer<GDBusInterfaceInfo > info, Pointer<Byte > name) {
		return Pointer.pointerToAddress(g_dbus_interface_info_lookup_signal(Pointer.getPeer(info), Pointer.getPeer(name)), GDBusSignalInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_interface_info_lookup_signal(@Ptr long info, @Ptr long name);
	/**
	 * Original signature : <code>GDBusPropertyInfo* g_dbus_interface_info_lookup_property(GDBusInterfaceInfo*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:130</i>
	 */
	public static Pointer<GDBusPropertyInfo > g_dbus_interface_info_lookup_property(Pointer<GDBusInterfaceInfo > info, Pointer<Byte > name) {
		return Pointer.pointerToAddress(g_dbus_interface_info_lookup_property(Pointer.getPeer(info), Pointer.getPeer(name)), GDBusPropertyInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_interface_info_lookup_property(@Ptr long info, @Ptr long name);
	/**
	 * Original signature : <code>void g_dbus_interface_info_cache_build(GDBusInterfaceInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:132</i>
	 */
	public static void g_dbus_interface_info_cache_build(Pointer<GDBusInterfaceInfo > info) {
		g_dbus_interface_info_cache_build(Pointer.getPeer(info));
	}
	protected native static void g_dbus_interface_info_cache_build(@Ptr long info);
	/**
	 * Original signature : <code>void g_dbus_interface_info_cache_release(GDBusInterfaceInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:134</i>
	 */
	public static void g_dbus_interface_info_cache_release(Pointer<GDBusInterfaceInfo > info) {
		g_dbus_interface_info_cache_release(Pointer.getPeer(info));
	}
	protected native static void g_dbus_interface_info_cache_release(@Ptr long info);
	/**
	 * Original signature : <code>void g_dbus_interface_info_generate_xml(GDBusInterfaceInfo*, guint, GString*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:136</i>
	 */
	public static void g_dbus_interface_info_generate_xml(Pointer<GDBusInterfaceInfo > info, int indent, Pointer string_builder) {
		g_dbus_interface_info_generate_xml(Pointer.getPeer(info), indent, Pointer.getPeer(string_builder));
	}
	protected native static void g_dbus_interface_info_generate_xml(@Ptr long info, int indent, @Ptr long string_builder);
	/**
	 * Original signature : <code>GDBusNodeInfo* g_dbus_node_info_new_for_xml(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:138</i>
	 */
	public static Pointer<GDBusNodeInfo > g_dbus_node_info_new_for_xml(Pointer<Byte > xml_data, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_node_info_new_for_xml(Pointer.getPeer(xml_data), Pointer.getPeer(error)), GDBusNodeInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_node_info_new_for_xml(@Ptr long xml_data, @Ptr long error);
	/**
	 * Original signature : <code>GDBusInterfaceInfo* g_dbus_node_info_lookup_interface(GDBusNodeInfo*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:140</i>
	 */
	public static Pointer<GDBusInterfaceInfo > g_dbus_node_info_lookup_interface(Pointer<GDBusNodeInfo > info, Pointer<Byte > name) {
		return Pointer.pointerToAddress(g_dbus_node_info_lookup_interface(Pointer.getPeer(info), Pointer.getPeer(name)), GDBusInterfaceInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_node_info_lookup_interface(@Ptr long info, @Ptr long name);
	/**
	 * Original signature : <code>void g_dbus_node_info_generate_xml(GDBusNodeInfo*, guint, GString*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:142</i>
	 */
	public static void g_dbus_node_info_generate_xml(Pointer<GDBusNodeInfo > info, int indent, Pointer string_builder) {
		g_dbus_node_info_generate_xml(Pointer.getPeer(info), indent, Pointer.getPeer(string_builder));
	}
	protected native static void g_dbus_node_info_generate_xml(@Ptr long info, int indent, @Ptr long string_builder);
	/**
	 * Original signature : <code>GDBusNodeInfo* g_dbus_node_info_ref(GDBusNodeInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:144</i>
	 */
	public static Pointer<GDBusNodeInfo > g_dbus_node_info_ref(Pointer<GDBusNodeInfo > info) {
		return Pointer.pointerToAddress(g_dbus_node_info_ref(Pointer.getPeer(info)), GDBusNodeInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_node_info_ref(@Ptr long info);
	/**
	 * Original signature : <code>GDBusInterfaceInfo* g_dbus_interface_info_ref(GDBusInterfaceInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:146</i>
	 */
	public static Pointer<GDBusInterfaceInfo > g_dbus_interface_info_ref(Pointer<GDBusInterfaceInfo > info) {
		return Pointer.pointerToAddress(g_dbus_interface_info_ref(Pointer.getPeer(info)), GDBusInterfaceInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_interface_info_ref(@Ptr long info);
	/**
	 * Original signature : <code>GDBusMethodInfo* g_dbus_method_info_ref(GDBusMethodInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:148</i>
	 */
	public static Pointer<GDBusMethodInfo > g_dbus_method_info_ref(Pointer<GDBusMethodInfo > info) {
		return Pointer.pointerToAddress(g_dbus_method_info_ref(Pointer.getPeer(info)), GDBusMethodInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_method_info_ref(@Ptr long info);
	/**
	 * Original signature : <code>GDBusSignalInfo* g_dbus_signal_info_ref(GDBusSignalInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:150</i>
	 */
	public static Pointer<GDBusSignalInfo > g_dbus_signal_info_ref(Pointer<GDBusSignalInfo > info) {
		return Pointer.pointerToAddress(g_dbus_signal_info_ref(Pointer.getPeer(info)), GDBusSignalInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_signal_info_ref(@Ptr long info);
	/**
	 * Original signature : <code>GDBusPropertyInfo* g_dbus_property_info_ref(GDBusPropertyInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:152</i>
	 */
	public static Pointer<GDBusPropertyInfo > g_dbus_property_info_ref(Pointer<GDBusPropertyInfo > info) {
		return Pointer.pointerToAddress(g_dbus_property_info_ref(Pointer.getPeer(info)), GDBusPropertyInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_property_info_ref(@Ptr long info);
	/**
	 * Original signature : <code>GDBusArgInfo* g_dbus_arg_info_ref(GDBusArgInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:154</i>
	 */
	public static Pointer<GDBusArgInfo > g_dbus_arg_info_ref(Pointer<GDBusArgInfo > info) {
		return Pointer.pointerToAddress(g_dbus_arg_info_ref(Pointer.getPeer(info)), GDBusArgInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_arg_info_ref(@Ptr long info);
	/**
	 * Original signature : <code>GDBusAnnotationInfo* g_dbus_annotation_info_ref(GDBusAnnotationInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:156</i>
	 */
	public static Pointer<GDBusAnnotationInfo > g_dbus_annotation_info_ref(Pointer<GDBusAnnotationInfo > info) {
		return Pointer.pointerToAddress(g_dbus_annotation_info_ref(Pointer.getPeer(info)), GDBusAnnotationInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_annotation_info_ref(@Ptr long info);
	/**
	 * Original signature : <code>void g_dbus_node_info_unref(GDBusNodeInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:158</i>
	 */
	public static void g_dbus_node_info_unref(Pointer<GDBusNodeInfo > info) {
		g_dbus_node_info_unref(Pointer.getPeer(info));
	}
	protected native static void g_dbus_node_info_unref(@Ptr long info);
	/**
	 * Original signature : <code>void g_dbus_interface_info_unref(GDBusInterfaceInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:160</i>
	 */
	public static void g_dbus_interface_info_unref(Pointer<GDBusInterfaceInfo > info) {
		g_dbus_interface_info_unref(Pointer.getPeer(info));
	}
	protected native static void g_dbus_interface_info_unref(@Ptr long info);
	/**
	 * Original signature : <code>void g_dbus_method_info_unref(GDBusMethodInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:162</i>
	 */
	public static void g_dbus_method_info_unref(Pointer<GDBusMethodInfo > info) {
		g_dbus_method_info_unref(Pointer.getPeer(info));
	}
	protected native static void g_dbus_method_info_unref(@Ptr long info);
	/**
	 * Original signature : <code>void g_dbus_signal_info_unref(GDBusSignalInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:164</i>
	 */
	public static void g_dbus_signal_info_unref(Pointer<GDBusSignalInfo > info) {
		g_dbus_signal_info_unref(Pointer.getPeer(info));
	}
	protected native static void g_dbus_signal_info_unref(@Ptr long info);
	/**
	 * Original signature : <code>void g_dbus_property_info_unref(GDBusPropertyInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:166</i>
	 */
	public static void g_dbus_property_info_unref(Pointer<GDBusPropertyInfo > info) {
		g_dbus_property_info_unref(Pointer.getPeer(info));
	}
	protected native static void g_dbus_property_info_unref(@Ptr long info);
	/**
	 * Original signature : <code>void g_dbus_arg_info_unref(GDBusArgInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:168</i>
	 */
	public static void g_dbus_arg_info_unref(Pointer<GDBusArgInfo > info) {
		g_dbus_arg_info_unref(Pointer.getPeer(info));
	}
	protected native static void g_dbus_arg_info_unref(@Ptr long info);
	/**
	 * Original signature : <code>void g_dbus_annotation_info_unref(GDBusAnnotationInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:170</i>
	 */
	public static void g_dbus_annotation_info_unref(Pointer<GDBusAnnotationInfo > info) {
		g_dbus_annotation_info_unref(Pointer.getPeer(info));
	}
	protected native static void g_dbus_annotation_info_unref(@Ptr long info);
	/**
	 * Original signature : <code>GType g_dbus_node_info_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:172</i>
	 */
	public static native GIOLibrary.GType g_dbus_node_info_get_type();
	/**
	 * Original signature : <code>GType g_dbus_interface_info_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:174</i>
	 */
	public static native GIOLibrary.GType g_dbus_interface_info_get_type();
	/**
	 * Original signature : <code>GType g_dbus_method_info_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:176</i>
	 */
	public static native GIOLibrary.GType g_dbus_method_info_get_type();
	/**
	 * Original signature : <code>GType g_dbus_signal_info_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:178</i>
	 */
	public static native GIOLibrary.GType g_dbus_signal_info_get_type();
	/**
	 * Original signature : <code>GType g_dbus_property_info_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:180</i>
	 */
	public static native GIOLibrary.GType g_dbus_property_info_get_type();
	/**
	 * Original signature : <code>GType g_dbus_arg_info_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:182</i>
	 */
	public static native GIOLibrary.GType g_dbus_arg_info_get_type();
	/**
	 * Original signature : <code>GType g_dbus_annotation_info_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusintrospection.h:184</i>
	 */
	public static native GIOLibrary.GType g_dbus_annotation_info_get_type();
	/**
	 * Original signature : <code>GType g_dbus_message_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:2</i>
	 */
	public static native GIOLibrary.GType g_dbus_message_get_type();
	/**
	 * Original signature : <code>GDBusMessage* g_dbus_message_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:4</i>
	 */
	public static Pointer<GIOLibrary.GDBusMessage > g_dbus_message_new() {
		return Pointer.pointerToAddress(g_dbus_message_new$2(), GIOLibrary.GDBusMessage.class);
	}
	@Ptr 
	protected native static long g_dbus_message_new$2();
	/**
	 * Original signature : <code>GDBusMessage* g_dbus_message_new_signal(const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:6</i>
	 */
	public static Pointer<GIOLibrary.GDBusMessage > g_dbus_message_new_signal(Pointer<Byte > path, Pointer<Byte > interface_, Pointer<Byte > signal) {
		return Pointer.pointerToAddress(g_dbus_message_new_signal(Pointer.getPeer(path), Pointer.getPeer(interface_), Pointer.getPeer(signal)), GIOLibrary.GDBusMessage.class);
	}
	@Ptr 
	protected native static long g_dbus_message_new_signal(@Ptr long path, @Ptr long interface_, @Ptr long signal);
	/**
	 * Original signature : <code>GDBusMessage* g_dbus_message_new_method_call(const gchar*, const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:8</i>
	 */
	public static Pointer<GIOLibrary.GDBusMessage > g_dbus_message_new_method_call(Pointer<Byte > name, Pointer<Byte > path, Pointer<Byte > interface_, Pointer<Byte > method) {
		return Pointer.pointerToAddress(g_dbus_message_new_method_call(Pointer.getPeer(name), Pointer.getPeer(path), Pointer.getPeer(interface_), Pointer.getPeer(method)), GIOLibrary.GDBusMessage.class);
	}
	@Ptr 
	protected native static long g_dbus_message_new_method_call(@Ptr long name, @Ptr long path, @Ptr long interface_, @Ptr long method);
	/**
	 * Original signature : <code>GDBusMessage* g_dbus_message_new_method_reply(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:10</i>
	 */
	public static Pointer<GIOLibrary.GDBusMessage > g_dbus_message_new_method_reply(Pointer<GIOLibrary.GDBusMessage > method_call_message) {
		return Pointer.pointerToAddress(g_dbus_message_new_method_reply(Pointer.getPeer(method_call_message)), GIOLibrary.GDBusMessage.class);
	}
	@Ptr 
	protected native static long g_dbus_message_new_method_reply(@Ptr long method_call_message);
	/**
	 * Original signature : <code>GDBusMessage* g_dbus_message_new_method_error(GDBusMessage*, const gchar*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:12</i>
	 */
	public static Pointer<GIOLibrary.GDBusMessage > g_dbus_message_new_method_error(Pointer<GIOLibrary.GDBusMessage > method_call_message, Pointer<Byte > error_name, Pointer<Byte > error_message_format, Object... varArgs1) {
		return Pointer.pointerToAddress(g_dbus_message_new_method_error(Pointer.getPeer(method_call_message), Pointer.getPeer(error_name), Pointer.getPeer(error_message_format), varArgs1), GIOLibrary.GDBusMessage.class);
	}
	@Ptr 
	protected native static long g_dbus_message_new_method_error(@Ptr long method_call_message, @Ptr long error_name, @Ptr long error_message_format, Object... varArgs1);
	/**
	 * Original signature : <code>GDBusMessage* g_dbus_message_new_method_error_valist(GDBusMessage*, const gchar*, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:14</i>
	 */
	public static Pointer<GIOLibrary.GDBusMessage > g_dbus_message_new_method_error_valist(Pointer<GIOLibrary.GDBusMessage > method_call_message, Pointer<Byte > error_name, Pointer<Byte > error_message_format, Object... var_args) {
		return Pointer.pointerToAddress(g_dbus_message_new_method_error_valist(Pointer.getPeer(method_call_message), Pointer.getPeer(error_name), Pointer.getPeer(error_message_format), var_args), GIOLibrary.GDBusMessage.class);
	}
	@Ptr 
	protected native static long g_dbus_message_new_method_error_valist(@Ptr long method_call_message, @Ptr long error_name, @Ptr long error_message_format, Object... var_args);
	/**
	 * Original signature : <code>GDBusMessage* g_dbus_message_new_method_error_literal(GDBusMessage*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:16</i>
	 */
	public static Pointer<GIOLibrary.GDBusMessage > g_dbus_message_new_method_error_literal(Pointer<GIOLibrary.GDBusMessage > method_call_message, Pointer<Byte > error_name, Pointer<Byte > error_message) {
		return Pointer.pointerToAddress(g_dbus_message_new_method_error_literal(Pointer.getPeer(method_call_message), Pointer.getPeer(error_name), Pointer.getPeer(error_message)), GIOLibrary.GDBusMessage.class);
	}
	@Ptr 
	protected native static long g_dbus_message_new_method_error_literal(@Ptr long method_call_message, @Ptr long error_name, @Ptr long error_message);
	/**
	 * Original signature : <code>gchar* g_dbus_message_print(GDBusMessage*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:18</i>
	 */
	public static Pointer<Byte > g_dbus_message_print(Pointer<GIOLibrary.GDBusMessage > message, int indent) {
		return Pointer.pointerToAddress(g_dbus_message_print(Pointer.getPeer(message), indent), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_message_print(@Ptr long message, int indent);
	/**
	 * Original signature : <code>gboolean g_dbus_message_get_locked(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:20</i>
	 */
	public static GIOLibrary.gboolean g_dbus_message_get_locked(Pointer<GIOLibrary.GDBusMessage > message) {
		return g_dbus_message_get_locked(Pointer.getPeer(message));
	}
	protected native static GIOLibrary.gboolean g_dbus_message_get_locked(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_lock(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:22</i>
	 */
	public static void g_dbus_message_lock(Pointer<GIOLibrary.GDBusMessage > message) {
		g_dbus_message_lock(Pointer.getPeer(message));
	}
	protected native static void g_dbus_message_lock(@Ptr long message);
	/**
	 * Original signature : <code>GDBusMessage* g_dbus_message_copy(GDBusMessage*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:24</i>
	 */
	public static Pointer<GIOLibrary.GDBusMessage > g_dbus_message_copy(Pointer<GIOLibrary.GDBusMessage > message, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_message_copy(Pointer.getPeer(message), Pointer.getPeer(error)), GIOLibrary.GDBusMessage.class);
	}
	@Ptr 
	protected native static long g_dbus_message_copy(@Ptr long message, @Ptr long error);
	/**
	 * Original signature : <code>GDBusMessageByteOrder g_dbus_message_get_byte_order(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:26</i>
	 */
	public static IntValuedEnum<GIOLibrary.GDBusMessageByteOrder > g_dbus_message_get_byte_order(Pointer<GIOLibrary.GDBusMessage > message) {
		return FlagSet.fromValue(g_dbus_message_get_byte_order(Pointer.getPeer(message)), GIOLibrary.GDBusMessageByteOrder.class);
	}
	protected native static int g_dbus_message_get_byte_order(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_set_byte_order(GDBusMessage*, GDBusMessageByteOrder)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:28</i>
	 */
	public static void g_dbus_message_set_byte_order(Pointer<GIOLibrary.GDBusMessage > message, IntValuedEnum<GIOLibrary.GDBusMessageByteOrder > byte_order) {
		g_dbus_message_set_byte_order(Pointer.getPeer(message), (int)byte_order.value());
	}
	protected native static void g_dbus_message_set_byte_order(@Ptr long message, int byte_order);
	/**
	 * Original signature : <code>GDBusMessageType g_dbus_message_get_message_type(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:30</i>
	 */
	public static IntValuedEnum<GIOLibrary.GDBusMessageType > g_dbus_message_get_message_type(Pointer<GIOLibrary.GDBusMessage > message) {
		return FlagSet.fromValue(g_dbus_message_get_message_type(Pointer.getPeer(message)), GIOLibrary.GDBusMessageType.class);
	}
	protected native static int g_dbus_message_get_message_type(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_set_message_type(GDBusMessage*, GDBusMessageType)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:32</i>
	 */
	public static void g_dbus_message_set_message_type(Pointer<GIOLibrary.GDBusMessage > message, IntValuedEnum<GIOLibrary.GDBusMessageType > type) {
		g_dbus_message_set_message_type(Pointer.getPeer(message), (int)type.value());
	}
	protected native static void g_dbus_message_set_message_type(@Ptr long message, int type);
	/**
	 * Original signature : <code>GDBusMessageFlags g_dbus_message_get_flags(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:34</i>
	 */
	public static IntValuedEnum<GIOLibrary.GDBusMessageFlags > g_dbus_message_get_flags(Pointer<GIOLibrary.GDBusMessage > message) {
		return FlagSet.fromValue(g_dbus_message_get_flags(Pointer.getPeer(message)), GIOLibrary.GDBusMessageFlags.class);
	}
	protected native static int g_dbus_message_get_flags(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_set_flags(GDBusMessage*, GDBusMessageFlags)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:36</i>
	 */
	public static void g_dbus_message_set_flags(Pointer<GIOLibrary.GDBusMessage > message, IntValuedEnum<GIOLibrary.GDBusMessageFlags > flags) {
		g_dbus_message_set_flags(Pointer.getPeer(message), (int)flags.value());
	}
	protected native static void g_dbus_message_set_flags(@Ptr long message, int flags);
	/**
	 * Original signature : <code>guint32 g_dbus_message_get_serial(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:38</i>
	 */
	public static int g_dbus_message_get_serial(Pointer<GIOLibrary.GDBusMessage > message) {
		return g_dbus_message_get_serial(Pointer.getPeer(message));
	}
	protected native static int g_dbus_message_get_serial(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_set_serial(GDBusMessage*, guint32)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:40</i>
	 */
	public static void g_dbus_message_set_serial(Pointer<GIOLibrary.GDBusMessage > message, int serial) {
		g_dbus_message_set_serial(Pointer.getPeer(message), serial);
	}
	protected native static void g_dbus_message_set_serial(@Ptr long message, int serial);
	/**
	 * Original signature : <code>GVariant* g_dbus_message_get_header(GDBusMessage*, GDBusMessageHeaderField)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:42</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_dbus_message_get_header(Pointer<GIOLibrary.GDBusMessage > message, IntValuedEnum<GIOLibrary.GDBusMessageHeaderField > header_field) {
		return Pointer.pointerToAddress(g_dbus_message_get_header(Pointer.getPeer(message), (int)header_field.value()), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_dbus_message_get_header(@Ptr long message, int header_field);
	/**
	 * Original signature : <code>void g_dbus_message_set_header(GDBusMessage*, GDBusMessageHeaderField, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:44</i>
	 */
	public static void g_dbus_message_set_header(Pointer<GIOLibrary.GDBusMessage > message, IntValuedEnum<GIOLibrary.GDBusMessageHeaderField > header_field, Pointer<GIOLibrary.GVariant > value) {
		g_dbus_message_set_header(Pointer.getPeer(message), (int)header_field.value(), Pointer.getPeer(value));
	}
	protected native static void g_dbus_message_set_header(@Ptr long message, int header_field, @Ptr long value);
	/**
	 * Original signature : <code>guchar* g_dbus_message_get_header_fields(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:46</i>
	 */
	public static Pointer<Byte > g_dbus_message_get_header_fields(Pointer<GIOLibrary.GDBusMessage > message) {
		return Pointer.pointerToAddress(g_dbus_message_get_header_fields(Pointer.getPeer(message)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_message_get_header_fields(@Ptr long message);
	/**
	 * Original signature : <code>GVariant* g_dbus_message_get_body(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:48</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_dbus_message_get_body(Pointer<GIOLibrary.GDBusMessage > message) {
		return Pointer.pointerToAddress(g_dbus_message_get_body(Pointer.getPeer(message)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_dbus_message_get_body(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_set_body(GDBusMessage*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:50</i>
	 */
	public static void g_dbus_message_set_body(Pointer<GIOLibrary.GDBusMessage > message, Pointer<GIOLibrary.GVariant > body) {
		g_dbus_message_set_body(Pointer.getPeer(message), Pointer.getPeer(body));
	}
	protected native static void g_dbus_message_set_body(@Ptr long message, @Ptr long body);
	/**
	 * Original signature : <code>GUnixFDList* g_dbus_message_get_unix_fd_list(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:52</i>
	 */
	public static Pointer<GIOLibrary.GUnixFDList > g_dbus_message_get_unix_fd_list(Pointer<GIOLibrary.GDBusMessage > message) {
		return Pointer.pointerToAddress(g_dbus_message_get_unix_fd_list(Pointer.getPeer(message)), GIOLibrary.GUnixFDList.class);
	}
	@Ptr 
	protected native static long g_dbus_message_get_unix_fd_list(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_set_unix_fd_list(GDBusMessage*, GUnixFDList*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:54</i>
	 */
	public static void g_dbus_message_set_unix_fd_list(Pointer<GIOLibrary.GDBusMessage > message, Pointer<GIOLibrary.GUnixFDList > fd_list) {
		g_dbus_message_set_unix_fd_list(Pointer.getPeer(message), Pointer.getPeer(fd_list));
	}
	protected native static void g_dbus_message_set_unix_fd_list(@Ptr long message, @Ptr long fd_list);
	/**
	 * Original signature : <code>guint32 g_dbus_message_get_reply_serial(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:56</i>
	 */
	public static int g_dbus_message_get_reply_serial(Pointer<GIOLibrary.GDBusMessage > message) {
		return g_dbus_message_get_reply_serial(Pointer.getPeer(message));
	}
	protected native static int g_dbus_message_get_reply_serial(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_set_reply_serial(GDBusMessage*, guint32)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:58</i>
	 */
	public static void g_dbus_message_set_reply_serial(Pointer<GIOLibrary.GDBusMessage > message, int value) {
		g_dbus_message_set_reply_serial(Pointer.getPeer(message), value);
	}
	protected native static void g_dbus_message_set_reply_serial(@Ptr long message, int value);
	/**
	 * Original signature : <code>gchar* g_dbus_message_get_interface(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:60</i>
	 */
	public static Pointer<Byte > g_dbus_message_get_interface(Pointer<GIOLibrary.GDBusMessage > message) {
		return Pointer.pointerToAddress(g_dbus_message_get_interface(Pointer.getPeer(message)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_message_get_interface(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_set_interface(GDBusMessage*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:62</i>
	 */
	public static void g_dbus_message_set_interface(Pointer<GIOLibrary.GDBusMessage > message, Pointer<Byte > value) {
		g_dbus_message_set_interface(Pointer.getPeer(message), Pointer.getPeer(value));
	}
	protected native static void g_dbus_message_set_interface(@Ptr long message, @Ptr long value);
	/**
	 * Original signature : <code>gchar* g_dbus_message_get_member(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:64</i>
	 */
	public static Pointer<Byte > g_dbus_message_get_member(Pointer<GIOLibrary.GDBusMessage > message) {
		return Pointer.pointerToAddress(g_dbus_message_get_member(Pointer.getPeer(message)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_message_get_member(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_set_member(GDBusMessage*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:66</i>
	 */
	public static void g_dbus_message_set_member(Pointer<GIOLibrary.GDBusMessage > message, Pointer<Byte > value) {
		g_dbus_message_set_member(Pointer.getPeer(message), Pointer.getPeer(value));
	}
	protected native static void g_dbus_message_set_member(@Ptr long message, @Ptr long value);
	/**
	 * Original signature : <code>gchar* g_dbus_message_get_path(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:68</i>
	 */
	public static Pointer<Byte > g_dbus_message_get_path(Pointer<GIOLibrary.GDBusMessage > message) {
		return Pointer.pointerToAddress(g_dbus_message_get_path(Pointer.getPeer(message)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_message_get_path(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_set_path(GDBusMessage*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:70</i>
	 */
	public static void g_dbus_message_set_path(Pointer<GIOLibrary.GDBusMessage > message, Pointer<Byte > value) {
		g_dbus_message_set_path(Pointer.getPeer(message), Pointer.getPeer(value));
	}
	protected native static void g_dbus_message_set_path(@Ptr long message, @Ptr long value);
	/**
	 * Original signature : <code>gchar* g_dbus_message_get_sender(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:72</i>
	 */
	public static Pointer<Byte > g_dbus_message_get_sender(Pointer<GIOLibrary.GDBusMessage > message) {
		return Pointer.pointerToAddress(g_dbus_message_get_sender(Pointer.getPeer(message)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_message_get_sender(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_set_sender(GDBusMessage*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:74</i>
	 */
	public static void g_dbus_message_set_sender(Pointer<GIOLibrary.GDBusMessage > message, Pointer<Byte > value) {
		g_dbus_message_set_sender(Pointer.getPeer(message), Pointer.getPeer(value));
	}
	protected native static void g_dbus_message_set_sender(@Ptr long message, @Ptr long value);
	/**
	 * Original signature : <code>gchar* g_dbus_message_get_destination(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:76</i>
	 */
	public static Pointer<Byte > g_dbus_message_get_destination(Pointer<GIOLibrary.GDBusMessage > message) {
		return Pointer.pointerToAddress(g_dbus_message_get_destination(Pointer.getPeer(message)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_message_get_destination(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_set_destination(GDBusMessage*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:78</i>
	 */
	public static void g_dbus_message_set_destination(Pointer<GIOLibrary.GDBusMessage > message, Pointer<Byte > value) {
		g_dbus_message_set_destination(Pointer.getPeer(message), Pointer.getPeer(value));
	}
	protected native static void g_dbus_message_set_destination(@Ptr long message, @Ptr long value);
	/**
	 * Original signature : <code>gchar* g_dbus_message_get_error_name(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:80</i>
	 */
	public static Pointer<Byte > g_dbus_message_get_error_name(Pointer<GIOLibrary.GDBusMessage > message) {
		return Pointer.pointerToAddress(g_dbus_message_get_error_name(Pointer.getPeer(message)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_message_get_error_name(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_set_error_name(GDBusMessage*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:82</i>
	 */
	public static void g_dbus_message_set_error_name(Pointer<GIOLibrary.GDBusMessage > message, Pointer<Byte > value) {
		g_dbus_message_set_error_name(Pointer.getPeer(message), Pointer.getPeer(value));
	}
	protected native static void g_dbus_message_set_error_name(@Ptr long message, @Ptr long value);
	/**
	 * Original signature : <code>gchar* g_dbus_message_get_signature(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:84</i>
	 */
	public static Pointer<Byte > g_dbus_message_get_signature(Pointer<GIOLibrary.GDBusMessage > message) {
		return Pointer.pointerToAddress(g_dbus_message_get_signature(Pointer.getPeer(message)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_message_get_signature(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_set_signature(GDBusMessage*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:86</i>
	 */
	public static void g_dbus_message_set_signature(Pointer<GIOLibrary.GDBusMessage > message, Pointer<Byte > value) {
		g_dbus_message_set_signature(Pointer.getPeer(message), Pointer.getPeer(value));
	}
	protected native static void g_dbus_message_set_signature(@Ptr long message, @Ptr long value);
	/**
	 * Original signature : <code>guint32 g_dbus_message_get_num_unix_fds(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:88</i>
	 */
	public static int g_dbus_message_get_num_unix_fds(Pointer<GIOLibrary.GDBusMessage > message) {
		return g_dbus_message_get_num_unix_fds(Pointer.getPeer(message));
	}
	protected native static int g_dbus_message_get_num_unix_fds(@Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_message_set_num_unix_fds(GDBusMessage*, guint32)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:90</i>
	 */
	public static void g_dbus_message_set_num_unix_fds(Pointer<GIOLibrary.GDBusMessage > message, int value) {
		g_dbus_message_set_num_unix_fds(Pointer.getPeer(message), value);
	}
	protected native static void g_dbus_message_set_num_unix_fds(@Ptr long message, int value);
	/**
	 * Original signature : <code>gchar* g_dbus_message_get_arg0(GDBusMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:92</i>
	 */
	public static Pointer<Byte > g_dbus_message_get_arg0(Pointer<GIOLibrary.GDBusMessage > message) {
		return Pointer.pointerToAddress(g_dbus_message_get_arg0(Pointer.getPeer(message)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_message_get_arg0(@Ptr long message);
	/**
	 * Original signature : <code>GDBusMessage* g_dbus_message_new_from_blob(guchar*, gsize, GDBusCapabilityFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:94</i>
	 */
	public static Pointer<GIOLibrary.GDBusMessage > g_dbus_message_new_from_blob(Pointer<Byte > blob, @org.bridj.ann.CLong long blob_len, IntValuedEnum<GIOLibrary.GDBusCapabilityFlags > capabilities, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_message_new_from_blob(Pointer.getPeer(blob), blob_len, (int)capabilities.value(), Pointer.getPeer(error)), GIOLibrary.GDBusMessage.class);
	}
	@Ptr 
	protected native static long g_dbus_message_new_from_blob(@Ptr long blob, @org.bridj.ann.CLong long blob_len, int capabilities, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_dbus_message_bytes_needed(guchar*, gsize, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:96</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_dbus_message_bytes_needed(Pointer<Byte > blob, @org.bridj.ann.CLong long blob_len, Pointer<Pointer > error) {
		return g_dbus_message_bytes_needed(Pointer.getPeer(blob), blob_len, Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_dbus_message_bytes_needed(@Ptr long blob, @org.bridj.ann.CLong long blob_len, @Ptr long error);
	/**
	 * Original signature : <code>guchar* g_dbus_message_to_blob(GDBusMessage*, gsize*, GDBusCapabilityFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:98</i>
	 */
	public static Pointer<Byte > g_dbus_message_to_blob(Pointer<GIOLibrary.GDBusMessage > message, Pointer<org.bridj.CLong > out_size, IntValuedEnum<GIOLibrary.GDBusCapabilityFlags > capabilities, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_message_to_blob(Pointer.getPeer(message), Pointer.getPeer(out_size), (int)capabilities.value(), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_message_to_blob(@Ptr long message, @Ptr long out_size, int capabilities, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_dbus_message_to_gerror(GDBusMessage*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmessage.h:100</i>
	 */
	public static GIOLibrary.gboolean g_dbus_message_to_gerror(Pointer<GIOLibrary.GDBusMessage > message, Pointer<Pointer > error) {
		return g_dbus_message_to_gerror(Pointer.getPeer(message), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_dbus_message_to_gerror(@Ptr long message, @Ptr long error);
	/**
	 * Original signature : <code>GType g_dbus_method_invocation_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:2</i>
	 */
	public static native GIOLibrary.GType g_dbus_method_invocation_get_type();
	/**
	 * Original signature : <code>gchar* g_dbus_method_invocation_get_sender(GDBusMethodInvocation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:4</i>
	 */
	public static Pointer<Byte > g_dbus_method_invocation_get_sender(Pointer<GIOLibrary.GDBusMethodInvocation > invocation) {
		return Pointer.pointerToAddress(g_dbus_method_invocation_get_sender(Pointer.getPeer(invocation)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_method_invocation_get_sender(@Ptr long invocation);
	/**
	 * Original signature : <code>gchar* g_dbus_method_invocation_get_object_path(GDBusMethodInvocation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:6</i>
	 */
	public static Pointer<Byte > g_dbus_method_invocation_get_object_path(Pointer<GIOLibrary.GDBusMethodInvocation > invocation) {
		return Pointer.pointerToAddress(g_dbus_method_invocation_get_object_path(Pointer.getPeer(invocation)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_method_invocation_get_object_path(@Ptr long invocation);
	/**
	 * Original signature : <code>gchar* g_dbus_method_invocation_get_interface_name(GDBusMethodInvocation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:8</i>
	 */
	public static Pointer<Byte > g_dbus_method_invocation_get_interface_name(Pointer<GIOLibrary.GDBusMethodInvocation > invocation) {
		return Pointer.pointerToAddress(g_dbus_method_invocation_get_interface_name(Pointer.getPeer(invocation)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_method_invocation_get_interface_name(@Ptr long invocation);
	/**
	 * Original signature : <code>gchar* g_dbus_method_invocation_get_method_name(GDBusMethodInvocation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:10</i>
	 */
	public static Pointer<Byte > g_dbus_method_invocation_get_method_name(Pointer<GIOLibrary.GDBusMethodInvocation > invocation) {
		return Pointer.pointerToAddress(g_dbus_method_invocation_get_method_name(Pointer.getPeer(invocation)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_method_invocation_get_method_name(@Ptr long invocation);
	/**
	 * Original signature : <code>GDBusMethodInfo* g_dbus_method_invocation_get_method_info(GDBusMethodInvocation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:12</i>
	 */
	public static Pointer<GDBusMethodInfo > g_dbus_method_invocation_get_method_info(Pointer<GIOLibrary.GDBusMethodInvocation > invocation) {
		return Pointer.pointerToAddress(g_dbus_method_invocation_get_method_info(Pointer.getPeer(invocation)), GDBusMethodInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_method_invocation_get_method_info(@Ptr long invocation);
	/**
	 * Original signature : <code>GDBusPropertyInfo* g_dbus_method_invocation_get_property_info(GDBusMethodInvocation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:14</i>
	 */
	public static Pointer<GDBusPropertyInfo > g_dbus_method_invocation_get_property_info(Pointer<GIOLibrary.GDBusMethodInvocation > invocation) {
		return Pointer.pointerToAddress(g_dbus_method_invocation_get_property_info(Pointer.getPeer(invocation)), GDBusPropertyInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_method_invocation_get_property_info(@Ptr long invocation);
	/**
	 * Original signature : <code>GDBusConnection* g_dbus_method_invocation_get_connection(GDBusMethodInvocation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:16</i>
	 */
	public static Pointer<GIOLibrary.GDBusConnection > g_dbus_method_invocation_get_connection(Pointer<GIOLibrary.GDBusMethodInvocation > invocation) {
		return Pointer.pointerToAddress(g_dbus_method_invocation_get_connection(Pointer.getPeer(invocation)), GIOLibrary.GDBusConnection.class);
	}
	@Ptr 
	protected native static long g_dbus_method_invocation_get_connection(@Ptr long invocation);
	/**
	 * Original signature : <code>GDBusMessage* g_dbus_method_invocation_get_message(GDBusMethodInvocation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:18</i>
	 */
	public static Pointer<GIOLibrary.GDBusMessage > g_dbus_method_invocation_get_message(Pointer<GIOLibrary.GDBusMethodInvocation > invocation) {
		return Pointer.pointerToAddress(g_dbus_method_invocation_get_message(Pointer.getPeer(invocation)), GIOLibrary.GDBusMessage.class);
	}
	@Ptr 
	protected native static long g_dbus_method_invocation_get_message(@Ptr long invocation);
	/**
	 * Original signature : <code>GVariant* g_dbus_method_invocation_get_parameters(GDBusMethodInvocation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:20</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_dbus_method_invocation_get_parameters(Pointer<GIOLibrary.GDBusMethodInvocation > invocation) {
		return Pointer.pointerToAddress(g_dbus_method_invocation_get_parameters(Pointer.getPeer(invocation)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_dbus_method_invocation_get_parameters(@Ptr long invocation);
	/**
	 * Original signature : <code>gpointer g_dbus_method_invocation_get_user_data(GDBusMethodInvocation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:22</i>
	 */
	public static GIOLibrary.gpointer g_dbus_method_invocation_get_user_data(Pointer<GIOLibrary.GDBusMethodInvocation > invocation) {
		return g_dbus_method_invocation_get_user_data(Pointer.getPeer(invocation));
	}
	protected native static GIOLibrary.gpointer g_dbus_method_invocation_get_user_data(@Ptr long invocation);
	/**
	 * Original signature : <code>void g_dbus_method_invocation_return_value(GDBusMethodInvocation*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:24</i>
	 */
	public static void g_dbus_method_invocation_return_value(Pointer<GIOLibrary.GDBusMethodInvocation > invocation, Pointer<GIOLibrary.GVariant > parameters) {
		g_dbus_method_invocation_return_value(Pointer.getPeer(invocation), Pointer.getPeer(parameters));
	}
	protected native static void g_dbus_method_invocation_return_value(@Ptr long invocation, @Ptr long parameters);
	/**
	 * Original signature : <code>void g_dbus_method_invocation_return_value_with_unix_fd_list(GDBusMethodInvocation*, GVariant*, GUnixFDList*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:26</i>
	 */
	public static void g_dbus_method_invocation_return_value_with_unix_fd_list(Pointer<GIOLibrary.GDBusMethodInvocation > invocation, Pointer<GIOLibrary.GVariant > parameters, Pointer<GIOLibrary.GUnixFDList > fd_list) {
		g_dbus_method_invocation_return_value_with_unix_fd_list(Pointer.getPeer(invocation), Pointer.getPeer(parameters), Pointer.getPeer(fd_list));
	}
	protected native static void g_dbus_method_invocation_return_value_with_unix_fd_list(@Ptr long invocation, @Ptr long parameters, @Ptr long fd_list);
	/**
	 * Original signature : <code>void g_dbus_method_invocation_return_error(GDBusMethodInvocation*, GQuark, gint, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:28</i>
	 */
	public static void g_dbus_method_invocation_return_error(Pointer<GIOLibrary.GDBusMethodInvocation > invocation, int domain, int code, Pointer<Byte > format, Object... varArgs1) {
		g_dbus_method_invocation_return_error(Pointer.getPeer(invocation), domain, code, Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_dbus_method_invocation_return_error(@Ptr long invocation, int domain, int code, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>void g_dbus_method_invocation_return_error_valist(GDBusMethodInvocation*, GQuark, gint, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:30</i>
	 */
	public static void g_dbus_method_invocation_return_error_valist(Pointer<GIOLibrary.GDBusMethodInvocation > invocation, int domain, int code, Pointer<Byte > format, Object... var_args) {
		g_dbus_method_invocation_return_error_valist(Pointer.getPeer(invocation), domain, code, Pointer.getPeer(format), var_args);
	}
	protected native static void g_dbus_method_invocation_return_error_valist(@Ptr long invocation, int domain, int code, @Ptr long format, Object... var_args);
	/**
	 * Original signature : <code>void g_dbus_method_invocation_return_error_literal(GDBusMethodInvocation*, GQuark, gint, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:32</i>
	 */
	public static void g_dbus_method_invocation_return_error_literal(Pointer<GIOLibrary.GDBusMethodInvocation > invocation, int domain, int code, Pointer<Byte > message) {
		g_dbus_method_invocation_return_error_literal(Pointer.getPeer(invocation), domain, code, Pointer.getPeer(message));
	}
	protected native static void g_dbus_method_invocation_return_error_literal(@Ptr long invocation, int domain, int code, @Ptr long message);
	/**
	 * Original signature : <code>void g_dbus_method_invocation_return_gerror(GDBusMethodInvocation*, const GError*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:34</i>
	 */
	public static void g_dbus_method_invocation_return_gerror(Pointer<GIOLibrary.GDBusMethodInvocation > invocation, Pointer error) {
		g_dbus_method_invocation_return_gerror(Pointer.getPeer(invocation), Pointer.getPeer(error));
	}
	protected native static void g_dbus_method_invocation_return_gerror(@Ptr long invocation, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_method_invocation_take_error(GDBusMethodInvocation*, GError*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:36</i>
	 */
	public static void g_dbus_method_invocation_take_error(Pointer<GIOLibrary.GDBusMethodInvocation > invocation, Pointer error) {
		g_dbus_method_invocation_take_error(Pointer.getPeer(invocation), Pointer.getPeer(error));
	}
	protected native static void g_dbus_method_invocation_take_error(@Ptr long invocation, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_method_invocation_return_dbus_error(GDBusMethodInvocation*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmethodinvocation.h:38</i>
	 */
	public static void g_dbus_method_invocation_return_dbus_error(Pointer<GIOLibrary.GDBusMethodInvocation > invocation, Pointer<Byte > error_name, Pointer<Byte > error_message) {
		g_dbus_method_invocation_return_dbus_error(Pointer.getPeer(invocation), Pointer.getPeer(error_name), Pointer.getPeer(error_message));
	}
	protected native static void g_dbus_method_invocation_return_dbus_error(@Ptr long invocation, @Ptr long error_name, @Ptr long error_message);
	/**
	 * Original signature : <code>guint g_bus_own_name(GBusType, const gchar*, GBusNameOwnerFlags, GBusAcquiredCallback, GBusNameAcquiredCallback, GBusNameLostCallback, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusnameowning.h:30</i>
	 */
	public static int g_bus_own_name(IntValuedEnum<GIOLibrary.GBusType > bus_type, Pointer<Byte > name, IntValuedEnum<GIOLibrary.GBusNameOwnerFlags > flags, Pointer<GIOLibrary.GBusAcquiredCallback > bus_acquired_handler, Pointer<GIOLibrary.GBusNameAcquiredCallback > name_acquired_handler, Pointer<GIOLibrary.GBusNameLostCallback > name_lost_handler, GIOLibrary.gpointer user_data, GIOLibrary.GDestroyNotify user_data_free_func) {
		return g_bus_own_name((int)bus_type.value(), Pointer.getPeer(name), (int)flags.value(), Pointer.getPeer(bus_acquired_handler), Pointer.getPeer(name_acquired_handler), Pointer.getPeer(name_lost_handler), user_data, Pointer.getPeer(user_data_free_func));
	}
	protected native static int g_bus_own_name(int bus_type, @Ptr long name, int flags, @Ptr long bus_acquired_handler, @Ptr long name_acquired_handler, @Ptr long name_lost_handler, GIOLibrary.gpointer user_data, @Ptr long user_data_free_func);
	/**
	 * Original signature : <code>guint g_bus_own_name_on_connection(GDBusConnection*, const gchar*, GBusNameOwnerFlags, GBusNameAcquiredCallback, GBusNameLostCallback, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusnameowning.h:32</i>
	 */
	public static int g_bus_own_name_on_connection(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > name, IntValuedEnum<GIOLibrary.GBusNameOwnerFlags > flags, Pointer<GIOLibrary.GBusNameAcquiredCallback > name_acquired_handler, Pointer<GIOLibrary.GBusNameLostCallback > name_lost_handler, GIOLibrary.gpointer user_data, GIOLibrary.GDestroyNotify user_data_free_func) {
		return g_bus_own_name_on_connection(Pointer.getPeer(connection), Pointer.getPeer(name), (int)flags.value(), Pointer.getPeer(name_acquired_handler), Pointer.getPeer(name_lost_handler), user_data, Pointer.getPeer(user_data_free_func));
	}
	protected native static int g_bus_own_name_on_connection(@Ptr long connection, @Ptr long name, int flags, @Ptr long name_acquired_handler, @Ptr long name_lost_handler, GIOLibrary.gpointer user_data, @Ptr long user_data_free_func);
	/**
	 * Original signature : <code>guint g_bus_own_name_with_closures(GBusType, const gchar*, GBusNameOwnerFlags, GClosure*, GClosure*, GClosure*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusnameowning.h:34</i>
	 */
	public static int g_bus_own_name_with_closures(IntValuedEnum<GIOLibrary.GBusType > bus_type, Pointer<Byte > name, IntValuedEnum<GIOLibrary.GBusNameOwnerFlags > flags, Pointer bus_acquired_closure, Pointer name_acquired_closure, Pointer name_lost_closure) {
		return g_bus_own_name_with_closures((int)bus_type.value(), Pointer.getPeer(name), (int)flags.value(), Pointer.getPeer(bus_acquired_closure), Pointer.getPeer(name_acquired_closure), Pointer.getPeer(name_lost_closure));
	}
	protected native static int g_bus_own_name_with_closures(int bus_type, @Ptr long name, int flags, @Ptr long bus_acquired_closure, @Ptr long name_acquired_closure, @Ptr long name_lost_closure);
	/**
	 * Original signature : <code>guint g_bus_own_name_on_connection_with_closures(GDBusConnection*, const gchar*, GBusNameOwnerFlags, GClosure*, GClosure*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusnameowning.h:36</i>
	 */
	public static int g_bus_own_name_on_connection_with_closures(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > name, IntValuedEnum<GIOLibrary.GBusNameOwnerFlags > flags, Pointer name_acquired_closure, Pointer name_lost_closure) {
		return g_bus_own_name_on_connection_with_closures(Pointer.getPeer(connection), Pointer.getPeer(name), (int)flags.value(), Pointer.getPeer(name_acquired_closure), Pointer.getPeer(name_lost_closure));
	}
	protected native static int g_bus_own_name_on_connection_with_closures(@Ptr long connection, @Ptr long name, int flags, @Ptr long name_acquired_closure, @Ptr long name_lost_closure);
	/**
	 * Original signature : <code>void g_bus_unown_name(guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusnameowning.h:38</i>
	 */
	public static native void g_bus_unown_name(int owner_id);
	/**
	 * Original signature : <code>guint g_bus_watch_name(GBusType, const gchar*, GBusNameWatcherFlags, GBusNameAppearedCallback, GBusNameVanishedCallback, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusnamewatching.h:25</i>
	 */
	public static int g_bus_watch_name(IntValuedEnum<GIOLibrary.GBusType > bus_type, Pointer<Byte > name, IntValuedEnum<GIOLibrary.GBusNameWatcherFlags > flags, Pointer<GIOLibrary.GBusNameAppearedCallback > name_appeared_handler, Pointer<GIOLibrary.GBusNameVanishedCallback > name_vanished_handler, GIOLibrary.gpointer user_data, GIOLibrary.GDestroyNotify user_data_free_func) {
		return g_bus_watch_name((int)bus_type.value(), Pointer.getPeer(name), (int)flags.value(), Pointer.getPeer(name_appeared_handler), Pointer.getPeer(name_vanished_handler), user_data, Pointer.getPeer(user_data_free_func));
	}
	protected native static int g_bus_watch_name(int bus_type, @Ptr long name, int flags, @Ptr long name_appeared_handler, @Ptr long name_vanished_handler, GIOLibrary.gpointer user_data, @Ptr long user_data_free_func);
	/**
	 * Original signature : <code>guint g_bus_watch_name_on_connection(GDBusConnection*, const gchar*, GBusNameWatcherFlags, GBusNameAppearedCallback, GBusNameVanishedCallback, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusnamewatching.h:27</i>
	 */
	public static int g_bus_watch_name_on_connection(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > name, IntValuedEnum<GIOLibrary.GBusNameWatcherFlags > flags, Pointer<GIOLibrary.GBusNameAppearedCallback > name_appeared_handler, Pointer<GIOLibrary.GBusNameVanishedCallback > name_vanished_handler, GIOLibrary.gpointer user_data, GIOLibrary.GDestroyNotify user_data_free_func) {
		return g_bus_watch_name_on_connection(Pointer.getPeer(connection), Pointer.getPeer(name), (int)flags.value(), Pointer.getPeer(name_appeared_handler), Pointer.getPeer(name_vanished_handler), user_data, Pointer.getPeer(user_data_free_func));
	}
	protected native static int g_bus_watch_name_on_connection(@Ptr long connection, @Ptr long name, int flags, @Ptr long name_appeared_handler, @Ptr long name_vanished_handler, GIOLibrary.gpointer user_data, @Ptr long user_data_free_func);
	/**
	 * Original signature : <code>guint g_bus_watch_name_with_closures(GBusType, const gchar*, GBusNameWatcherFlags, GClosure*, GClosure*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusnamewatching.h:29</i>
	 */
	public static int g_bus_watch_name_with_closures(IntValuedEnum<GIOLibrary.GBusType > bus_type, Pointer<Byte > name, IntValuedEnum<GIOLibrary.GBusNameWatcherFlags > flags, Pointer name_appeared_closure, Pointer name_vanished_closure) {
		return g_bus_watch_name_with_closures((int)bus_type.value(), Pointer.getPeer(name), (int)flags.value(), Pointer.getPeer(name_appeared_closure), Pointer.getPeer(name_vanished_closure));
	}
	protected native static int g_bus_watch_name_with_closures(int bus_type, @Ptr long name, int flags, @Ptr long name_appeared_closure, @Ptr long name_vanished_closure);
	/**
	 * Original signature : <code>guint g_bus_watch_name_on_connection_with_closures(GDBusConnection*, const gchar*, GBusNameWatcherFlags, GClosure*, GClosure*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusnamewatching.h:31</i>
	 */
	public static int g_bus_watch_name_on_connection_with_closures(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > name, IntValuedEnum<GIOLibrary.GBusNameWatcherFlags > flags, Pointer name_appeared_closure, Pointer name_vanished_closure) {
		return g_bus_watch_name_on_connection_with_closures(Pointer.getPeer(connection), Pointer.getPeer(name), (int)flags.value(), Pointer.getPeer(name_appeared_closure), Pointer.getPeer(name_vanished_closure));
	}
	protected native static int g_bus_watch_name_on_connection_with_closures(@Ptr long connection, @Ptr long name, int flags, @Ptr long name_appeared_closure, @Ptr long name_vanished_closure);
	/**
	 * Original signature : <code>void g_bus_unwatch_name(guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusnamewatching.h:33</i>
	 */
	public static native void g_bus_unwatch_name(int watcher_id);
	/**
	 * Original signature : <code>GType g_dbus_proxy_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:33</i>
	 */
	public static native GIOLibrary.GType g_dbus_proxy_get_type();
	/**
	 * Original signature : <code>void g_dbus_proxy_new(GDBusConnection*, GDBusProxyFlags, GDBusInterfaceInfo*, const gchar*, const gchar*, const gchar*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:35</i>
	 */
	public static void g_dbus_proxy_new(Pointer<GIOLibrary.GDBusConnection > connection, IntValuedEnum<GIOLibrary.GDBusProxyFlags > flags, Pointer<GDBusInterfaceInfo > info, Pointer<Byte > name, Pointer<Byte > object_path, Pointer<Byte > interface_name, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_dbus_proxy_new(Pointer.getPeer(connection), (int)flags.value(), Pointer.getPeer(info), Pointer.getPeer(name), Pointer.getPeer(object_path), Pointer.getPeer(interface_name), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_dbus_proxy_new(@Ptr long connection, int flags, @Ptr long info, @Ptr long name, @Ptr long object_path, @Ptr long interface_name, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GDBusProxy* g_dbus_proxy_new_finish(GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:37</i>
	 */
	public static Pointer<GDBusProxy > g_dbus_proxy_new_finish(Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_proxy_new_finish(Pointer.getPeer(res), Pointer.getPeer(error)), GDBusProxy.class);
	}
	@Ptr 
	protected native static long g_dbus_proxy_new_finish(@Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>GDBusProxy* g_dbus_proxy_new_sync(GDBusConnection*, GDBusProxyFlags, GDBusInterfaceInfo*, const gchar*, const gchar*, const gchar*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:39</i>
	 */
	public static Pointer<GDBusProxy > g_dbus_proxy_new_sync(Pointer<GIOLibrary.GDBusConnection > connection, IntValuedEnum<GIOLibrary.GDBusProxyFlags > flags, Pointer<GDBusInterfaceInfo > info, Pointer<Byte > name, Pointer<Byte > object_path, Pointer<Byte > interface_name, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_proxy_new_sync(Pointer.getPeer(connection), (int)flags.value(), Pointer.getPeer(info), Pointer.getPeer(name), Pointer.getPeer(object_path), Pointer.getPeer(interface_name), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GDBusProxy.class);
	}
	@Ptr 
	protected native static long g_dbus_proxy_new_sync(@Ptr long connection, int flags, @Ptr long info, @Ptr long name, @Ptr long object_path, @Ptr long interface_name, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_proxy_new_for_bus(GBusType, GDBusProxyFlags, GDBusInterfaceInfo*, const gchar*, const gchar*, const gchar*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:41</i>
	 */
	public static void g_dbus_proxy_new_for_bus(IntValuedEnum<GIOLibrary.GBusType > bus_type, IntValuedEnum<GIOLibrary.GDBusProxyFlags > flags, Pointer<GDBusInterfaceInfo > info, Pointer<Byte > name, Pointer<Byte > object_path, Pointer<Byte > interface_name, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_dbus_proxy_new_for_bus((int)bus_type.value(), (int)flags.value(), Pointer.getPeer(info), Pointer.getPeer(name), Pointer.getPeer(object_path), Pointer.getPeer(interface_name), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_dbus_proxy_new_for_bus(int bus_type, int flags, @Ptr long info, @Ptr long name, @Ptr long object_path, @Ptr long interface_name, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GDBusProxy* g_dbus_proxy_new_for_bus_finish(GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:43</i>
	 */
	public static Pointer<GDBusProxy > g_dbus_proxy_new_for_bus_finish(Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_proxy_new_for_bus_finish(Pointer.getPeer(res), Pointer.getPeer(error)), GDBusProxy.class);
	}
	@Ptr 
	protected native static long g_dbus_proxy_new_for_bus_finish(@Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>GDBusProxy* g_dbus_proxy_new_for_bus_sync(GBusType, GDBusProxyFlags, GDBusInterfaceInfo*, const gchar*, const gchar*, const gchar*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:45</i>
	 */
	public static Pointer<GDBusProxy > g_dbus_proxy_new_for_bus_sync(IntValuedEnum<GIOLibrary.GBusType > bus_type, IntValuedEnum<GIOLibrary.GDBusProxyFlags > flags, Pointer<GDBusInterfaceInfo > info, Pointer<Byte > name, Pointer<Byte > object_path, Pointer<Byte > interface_name, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_proxy_new_for_bus_sync((int)bus_type.value(), (int)flags.value(), Pointer.getPeer(info), Pointer.getPeer(name), Pointer.getPeer(object_path), Pointer.getPeer(interface_name), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GDBusProxy.class);
	}
	@Ptr 
	protected native static long g_dbus_proxy_new_for_bus_sync(int bus_type, int flags, @Ptr long info, @Ptr long name, @Ptr long object_path, @Ptr long interface_name, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>GDBusConnection* g_dbus_proxy_get_connection(GDBusProxy*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:47</i>
	 */
	public static Pointer<GIOLibrary.GDBusConnection > g_dbus_proxy_get_connection(Pointer<GDBusProxy > proxy) {
		return Pointer.pointerToAddress(g_dbus_proxy_get_connection(Pointer.getPeer(proxy)), GIOLibrary.GDBusConnection.class);
	}
	@Ptr 
	protected native static long g_dbus_proxy_get_connection(@Ptr long proxy);
	/**
	 * Original signature : <code>GDBusProxyFlags g_dbus_proxy_get_flags(GDBusProxy*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:49</i>
	 */
	public static IntValuedEnum<GIOLibrary.GDBusProxyFlags > g_dbus_proxy_get_flags(Pointer<GDBusProxy > proxy) {
		return FlagSet.fromValue(g_dbus_proxy_get_flags(Pointer.getPeer(proxy)), GIOLibrary.GDBusProxyFlags.class);
	}
	protected native static int g_dbus_proxy_get_flags(@Ptr long proxy);
	/**
	 * Original signature : <code>gchar* g_dbus_proxy_get_name(GDBusProxy*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:51</i>
	 */
	public static Pointer<Byte > g_dbus_proxy_get_name(Pointer<GDBusProxy > proxy) {
		return Pointer.pointerToAddress(g_dbus_proxy_get_name(Pointer.getPeer(proxy)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_proxy_get_name(@Ptr long proxy);
	/**
	 * Original signature : <code>gchar* g_dbus_proxy_get_name_owner(GDBusProxy*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:53</i>
	 */
	public static Pointer<Byte > g_dbus_proxy_get_name_owner(Pointer<GDBusProxy > proxy) {
		return Pointer.pointerToAddress(g_dbus_proxy_get_name_owner(Pointer.getPeer(proxy)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_proxy_get_name_owner(@Ptr long proxy);
	/**
	 * Original signature : <code>gchar* g_dbus_proxy_get_object_path(GDBusProxy*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:55</i>
	 */
	public static Pointer<Byte > g_dbus_proxy_get_object_path(Pointer<GDBusProxy > proxy) {
		return Pointer.pointerToAddress(g_dbus_proxy_get_object_path(Pointer.getPeer(proxy)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_proxy_get_object_path(@Ptr long proxy);
	/**
	 * Original signature : <code>gchar* g_dbus_proxy_get_interface_name(GDBusProxy*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:57</i>
	 */
	public static Pointer<Byte > g_dbus_proxy_get_interface_name(Pointer<GDBusProxy > proxy) {
		return Pointer.pointerToAddress(g_dbus_proxy_get_interface_name(Pointer.getPeer(proxy)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_proxy_get_interface_name(@Ptr long proxy);
	/**
	 * Original signature : <code>gint g_dbus_proxy_get_default_timeout(GDBusProxy*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:59</i>
	 */
	public static int g_dbus_proxy_get_default_timeout(Pointer<GDBusProxy > proxy) {
		return g_dbus_proxy_get_default_timeout(Pointer.getPeer(proxy));
	}
	protected native static int g_dbus_proxy_get_default_timeout(@Ptr long proxy);
	/**
	 * Original signature : <code>void g_dbus_proxy_set_default_timeout(GDBusProxy*, gint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:61</i>
	 */
	public static void g_dbus_proxy_set_default_timeout(Pointer<GDBusProxy > proxy, int timeout_msec) {
		g_dbus_proxy_set_default_timeout(Pointer.getPeer(proxy), timeout_msec);
	}
	protected native static void g_dbus_proxy_set_default_timeout(@Ptr long proxy, int timeout_msec);
	/**
	 * Original signature : <code>GDBusInterfaceInfo* g_dbus_proxy_get_interface_info(GDBusProxy*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:63</i>
	 */
	public static Pointer<GDBusInterfaceInfo > g_dbus_proxy_get_interface_info(Pointer<GDBusProxy > proxy) {
		return Pointer.pointerToAddress(g_dbus_proxy_get_interface_info(Pointer.getPeer(proxy)), GDBusInterfaceInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_proxy_get_interface_info(@Ptr long proxy);
	/**
	 * Original signature : <code>void g_dbus_proxy_set_interface_info(GDBusProxy*, GDBusInterfaceInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:65</i>
	 */
	public static void g_dbus_proxy_set_interface_info(Pointer<GDBusProxy > proxy, Pointer<GDBusInterfaceInfo > info) {
		g_dbus_proxy_set_interface_info(Pointer.getPeer(proxy), Pointer.getPeer(info));
	}
	protected native static void g_dbus_proxy_set_interface_info(@Ptr long proxy, @Ptr long info);
	/**
	 * Original signature : <code>GVariant* g_dbus_proxy_get_cached_property(GDBusProxy*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:67</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_dbus_proxy_get_cached_property(Pointer<GDBusProxy > proxy, Pointer<Byte > property_name) {
		return Pointer.pointerToAddress(g_dbus_proxy_get_cached_property(Pointer.getPeer(proxy), Pointer.getPeer(property_name)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_dbus_proxy_get_cached_property(@Ptr long proxy, @Ptr long property_name);
	/**
	 * Original signature : <code>void g_dbus_proxy_set_cached_property(GDBusProxy*, const gchar*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:69</i>
	 */
	public static void g_dbus_proxy_set_cached_property(Pointer<GDBusProxy > proxy, Pointer<Byte > property_name, Pointer<GIOLibrary.GVariant > value) {
		g_dbus_proxy_set_cached_property(Pointer.getPeer(proxy), Pointer.getPeer(property_name), Pointer.getPeer(value));
	}
	protected native static void g_dbus_proxy_set_cached_property(@Ptr long proxy, @Ptr long property_name, @Ptr long value);
	/**
	 * Original signature : <code>gchar** g_dbus_proxy_get_cached_property_names(GDBusProxy*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:71</i>
	 */
	public static Pointer<Pointer<Byte > > g_dbus_proxy_get_cached_property_names(Pointer<GDBusProxy > proxy) {
		return Pointer.pointerToAddress(g_dbus_proxy_get_cached_property_names(Pointer.getPeer(proxy)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_dbus_proxy_get_cached_property_names(@Ptr long proxy);
	/**
	 * Original signature : <code>void g_dbus_proxy_call(GDBusProxy*, const gchar*, GVariant*, GDBusCallFlags, gint, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:73</i>
	 */
	public static void g_dbus_proxy_call(Pointer<GDBusProxy > proxy, Pointer<Byte > method_name, Pointer<GIOLibrary.GVariant > parameters, IntValuedEnum<GIOLibrary.GDBusCallFlags > flags, int timeout_msec, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_dbus_proxy_call(Pointer.getPeer(proxy), Pointer.getPeer(method_name), Pointer.getPeer(parameters), (int)flags.value(), timeout_msec, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_dbus_proxy_call(@Ptr long proxy, @Ptr long method_name, @Ptr long parameters, int flags, int timeout_msec, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GVariant* g_dbus_proxy_call_finish(GDBusProxy*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:75</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_dbus_proxy_call_finish(Pointer<GDBusProxy > proxy, Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_proxy_call_finish(Pointer.getPeer(proxy), Pointer.getPeer(res), Pointer.getPeer(error)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_dbus_proxy_call_finish(@Ptr long proxy, @Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>GVariant* g_dbus_proxy_call_sync(GDBusProxy*, const gchar*, GVariant*, GDBusCallFlags, gint, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:77</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_dbus_proxy_call_sync(Pointer<GDBusProxy > proxy, Pointer<Byte > method_name, Pointer<GIOLibrary.GVariant > parameters, IntValuedEnum<GIOLibrary.GDBusCallFlags > flags, int timeout_msec, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_proxy_call_sync(Pointer.getPeer(proxy), Pointer.getPeer(method_name), Pointer.getPeer(parameters), (int)flags.value(), timeout_msec, Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_dbus_proxy_call_sync(@Ptr long proxy, @Ptr long method_name, @Ptr long parameters, int flags, int timeout_msec, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_proxy_call_with_unix_fd_list(GDBusProxy*, const gchar*, GVariant*, GDBusCallFlags, gint, GUnixFDList*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:79</i>
	 */
	public static void g_dbus_proxy_call_with_unix_fd_list(Pointer<GDBusProxy > proxy, Pointer<Byte > method_name, Pointer<GIOLibrary.GVariant > parameters, IntValuedEnum<GIOLibrary.GDBusCallFlags > flags, int timeout_msec, Pointer<GIOLibrary.GUnixFDList > fd_list, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_dbus_proxy_call_with_unix_fd_list(Pointer.getPeer(proxy), Pointer.getPeer(method_name), Pointer.getPeer(parameters), (int)flags.value(), timeout_msec, Pointer.getPeer(fd_list), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_dbus_proxy_call_with_unix_fd_list(@Ptr long proxy, @Ptr long method_name, @Ptr long parameters, int flags, int timeout_msec, @Ptr long fd_list, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GVariant* g_dbus_proxy_call_with_unix_fd_list_finish(GDBusProxy*, GUnixFDList**, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:81</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_dbus_proxy_call_with_unix_fd_list_finish(Pointer<GDBusProxy > proxy, Pointer<Pointer<GIOLibrary.GUnixFDList > > out_fd_list, Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_proxy_call_with_unix_fd_list_finish(Pointer.getPeer(proxy), Pointer.getPeer(out_fd_list), Pointer.getPeer(res), Pointer.getPeer(error)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_dbus_proxy_call_with_unix_fd_list_finish(@Ptr long proxy, @Ptr long out_fd_list, @Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>GVariant* g_dbus_proxy_call_with_unix_fd_list_sync(GDBusProxy*, const gchar*, GVariant*, GDBusCallFlags, gint, GUnixFDList*, GUnixFDList**, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusproxy.h:83</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_dbus_proxy_call_with_unix_fd_list_sync(Pointer<GDBusProxy > proxy, Pointer<Byte > method_name, Pointer<GIOLibrary.GVariant > parameters, IntValuedEnum<GIOLibrary.GDBusCallFlags > flags, int timeout_msec, Pointer<GIOLibrary.GUnixFDList > fd_list, Pointer<Pointer<GIOLibrary.GUnixFDList > > out_fd_list, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_proxy_call_with_unix_fd_list_sync(Pointer.getPeer(proxy), Pointer.getPeer(method_name), Pointer.getPeer(parameters), (int)flags.value(), timeout_msec, Pointer.getPeer(fd_list), Pointer.getPeer(out_fd_list), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_dbus_proxy_call_with_unix_fd_list_sync(@Ptr long proxy, @Ptr long method_name, @Ptr long parameters, int flags, int timeout_msec, @Ptr long fd_list, @Ptr long out_fd_list, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>GType g_dbus_server_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusserver.h:2</i>
	 */
	public static native GIOLibrary.GType g_dbus_server_get_type();
	/**
	 * Original signature : <code>GDBusServer* g_dbus_server_new_sync(const gchar*, GDBusServerFlags, const gchar*, GDBusAuthObserver*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusserver.h:4</i>
	 */
	public static Pointer<GIOLibrary.GDBusServer > g_dbus_server_new_sync(Pointer<Byte > address, IntValuedEnum<GIOLibrary.GDBusServerFlags > flags, Pointer<Byte > guid, Pointer<GIOLibrary.GDBusAuthObserver > observer, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_server_new_sync(Pointer.getPeer(address), (int)flags.value(), Pointer.getPeer(guid), Pointer.getPeer(observer), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GDBusServer.class);
	}
	@Ptr 
	protected native static long g_dbus_server_new_sync(@Ptr long address, int flags, @Ptr long guid, @Ptr long observer, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_dbus_server_get_client_address(GDBusServer*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusserver.h:6</i>
	 */
	public static Pointer<Byte > g_dbus_server_get_client_address(Pointer<GIOLibrary.GDBusServer > server) {
		return Pointer.pointerToAddress(g_dbus_server_get_client_address(Pointer.getPeer(server)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_server_get_client_address(@Ptr long server);
	/**
	 * Original signature : <code>gchar* g_dbus_server_get_guid(GDBusServer*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusserver.h:8</i>
	 */
	public static Pointer<Byte > g_dbus_server_get_guid(Pointer<GIOLibrary.GDBusServer > server) {
		return Pointer.pointerToAddress(g_dbus_server_get_guid(Pointer.getPeer(server)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_server_get_guid(@Ptr long server);
	/**
	 * Original signature : <code>GDBusServerFlags g_dbus_server_get_flags(GDBusServer*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusserver.h:10</i>
	 */
	public static IntValuedEnum<GIOLibrary.GDBusServerFlags > g_dbus_server_get_flags(Pointer<GIOLibrary.GDBusServer > server) {
		return FlagSet.fromValue(g_dbus_server_get_flags(Pointer.getPeer(server)), GIOLibrary.GDBusServerFlags.class);
	}
	protected native static int g_dbus_server_get_flags(@Ptr long server);
	/**
	 * Original signature : <code>void g_dbus_server_start(GDBusServer*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusserver.h:12</i>
	 */
	public static void g_dbus_server_start(Pointer<GIOLibrary.GDBusServer > server) {
		g_dbus_server_start(Pointer.getPeer(server));
	}
	protected native static void g_dbus_server_start(@Ptr long server);
	/**
	 * Original signature : <code>void g_dbus_server_stop(GDBusServer*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusserver.h:14</i>
	 */
	public static void g_dbus_server_stop(Pointer<GIOLibrary.GDBusServer > server) {
		g_dbus_server_stop(Pointer.getPeer(server));
	}
	protected native static void g_dbus_server_stop(@Ptr long server);
	/**
	 * Original signature : <code>gboolean g_dbus_server_is_active(GDBusServer*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusserver.h:16</i>
	 */
	public static GIOLibrary.gboolean g_dbus_server_is_active(Pointer<GIOLibrary.GDBusServer > server) {
		return g_dbus_server_is_active(Pointer.getPeer(server));
	}
	protected native static GIOLibrary.gboolean g_dbus_server_is_active(@Ptr long server);
	/**
	 * Original signature : <code>gboolean g_dbus_is_guid(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusutils.h:2</i>
	 */
	public static GIOLibrary.gboolean g_dbus_is_guid(Pointer<Byte > string) {
		return g_dbus_is_guid(Pointer.getPeer(string));
	}
	protected native static GIOLibrary.gboolean g_dbus_is_guid(@Ptr long string);
	/**
	 * Original signature : <code>gchar* g_dbus_generate_guid()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusutils.h:4</i>
	 */
	public static Pointer<Byte > g_dbus_generate_guid() {
		return Pointer.pointerToAddress(g_dbus_generate_guid$2(), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_generate_guid$2();
	/**
	 * Original signature : <code>gboolean g_dbus_is_name(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusutils.h:6</i>
	 */
	public static GIOLibrary.gboolean g_dbus_is_name(Pointer<Byte > string) {
		return g_dbus_is_name(Pointer.getPeer(string));
	}
	protected native static GIOLibrary.gboolean g_dbus_is_name(@Ptr long string);
	/**
	 * Original signature : <code>gboolean g_dbus_is_unique_name(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusutils.h:8</i>
	 */
	public static GIOLibrary.gboolean g_dbus_is_unique_name(Pointer<Byte > string) {
		return g_dbus_is_unique_name(Pointer.getPeer(string));
	}
	protected native static GIOLibrary.gboolean g_dbus_is_unique_name(@Ptr long string);
	/**
	 * Original signature : <code>gboolean g_dbus_is_member_name(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusutils.h:10</i>
	 */
	public static GIOLibrary.gboolean g_dbus_is_member_name(Pointer<Byte > string) {
		return g_dbus_is_member_name(Pointer.getPeer(string));
	}
	protected native static GIOLibrary.gboolean g_dbus_is_member_name(@Ptr long string);
	/**
	 * Original signature : <code>gboolean g_dbus_is_interface_name(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusutils.h:12</i>
	 */
	public static GIOLibrary.gboolean g_dbus_is_interface_name(Pointer<Byte > string) {
		return g_dbus_is_interface_name(Pointer.getPeer(string));
	}
	protected native static GIOLibrary.gboolean g_dbus_is_interface_name(@Ptr long string);
	/**
	 * Original signature : <code>void g_dbus_gvariant_to_gvalue(GVariant*, GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusutils.h:14</i>
	 */
	public static void g_dbus_gvariant_to_gvalue(Pointer<GIOLibrary.GVariant > value, Pointer out_gvalue) {
		g_dbus_gvariant_to_gvalue(Pointer.getPeer(value), Pointer.getPeer(out_gvalue));
	}
	protected native static void g_dbus_gvariant_to_gvalue(@Ptr long value, @Ptr long out_gvalue);
	/**
	 * Original signature : <code>GVariant* g_dbus_gvalue_to_gvariant(const GValue*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusutils.h:16</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_dbus_gvalue_to_gvariant(Pointer gvalue, Pointer<GIOLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_dbus_gvalue_to_gvariant(Pointer.getPeer(gvalue), Pointer.getPeer(type)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_dbus_gvalue_to_gvariant(@Ptr long gvalue, @Ptr long type);
	/**
	 * Original signature : <code>GType g_drive_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:124</i>
	 */
	public static native GIOLibrary.GType g_drive_get_type();
	/**
	 * Original signature : <code>char* g_drive_get_name(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:126</i>
	 */
	public static Pointer<Byte > g_drive_get_name(Pointer<GIOLibrary.GDrive > drive) {
		return Pointer.pointerToAddress(g_drive_get_name(Pointer.getPeer(drive)), Byte.class);
	}
	@Ptr 
	protected native static long g_drive_get_name(@Ptr long drive);
	/**
	 * Original signature : <code>GIcon* g_drive_get_icon(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:128</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_drive_get_icon(Pointer<GIOLibrary.GDrive > drive) {
		return Pointer.pointerToAddress(g_drive_get_icon(Pointer.getPeer(drive)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_drive_get_icon(@Ptr long drive);
	/**
	 * Original signature : <code>GIcon* g_drive_get_symbolic_icon(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:130</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_drive_get_symbolic_icon(Pointer<GIOLibrary.GDrive > drive) {
		return Pointer.pointerToAddress(g_drive_get_symbolic_icon(Pointer.getPeer(drive)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_drive_get_symbolic_icon(@Ptr long drive);
	/**
	 * Original signature : <code>gboolean g_drive_has_volumes(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:132</i>
	 */
	public static GIOLibrary.gboolean g_drive_has_volumes(Pointer<GIOLibrary.GDrive > drive) {
		return g_drive_has_volumes(Pointer.getPeer(drive));
	}
	protected native static GIOLibrary.gboolean g_drive_has_volumes(@Ptr long drive);
	/**
	 * Original signature : <code>GList* g_drive_get_volumes(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:134</i>
	 */
	public static Pointer g_drive_get_volumes(Pointer<GIOLibrary.GDrive > drive) {
		return Pointer.pointerToAddress(g_drive_get_volumes(Pointer.getPeer(drive)));
	}
	@Ptr 
	protected native static long g_drive_get_volumes(@Ptr long drive);
	/**
	 * Original signature : <code>gboolean g_drive_is_media_removable(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:136</i>
	 */
	public static GIOLibrary.gboolean g_drive_is_media_removable(Pointer<GIOLibrary.GDrive > drive) {
		return g_drive_is_media_removable(Pointer.getPeer(drive));
	}
	protected native static GIOLibrary.gboolean g_drive_is_media_removable(@Ptr long drive);
	/**
	 * Original signature : <code>gboolean g_drive_has_media(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:138</i>
	 */
	public static GIOLibrary.gboolean g_drive_has_media(Pointer<GIOLibrary.GDrive > drive) {
		return g_drive_has_media(Pointer.getPeer(drive));
	}
	protected native static GIOLibrary.gboolean g_drive_has_media(@Ptr long drive);
	/**
	 * Original signature : <code>gboolean g_drive_is_media_check_automatic(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:140</i>
	 */
	public static GIOLibrary.gboolean g_drive_is_media_check_automatic(Pointer<GIOLibrary.GDrive > drive) {
		return g_drive_is_media_check_automatic(Pointer.getPeer(drive));
	}
	protected native static GIOLibrary.gboolean g_drive_is_media_check_automatic(@Ptr long drive);
	/**
	 * Original signature : <code>gboolean g_drive_can_poll_for_media(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:142</i>
	 */
	public static GIOLibrary.gboolean g_drive_can_poll_for_media(Pointer<GIOLibrary.GDrive > drive) {
		return g_drive_can_poll_for_media(Pointer.getPeer(drive));
	}
	protected native static GIOLibrary.gboolean g_drive_can_poll_for_media(@Ptr long drive);
	/**
	 * Original signature : <code>gboolean g_drive_can_eject(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:144</i>
	 */
	public static GIOLibrary.gboolean g_drive_can_eject(Pointer<GIOLibrary.GDrive > drive) {
		return g_drive_can_eject(Pointer.getPeer(drive));
	}
	protected native static GIOLibrary.gboolean g_drive_can_eject(@Ptr long drive);
	/**
	 * Original signature : <code>void g_drive_eject(GDrive*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:146</i>
	 */
	public static void g_drive_eject(Pointer<GIOLibrary.GDrive > drive, IntValuedEnum<GIOLibrary.GMountUnmountFlags > flags, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_drive_eject(Pointer.getPeer(drive), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_drive_eject(@Ptr long drive, int flags, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_drive_eject_finish(GDrive*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:148</i>
	 */
	public static GIOLibrary.gboolean g_drive_eject_finish(Pointer<GIOLibrary.GDrive > drive, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_drive_eject_finish(Pointer.getPeer(drive), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_drive_eject_finish(@Ptr long drive, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_drive_poll_for_media(GDrive*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:150</i>
	 */
	public static void g_drive_poll_for_media(Pointer<GIOLibrary.GDrive > drive, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_drive_poll_for_media(Pointer.getPeer(drive), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_drive_poll_for_media(@Ptr long drive, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_drive_poll_for_media_finish(GDrive*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:152</i>
	 */
	public static GIOLibrary.gboolean g_drive_poll_for_media_finish(Pointer<GIOLibrary.GDrive > drive, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_drive_poll_for_media_finish(Pointer.getPeer(drive), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_drive_poll_for_media_finish(@Ptr long drive, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>char* g_drive_get_identifier(GDrive*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:154</i>
	 */
	public static Pointer<Byte > g_drive_get_identifier(Pointer<GIOLibrary.GDrive > drive, Pointer<Byte > kind) {
		return Pointer.pointerToAddress(g_drive_get_identifier(Pointer.getPeer(drive), Pointer.getPeer(kind)), Byte.class);
	}
	@Ptr 
	protected native static long g_drive_get_identifier(@Ptr long drive, @Ptr long kind);
	/**
	 * Original signature : <code>char** g_drive_enumerate_identifiers(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:156</i>
	 */
	public static Pointer<Pointer<Byte > > g_drive_enumerate_identifiers(Pointer<GIOLibrary.GDrive > drive) {
		return Pointer.pointerToAddress(g_drive_enumerate_identifiers(Pointer.getPeer(drive)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_drive_enumerate_identifiers(@Ptr long drive);
	/**
	 * Original signature : <code>GDriveStartStopType g_drive_get_start_stop_type(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:158</i>
	 */
	public static IntValuedEnum<GIOLibrary.GDriveStartStopType > g_drive_get_start_stop_type(Pointer<GIOLibrary.GDrive > drive) {
		return FlagSet.fromValue(g_drive_get_start_stop_type(Pointer.getPeer(drive)), GIOLibrary.GDriveStartStopType.class);
	}
	protected native static int g_drive_get_start_stop_type(@Ptr long drive);
	/**
	 * Original signature : <code>gboolean g_drive_can_start(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:160</i>
	 */
	public static GIOLibrary.gboolean g_drive_can_start(Pointer<GIOLibrary.GDrive > drive) {
		return g_drive_can_start(Pointer.getPeer(drive));
	}
	protected native static GIOLibrary.gboolean g_drive_can_start(@Ptr long drive);
	/**
	 * Original signature : <code>gboolean g_drive_can_start_degraded(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:162</i>
	 */
	public static GIOLibrary.gboolean g_drive_can_start_degraded(Pointer<GIOLibrary.GDrive > drive) {
		return g_drive_can_start_degraded(Pointer.getPeer(drive));
	}
	protected native static GIOLibrary.gboolean g_drive_can_start_degraded(@Ptr long drive);
	/**
	 * Original signature : <code>void g_drive_start(GDrive*, GDriveStartFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:164</i>
	 */
	public static void g_drive_start(Pointer<GIOLibrary.GDrive > drive, IntValuedEnum<GIOLibrary.GDriveStartFlags > flags, Pointer<GMountOperation > mount_operation, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_drive_start(Pointer.getPeer(drive), (int)flags.value(), Pointer.getPeer(mount_operation), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_drive_start(@Ptr long drive, int flags, @Ptr long mount_operation, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_drive_start_finish(GDrive*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:166</i>
	 */
	public static GIOLibrary.gboolean g_drive_start_finish(Pointer<GIOLibrary.GDrive > drive, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_drive_start_finish(Pointer.getPeer(drive), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_drive_start_finish(@Ptr long drive, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_drive_can_stop(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:168</i>
	 */
	public static GIOLibrary.gboolean g_drive_can_stop(Pointer<GIOLibrary.GDrive > drive) {
		return g_drive_can_stop(Pointer.getPeer(drive));
	}
	protected native static GIOLibrary.gboolean g_drive_can_stop(@Ptr long drive);
	/**
	 * Original signature : <code>void g_drive_stop(GDrive*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:170</i>
	 */
	public static void g_drive_stop(Pointer<GIOLibrary.GDrive > drive, IntValuedEnum<GIOLibrary.GMountUnmountFlags > flags, Pointer<GMountOperation > mount_operation, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_drive_stop(Pointer.getPeer(drive), (int)flags.value(), Pointer.getPeer(mount_operation), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_drive_stop(@Ptr long drive, int flags, @Ptr long mount_operation, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_drive_stop_finish(GDrive*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:172</i>
	 */
	public static GIOLibrary.gboolean g_drive_stop_finish(Pointer<GIOLibrary.GDrive > drive, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_drive_stop_finish(Pointer.getPeer(drive), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_drive_stop_finish(@Ptr long drive, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_drive_eject_with_operation(GDrive*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:174</i>
	 */
	public static void g_drive_eject_with_operation(Pointer<GIOLibrary.GDrive > drive, IntValuedEnum<GIOLibrary.GMountUnmountFlags > flags, Pointer<GMountOperation > mount_operation, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_drive_eject_with_operation(Pointer.getPeer(drive), (int)flags.value(), Pointer.getPeer(mount_operation), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_drive_eject_with_operation(@Ptr long drive, int flags, @Ptr long mount_operation, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_drive_eject_with_operation_finish(GDrive*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:176</i>
	 */
	public static GIOLibrary.gboolean g_drive_eject_with_operation_finish(Pointer<GIOLibrary.GDrive > drive, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_drive_eject_with_operation_finish(Pointer.getPeer(drive), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_drive_eject_with_operation_finish(@Ptr long drive, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_drive_get_sort_key(GDrive*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdrive.h:178</i>
	 */
	public static Pointer<Byte > g_drive_get_sort_key(Pointer<GIOLibrary.GDrive > drive) {
		return Pointer.pointerToAddress(g_drive_get_sort_key(Pointer.getPeer(drive)), Byte.class);
	}
	@Ptr 
	protected native static long g_drive_get_sort_key(@Ptr long drive);
	/**
	 * Original signature : <code>GType g_icon_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gicon.h:38</i>
	 */
	public static native GIOLibrary.GType g_icon_get_type();
	/**
	 * Original signature : <code>guint g_icon_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gicon.h:40</i>
	 */
	public static int g_icon_hash(Pointer<? > icon) {
		return g_icon_hash(Pointer.getPeer(icon));
	}
	protected native static int g_icon_hash(@Ptr long icon);
	/**
	 * Original signature : <code>gboolean g_icon_equal(GIcon*, GIcon*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gicon.h:42</i>
	 */
	public static GIOLibrary.gboolean g_icon_equal(Pointer<GIOLibrary.GIcon > icon1, Pointer<GIOLibrary.GIcon > icon2) {
		return g_icon_equal(Pointer.getPeer(icon1), Pointer.getPeer(icon2));
	}
	protected native static GIOLibrary.gboolean g_icon_equal(@Ptr long icon1, @Ptr long icon2);
	/**
	 * Original signature : <code>gchar* g_icon_to_string(GIcon*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gicon.h:44</i>
	 */
	public static Pointer<Byte > g_icon_to_string(Pointer<GIOLibrary.GIcon > icon) {
		return Pointer.pointerToAddress(g_icon_to_string(Pointer.getPeer(icon)), Byte.class);
	}
	@Ptr 
	protected native static long g_icon_to_string(@Ptr long icon);
	/**
	 * Original signature : <code>GIcon* g_icon_new_for_string(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gicon.h:46</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_icon_new_for_string(Pointer<Byte > str, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_icon_new_for_string(Pointer.getPeer(str), Pointer.getPeer(error)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_icon_new_for_string(@Ptr long str, @Ptr long error);
	/**
	 * Original signature : <code>GVariant* g_icon_serialize(GIcon*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gicon.h:48</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_icon_serialize(Pointer<GIOLibrary.GIcon > icon) {
		return Pointer.pointerToAddress(g_icon_serialize(Pointer.getPeer(icon)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_icon_serialize(@Ptr long icon);
	/**
	 * Original signature : <code>GIcon* g_icon_deserialize(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gicon.h:50</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_icon_deserialize(Pointer<GIOLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_icon_deserialize(Pointer.getPeer(value)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_icon_deserialize(@Ptr long value);
	/**
	 * Original signature : <code>GType g_emblem_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gemblem.h:8</i>
	 */
	public static native GIOLibrary.GType g_emblem_get_type();
	/**
	 * Original signature : <code>GEmblem* g_emblem_new(GIcon*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gemblem.h:10</i>
	 */
	public static Pointer<GIOLibrary.GEmblem > g_emblem_new(Pointer<GIOLibrary.GIcon > icon) {
		return Pointer.pointerToAddress(g_emblem_new(Pointer.getPeer(icon)), GIOLibrary.GEmblem.class);
	}
	@Ptr 
	protected native static long g_emblem_new(@Ptr long icon);
	/**
	 * Original signature : <code>GEmblem* g_emblem_new_with_origin(GIcon*, GEmblemOrigin)</code><br>
	 * <i>native declaration : glib-2.0/gio/gemblem.h:12</i>
	 */
	public static Pointer<GIOLibrary.GEmblem > g_emblem_new_with_origin(Pointer<GIOLibrary.GIcon > icon, IntValuedEnum<GIOLibrary.GEmblemOrigin > origin) {
		return Pointer.pointerToAddress(g_emblem_new_with_origin(Pointer.getPeer(icon), (int)origin.value()), GIOLibrary.GEmblem.class);
	}
	@Ptr 
	protected native static long g_emblem_new_with_origin(@Ptr long icon, int origin);
	/**
	 * Original signature : <code>GIcon* g_emblem_get_icon(GEmblem*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gemblem.h:14</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_emblem_get_icon(Pointer<GIOLibrary.GEmblem > emblem) {
		return Pointer.pointerToAddress(g_emblem_get_icon(Pointer.getPeer(emblem)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_emblem_get_icon(@Ptr long emblem);
	/**
	 * Original signature : <code>GEmblemOrigin g_emblem_get_origin(GEmblem*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gemblem.h:16</i>
	 */
	public static IntValuedEnum<GIOLibrary.GEmblemOrigin > g_emblem_get_origin(Pointer<GIOLibrary.GEmblem > emblem) {
		return FlagSet.fromValue(g_emblem_get_origin(Pointer.getPeer(emblem)), GIOLibrary.GEmblemOrigin.class);
	}
	protected native static int g_emblem_get_origin(@Ptr long emblem);
	/**
	 * Original signature : <code>GType g_emblemed_icon_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gemblemedicon.h:17</i>
	 */
	public static native GIOLibrary.GType g_emblemed_icon_get_type();
	/**
	 * Original signature : <code>GIcon* g_emblemed_icon_new(GIcon*, GEmblem*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gemblemedicon.h:19</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_emblemed_icon_new(Pointer<GIOLibrary.GIcon > icon, Pointer<GIOLibrary.GEmblem > emblem) {
		return Pointer.pointerToAddress(g_emblemed_icon_new(Pointer.getPeer(icon), Pointer.getPeer(emblem)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_emblemed_icon_new(@Ptr long icon, @Ptr long emblem);
	/**
	 * Original signature : <code>GIcon* g_emblemed_icon_get_icon(GEmblemedIcon*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gemblemedicon.h:21</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_emblemed_icon_get_icon(Pointer<GEmblemedIcon > emblemed) {
		return Pointer.pointerToAddress(g_emblemed_icon_get_icon(Pointer.getPeer(emblemed)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_emblemed_icon_get_icon(@Ptr long emblemed);
	/**
	 * Original signature : <code>GList* g_emblemed_icon_get_emblems(GEmblemedIcon*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gemblemedicon.h:23</i>
	 */
	public static Pointer g_emblemed_icon_get_emblems(Pointer<GEmblemedIcon > emblemed) {
		return Pointer.pointerToAddress(g_emblemed_icon_get_emblems(Pointer.getPeer(emblemed)));
	}
	@Ptr 
	protected native static long g_emblemed_icon_get_emblems(@Ptr long emblemed);
	/**
	 * Original signature : <code>void g_emblemed_icon_add_emblem(GEmblemedIcon*, GEmblem*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gemblemedicon.h:25</i>
	 */
	public static void g_emblemed_icon_add_emblem(Pointer<GEmblemedIcon > emblemed, Pointer<GIOLibrary.GEmblem > emblem) {
		g_emblemed_icon_add_emblem(Pointer.getPeer(emblemed), Pointer.getPeer(emblem));
	}
	protected native static void g_emblemed_icon_add_emblem(@Ptr long emblemed, @Ptr long emblem);
	/**
	 * Original signature : <code>void g_emblemed_icon_clear_emblems(GEmblemedIcon*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gemblemedicon.h:27</i>
	 */
	public static void g_emblemed_icon_clear_emblems(Pointer<GEmblemedIcon > emblemed) {
		g_emblemed_icon_clear_emblems(Pointer.getPeer(emblemed));
	}
	protected native static void g_emblemed_icon_clear_emblems(@Ptr long emblemed);
	/**
	 * Original signature : <code>GType g_file_attribute_info_list_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileattribute.h:25</i>
	 */
	public static native GIOLibrary.GType g_file_attribute_info_list_get_type();
	/**
	 * Original signature : <code>GFileAttributeInfoList* g_file_attribute_info_list_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileattribute.h:27</i>
	 */
	public static Pointer<GFileAttributeInfoList > g_file_attribute_info_list_new() {
		return Pointer.pointerToAddress(g_file_attribute_info_list_new$2(), GFileAttributeInfoList.class);
	}
	@Ptr 
	protected native static long g_file_attribute_info_list_new$2();
	/**
	 * Original signature : <code>GFileAttributeInfoList* g_file_attribute_info_list_ref(GFileAttributeInfoList*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileattribute.h:29</i>
	 */
	public static Pointer<GFileAttributeInfoList > g_file_attribute_info_list_ref(Pointer<GFileAttributeInfoList > list) {
		return Pointer.pointerToAddress(g_file_attribute_info_list_ref(Pointer.getPeer(list)), GFileAttributeInfoList.class);
	}
	@Ptr 
	protected native static long g_file_attribute_info_list_ref(@Ptr long list);
	/**
	 * Original signature : <code>void g_file_attribute_info_list_unref(GFileAttributeInfoList*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileattribute.h:31</i>
	 */
	public static void g_file_attribute_info_list_unref(Pointer<GFileAttributeInfoList > list) {
		g_file_attribute_info_list_unref(Pointer.getPeer(list));
	}
	protected native static void g_file_attribute_info_list_unref(@Ptr long list);
	/**
	 * Original signature : <code>GFileAttributeInfoList* g_file_attribute_info_list_dup(GFileAttributeInfoList*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileattribute.h:33</i>
	 */
	public static Pointer<GFileAttributeInfoList > g_file_attribute_info_list_dup(Pointer<GFileAttributeInfoList > list) {
		return Pointer.pointerToAddress(g_file_attribute_info_list_dup(Pointer.getPeer(list)), GFileAttributeInfoList.class);
	}
	@Ptr 
	protected native static long g_file_attribute_info_list_dup(@Ptr long list);
	/**
	 * Original signature : <code>GFileAttributeInfo* g_file_attribute_info_list_lookup(GFileAttributeInfoList*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileattribute.h:35</i>
	 */
	public static Pointer<GFileAttributeInfo > g_file_attribute_info_list_lookup(Pointer<GFileAttributeInfoList > list, Pointer<Byte > name) {
		return Pointer.pointerToAddress(g_file_attribute_info_list_lookup(Pointer.getPeer(list), Pointer.getPeer(name)), GFileAttributeInfo.class);
	}
	@Ptr 
	protected native static long g_file_attribute_info_list_lookup(@Ptr long list, @Ptr long name);
	/**
	 * Original signature : <code>void g_file_attribute_info_list_add(GFileAttributeInfoList*, const char*, GFileAttributeType, GFileAttributeInfoFlags)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileattribute.h:37</i>
	 */
	public static void g_file_attribute_info_list_add(Pointer<GFileAttributeInfoList > list, Pointer<Byte > name, IntValuedEnum<GIOLibrary.GFileAttributeType > type, IntValuedEnum<GIOLibrary.GFileAttributeInfoFlags > flags) {
		g_file_attribute_info_list_add(Pointer.getPeer(list), Pointer.getPeer(name), (int)type.value(), (int)flags.value());
	}
	protected native static void g_file_attribute_info_list_add(@Ptr long list, @Ptr long name, int type, int flags);
	/**
	 * Original signature : <code>GType g_file_enumerator_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileenumerator.h:45</i>
	 */
	public static native GIOLibrary.GType g_file_enumerator_get_type();
	/**
	 * Original signature : <code>GFileInfo* g_file_enumerator_next_file(GFileEnumerator*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileenumerator.h:47</i>
	 */
	public static Pointer<GIOLibrary.GFileInfo > g_file_enumerator_next_file(Pointer<GFileEnumerator > enumerator, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_file_enumerator_next_file(Pointer.getPeer(enumerator), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GFileInfo.class);
	}
	@Ptr 
	protected native static long g_file_enumerator_next_file(@Ptr long enumerator, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_file_enumerator_close(GFileEnumerator*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileenumerator.h:49</i>
	 */
	public static GIOLibrary.gboolean g_file_enumerator_close(Pointer<GFileEnumerator > enumerator, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_file_enumerator_close(Pointer.getPeer(enumerator), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_file_enumerator_close(@Ptr long enumerator, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_file_enumerator_next_files_async(GFileEnumerator*, int, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileenumerator.h:51</i>
	 */
	public static void g_file_enumerator_next_files_async(Pointer<GFileEnumerator > enumerator, int num_files, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_file_enumerator_next_files_async(Pointer.getPeer(enumerator), num_files, io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_file_enumerator_next_files_async(@Ptr long enumerator, int num_files, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GList* g_file_enumerator_next_files_finish(GFileEnumerator*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileenumerator.h:53</i>
	 */
	public static Pointer g_file_enumerator_next_files_finish(Pointer<GFileEnumerator > enumerator, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_file_enumerator_next_files_finish(Pointer.getPeer(enumerator), Pointer.getPeer(result), Pointer.getPeer(error)));
	}
	@Ptr 
	protected native static long g_file_enumerator_next_files_finish(@Ptr long enumerator, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_file_enumerator_close_async(GFileEnumerator*, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileenumerator.h:55</i>
	 */
	public static void g_file_enumerator_close_async(Pointer<GFileEnumerator > enumerator, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_file_enumerator_close_async(Pointer.getPeer(enumerator), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_file_enumerator_close_async(@Ptr long enumerator, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_file_enumerator_close_finish(GFileEnumerator*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileenumerator.h:57</i>
	 */
	public static GIOLibrary.gboolean g_file_enumerator_close_finish(Pointer<GFileEnumerator > enumerator, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_file_enumerator_close_finish(Pointer.getPeer(enumerator), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_file_enumerator_close_finish(@Ptr long enumerator, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_file_enumerator_is_closed(GFileEnumerator*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileenumerator.h:59</i>
	 */
	public static GIOLibrary.gboolean g_file_enumerator_is_closed(Pointer<GFileEnumerator > enumerator) {
		return g_file_enumerator_is_closed(Pointer.getPeer(enumerator));
	}
	protected native static GIOLibrary.gboolean g_file_enumerator_is_closed(@Ptr long enumerator);
	/**
	 * Original signature : <code>gboolean g_file_enumerator_has_pending(GFileEnumerator*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileenumerator.h:61</i>
	 */
	public static GIOLibrary.gboolean g_file_enumerator_has_pending(Pointer<GFileEnumerator > enumerator) {
		return g_file_enumerator_has_pending(Pointer.getPeer(enumerator));
	}
	protected native static GIOLibrary.gboolean g_file_enumerator_has_pending(@Ptr long enumerator);
	/**
	 * Original signature : <code>void g_file_enumerator_set_pending(GFileEnumerator*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileenumerator.h:63</i>
	 */
	public static void g_file_enumerator_set_pending(Pointer<GFileEnumerator > enumerator, GIOLibrary.gboolean pending) {
		g_file_enumerator_set_pending(Pointer.getPeer(enumerator), pending);
	}
	protected native static void g_file_enumerator_set_pending(@Ptr long enumerator, GIOLibrary.gboolean pending);
	/**
	 * Original signature : <code>GFile* g_file_enumerator_get_container(GFileEnumerator*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileenumerator.h:65</i>
	 */
	public static Pointer<GIOLibrary.GFile > g_file_enumerator_get_container(Pointer<GFileEnumerator > enumerator) {
		return Pointer.pointerToAddress(g_file_enumerator_get_container(Pointer.getPeer(enumerator)), GIOLibrary.GFile.class);
	}
	@Ptr 
	protected native static long g_file_enumerator_get_container(@Ptr long enumerator);
	/**
	 * Original signature : <code>GFile* g_file_enumerator_get_child(GFileEnumerator*, GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileenumerator.h:67</i>
	 */
	public static Pointer<GIOLibrary.GFile > g_file_enumerator_get_child(Pointer<GFileEnumerator > enumerator, Pointer<GIOLibrary.GFileInfo > info) {
		return Pointer.pointerToAddress(g_file_enumerator_get_child(Pointer.getPeer(enumerator), Pointer.getPeer(info)), GIOLibrary.GFile.class);
	}
	@Ptr 
	protected native static long g_file_enumerator_get_child(@Ptr long enumerator, @Ptr long info);
	/**
	 * Original signature : <code>GType g_file_icon_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileicon.h:7</i>
	 */
	public static native GIOLibrary.GType g_file_icon_get_type();
	/**
	 * Original signature : <code>GIcon* g_file_icon_new(GFile*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileicon.h:9</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_file_icon_new(Pointer<GIOLibrary.GFile > file) {
		return Pointer.pointerToAddress(g_file_icon_new(Pointer.getPeer(file)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_file_icon_new(@Ptr long file);
	/**
	 * Original signature : <code>GFile* g_file_icon_get_file(GFileIcon*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileicon.h:11</i>
	 */
	public static Pointer<GIOLibrary.GFile > g_file_icon_get_file(Pointer<GIOLibrary.GFileIcon > icon) {
		return Pointer.pointerToAddress(g_file_icon_get_file(Pointer.getPeer(icon)), GIOLibrary.GFile.class);
	}
	@Ptr 
	protected native static long g_file_icon_get_file(@Ptr long icon);
	/**
	 * Original signature : <code>GType g_file_info_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:7</i>
	 */
	public static native GIOLibrary.GType g_file_info_get_type();
	/**
	 * Original signature : <code>GFileInfo* g_file_info_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:9</i>
	 */
	public static Pointer<GIOLibrary.GFileInfo > g_file_info_new() {
		return Pointer.pointerToAddress(g_file_info_new$2(), GIOLibrary.GFileInfo.class);
	}
	@Ptr 
	protected native static long g_file_info_new$2();
	/**
	 * Original signature : <code>GFileInfo* g_file_info_dup(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:11</i>
	 */
	public static Pointer<GIOLibrary.GFileInfo > g_file_info_dup(Pointer<GIOLibrary.GFileInfo > other) {
		return Pointer.pointerToAddress(g_file_info_dup(Pointer.getPeer(other)), GIOLibrary.GFileInfo.class);
	}
	@Ptr 
	protected native static long g_file_info_dup(@Ptr long other);
	/**
	 * Original signature : <code>void g_file_info_copy_into(GFileInfo*, GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:13</i>
	 */
	public static void g_file_info_copy_into(Pointer<GIOLibrary.GFileInfo > src_info, Pointer<GIOLibrary.GFileInfo > dest_info) {
		g_file_info_copy_into(Pointer.getPeer(src_info), Pointer.getPeer(dest_info));
	}
	protected native static void g_file_info_copy_into(@Ptr long src_info, @Ptr long dest_info);
	/**
	 * Original signature : <code>gboolean g_file_info_has_attribute(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:15</i>
	 */
	public static GIOLibrary.gboolean g_file_info_has_attribute(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute) {
		return g_file_info_has_attribute(Pointer.getPeer(info), Pointer.getPeer(attribute));
	}
	protected native static GIOLibrary.gboolean g_file_info_has_attribute(@Ptr long info, @Ptr long attribute);
	/**
	 * Original signature : <code>gboolean g_file_info_has_namespace(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:17</i>
	 */
	public static GIOLibrary.gboolean g_file_info_has_namespace(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > name_space) {
		return g_file_info_has_namespace(Pointer.getPeer(info), Pointer.getPeer(name_space));
	}
	protected native static GIOLibrary.gboolean g_file_info_has_namespace(@Ptr long info, @Ptr long name_space);
	/**
	 * Original signature : <code>char** g_file_info_list_attributes(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:19</i>
	 */
	public static Pointer<Pointer<Byte > > g_file_info_list_attributes(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > name_space) {
		return Pointer.pointerToAddress(g_file_info_list_attributes(Pointer.getPeer(info), Pointer.getPeer(name_space)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_file_info_list_attributes(@Ptr long info, @Ptr long name_space);
	/**
	 * Original signature : <code>gboolean g_file_info_get_attribute_data(GFileInfo*, const char*, GFileAttributeType*, gpointer*, GFileAttributeStatus*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:21</i>
	 */
	public static GIOLibrary.gboolean g_file_info_get_attribute_data(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute, Pointer<IntValuedEnum<GIOLibrary.GFileAttributeType > > type, Pointer<GIOLibrary.gpointer > value_pp, Pointer<IntValuedEnum<GIOLibrary.GFileAttributeStatus > > status) {
		return g_file_info_get_attribute_data(Pointer.getPeer(info), Pointer.getPeer(attribute), Pointer.getPeer(type), Pointer.getPeer(value_pp), Pointer.getPeer(status));
	}
	protected native static GIOLibrary.gboolean g_file_info_get_attribute_data(@Ptr long info, @Ptr long attribute, @Ptr long type, @Ptr long value_pp, @Ptr long status);
	/**
	 * Original signature : <code>GFileAttributeType g_file_info_get_attribute_type(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:23</i>
	 */
	public static IntValuedEnum<GIOLibrary.GFileAttributeType > g_file_info_get_attribute_type(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute) {
		return FlagSet.fromValue(g_file_info_get_attribute_type(Pointer.getPeer(info), Pointer.getPeer(attribute)), GIOLibrary.GFileAttributeType.class);
	}
	protected native static int g_file_info_get_attribute_type(@Ptr long info, @Ptr long attribute);
	/**
	 * Original signature : <code>void g_file_info_remove_attribute(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:25</i>
	 */
	public static void g_file_info_remove_attribute(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute) {
		g_file_info_remove_attribute(Pointer.getPeer(info), Pointer.getPeer(attribute));
	}
	protected native static void g_file_info_remove_attribute(@Ptr long info, @Ptr long attribute);
	/**
	 * Original signature : <code>GFileAttributeStatus g_file_info_get_attribute_status(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:27</i>
	 */
	public static IntValuedEnum<GIOLibrary.GFileAttributeStatus > g_file_info_get_attribute_status(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute) {
		return FlagSet.fromValue(g_file_info_get_attribute_status(Pointer.getPeer(info), Pointer.getPeer(attribute)), GIOLibrary.GFileAttributeStatus.class);
	}
	protected native static int g_file_info_get_attribute_status(@Ptr long info, @Ptr long attribute);
	/**
	 * Original signature : <code>gboolean g_file_info_set_attribute_status(GFileInfo*, const char*, GFileAttributeStatus)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:29</i>
	 */
	public static GIOLibrary.gboolean g_file_info_set_attribute_status(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute, IntValuedEnum<GIOLibrary.GFileAttributeStatus > status) {
		return g_file_info_set_attribute_status(Pointer.getPeer(info), Pointer.getPeer(attribute), (int)status.value());
	}
	protected native static GIOLibrary.gboolean g_file_info_set_attribute_status(@Ptr long info, @Ptr long attribute, int status);
	/**
	 * Original signature : <code>char* g_file_info_get_attribute_as_string(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:31</i>
	 */
	public static Pointer<Byte > g_file_info_get_attribute_as_string(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute) {
		return Pointer.pointerToAddress(g_file_info_get_attribute_as_string(Pointer.getPeer(info), Pointer.getPeer(attribute)), Byte.class);
	}
	@Ptr 
	protected native static long g_file_info_get_attribute_as_string(@Ptr long info, @Ptr long attribute);
	/**
	 * Original signature : <code>char* g_file_info_get_attribute_string(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:33</i>
	 */
	public static Pointer<Byte > g_file_info_get_attribute_string(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute) {
		return Pointer.pointerToAddress(g_file_info_get_attribute_string(Pointer.getPeer(info), Pointer.getPeer(attribute)), Byte.class);
	}
	@Ptr 
	protected native static long g_file_info_get_attribute_string(@Ptr long info, @Ptr long attribute);
	/**
	 * Original signature : <code>char* g_file_info_get_attribute_byte_string(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:35</i>
	 */
	public static Pointer<Byte > g_file_info_get_attribute_byte_string(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute) {
		return Pointer.pointerToAddress(g_file_info_get_attribute_byte_string(Pointer.getPeer(info), Pointer.getPeer(attribute)), Byte.class);
	}
	@Ptr 
	protected native static long g_file_info_get_attribute_byte_string(@Ptr long info, @Ptr long attribute);
	/**
	 * Original signature : <code>gboolean g_file_info_get_attribute_boolean(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:37</i>
	 */
	public static GIOLibrary.gboolean g_file_info_get_attribute_boolean(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute) {
		return g_file_info_get_attribute_boolean(Pointer.getPeer(info), Pointer.getPeer(attribute));
	}
	protected native static GIOLibrary.gboolean g_file_info_get_attribute_boolean(@Ptr long info, @Ptr long attribute);
	/**
	 * Original signature : <code>guint32 g_file_info_get_attribute_uint32(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:39</i>
	 */
	public static int g_file_info_get_attribute_uint32(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute) {
		return g_file_info_get_attribute_uint32(Pointer.getPeer(info), Pointer.getPeer(attribute));
	}
	protected native static int g_file_info_get_attribute_uint32(@Ptr long info, @Ptr long attribute);
	/**
	 * Original signature : <code>gint32 g_file_info_get_attribute_int32(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:41</i>
	 */
	public static int g_file_info_get_attribute_int32(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute) {
		return g_file_info_get_attribute_int32(Pointer.getPeer(info), Pointer.getPeer(attribute));
	}
	protected native static int g_file_info_get_attribute_int32(@Ptr long info, @Ptr long attribute);
	/**
	 * Original signature : <code>guint64 g_file_info_get_attribute_uint64(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:43</i>
	 */
	public static long g_file_info_get_attribute_uint64(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute) {
		return g_file_info_get_attribute_uint64(Pointer.getPeer(info), Pointer.getPeer(attribute));
	}
	protected native static long g_file_info_get_attribute_uint64(@Ptr long info, @Ptr long attribute);
	/**
	 * Original signature : <code>gint64 g_file_info_get_attribute_int64(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:45</i>
	 */
	public static long g_file_info_get_attribute_int64(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute) {
		return g_file_info_get_attribute_int64(Pointer.getPeer(info), Pointer.getPeer(attribute));
	}
	protected native static long g_file_info_get_attribute_int64(@Ptr long info, @Ptr long attribute);
	/**
	 * Original signature : <code>GObject* g_file_info_get_attribute_object(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:47</i>
	 */
	public static Pointer g_file_info_get_attribute_object(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute) {
		return Pointer.pointerToAddress(g_file_info_get_attribute_object(Pointer.getPeer(info), Pointer.getPeer(attribute)));
	}
	@Ptr 
	protected native static long g_file_info_get_attribute_object(@Ptr long info, @Ptr long attribute);
	/**
	 * Original signature : <code>char** g_file_info_get_attribute_stringv(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:49</i>
	 */
	public static Pointer<Pointer<Byte > > g_file_info_get_attribute_stringv(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute) {
		return Pointer.pointerToAddress(g_file_info_get_attribute_stringv(Pointer.getPeer(info), Pointer.getPeer(attribute)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_file_info_get_attribute_stringv(@Ptr long info, @Ptr long attribute);
	/**
	 * Original signature : <code>void g_file_info_set_attribute(GFileInfo*, const char*, GFileAttributeType, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:51</i>
	 */
	public static void g_file_info_set_attribute(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute, IntValuedEnum<GIOLibrary.GFileAttributeType > type, GIOLibrary.gpointer value_p) {
		g_file_info_set_attribute(Pointer.getPeer(info), Pointer.getPeer(attribute), (int)type.value(), value_p);
	}
	protected native static void g_file_info_set_attribute(@Ptr long info, @Ptr long attribute, int type, GIOLibrary.gpointer value_p);
	/**
	 * Original signature : <code>void g_file_info_set_attribute_string(GFileInfo*, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:53</i>
	 */
	public static void g_file_info_set_attribute_string(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute, Pointer<Byte > attr_value) {
		g_file_info_set_attribute_string(Pointer.getPeer(info), Pointer.getPeer(attribute), Pointer.getPeer(attr_value));
	}
	protected native static void g_file_info_set_attribute_string(@Ptr long info, @Ptr long attribute, @Ptr long attr_value);
	/**
	 * Original signature : <code>void g_file_info_set_attribute_byte_string(GFileInfo*, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:55</i>
	 */
	public static void g_file_info_set_attribute_byte_string(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute, Pointer<Byte > attr_value) {
		g_file_info_set_attribute_byte_string(Pointer.getPeer(info), Pointer.getPeer(attribute), Pointer.getPeer(attr_value));
	}
	protected native static void g_file_info_set_attribute_byte_string(@Ptr long info, @Ptr long attribute, @Ptr long attr_value);
	/**
	 * Original signature : <code>void g_file_info_set_attribute_boolean(GFileInfo*, const char*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:57</i>
	 */
	public static void g_file_info_set_attribute_boolean(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute, GIOLibrary.gboolean attr_value) {
		g_file_info_set_attribute_boolean(Pointer.getPeer(info), Pointer.getPeer(attribute), attr_value);
	}
	protected native static void g_file_info_set_attribute_boolean(@Ptr long info, @Ptr long attribute, GIOLibrary.gboolean attr_value);
	/**
	 * Original signature : <code>void g_file_info_set_attribute_uint32(GFileInfo*, const char*, guint32)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:59</i>
	 */
	public static void g_file_info_set_attribute_uint32(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute, int attr_value) {
		g_file_info_set_attribute_uint32(Pointer.getPeer(info), Pointer.getPeer(attribute), attr_value);
	}
	protected native static void g_file_info_set_attribute_uint32(@Ptr long info, @Ptr long attribute, int attr_value);
	/**
	 * Original signature : <code>void g_file_info_set_attribute_int32(GFileInfo*, const char*, gint32)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:61</i>
	 */
	public static void g_file_info_set_attribute_int32(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute, int attr_value) {
		g_file_info_set_attribute_int32(Pointer.getPeer(info), Pointer.getPeer(attribute), attr_value);
	}
	protected native static void g_file_info_set_attribute_int32(@Ptr long info, @Ptr long attribute, int attr_value);
	/**
	 * Original signature : <code>void g_file_info_set_attribute_uint64(GFileInfo*, const char*, guint64)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:63</i>
	 */
	public static void g_file_info_set_attribute_uint64(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute, long attr_value) {
		g_file_info_set_attribute_uint64(Pointer.getPeer(info), Pointer.getPeer(attribute), attr_value);
	}
	protected native static void g_file_info_set_attribute_uint64(@Ptr long info, @Ptr long attribute, long attr_value);
	/**
	 * Original signature : <code>void g_file_info_set_attribute_int64(GFileInfo*, const char*, gint64)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:65</i>
	 */
	public static void g_file_info_set_attribute_int64(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute, long attr_value) {
		g_file_info_set_attribute_int64(Pointer.getPeer(info), Pointer.getPeer(attribute), attr_value);
	}
	protected native static void g_file_info_set_attribute_int64(@Ptr long info, @Ptr long attribute, long attr_value);
	/**
	 * Original signature : <code>void g_file_info_set_attribute_object(GFileInfo*, const char*, GObject*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:67</i>
	 */
	public static void g_file_info_set_attribute_object(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute, Pointer attr_value) {
		g_file_info_set_attribute_object(Pointer.getPeer(info), Pointer.getPeer(attribute), Pointer.getPeer(attr_value));
	}
	protected native static void g_file_info_set_attribute_object(@Ptr long info, @Ptr long attribute, @Ptr long attr_value);
	/**
	 * Original signature : <code>void g_file_info_set_attribute_stringv(GFileInfo*, const char*, char**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:69</i>
	 */
	public static void g_file_info_set_attribute_stringv(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > attribute, Pointer<Pointer<Byte > > attr_value) {
		g_file_info_set_attribute_stringv(Pointer.getPeer(info), Pointer.getPeer(attribute), Pointer.getPeer(attr_value));
	}
	protected native static void g_file_info_set_attribute_stringv(@Ptr long info, @Ptr long attribute, @Ptr long attr_value);
	/**
	 * Original signature : <code>void g_file_info_clear_status(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:71</i>
	 */
	public static void g_file_info_clear_status(Pointer<GIOLibrary.GFileInfo > info) {
		g_file_info_clear_status(Pointer.getPeer(info));
	}
	protected native static void g_file_info_clear_status(@Ptr long info);
	/**
	 * Helper getters:<br>
	 * Original signature : <code>GDateTime* g_file_info_get_deletion_date(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:76</i>
	 */
	public static Pointer<GIOLibrary.GDateTime > g_file_info_get_deletion_date(Pointer<GIOLibrary.GFileInfo > info) {
		return Pointer.pointerToAddress(g_file_info_get_deletion_date(Pointer.getPeer(info)), GIOLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_file_info_get_deletion_date(@Ptr long info);
	/**
	 * Original signature : <code>GFileType g_file_info_get_file_type(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:78</i>
	 */
	public static IntValuedEnum<GIOLibrary.GFileType > g_file_info_get_file_type(Pointer<GIOLibrary.GFileInfo > info) {
		return FlagSet.fromValue(g_file_info_get_file_type(Pointer.getPeer(info)), GIOLibrary.GFileType.class);
	}
	protected native static int g_file_info_get_file_type(@Ptr long info);
	/**
	 * Original signature : <code>gboolean g_file_info_get_is_hidden(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:80</i>
	 */
	public static GIOLibrary.gboolean g_file_info_get_is_hidden(Pointer<GIOLibrary.GFileInfo > info) {
		return g_file_info_get_is_hidden(Pointer.getPeer(info));
	}
	protected native static GIOLibrary.gboolean g_file_info_get_is_hidden(@Ptr long info);
	/**
	 * Original signature : <code>gboolean g_file_info_get_is_backup(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:82</i>
	 */
	public static GIOLibrary.gboolean g_file_info_get_is_backup(Pointer<GIOLibrary.GFileInfo > info) {
		return g_file_info_get_is_backup(Pointer.getPeer(info));
	}
	protected native static GIOLibrary.gboolean g_file_info_get_is_backup(@Ptr long info);
	/**
	 * Original signature : <code>gboolean g_file_info_get_is_symlink(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:84</i>
	 */
	public static GIOLibrary.gboolean g_file_info_get_is_symlink(Pointer<GIOLibrary.GFileInfo > info) {
		return g_file_info_get_is_symlink(Pointer.getPeer(info));
	}
	protected native static GIOLibrary.gboolean g_file_info_get_is_symlink(@Ptr long info);
	/**
	 * Original signature : <code>char* g_file_info_get_name(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:86</i>
	 */
	public static Pointer<Byte > g_file_info_get_name(Pointer<GIOLibrary.GFileInfo > info) {
		return Pointer.pointerToAddress(g_file_info_get_name(Pointer.getPeer(info)), Byte.class);
	}
	@Ptr 
	protected native static long g_file_info_get_name(@Ptr long info);
	/**
	 * Original signature : <code>char* g_file_info_get_display_name(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:88</i>
	 */
	public static Pointer<Byte > g_file_info_get_display_name(Pointer<GIOLibrary.GFileInfo > info) {
		return Pointer.pointerToAddress(g_file_info_get_display_name(Pointer.getPeer(info)), Byte.class);
	}
	@Ptr 
	protected native static long g_file_info_get_display_name(@Ptr long info);
	/**
	 * Original signature : <code>char* g_file_info_get_edit_name(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:90</i>
	 */
	public static Pointer<Byte > g_file_info_get_edit_name(Pointer<GIOLibrary.GFileInfo > info) {
		return Pointer.pointerToAddress(g_file_info_get_edit_name(Pointer.getPeer(info)), Byte.class);
	}
	@Ptr 
	protected native static long g_file_info_get_edit_name(@Ptr long info);
	/**
	 * Original signature : <code>GIcon* g_file_info_get_icon(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:92</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_file_info_get_icon(Pointer<GIOLibrary.GFileInfo > info) {
		return Pointer.pointerToAddress(g_file_info_get_icon(Pointer.getPeer(info)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_file_info_get_icon(@Ptr long info);
	/**
	 * Original signature : <code>GIcon* g_file_info_get_symbolic_icon(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:94</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_file_info_get_symbolic_icon(Pointer<GIOLibrary.GFileInfo > info) {
		return Pointer.pointerToAddress(g_file_info_get_symbolic_icon(Pointer.getPeer(info)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_file_info_get_symbolic_icon(@Ptr long info);
	/**
	 * Original signature : <code>char* g_file_info_get_content_type(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:96</i>
	 */
	public static Pointer<Byte > g_file_info_get_content_type(Pointer<GIOLibrary.GFileInfo > info) {
		return Pointer.pointerToAddress(g_file_info_get_content_type(Pointer.getPeer(info)), Byte.class);
	}
	@Ptr 
	protected native static long g_file_info_get_content_type(@Ptr long info);
	/**
	 * Original signature : <code>goffset g_file_info_get_size(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:98</i>
	 */
	public static long g_file_info_get_size(Pointer<GIOLibrary.GFileInfo > info) {
		return g_file_info_get_size(Pointer.getPeer(info));
	}
	protected native static long g_file_info_get_size(@Ptr long info);
	/**
	 * Original signature : <code>void g_file_info_get_modification_time(GFileInfo*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:100</i>
	 */
	public static void g_file_info_get_modification_time(Pointer<GIOLibrary.GFileInfo > info, Pointer result) {
		g_file_info_get_modification_time(Pointer.getPeer(info), Pointer.getPeer(result));
	}
	protected native static void g_file_info_get_modification_time(@Ptr long info, @Ptr long result);
	/**
	 * Original signature : <code>char* g_file_info_get_symlink_target(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:102</i>
	 */
	public static Pointer<Byte > g_file_info_get_symlink_target(Pointer<GIOLibrary.GFileInfo > info) {
		return Pointer.pointerToAddress(g_file_info_get_symlink_target(Pointer.getPeer(info)), Byte.class);
	}
	@Ptr 
	protected native static long g_file_info_get_symlink_target(@Ptr long info);
	/**
	 * Original signature : <code>char* g_file_info_get_etag(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:104</i>
	 */
	public static Pointer<Byte > g_file_info_get_etag(Pointer<GIOLibrary.GFileInfo > info) {
		return Pointer.pointerToAddress(g_file_info_get_etag(Pointer.getPeer(info)), Byte.class);
	}
	@Ptr 
	protected native static long g_file_info_get_etag(@Ptr long info);
	/**
	 * Original signature : <code>gint32 g_file_info_get_sort_order(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:106</i>
	 */
	public static int g_file_info_get_sort_order(Pointer<GIOLibrary.GFileInfo > info) {
		return g_file_info_get_sort_order(Pointer.getPeer(info));
	}
	protected native static int g_file_info_get_sort_order(@Ptr long info);
	/**
	 * Original signature : <code>void g_file_info_set_attribute_mask(GFileInfo*, GFileAttributeMatcher*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:108</i>
	 */
	public static void g_file_info_set_attribute_mask(Pointer<GIOLibrary.GFileInfo > info, Pointer<GIOLibrary.GFileAttributeMatcher > mask) {
		g_file_info_set_attribute_mask(Pointer.getPeer(info), Pointer.getPeer(mask));
	}
	protected native static void g_file_info_set_attribute_mask(@Ptr long info, @Ptr long mask);
	/**
	 * Original signature : <code>void g_file_info_unset_attribute_mask(GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:110</i>
	 */
	public static void g_file_info_unset_attribute_mask(Pointer<GIOLibrary.GFileInfo > info) {
		g_file_info_unset_attribute_mask(Pointer.getPeer(info));
	}
	protected native static void g_file_info_unset_attribute_mask(@Ptr long info);
	/**
	 * Helper setters:<br>
	 * Original signature : <code>void g_file_info_set_file_type(GFileInfo*, GFileType)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:115</i>
	 */
	public static void g_file_info_set_file_type(Pointer<GIOLibrary.GFileInfo > info, IntValuedEnum<GIOLibrary.GFileType > type) {
		g_file_info_set_file_type(Pointer.getPeer(info), (int)type.value());
	}
	protected native static void g_file_info_set_file_type(@Ptr long info, int type);
	/**
	 * Original signature : <code>void g_file_info_set_is_hidden(GFileInfo*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:117</i>
	 */
	public static void g_file_info_set_is_hidden(Pointer<GIOLibrary.GFileInfo > info, GIOLibrary.gboolean is_hidden) {
		g_file_info_set_is_hidden(Pointer.getPeer(info), is_hidden);
	}
	protected native static void g_file_info_set_is_hidden(@Ptr long info, GIOLibrary.gboolean is_hidden);
	/**
	 * Original signature : <code>void g_file_info_set_is_symlink(GFileInfo*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:119</i>
	 */
	public static void g_file_info_set_is_symlink(Pointer<GIOLibrary.GFileInfo > info, GIOLibrary.gboolean is_symlink) {
		g_file_info_set_is_symlink(Pointer.getPeer(info), is_symlink);
	}
	protected native static void g_file_info_set_is_symlink(@Ptr long info, GIOLibrary.gboolean is_symlink);
	/**
	 * Original signature : <code>void g_file_info_set_name(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:121</i>
	 */
	public static void g_file_info_set_name(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > name) {
		g_file_info_set_name(Pointer.getPeer(info), Pointer.getPeer(name));
	}
	protected native static void g_file_info_set_name(@Ptr long info, @Ptr long name);
	/**
	 * Original signature : <code>void g_file_info_set_display_name(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:123</i>
	 */
	public static void g_file_info_set_display_name(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > display_name) {
		g_file_info_set_display_name(Pointer.getPeer(info), Pointer.getPeer(display_name));
	}
	protected native static void g_file_info_set_display_name(@Ptr long info, @Ptr long display_name);
	/**
	 * Original signature : <code>void g_file_info_set_edit_name(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:125</i>
	 */
	public static void g_file_info_set_edit_name(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > edit_name) {
		g_file_info_set_edit_name(Pointer.getPeer(info), Pointer.getPeer(edit_name));
	}
	protected native static void g_file_info_set_edit_name(@Ptr long info, @Ptr long edit_name);
	/**
	 * Original signature : <code>void g_file_info_set_icon(GFileInfo*, GIcon*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:127</i>
	 */
	public static void g_file_info_set_icon(Pointer<GIOLibrary.GFileInfo > info, Pointer<GIOLibrary.GIcon > icon) {
		g_file_info_set_icon(Pointer.getPeer(info), Pointer.getPeer(icon));
	}
	protected native static void g_file_info_set_icon(@Ptr long info, @Ptr long icon);
	/**
	 * Original signature : <code>void g_file_info_set_symbolic_icon(GFileInfo*, GIcon*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:129</i>
	 */
	public static void g_file_info_set_symbolic_icon(Pointer<GIOLibrary.GFileInfo > info, Pointer<GIOLibrary.GIcon > icon) {
		g_file_info_set_symbolic_icon(Pointer.getPeer(info), Pointer.getPeer(icon));
	}
	protected native static void g_file_info_set_symbolic_icon(@Ptr long info, @Ptr long icon);
	/**
	 * Original signature : <code>void g_file_info_set_content_type(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:131</i>
	 */
	public static void g_file_info_set_content_type(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > content_type) {
		g_file_info_set_content_type(Pointer.getPeer(info), Pointer.getPeer(content_type));
	}
	protected native static void g_file_info_set_content_type(@Ptr long info, @Ptr long content_type);
	/**
	 * Original signature : <code>void g_file_info_set_size(GFileInfo*, goffset)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:133</i>
	 */
	public static void g_file_info_set_size(Pointer<GIOLibrary.GFileInfo > info, long size) {
		g_file_info_set_size(Pointer.getPeer(info), size);
	}
	protected native static void g_file_info_set_size(@Ptr long info, long size);
	/**
	 * Original signature : <code>void g_file_info_set_modification_time(GFileInfo*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:135</i>
	 */
	public static void g_file_info_set_modification_time(Pointer<GIOLibrary.GFileInfo > info, Pointer mtime) {
		g_file_info_set_modification_time(Pointer.getPeer(info), Pointer.getPeer(mtime));
	}
	protected native static void g_file_info_set_modification_time(@Ptr long info, @Ptr long mtime);
	/**
	 * Original signature : <code>void g_file_info_set_symlink_target(GFileInfo*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:137</i>
	 */
	public static void g_file_info_set_symlink_target(Pointer<GIOLibrary.GFileInfo > info, Pointer<Byte > symlink_target) {
		g_file_info_set_symlink_target(Pointer.getPeer(info), Pointer.getPeer(symlink_target));
	}
	protected native static void g_file_info_set_symlink_target(@Ptr long info, @Ptr long symlink_target);
	/**
	 * Original signature : <code>void g_file_info_set_sort_order(GFileInfo*, gint32)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:139</i>
	 */
	public static void g_file_info_set_sort_order(Pointer<GIOLibrary.GFileInfo > info, int sort_order) {
		g_file_info_set_sort_order(Pointer.getPeer(info), sort_order);
	}
	protected native static void g_file_info_set_sort_order(@Ptr long info, int sort_order);
	/**
	 * Original signature : <code>GType g_file_attribute_matcher_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:141</i>
	 */
	public static native GIOLibrary.GType g_file_attribute_matcher_get_type();
	/**
	 * Original signature : <code>GFileAttributeMatcher* g_file_attribute_matcher_new(const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:143</i>
	 */
	public static Pointer<GIOLibrary.GFileAttributeMatcher > g_file_attribute_matcher_new(Pointer<Byte > attributes) {
		return Pointer.pointerToAddress(g_file_attribute_matcher_new(Pointer.getPeer(attributes)), GIOLibrary.GFileAttributeMatcher.class);
	}
	@Ptr 
	protected native static long g_file_attribute_matcher_new(@Ptr long attributes);
	/**
	 * Original signature : <code>GFileAttributeMatcher* g_file_attribute_matcher_ref(GFileAttributeMatcher*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:145</i>
	 */
	public static Pointer<GIOLibrary.GFileAttributeMatcher > g_file_attribute_matcher_ref(Pointer<GIOLibrary.GFileAttributeMatcher > matcher) {
		return Pointer.pointerToAddress(g_file_attribute_matcher_ref(Pointer.getPeer(matcher)), GIOLibrary.GFileAttributeMatcher.class);
	}
	@Ptr 
	protected native static long g_file_attribute_matcher_ref(@Ptr long matcher);
	/**
	 * Original signature : <code>void g_file_attribute_matcher_unref(GFileAttributeMatcher*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:147</i>
	 */
	public static void g_file_attribute_matcher_unref(Pointer<GIOLibrary.GFileAttributeMatcher > matcher) {
		g_file_attribute_matcher_unref(Pointer.getPeer(matcher));
	}
	protected native static void g_file_attribute_matcher_unref(@Ptr long matcher);
	/**
	 * Original signature : <code>GFileAttributeMatcher* g_file_attribute_matcher_subtract(GFileAttributeMatcher*, GFileAttributeMatcher*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:149</i>
	 */
	public static Pointer<GIOLibrary.GFileAttributeMatcher > g_file_attribute_matcher_subtract(Pointer<GIOLibrary.GFileAttributeMatcher > matcher, Pointer<GIOLibrary.GFileAttributeMatcher > subtract) {
		return Pointer.pointerToAddress(g_file_attribute_matcher_subtract(Pointer.getPeer(matcher), Pointer.getPeer(subtract)), GIOLibrary.GFileAttributeMatcher.class);
	}
	@Ptr 
	protected native static long g_file_attribute_matcher_subtract(@Ptr long matcher, @Ptr long subtract);
	/**
	 * Original signature : <code>gboolean g_file_attribute_matcher_matches(GFileAttributeMatcher*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:151</i>
	 */
	public static GIOLibrary.gboolean g_file_attribute_matcher_matches(Pointer<GIOLibrary.GFileAttributeMatcher > matcher, Pointer<Byte > attribute) {
		return g_file_attribute_matcher_matches(Pointer.getPeer(matcher), Pointer.getPeer(attribute));
	}
	protected native static GIOLibrary.gboolean g_file_attribute_matcher_matches(@Ptr long matcher, @Ptr long attribute);
	/**
	 * Original signature : <code>gboolean g_file_attribute_matcher_matches_only(GFileAttributeMatcher*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:153</i>
	 */
	public static GIOLibrary.gboolean g_file_attribute_matcher_matches_only(Pointer<GIOLibrary.GFileAttributeMatcher > matcher, Pointer<Byte > attribute) {
		return g_file_attribute_matcher_matches_only(Pointer.getPeer(matcher), Pointer.getPeer(attribute));
	}
	protected native static GIOLibrary.gboolean g_file_attribute_matcher_matches_only(@Ptr long matcher, @Ptr long attribute);
	/**
	 * Original signature : <code>gboolean g_file_attribute_matcher_enumerate_namespace(GFileAttributeMatcher*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:155</i>
	 */
	public static GIOLibrary.gboolean g_file_attribute_matcher_enumerate_namespace(Pointer<GIOLibrary.GFileAttributeMatcher > matcher, Pointer<Byte > ns) {
		return g_file_attribute_matcher_enumerate_namespace(Pointer.getPeer(matcher), Pointer.getPeer(ns));
	}
	protected native static GIOLibrary.gboolean g_file_attribute_matcher_enumerate_namespace(@Ptr long matcher, @Ptr long ns);
	/**
	 * Original signature : <code>char* g_file_attribute_matcher_enumerate_next(GFileAttributeMatcher*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:157</i>
	 */
	public static Pointer<Byte > g_file_attribute_matcher_enumerate_next(Pointer<GIOLibrary.GFileAttributeMatcher > matcher) {
		return Pointer.pointerToAddress(g_file_attribute_matcher_enumerate_next(Pointer.getPeer(matcher)), Byte.class);
	}
	@Ptr 
	protected native static long g_file_attribute_matcher_enumerate_next(@Ptr long matcher);
	/**
	 * Original signature : <code>char* g_file_attribute_matcher_to_string(GFileAttributeMatcher*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinfo.h:159</i>
	 */
	public static Pointer<Byte > g_file_attribute_matcher_to_string(Pointer<GIOLibrary.GFileAttributeMatcher > matcher) {
		return Pointer.pointerToAddress(g_file_attribute_matcher_to_string(Pointer.getPeer(matcher)), Byte.class);
	}
	@Ptr 
	protected native static long g_file_attribute_matcher_to_string(@Ptr long matcher);
	/**
	 * Original signature : <code>GType g_file_input_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinputstream.h:44</i>
	 */
	public static native GIOLibrary.GType g_file_input_stream_get_type();
	/**
	 * Original signature : <code>GFileInfo* g_file_input_stream_query_info(GFileInputStream*, const char*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinputstream.h:46</i>
	 */
	public static Pointer<GIOLibrary.GFileInfo > g_file_input_stream_query_info(Pointer<GFileInputStream > stream, Pointer<Byte > attributes, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_file_input_stream_query_info(Pointer.getPeer(stream), Pointer.getPeer(attributes), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GFileInfo.class);
	}
	@Ptr 
	protected native static long g_file_input_stream_query_info(@Ptr long stream, @Ptr long attributes, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_file_input_stream_query_info_async(GFileInputStream*, const char*, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinputstream.h:48</i>
	 */
	public static void g_file_input_stream_query_info_async(Pointer<GFileInputStream > stream, Pointer<Byte > attributes, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_file_input_stream_query_info_async(Pointer.getPeer(stream), Pointer.getPeer(attributes), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_file_input_stream_query_info_async(@Ptr long stream, @Ptr long attributes, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GFileInfo* g_file_input_stream_query_info_finish(GFileInputStream*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileinputstream.h:50</i>
	 */
	public static Pointer<GIOLibrary.GFileInfo > g_file_input_stream_query_info_finish(Pointer<GFileInputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_file_input_stream_query_info_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(error)), GIOLibrary.GFileInfo.class);
	}
	@Ptr 
	protected native static long g_file_input_stream_query_info_finish(@Ptr long stream, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>GQuark g_io_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioerror.h:2</i>
	 */
	public static native int g_io_error_quark();
	/**
	 * Original signature : <code>GIOErrorEnum g_io_error_from_errno(gint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gioerror.h:4</i>
	 */
	public static IntValuedEnum<GIOLibrary.GIOErrorEnum > g_io_error_from_errno(int err_no) {
		return FlagSet.fromValue(g_io_error_from_errno$2(err_no), GIOLibrary.GIOErrorEnum.class);
	}
	protected native static int g_io_error_from_errno$2(int err_no);
	/**
	 * Original signature : <code>GType g_io_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/giostream.h:49</i>
	 */
	public static native GIOLibrary.GType g_io_stream_get_type();
	/**
	 * Original signature : <code>GInputStream* g_io_stream_get_input_stream(GIOStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giostream.h:51</i>
	 */
	public static Pointer<GInputStream > g_io_stream_get_input_stream(Pointer<GIOStream > stream) {
		return Pointer.pointerToAddress(g_io_stream_get_input_stream(Pointer.getPeer(stream)), GInputStream.class);
	}
	@Ptr 
	protected native static long g_io_stream_get_input_stream(@Ptr long stream);
	/**
	 * Original signature : <code>GOutputStream* g_io_stream_get_output_stream(GIOStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giostream.h:53</i>
	 */
	public static Pointer<GOutputStream > g_io_stream_get_output_stream(Pointer<GIOStream > stream) {
		return Pointer.pointerToAddress(g_io_stream_get_output_stream(Pointer.getPeer(stream)), GOutputStream.class);
	}
	@Ptr 
	protected native static long g_io_stream_get_output_stream(@Ptr long stream);
	/**
	 * Original signature : <code>void g_io_stream_splice_async(GIOStream*, GIOStream*, GIOStreamSpliceFlags, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/giostream.h:55</i>
	 */
	public static void g_io_stream_splice_async(Pointer<GIOStream > stream1, Pointer<GIOStream > stream2, IntValuedEnum<GIOLibrary.GIOStreamSpliceFlags > flags, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_io_stream_splice_async(Pointer.getPeer(stream1), Pointer.getPeer(stream2), (int)flags.value(), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_io_stream_splice_async(@Ptr long stream1, @Ptr long stream2, int flags, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_io_stream_splice_finish(GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/giostream.h:57</i>
	 */
	public static GIOLibrary.gboolean g_io_stream_splice_finish(Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_io_stream_splice_finish(Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_io_stream_splice_finish(@Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_io_stream_close(GIOStream*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/giostream.h:59</i>
	 */
	public static GIOLibrary.gboolean g_io_stream_close(Pointer<GIOStream > stream, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_io_stream_close(Pointer.getPeer(stream), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_io_stream_close(@Ptr long stream, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_io_stream_close_async(GIOStream*, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/giostream.h:61</i>
	 */
	public static void g_io_stream_close_async(Pointer<GIOStream > stream, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_io_stream_close_async(Pointer.getPeer(stream), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_io_stream_close_async(@Ptr long stream, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_io_stream_close_finish(GIOStream*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/giostream.h:63</i>
	 */
	public static GIOLibrary.gboolean g_io_stream_close_finish(Pointer<GIOStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_io_stream_close_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_io_stream_close_finish(@Ptr long stream, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_io_stream_is_closed(GIOStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giostream.h:65</i>
	 */
	public static GIOLibrary.gboolean g_io_stream_is_closed(Pointer<GIOStream > stream) {
		return g_io_stream_is_closed(Pointer.getPeer(stream));
	}
	protected native static GIOLibrary.gboolean g_io_stream_is_closed(@Ptr long stream);
	/**
	 * Original signature : <code>gboolean g_io_stream_has_pending(GIOStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giostream.h:67</i>
	 */
	public static GIOLibrary.gboolean g_io_stream_has_pending(Pointer<GIOStream > stream) {
		return g_io_stream_has_pending(Pointer.getPeer(stream));
	}
	protected native static GIOLibrary.gboolean g_io_stream_has_pending(@Ptr long stream);
	/**
	 * Original signature : <code>gboolean g_io_stream_set_pending(GIOStream*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/giostream.h:69</i>
	 */
	public static GIOLibrary.gboolean g_io_stream_set_pending(Pointer<GIOStream > stream, Pointer<Pointer > error) {
		return g_io_stream_set_pending(Pointer.getPeer(stream), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_io_stream_set_pending(@Ptr long stream, @Ptr long error);
	/**
	 * Original signature : <code>void g_io_stream_clear_pending(GIOStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giostream.h:71</i>
	 */
	public static void g_io_stream_clear_pending(Pointer<GIOStream > stream) {
		g_io_stream_clear_pending(Pointer.getPeer(stream));
	}
	protected native static void g_io_stream_clear_pending(@Ptr long stream);
	/**
	 * Original signature : <code>GType g_file_io_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileiostream.h:52</i>
	 */
	public static native GIOLibrary.GType g_file_io_stream_get_type();
	/**
	 * Original signature : <code>GFileInfo* g_file_io_stream_query_info(GFileIOStream*, const char*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileiostream.h:54</i>
	 */
	public static Pointer<GIOLibrary.GFileInfo > g_file_io_stream_query_info(Pointer<GFileIOStream > stream, Pointer<Byte > attributes, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_file_io_stream_query_info(Pointer.getPeer(stream), Pointer.getPeer(attributes), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GFileInfo.class);
	}
	@Ptr 
	protected native static long g_file_io_stream_query_info(@Ptr long stream, @Ptr long attributes, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_file_io_stream_query_info_async(GFileIOStream*, const char*, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileiostream.h:56</i>
	 */
	public static void g_file_io_stream_query_info_async(Pointer<GFileIOStream > stream, Pointer<Byte > attributes, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_file_io_stream_query_info_async(Pointer.getPeer(stream), Pointer.getPeer(attributes), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_file_io_stream_query_info_async(@Ptr long stream, @Ptr long attributes, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GFileInfo* g_file_io_stream_query_info_finish(GFileIOStream*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileiostream.h:58</i>
	 */
	public static Pointer<GIOLibrary.GFileInfo > g_file_io_stream_query_info_finish(Pointer<GFileIOStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_file_io_stream_query_info_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(error)), GIOLibrary.GFileInfo.class);
	}
	@Ptr 
	protected native static long g_file_io_stream_query_info_finish(@Ptr long stream, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>char* g_file_io_stream_get_etag(GFileIOStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileiostream.h:60</i>
	 */
	public static Pointer<Byte > g_file_io_stream_get_etag(Pointer<GFileIOStream > stream) {
		return Pointer.pointerToAddress(g_file_io_stream_get_etag(Pointer.getPeer(stream)), Byte.class);
	}
	@Ptr 
	protected native static long g_file_io_stream_get_etag(@Ptr long stream);
	/**
	 * Original signature : <code>GType g_file_monitor_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilemonitor.h:36</i>
	 */
	public static native GIOLibrary.GType g_file_monitor_get_type();
	/**
	 * Original signature : <code>gboolean g_file_monitor_cancel(GFileMonitor*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilemonitor.h:38</i>
	 */
	public static GIOLibrary.gboolean g_file_monitor_cancel(Pointer<GFileMonitor > monitor) {
		return g_file_monitor_cancel(Pointer.getPeer(monitor));
	}
	protected native static GIOLibrary.gboolean g_file_monitor_cancel(@Ptr long monitor);
	/**
	 * Original signature : <code>gboolean g_file_monitor_is_cancelled(GFileMonitor*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilemonitor.h:40</i>
	 */
	public static GIOLibrary.gboolean g_file_monitor_is_cancelled(Pointer<GFileMonitor > monitor) {
		return g_file_monitor_is_cancelled(Pointer.getPeer(monitor));
	}
	protected native static GIOLibrary.gboolean g_file_monitor_is_cancelled(@Ptr long monitor);
	/**
	 * Original signature : <code>void g_file_monitor_set_rate_limit(GFileMonitor*, gint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilemonitor.h:42</i>
	 */
	public static void g_file_monitor_set_rate_limit(Pointer<GFileMonitor > monitor, int limit_msecs) {
		g_file_monitor_set_rate_limit(Pointer.getPeer(monitor), limit_msecs);
	}
	protected native static void g_file_monitor_set_rate_limit(@Ptr long monitor, int limit_msecs);
	/**
	 * For implementations<br>
	 * Original signature : <code>void g_file_monitor_emit_event(GFileMonitor*, GFile*, GFile*, GFileMonitorEvent)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilemonitor.h:47</i>
	 */
	public static void g_file_monitor_emit_event(Pointer<GFileMonitor > monitor, Pointer<GIOLibrary.GFile > child, Pointer<GIOLibrary.GFile > other_file, IntValuedEnum<GIOLibrary.GFileMonitorEvent > event_type) {
		g_file_monitor_emit_event(Pointer.getPeer(monitor), Pointer.getPeer(child), Pointer.getPeer(other_file), (int)event_type.value());
	}
	protected native static void g_file_monitor_emit_event(@Ptr long monitor, @Ptr long child, @Ptr long other_file, int event_type);
	/**
	 * Original signature : <code>GType g_filename_completer_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilenamecompleter.h:20</i>
	 */
	public static native GIOLibrary.GType g_filename_completer_get_type();
	/**
	 * Original signature : <code>GFilenameCompleter* g_filename_completer_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilenamecompleter.h:22</i>
	 */
	public static Pointer<GIOLibrary.GFilenameCompleter > g_filename_completer_new() {
		return Pointer.pointerToAddress(g_filename_completer_new$2(), GIOLibrary.GFilenameCompleter.class);
	}
	@Ptr 
	protected native static long g_filename_completer_new$2();
	/**
	 * Original signature : <code>char* g_filename_completer_get_completion_suffix(GFilenameCompleter*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilenamecompleter.h:24</i>
	 */
	public static Pointer<Byte > g_filename_completer_get_completion_suffix(Pointer<GIOLibrary.GFilenameCompleter > completer, Pointer<Byte > initial_text) {
		return Pointer.pointerToAddress(g_filename_completer_get_completion_suffix(Pointer.getPeer(completer), Pointer.getPeer(initial_text)), Byte.class);
	}
	@Ptr 
	protected native static long g_filename_completer_get_completion_suffix(@Ptr long completer, @Ptr long initial_text);
	/**
	 * Original signature : <code>char** g_filename_completer_get_completions(GFilenameCompleter*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilenamecompleter.h:26</i>
	 */
	public static Pointer<Pointer<Byte > > g_filename_completer_get_completions(Pointer<GIOLibrary.GFilenameCompleter > completer, Pointer<Byte > initial_text) {
		return Pointer.pointerToAddress(g_filename_completer_get_completions(Pointer.getPeer(completer), Pointer.getPeer(initial_text)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_filename_completer_get_completions(@Ptr long completer, @Ptr long initial_text);
	/**
	 * Original signature : <code>void g_filename_completer_set_dirs_only(GFilenameCompleter*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfilenamecompleter.h:28</i>
	 */
	public static void g_filename_completer_set_dirs_only(Pointer<GIOLibrary.GFilenameCompleter > completer, GIOLibrary.gboolean dirs_only) {
		g_filename_completer_set_dirs_only(Pointer.getPeer(completer), dirs_only);
	}
	protected native static void g_filename_completer_set_dirs_only(@Ptr long completer, GIOLibrary.gboolean dirs_only);
	/**
	 * Original signature : <code>GType g_file_output_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileoutputstream.h:52</i>
	 */
	public static native GIOLibrary.GType g_file_output_stream_get_type();
	/**
	 * Original signature : <code>GFileInfo* g_file_output_stream_query_info(GFileOutputStream*, const char*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileoutputstream.h:54</i>
	 */
	public static Pointer<GIOLibrary.GFileInfo > g_file_output_stream_query_info(Pointer<GFileOutputStream > stream, Pointer<Byte > attributes, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_file_output_stream_query_info(Pointer.getPeer(stream), Pointer.getPeer(attributes), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GFileInfo.class);
	}
	@Ptr 
	protected native static long g_file_output_stream_query_info(@Ptr long stream, @Ptr long attributes, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_file_output_stream_query_info_async(GFileOutputStream*, const char*, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileoutputstream.h:56</i>
	 */
	public static void g_file_output_stream_query_info_async(Pointer<GFileOutputStream > stream, Pointer<Byte > attributes, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_file_output_stream_query_info_async(Pointer.getPeer(stream), Pointer.getPeer(attributes), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_file_output_stream_query_info_async(@Ptr long stream, @Ptr long attributes, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GFileInfo* g_file_output_stream_query_info_finish(GFileOutputStream*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileoutputstream.h:58</i>
	 */
	public static Pointer<GIOLibrary.GFileInfo > g_file_output_stream_query_info_finish(Pointer<GFileOutputStream > stream, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_file_output_stream_query_info_finish(Pointer.getPeer(stream), Pointer.getPeer(result), Pointer.getPeer(error)), GIOLibrary.GFileInfo.class);
	}
	@Ptr 
	protected native static long g_file_output_stream_query_info_finish(@Ptr long stream, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>char* g_file_output_stream_get_etag(GFileOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gfileoutputstream.h:60</i>
	 */
	public static Pointer<Byte > g_file_output_stream_get_etag(Pointer<GFileOutputStream > stream) {
		return Pointer.pointerToAddress(g_file_output_stream_get_etag(Pointer.getPeer(stream)), Byte.class);
	}
	@Ptr 
	protected native static long g_file_output_stream_get_etag(@Ptr long stream);
	/**
	 * Original signature : <code>GType g_inet_address_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:16</i>
	 */
	public static native GIOLibrary.GType g_inet_address_get_type();
	/**
	 * Original signature : <code>GInetAddress* g_inet_address_new_from_string(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:18</i>
	 */
	public static Pointer<GInetAddress > g_inet_address_new_from_string(Pointer<Byte > string) {
		return Pointer.pointerToAddress(g_inet_address_new_from_string(Pointer.getPeer(string)), GInetAddress.class);
	}
	@Ptr 
	protected native static long g_inet_address_new_from_string(@Ptr long string);
	/**
	 * Original signature : <code>GInetAddress* g_inet_address_new_from_bytes(const guint8*, GSocketFamily)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:20</i>
	 */
	public static Pointer<GInetAddress > g_inet_address_new_from_bytes(Pointer<Byte > bytes, IntValuedEnum<GIOLibrary.GSocketFamily > family) {
		return Pointer.pointerToAddress(g_inet_address_new_from_bytes(Pointer.getPeer(bytes), (int)family.value()), GInetAddress.class);
	}
	@Ptr 
	protected native static long g_inet_address_new_from_bytes(@Ptr long bytes, int family);
	/**
	 * Original signature : <code>GInetAddress* g_inet_address_new_loopback(GSocketFamily)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:22</i>
	 */
	public static Pointer<GInetAddress > g_inet_address_new_loopback(IntValuedEnum<GIOLibrary.GSocketFamily > family) {
		return Pointer.pointerToAddress(g_inet_address_new_loopback((int)family.value()), GInetAddress.class);
	}
	@Ptr 
	protected native static long g_inet_address_new_loopback(int family);
	/**
	 * Original signature : <code>GInetAddress* g_inet_address_new_any(GSocketFamily)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:24</i>
	 */
	public static Pointer<GInetAddress > g_inet_address_new_any(IntValuedEnum<GIOLibrary.GSocketFamily > family) {
		return Pointer.pointerToAddress(g_inet_address_new_any((int)family.value()), GInetAddress.class);
	}
	@Ptr 
	protected native static long g_inet_address_new_any(int family);
	/**
	 * Original signature : <code>gboolean g_inet_address_equal(GInetAddress*, GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:26</i>
	 */
	public static GIOLibrary.gboolean g_inet_address_equal(Pointer<GInetAddress > address, Pointer<GInetAddress > other_address) {
		return g_inet_address_equal(Pointer.getPeer(address), Pointer.getPeer(other_address));
	}
	protected native static GIOLibrary.gboolean g_inet_address_equal(@Ptr long address, @Ptr long other_address);
	/**
	 * Original signature : <code>gchar* g_inet_address_to_string(GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:28</i>
	 */
	public static Pointer<Byte > g_inet_address_to_string(Pointer<GInetAddress > address) {
		return Pointer.pointerToAddress(g_inet_address_to_string(Pointer.getPeer(address)), Byte.class);
	}
	@Ptr 
	protected native static long g_inet_address_to_string(@Ptr long address);
	/**
	 * Original signature : <code>guint8* g_inet_address_to_bytes(GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:30</i>
	 */
	public static Pointer<Byte > g_inet_address_to_bytes(Pointer<GInetAddress > address) {
		return Pointer.pointerToAddress(g_inet_address_to_bytes(Pointer.getPeer(address)), Byte.class);
	}
	@Ptr 
	protected native static long g_inet_address_to_bytes(@Ptr long address);
	/**
	 * Original signature : <code>gsize g_inet_address_get_native_size(GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:32</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_inet_address_get_native_size(Pointer<GInetAddress > address) {
		return g_inet_address_get_native_size(Pointer.getPeer(address));
	}
	@org.bridj.ann.CLong 
	protected native static long g_inet_address_get_native_size(@Ptr long address);
	/**
	 * Original signature : <code>GSocketFamily g_inet_address_get_family(GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:34</i>
	 */
	public static IntValuedEnum<GIOLibrary.GSocketFamily > g_inet_address_get_family(Pointer<GInetAddress > address) {
		return FlagSet.fromValue(g_inet_address_get_family(Pointer.getPeer(address)), GIOLibrary.GSocketFamily.class);
	}
	protected native static int g_inet_address_get_family(@Ptr long address);
	/**
	 * Original signature : <code>gboolean g_inet_address_get_is_any(GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:36</i>
	 */
	public static GIOLibrary.gboolean g_inet_address_get_is_any(Pointer<GInetAddress > address) {
		return g_inet_address_get_is_any(Pointer.getPeer(address));
	}
	protected native static GIOLibrary.gboolean g_inet_address_get_is_any(@Ptr long address);
	/**
	 * Original signature : <code>gboolean g_inet_address_get_is_loopback(GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:38</i>
	 */
	public static GIOLibrary.gboolean g_inet_address_get_is_loopback(Pointer<GInetAddress > address) {
		return g_inet_address_get_is_loopback(Pointer.getPeer(address));
	}
	protected native static GIOLibrary.gboolean g_inet_address_get_is_loopback(@Ptr long address);
	/**
	 * Original signature : <code>gboolean g_inet_address_get_is_link_local(GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:40</i>
	 */
	public static GIOLibrary.gboolean g_inet_address_get_is_link_local(Pointer<GInetAddress > address) {
		return g_inet_address_get_is_link_local(Pointer.getPeer(address));
	}
	protected native static GIOLibrary.gboolean g_inet_address_get_is_link_local(@Ptr long address);
	/**
	 * Original signature : <code>gboolean g_inet_address_get_is_site_local(GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:42</i>
	 */
	public static GIOLibrary.gboolean g_inet_address_get_is_site_local(Pointer<GInetAddress > address) {
		return g_inet_address_get_is_site_local(Pointer.getPeer(address));
	}
	protected native static GIOLibrary.gboolean g_inet_address_get_is_site_local(@Ptr long address);
	/**
	 * Original signature : <code>gboolean g_inet_address_get_is_multicast(GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:44</i>
	 */
	public static GIOLibrary.gboolean g_inet_address_get_is_multicast(Pointer<GInetAddress > address) {
		return g_inet_address_get_is_multicast(Pointer.getPeer(address));
	}
	protected native static GIOLibrary.gboolean g_inet_address_get_is_multicast(@Ptr long address);
	/**
	 * Original signature : <code>gboolean g_inet_address_get_is_mc_global(GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:46</i>
	 */
	public static GIOLibrary.gboolean g_inet_address_get_is_mc_global(Pointer<GInetAddress > address) {
		return g_inet_address_get_is_mc_global(Pointer.getPeer(address));
	}
	protected native static GIOLibrary.gboolean g_inet_address_get_is_mc_global(@Ptr long address);
	/**
	 * Original signature : <code>gboolean g_inet_address_get_is_mc_link_local(GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:48</i>
	 */
	public static GIOLibrary.gboolean g_inet_address_get_is_mc_link_local(Pointer<GInetAddress > address) {
		return g_inet_address_get_is_mc_link_local(Pointer.getPeer(address));
	}
	protected native static GIOLibrary.gboolean g_inet_address_get_is_mc_link_local(@Ptr long address);
	/**
	 * Original signature : <code>gboolean g_inet_address_get_is_mc_node_local(GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:50</i>
	 */
	public static GIOLibrary.gboolean g_inet_address_get_is_mc_node_local(Pointer<GInetAddress > address) {
		return g_inet_address_get_is_mc_node_local(Pointer.getPeer(address));
	}
	protected native static GIOLibrary.gboolean g_inet_address_get_is_mc_node_local(@Ptr long address);
	/**
	 * Original signature : <code>gboolean g_inet_address_get_is_mc_org_local(GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:52</i>
	 */
	public static GIOLibrary.gboolean g_inet_address_get_is_mc_org_local(Pointer<GInetAddress > address) {
		return g_inet_address_get_is_mc_org_local(Pointer.getPeer(address));
	}
	protected native static GIOLibrary.gboolean g_inet_address_get_is_mc_org_local(@Ptr long address);
	/**
	 * Original signature : <code>gboolean g_inet_address_get_is_mc_site_local(GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddress.h:54</i>
	 */
	public static GIOLibrary.gboolean g_inet_address_get_is_mc_site_local(Pointer<GInetAddress > address) {
		return g_inet_address_get_is_mc_site_local(Pointer.getPeer(address));
	}
	protected native static GIOLibrary.gboolean g_inet_address_get_is_mc_site_local(@Ptr long address);
	/**
	 * Original signature : <code>GType g_inet_address_mask_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddressmask.h:12</i>
	 */
	public static native GIOLibrary.GType g_inet_address_mask_get_type();
	/**
	 * Original signature : <code>GInetAddressMask* g_inet_address_mask_new(GInetAddress*, guint, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddressmask.h:14</i>
	 */
	public static Pointer<GInetAddressMask > g_inet_address_mask_new(Pointer<GInetAddress > addr, int length, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_inet_address_mask_new(Pointer.getPeer(addr), length, Pointer.getPeer(error)), GInetAddressMask.class);
	}
	@Ptr 
	protected native static long g_inet_address_mask_new(@Ptr long addr, int length, @Ptr long error);
	/**
	 * Original signature : <code>GInetAddressMask* g_inet_address_mask_new_from_string(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddressmask.h:16</i>
	 */
	public static Pointer<GInetAddressMask > g_inet_address_mask_new_from_string(Pointer<Byte > mask_string, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_inet_address_mask_new_from_string(Pointer.getPeer(mask_string), Pointer.getPeer(error)), GInetAddressMask.class);
	}
	@Ptr 
	protected native static long g_inet_address_mask_new_from_string(@Ptr long mask_string, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_inet_address_mask_to_string(GInetAddressMask*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddressmask.h:18</i>
	 */
	public static Pointer<Byte > g_inet_address_mask_to_string(Pointer<GInetAddressMask > mask) {
		return Pointer.pointerToAddress(g_inet_address_mask_to_string(Pointer.getPeer(mask)), Byte.class);
	}
	@Ptr 
	protected native static long g_inet_address_mask_to_string(@Ptr long mask);
	/**
	 * Original signature : <code>GSocketFamily g_inet_address_mask_get_family(GInetAddressMask*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddressmask.h:20</i>
	 */
	public static IntValuedEnum<GIOLibrary.GSocketFamily > g_inet_address_mask_get_family(Pointer<GInetAddressMask > mask) {
		return FlagSet.fromValue(g_inet_address_mask_get_family(Pointer.getPeer(mask)), GIOLibrary.GSocketFamily.class);
	}
	protected native static int g_inet_address_mask_get_family(@Ptr long mask);
	/**
	 * Original signature : <code>GInetAddress* g_inet_address_mask_get_address(GInetAddressMask*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddressmask.h:22</i>
	 */
	public static Pointer<GInetAddress > g_inet_address_mask_get_address(Pointer<GInetAddressMask > mask) {
		return Pointer.pointerToAddress(g_inet_address_mask_get_address(Pointer.getPeer(mask)), GInetAddress.class);
	}
	@Ptr 
	protected native static long g_inet_address_mask_get_address(@Ptr long mask);
	/**
	 * Original signature : <code>guint g_inet_address_mask_get_length(GInetAddressMask*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddressmask.h:24</i>
	 */
	public static int g_inet_address_mask_get_length(Pointer<GInetAddressMask > mask) {
		return g_inet_address_mask_get_length(Pointer.getPeer(mask));
	}
	protected native static int g_inet_address_mask_get_length(@Ptr long mask);
	/**
	 * Original signature : <code>gboolean g_inet_address_mask_matches(GInetAddressMask*, GInetAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddressmask.h:26</i>
	 */
	public static GIOLibrary.gboolean g_inet_address_mask_matches(Pointer<GInetAddressMask > mask, Pointer<GInetAddress > address) {
		return g_inet_address_mask_matches(Pointer.getPeer(mask), Pointer.getPeer(address));
	}
	protected native static GIOLibrary.gboolean g_inet_address_mask_matches(@Ptr long mask, @Ptr long address);
	/**
	 * Original signature : <code>gboolean g_inet_address_mask_equal(GInetAddressMask*, GInetAddressMask*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetaddressmask.h:28</i>
	 */
	public static GIOLibrary.gboolean g_inet_address_mask_equal(Pointer<GInetAddressMask > mask, Pointer<GInetAddressMask > mask2) {
		return g_inet_address_mask_equal(Pointer.getPeer(mask), Pointer.getPeer(mask2));
	}
	protected native static GIOLibrary.gboolean g_inet_address_mask_equal(@Ptr long mask, @Ptr long mask2);
	/**
	 * Original signature : <code>GType g_socket_address_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketaddress.h:18</i>
	 */
	public static native GIOLibrary.GType g_socket_address_get_type();
	/**
	 * Original signature : <code>GSocketFamily g_socket_address_get_family(GSocketAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketaddress.h:20</i>
	 */
	public static IntValuedEnum<GIOLibrary.GSocketFamily > g_socket_address_get_family(Pointer<GSocketAddress > address) {
		return FlagSet.fromValue(g_socket_address_get_family(Pointer.getPeer(address)), GIOLibrary.GSocketFamily.class);
	}
	protected native static int g_socket_address_get_family(@Ptr long address);
	/**
	 * Original signature : <code>GSocketAddress* g_socket_address_new_from_native(gpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketaddress.h:22</i>
	 */
	public static Pointer<GSocketAddress > g_socket_address_new_from_native(GIOLibrary.gpointer native$, @org.bridj.ann.CLong long len) {
		return Pointer.pointerToAddress(g_socket_address_new_from_native$2(native$, len), GSocketAddress.class);
	}
	@Ptr 
	protected native static long g_socket_address_new_from_native$2(GIOLibrary.gpointer native$, @org.bridj.ann.CLong long len);
	/**
	 * Original signature : <code>gboolean g_socket_address_to_native(GSocketAddress*, gpointer, gsize, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketaddress.h:24</i>
	 */
	public static GIOLibrary.gboolean g_socket_address_to_native(Pointer<GSocketAddress > address, GIOLibrary.gpointer dest, @org.bridj.ann.CLong long destlen, Pointer<Pointer > error) {
		return g_socket_address_to_native(Pointer.getPeer(address), dest, destlen, Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_address_to_native(@Ptr long address, GIOLibrary.gpointer dest, @org.bridj.ann.CLong long destlen, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_socket_address_get_native_size(GSocketAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketaddress.h:26</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_socket_address_get_native_size(Pointer<GSocketAddress > address) {
		return g_socket_address_get_native_size(Pointer.getPeer(address));
	}
	@org.bridj.ann.CLong 
	protected native static long g_socket_address_get_native_size(@Ptr long address);
	/**
	 * Original signature : <code>GType g_inet_socket_address_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetsocketaddress.h:12</i>
	 */
	public static native GIOLibrary.GType g_inet_socket_address_get_type();
	/**
	 * Original signature : <code>GSocketAddress* g_inet_socket_address_new(GInetAddress*, guint16)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetsocketaddress.h:14</i>
	 */
	public static Pointer<GSocketAddress > g_inet_socket_address_new(Pointer<GInetAddress > address, short port) {
		return Pointer.pointerToAddress(g_inet_socket_address_new(Pointer.getPeer(address), port), GSocketAddress.class);
	}
	@Ptr 
	protected native static long g_inet_socket_address_new(@Ptr long address, short port);
	/**
	 * Original signature : <code>GInetAddress* g_inet_socket_address_get_address(GInetSocketAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetsocketaddress.h:16</i>
	 */
	public static Pointer<GInetAddress > g_inet_socket_address_get_address(Pointer<GInetSocketAddress > address) {
		return Pointer.pointerToAddress(g_inet_socket_address_get_address(Pointer.getPeer(address)), GInetAddress.class);
	}
	@Ptr 
	protected native static long g_inet_socket_address_get_address(@Ptr long address);
	/**
	 * Original signature : <code>guint16 g_inet_socket_address_get_port(GInetSocketAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetsocketaddress.h:18</i>
	 */
	public static short g_inet_socket_address_get_port(Pointer<GInetSocketAddress > address) {
		return g_inet_socket_address_get_port(Pointer.getPeer(address));
	}
	protected native static short g_inet_socket_address_get_port(@Ptr long address);
	/**
	 * Original signature : <code>guint32 g_inet_socket_address_get_flowinfo(GInetSocketAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetsocketaddress.h:20</i>
	 */
	public static int g_inet_socket_address_get_flowinfo(Pointer<GInetSocketAddress > address) {
		return g_inet_socket_address_get_flowinfo(Pointer.getPeer(address));
	}
	protected native static int g_inet_socket_address_get_flowinfo(@Ptr long address);
	/**
	 * Original signature : <code>guint32 g_inet_socket_address_get_scope_id(GInetSocketAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/ginetsocketaddress.h:22</i>
	 */
	public static int g_inet_socket_address_get_scope_id(Pointer<GInetSocketAddress > address) {
		return g_inet_socket_address_get_scope_id(Pointer.getPeer(address));
	}
	protected native static int g_inet_socket_address_get_scope_id(@Ptr long address);
	/**
	 * enumerations from "gioenums.h"<br>
	 * Original signature : <code>GType g_app_info_create_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:5</i>
	 */
	public static native GIOLibrary.GType g_app_info_create_flags_get_type();
	/**
	 * Original signature : <code>GType g_converter_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:7</i>
	 */
	public static native GIOLibrary.GType g_converter_flags_get_type();
	/**
	 * Original signature : <code>GType g_converter_result_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:9</i>
	 */
	public static native GIOLibrary.GType g_converter_result_get_type();
	/**
	 * Original signature : <code>GType g_data_stream_byte_order_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:11</i>
	 */
	public static native GIOLibrary.GType g_data_stream_byte_order_get_type();
	/**
	 * Original signature : <code>GType g_data_stream_newline_type_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:13</i>
	 */
	public static native GIOLibrary.GType g_data_stream_newline_type_get_type();
	/**
	 * Original signature : <code>GType g_file_attribute_type_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:15</i>
	 */
	public static native GIOLibrary.GType g_file_attribute_type_get_type();
	/**
	 * Original signature : <code>GType g_file_attribute_info_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:17</i>
	 */
	public static native GIOLibrary.GType g_file_attribute_info_flags_get_type();
	/**
	 * Original signature : <code>GType g_file_attribute_status_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:19</i>
	 */
	public static native GIOLibrary.GType g_file_attribute_status_get_type();
	/**
	 * Original signature : <code>GType g_file_query_info_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:21</i>
	 */
	public static native GIOLibrary.GType g_file_query_info_flags_get_type();
	/**
	 * Original signature : <code>GType g_file_create_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:23</i>
	 */
	public static native GIOLibrary.GType g_file_create_flags_get_type();
	/**
	 * Original signature : <code>GType g_file_measure_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:25</i>
	 */
	public static native GIOLibrary.GType g_file_measure_flags_get_type();
	/**
	 * Original signature : <code>GType g_mount_mount_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:27</i>
	 */
	public static native GIOLibrary.GType g_mount_mount_flags_get_type();
	/**
	 * Original signature : <code>GType g_mount_unmount_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:29</i>
	 */
	public static native GIOLibrary.GType g_mount_unmount_flags_get_type();
	/**
	 * Original signature : <code>GType g_drive_start_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:31</i>
	 */
	public static native GIOLibrary.GType g_drive_start_flags_get_type();
	/**
	 * Original signature : <code>GType g_drive_start_stop_type_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:33</i>
	 */
	public static native GIOLibrary.GType g_drive_start_stop_type_get_type();
	/**
	 * Original signature : <code>GType g_file_copy_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:35</i>
	 */
	public static native GIOLibrary.GType g_file_copy_flags_get_type();
	/**
	 * Original signature : <code>GType g_file_monitor_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:37</i>
	 */
	public static native GIOLibrary.GType g_file_monitor_flags_get_type();
	/**
	 * Original signature : <code>GType g_file_type_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:39</i>
	 */
	public static native GIOLibrary.GType g_file_type_get_type();
	/**
	 * Original signature : <code>GType g_filesystem_preview_type_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:41</i>
	 */
	public static native GIOLibrary.GType g_filesystem_preview_type_get_type();
	/**
	 * Original signature : <code>GType g_file_monitor_event_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:43</i>
	 */
	public static native GIOLibrary.GType g_file_monitor_event_get_type();
	/**
	 * Original signature : <code>GType g_io_error_enum_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:45</i>
	 */
	public static native GIOLibrary.GType g_io_error_enum_get_type();
	/**
	 * Original signature : <code>GType g_ask_password_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:47</i>
	 */
	public static native GIOLibrary.GType g_ask_password_flags_get_type();
	/**
	 * Original signature : <code>GType g_password_save_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:49</i>
	 */
	public static native GIOLibrary.GType g_password_save_get_type();
	/**
	 * Original signature : <code>GType g_mount_operation_result_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:51</i>
	 */
	public static native GIOLibrary.GType g_mount_operation_result_get_type();
	/**
	 * Original signature : <code>GType g_output_stream_splice_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:53</i>
	 */
	public static native GIOLibrary.GType g_output_stream_splice_flags_get_type();
	/**
	 * Original signature : <code>GType g_io_stream_splice_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:55</i>
	 */
	public static native GIOLibrary.GType g_io_stream_splice_flags_get_type();
	/**
	 * Original signature : <code>GType g_emblem_origin_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:57</i>
	 */
	public static native GIOLibrary.GType g_emblem_origin_get_type();
	/**
	 * Original signature : <code>GType g_resolver_error_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:59</i>
	 */
	public static native GIOLibrary.GType g_resolver_error_get_type();
	/**
	 * Original signature : <code>GType g_resolver_record_type_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:61</i>
	 */
	public static native GIOLibrary.GType g_resolver_record_type_get_type();
	/**
	 * Original signature : <code>GType g_resource_error_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:63</i>
	 */
	public static native GIOLibrary.GType g_resource_error_get_type();
	/**
	 * Original signature : <code>GType g_resource_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:65</i>
	 */
	public static native GIOLibrary.GType g_resource_flags_get_type();
	/**
	 * Original signature : <code>GType g_resource_lookup_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:67</i>
	 */
	public static native GIOLibrary.GType g_resource_lookup_flags_get_type();
	/**
	 * Original signature : <code>GType g_socket_family_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:69</i>
	 */
	public static native GIOLibrary.GType g_socket_family_get_type();
	/**
	 * Original signature : <code>GType g_socket_type_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:71</i>
	 */
	public static native GIOLibrary.GType g_socket_type_get_type();
	/**
	 * Original signature : <code>GType g_socket_msg_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:73</i>
	 */
	public static native GIOLibrary.GType g_socket_msg_flags_get_type();
	/**
	 * Original signature : <code>GType g_socket_protocol_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:75</i>
	 */
	public static native GIOLibrary.GType g_socket_protocol_get_type();
	/**
	 * Original signature : <code>GType g_zlib_compressor_format_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:77</i>
	 */
	public static native GIOLibrary.GType g_zlib_compressor_format_get_type();
	/**
	 * Original signature : <code>GType g_unix_socket_address_type_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:79</i>
	 */
	public static native GIOLibrary.GType g_unix_socket_address_type_get_type();
	/**
	 * Original signature : <code>GType g_bus_type_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:81</i>
	 */
	public static native GIOLibrary.GType g_bus_type_get_type();
	/**
	 * Original signature : <code>GType g_bus_name_owner_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:83</i>
	 */
	public static native GIOLibrary.GType g_bus_name_owner_flags_get_type();
	/**
	 * Original signature : <code>GType g_bus_name_watcher_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:85</i>
	 */
	public static native GIOLibrary.GType g_bus_name_watcher_flags_get_type();
	/**
	 * Original signature : <code>GType g_dbus_proxy_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:87</i>
	 */
	public static native GIOLibrary.GType g_dbus_proxy_flags_get_type();
	/**
	 * Original signature : <code>GType g_dbus_error_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:89</i>
	 */
	public static native GIOLibrary.GType g_dbus_error_get_type();
	/**
	 * Original signature : <code>GType g_dbus_connection_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:91</i>
	 */
	public static native GIOLibrary.GType g_dbus_connection_flags_get_type();
	/**
	 * Original signature : <code>GType g_dbus_capability_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:93</i>
	 */
	public static native GIOLibrary.GType g_dbus_capability_flags_get_type();
	/**
	 * Original signature : <code>GType g_dbus_call_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:95</i>
	 */
	public static native GIOLibrary.GType g_dbus_call_flags_get_type();
	/**
	 * Original signature : <code>GType g_dbus_message_type_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:97</i>
	 */
	public static native GIOLibrary.GType g_dbus_message_type_get_type();
	/**
	 * Original signature : <code>GType g_dbus_message_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:99</i>
	 */
	public static native GIOLibrary.GType g_dbus_message_flags_get_type();
	/**
	 * Original signature : <code>GType g_dbus_message_header_field_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:101</i>
	 */
	public static native GIOLibrary.GType g_dbus_message_header_field_get_type();
	/**
	 * Original signature : <code>GType g_dbus_property_info_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:103</i>
	 */
	public static native GIOLibrary.GType g_dbus_property_info_flags_get_type();
	/**
	 * Original signature : <code>GType g_dbus_subtree_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:105</i>
	 */
	public static native GIOLibrary.GType g_dbus_subtree_flags_get_type();
	/**
	 * Original signature : <code>GType g_dbus_server_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:107</i>
	 */
	public static native GIOLibrary.GType g_dbus_server_flags_get_type();
	/**
	 * Original signature : <code>GType g_dbus_signal_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:109</i>
	 */
	public static native GIOLibrary.GType g_dbus_signal_flags_get_type();
	/**
	 * Original signature : <code>GType g_dbus_send_message_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:111</i>
	 */
	public static native GIOLibrary.GType g_dbus_send_message_flags_get_type();
	/**
	 * Original signature : <code>GType g_credentials_type_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:113</i>
	 */
	public static native GIOLibrary.GType g_credentials_type_get_type();
	/**
	 * Original signature : <code>GType g_dbus_message_byte_order_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:115</i>
	 */
	public static native GIOLibrary.GType g_dbus_message_byte_order_get_type();
	/**
	 * Original signature : <code>GType g_application_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:117</i>
	 */
	public static native GIOLibrary.GType g_application_flags_get_type();
	/**
	 * Original signature : <code>GType g_tls_error_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:119</i>
	 */
	public static native GIOLibrary.GType g_tls_error_get_type();
	/**
	 * Original signature : <code>GType g_tls_certificate_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:121</i>
	 */
	public static native GIOLibrary.GType g_tls_certificate_flags_get_type();
	/**
	 * Original signature : <code>GType g_tls_authentication_mode_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:123</i>
	 */
	public static native GIOLibrary.GType g_tls_authentication_mode_get_type();
	/**
	 * Original signature : <code>GType g_tls_rehandshake_mode_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:125</i>
	 */
	public static native GIOLibrary.GType g_tls_rehandshake_mode_get_type();
	/**
	 * Original signature : <code>GType g_tls_password_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:127</i>
	 */
	public static native GIOLibrary.GType g_tls_password_flags_get_type();
	/**
	 * Original signature : <code>GType g_tls_interaction_result_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:129</i>
	 */
	public static native GIOLibrary.GType g_tls_interaction_result_get_type();
	/**
	 * Original signature : <code>GType g_dbus_interface_skeleton_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:131</i>
	 */
	public static native GIOLibrary.GType g_dbus_interface_skeleton_flags_get_type();
	/**
	 * Original signature : <code>GType g_dbus_object_manager_client_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:133</i>
	 */
	public static native GIOLibrary.GType g_dbus_object_manager_client_flags_get_type();
	/**
	 * Original signature : <code>GType g_tls_database_verify_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:135</i>
	 */
	public static native GIOLibrary.GType g_tls_database_verify_flags_get_type();
	/**
	 * Original signature : <code>GType g_tls_database_lookup_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:137</i>
	 */
	public static native GIOLibrary.GType g_tls_database_lookup_flags_get_type();
	/**
	 * Original signature : <code>GType g_io_module_scope_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:139</i>
	 */
	public static native GIOLibrary.GType g_io_module_scope_flags_get_type();
	/**
	 * Original signature : <code>GType g_socket_client_event_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:141</i>
	 */
	public static native GIOLibrary.GType g_socket_client_event_get_type();
	/**
	 * Original signature : <code>GType g_test_dbus_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:143</i>
	 */
	public static native GIOLibrary.GType g_test_dbus_flags_get_type();
	/**
	 * enumerations from "gsettings.h"<br>
	 * Original signature : <code>GType g_settings_bind_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioenumtypes.h:148</i>
	 */
	public static native GIOLibrary.GType g_settings_bind_flags_get_type();
	/**
	 * Original signature : <code>GIOModuleScope* g_io_module_scope_new(GIOModuleScopeFlags)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:3</i>
	 */
	public static Pointer<GIOLibrary.GIOModuleScope > g_io_module_scope_new(IntValuedEnum<GIOLibrary.GIOModuleScopeFlags > flags) {
		return Pointer.pointerToAddress(g_io_module_scope_new((int)flags.value()), GIOLibrary.GIOModuleScope.class);
	}
	@Ptr 
	protected native static long g_io_module_scope_new(int flags);
	/**
	 * Original signature : <code>void g_io_module_scope_free(GIOModuleScope*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:5</i>
	 */
	public static void g_io_module_scope_free(Pointer<GIOLibrary.GIOModuleScope > scope) {
		g_io_module_scope_free(Pointer.getPeer(scope));
	}
	protected native static void g_io_module_scope_free(@Ptr long scope);
	/**
	 * Original signature : <code>void g_io_module_scope_block(GIOModuleScope*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:7</i>
	 */
	public static void g_io_module_scope_block(Pointer<GIOLibrary.GIOModuleScope > scope, Pointer<Byte > basename) {
		g_io_module_scope_block(Pointer.getPeer(scope), Pointer.getPeer(basename));
	}
	protected native static void g_io_module_scope_block(@Ptr long scope, @Ptr long basename);
	/**
	 * Original signature : <code>GType g_io_module_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:14</i>
	 */
	public static native GIOLibrary.GType g_io_module_get_type();
	/**
	 * Original signature : <code>GIOModule* g_io_module_new(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:16</i>
	 */
	public static Pointer<GIOLibrary.GIOModule > g_io_module_new(Pointer<Byte > filename) {
		return Pointer.pointerToAddress(g_io_module_new(Pointer.getPeer(filename)), GIOLibrary.GIOModule.class);
	}
	@Ptr 
	protected native static long g_io_module_new(@Ptr long filename);
	/**
	 * Original signature : <code>void g_io_modules_scan_all_in_directory(const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:18</i>
	 */
	public static void g_io_modules_scan_all_in_directory(Pointer<Byte > dirname) {
		g_io_modules_scan_all_in_directory(Pointer.getPeer(dirname));
	}
	protected native static void g_io_modules_scan_all_in_directory(@Ptr long dirname);
	/**
	 * Original signature : <code>GList* g_io_modules_load_all_in_directory(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:20</i>
	 */
	public static Pointer g_io_modules_load_all_in_directory(Pointer<Byte > dirname) {
		return Pointer.pointerToAddress(g_io_modules_load_all_in_directory(Pointer.getPeer(dirname)));
	}
	@Ptr 
	protected native static long g_io_modules_load_all_in_directory(@Ptr long dirname);
	/**
	 * Original signature : <code>void g_io_modules_scan_all_in_directory_with_scope(const gchar*, GIOModuleScope*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:22</i>
	 */
	public static void g_io_modules_scan_all_in_directory_with_scope(Pointer<Byte > dirname, Pointer<GIOLibrary.GIOModuleScope > scope) {
		g_io_modules_scan_all_in_directory_with_scope(Pointer.getPeer(dirname), Pointer.getPeer(scope));
	}
	protected native static void g_io_modules_scan_all_in_directory_with_scope(@Ptr long dirname, @Ptr long scope);
	/**
	 * Original signature : <code>GList* g_io_modules_load_all_in_directory_with_scope(const gchar*, GIOModuleScope*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:24</i>
	 */
	public static Pointer g_io_modules_load_all_in_directory_with_scope(Pointer<Byte > dirname, Pointer<GIOLibrary.GIOModuleScope > scope) {
		return Pointer.pointerToAddress(g_io_modules_load_all_in_directory_with_scope(Pointer.getPeer(dirname), Pointer.getPeer(scope)));
	}
	@Ptr 
	protected native static long g_io_modules_load_all_in_directory_with_scope(@Ptr long dirname, @Ptr long scope);
	/**
	 * Original signature : <code>GIOExtensionPoint* g_io_extension_point_register(const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:26</i>
	 */
	public static Pointer<GIOLibrary.GIOExtensionPoint > g_io_extension_point_register(Pointer<Byte > name) {
		return Pointer.pointerToAddress(g_io_extension_point_register(Pointer.getPeer(name)), GIOLibrary.GIOExtensionPoint.class);
	}
	@Ptr 
	protected native static long g_io_extension_point_register(@Ptr long name);
	/**
	 * Original signature : <code>GIOExtensionPoint* g_io_extension_point_lookup(const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:28</i>
	 */
	public static Pointer<GIOLibrary.GIOExtensionPoint > g_io_extension_point_lookup(Pointer<Byte > name) {
		return Pointer.pointerToAddress(g_io_extension_point_lookup(Pointer.getPeer(name)), GIOLibrary.GIOExtensionPoint.class);
	}
	@Ptr 
	protected native static long g_io_extension_point_lookup(@Ptr long name);
	/**
	 * Original signature : <code>void g_io_extension_point_set_required_type(GIOExtensionPoint*, GType)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:30</i>
	 */
	public static void g_io_extension_point_set_required_type(Pointer<GIOLibrary.GIOExtensionPoint > extension_point, GIOLibrary.GType type) {
		g_io_extension_point_set_required_type(Pointer.getPeer(extension_point), type);
	}
	protected native static void g_io_extension_point_set_required_type(@Ptr long extension_point, GIOLibrary.GType type);
	/**
	 * Original signature : <code>GType g_io_extension_point_get_required_type(GIOExtensionPoint*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:32</i>
	 */
	public static GIOLibrary.GType g_io_extension_point_get_required_type(Pointer<GIOLibrary.GIOExtensionPoint > extension_point) {
		return g_io_extension_point_get_required_type(Pointer.getPeer(extension_point));
	}
	protected native static GIOLibrary.GType g_io_extension_point_get_required_type(@Ptr long extension_point);
	/**
	 * Original signature : <code>GList* g_io_extension_point_get_extensions(GIOExtensionPoint*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:34</i>
	 */
	public static Pointer g_io_extension_point_get_extensions(Pointer<GIOLibrary.GIOExtensionPoint > extension_point) {
		return Pointer.pointerToAddress(g_io_extension_point_get_extensions(Pointer.getPeer(extension_point)));
	}
	@Ptr 
	protected native static long g_io_extension_point_get_extensions(@Ptr long extension_point);
	/**
	 * Original signature : <code>GIOExtension* g_io_extension_point_get_extension_by_name(GIOExtensionPoint*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:36</i>
	 */
	public static Pointer<GIOLibrary.GIOExtension > g_io_extension_point_get_extension_by_name(Pointer<GIOLibrary.GIOExtensionPoint > extension_point, Pointer<Byte > name) {
		return Pointer.pointerToAddress(g_io_extension_point_get_extension_by_name(Pointer.getPeer(extension_point), Pointer.getPeer(name)), GIOLibrary.GIOExtension.class);
	}
	@Ptr 
	protected native static long g_io_extension_point_get_extension_by_name(@Ptr long extension_point, @Ptr long name);
	/**
	 * Original signature : <code>GIOExtension* g_io_extension_point_implement(const char*, GType, const char*, gint)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:38</i>
	 */
	public static Pointer<GIOLibrary.GIOExtension > g_io_extension_point_implement(Pointer<Byte > extension_point_name, GIOLibrary.GType type, Pointer<Byte > extension_name, int priority) {
		return Pointer.pointerToAddress(g_io_extension_point_implement(Pointer.getPeer(extension_point_name), type, Pointer.getPeer(extension_name), priority), GIOLibrary.GIOExtension.class);
	}
	@Ptr 
	protected native static long g_io_extension_point_implement(@Ptr long extension_point_name, GIOLibrary.GType type, @Ptr long extension_name, int priority);
	/**
	 * Original signature : <code>GType g_io_extension_get_type(GIOExtension*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:40</i>
	 */
	public static GIOLibrary.GType g_io_extension_get_type(Pointer<GIOLibrary.GIOExtension > extension) {
		return g_io_extension_get_type(Pointer.getPeer(extension));
	}
	protected native static GIOLibrary.GType g_io_extension_get_type(@Ptr long extension);
	/**
	 * Original signature : <code>char* g_io_extension_get_name(GIOExtension*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:42</i>
	 */
	public static Pointer<Byte > g_io_extension_get_name(Pointer<GIOLibrary.GIOExtension > extension) {
		return Pointer.pointerToAddress(g_io_extension_get_name(Pointer.getPeer(extension)), Byte.class);
	}
	@Ptr 
	protected native static long g_io_extension_get_name(@Ptr long extension);
	/**
	 * Original signature : <code>gint g_io_extension_get_priority(GIOExtension*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:44</i>
	 */
	public static int g_io_extension_get_priority(Pointer<GIOLibrary.GIOExtension > extension) {
		return g_io_extension_get_priority(Pointer.getPeer(extension));
	}
	protected native static int g_io_extension_get_priority(@Ptr long extension);
	/**
	 * Original signature : <code>GTypeClass* g_io_extension_ref_class(GIOExtension*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:46</i>
	 */
	public static Pointer g_io_extension_ref_class(Pointer<GIOLibrary.GIOExtension > extension) {
		return Pointer.pointerToAddress(g_io_extension_ref_class(Pointer.getPeer(extension)));
	}
	@Ptr 
	protected native static long g_io_extension_ref_class(@Ptr long extension);
	/**
	 * g_io_module_load:<br>
	 * @module: a #GIOModule.<br>
	 * * Required API for GIO modules to implement.<br>
	 * This function is ran after the module has been loaded into GIO,<br>
	 * to initialize the module.<br>
	 * Original signature : <code>void g_io_module_load(GIOModule*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:55</i>
	 */
	public static void g_io_module_load(Pointer<GIOLibrary.GIOModule > module) {
		g_io_module_load(Pointer.getPeer(module));
	}
	protected native static void g_io_module_load(@Ptr long module);
	/**
	 * g_io_module_unload:<br>
	 * @module: a #GIOModule.<br>
	 * * Required API for GIO modules to implement.<br>
	 * This function is ran when the module is being unloaded from GIO,<br>
	 * to finalize the module.<br>
	 * Original signature : <code>void g_io_module_unload(GIOModule*)</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:64</i>
	 */
	public static void g_io_module_unload(Pointer<GIOLibrary.GIOModule > module) {
		g_io_module_unload(Pointer.getPeer(module));
	}
	protected native static void g_io_module_unload(@Ptr long module);
	/**
	 * g_io_module_query:<br>
	 * * Optional API for GIO modules to implement.<br>
	 * * Should return a list of all the extension points that may be<br>
	 * implemented in this module.<br>
	 * * This method will not be called in normal use, however it may be<br>
	 * called when probing existing modules and recording which extension<br>
	 * points that this model is used for. This means we won't have to<br>
	 * load and initialze this module unless its needed.<br>
	 * * If this function is not implemented by the module the module will<br>
	 * always be loaded, initialized and then unloaded on application startup<br>
	 * so that it can register its extension points during init.<br>
	 * * Note that a module need not actually implement all the extension points<br>
	 * that g_io_module_query returns, since the exact list of extension may<br>
	 * depend on runtime issues. However all extension points actually implemented<br>
	 * must be returned by g_io_module_query() (if defined).<br>
	 * * When installing a module that implements g_io_module_query you must<br>
	 * run gio-querymodules in order to build the cache files required for<br>
	 * lazy loading.<br>
	 * * Returns: (transfer full): A %NULL-terminated array of strings, listing the supported<br>
	 *     extension points of the module. The array must be suitable for<br>
	 *     freeing with g_strfreev().<br>
	 * * Since: 2.24<br>
	 * Original signature : <code>char** g_io_module_query()</code><br>
	 * <i>native declaration : glib-2.0/gio/giomodule.h:90</i>
	 */
	public static Pointer<Pointer<Byte > > g_io_module_query() {
		return Pointer.pointerToAddress(g_io_module_query$2(), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_io_module_query$2();
	/**
	 * Original signature : <code>void g_io_scheduler_push_job(GIOSchedulerJobFunc, gpointer, GDestroyNotify, gint, GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gioscheduler.h:2</i>
	 */
	public static void g_io_scheduler_push_job(Pointer<GIOLibrary.GIOSchedulerJobFunc > job_func, GIOLibrary.gpointer user_data, GIOLibrary.GDestroyNotify notify$, int io_priority, Pointer<GCancellable > cancellable) {
		g_io_scheduler_push_job(Pointer.getPeer(job_func), user_data, Pointer.getPeer(notify$), io_priority, Pointer.getPeer(cancellable));
	}
	protected native static void g_io_scheduler_push_job(@Ptr long job_func, GIOLibrary.gpointer user_data, @Ptr long notify$, int io_priority, @Ptr long cancellable);
	/**
	 * Original signature : <code>void g_io_scheduler_cancel_all_jobs()</code><br>
	 * <i>native declaration : glib-2.0/gio/gioscheduler.h:4</i>
	 */
	public static native void g_io_scheduler_cancel_all_jobs();
	/**
	 * Original signature : <code>gboolean g_io_scheduler_job_send_to_mainloop(GIOSchedulerJob*, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gioscheduler.h:6</i>
	 */
	public static GIOLibrary.gboolean g_io_scheduler_job_send_to_mainloop(Pointer<GIOLibrary.GIOSchedulerJob > job, GIOLibrary.GSourceFunc func, GIOLibrary.gpointer user_data, GIOLibrary.GDestroyNotify notify$) {
		return g_io_scheduler_job_send_to_mainloop(Pointer.getPeer(job), Pointer.getPeer(func), user_data, Pointer.getPeer(notify$));
	}
	protected native static GIOLibrary.gboolean g_io_scheduler_job_send_to_mainloop(@Ptr long job, @Ptr long func, GIOLibrary.gpointer user_data, @Ptr long notify$);
	/**
	 * Original signature : <code>void g_io_scheduler_job_send_to_mainloop_async(GIOSchedulerJob*, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gioscheduler.h:8</i>
	 */
	public static void g_io_scheduler_job_send_to_mainloop_async(Pointer<GIOLibrary.GIOSchedulerJob > job, GIOLibrary.GSourceFunc func, GIOLibrary.gpointer user_data, GIOLibrary.GDestroyNotify notify$) {
		g_io_scheduler_job_send_to_mainloop_async(Pointer.getPeer(job), Pointer.getPeer(func), user_data, Pointer.getPeer(notify$));
	}
	protected native static void g_io_scheduler_job_send_to_mainloop_async(@Ptr long job, @Ptr long func, GIOLibrary.gpointer user_data, @Ptr long notify$);
	/**
	 * Original signature : <code>GType g_loadable_icon_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gloadableicon.h:25</i>
	 */
	public static native GIOLibrary.GType g_loadable_icon_get_type();
	/**
	 * Original signature : <code>GInputStream* g_loadable_icon_load(GLoadableIcon*, int, char**, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gloadableicon.h:27</i>
	 */
	public static Pointer<GInputStream > g_loadable_icon_load(Pointer<GIOLibrary.GLoadableIcon > icon, int size, Pointer<Pointer<Byte > > type, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_loadable_icon_load(Pointer.getPeer(icon), size, Pointer.getPeer(type), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GInputStream.class);
	}
	@Ptr 
	protected native static long g_loadable_icon_load(@Ptr long icon, int size, @Ptr long type, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_loadable_icon_load_async(GLoadableIcon*, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gloadableicon.h:29</i>
	 */
	public static void g_loadable_icon_load_async(Pointer<GIOLibrary.GLoadableIcon > icon, int size, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_loadable_icon_load_async(Pointer.getPeer(icon), size, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_loadable_icon_load_async(@Ptr long icon, int size, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GInputStream* g_loadable_icon_load_finish(GLoadableIcon*, GAsyncResult*, char**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gloadableicon.h:31</i>
	 */
	public static Pointer<GInputStream > g_loadable_icon_load_finish(Pointer<GIOLibrary.GLoadableIcon > icon, Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer<Byte > > type, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_loadable_icon_load_finish(Pointer.getPeer(icon), Pointer.getPeer(res), Pointer.getPeer(type), Pointer.getPeer(error)), GInputStream.class);
	}
	@Ptr 
	protected native static long g_loadable_icon_load_finish(@Ptr long icon, @Ptr long res, @Ptr long type, @Ptr long error);
	/**
	 * Original signature : <code>GType g_memory_input_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gmemoryinputstream.h:27</i>
	 */
	public static native GIOLibrary.GType g_memory_input_stream_get_type();
	/**
	 * Original signature : <code>GInputStream* g_memory_input_stream_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gmemoryinputstream.h:29</i>
	 */
	public static Pointer<GInputStream > g_memory_input_stream_new() {
		return Pointer.pointerToAddress(g_memory_input_stream_new$2(), GInputStream.class);
	}
	@Ptr 
	protected native static long g_memory_input_stream_new$2();
	/**
	 * Original signature : <code>GInputStream* g_memory_input_stream_new_from_data(const void*, gssize, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmemoryinputstream.h:31</i>
	 */
	public static Pointer<GInputStream > g_memory_input_stream_new_from_data(Pointer<? > data, @org.bridj.ann.CLong long len, GIOLibrary.GDestroyNotify destroy) {
		return Pointer.pointerToAddress(g_memory_input_stream_new_from_data(Pointer.getPeer(data), len, Pointer.getPeer(destroy)), GInputStream.class);
	}
	@Ptr 
	protected native static long g_memory_input_stream_new_from_data(@Ptr long data, @org.bridj.ann.CLong long len, @Ptr long destroy);
	/**
	 * Original signature : <code>GInputStream* g_memory_input_stream_new_from_bytes(GBytes*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmemoryinputstream.h:33</i>
	 */
	public static Pointer<GInputStream > g_memory_input_stream_new_from_bytes(Pointer<GIOLibrary.GBytes > bytes) {
		return Pointer.pointerToAddress(g_memory_input_stream_new_from_bytes(Pointer.getPeer(bytes)), GInputStream.class);
	}
	@Ptr 
	protected native static long g_memory_input_stream_new_from_bytes(@Ptr long bytes);
	/**
	 * Original signature : <code>void g_memory_input_stream_add_data(GMemoryInputStream*, const void*, gssize, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmemoryinputstream.h:35</i>
	 */
	public static void g_memory_input_stream_add_data(Pointer<GMemoryInputStream > stream, Pointer<? > data, @org.bridj.ann.CLong long len, GIOLibrary.GDestroyNotify destroy) {
		g_memory_input_stream_add_data(Pointer.getPeer(stream), Pointer.getPeer(data), len, Pointer.getPeer(destroy));
	}
	protected native static void g_memory_input_stream_add_data(@Ptr long stream, @Ptr long data, @org.bridj.ann.CLong long len, @Ptr long destroy);
	/**
	 * Original signature : <code>void g_memory_input_stream_add_bytes(GMemoryInputStream*, GBytes*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmemoryinputstream.h:37</i>
	 */
	public static void g_memory_input_stream_add_bytes(Pointer<GMemoryInputStream > stream, Pointer<GIOLibrary.GBytes > bytes) {
		g_memory_input_stream_add_bytes(Pointer.getPeer(stream), Pointer.getPeer(bytes));
	}
	protected native static void g_memory_input_stream_add_bytes(@Ptr long stream, @Ptr long bytes);
	/**
	 * Original signature : <code>GType g_memory_output_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gmemoryoutputstream.h:37</i>
	 */
	public static native GIOLibrary.GType g_memory_output_stream_get_type();
	/**
	 * Original signature : <code>GOutputStream* g_memory_output_stream_new(gpointer, gsize, GReallocFunc, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmemoryoutputstream.h:39</i>
	 */
	public static Pointer<GOutputStream > g_memory_output_stream_new(GIOLibrary.gpointer data, @org.bridj.ann.CLong long size, GIOLibrary.GReallocFunc realloc_function, GIOLibrary.GDestroyNotify destroy_function) {
		return Pointer.pointerToAddress(g_memory_output_stream_new(data, size, Pointer.getPeer(realloc_function), Pointer.getPeer(destroy_function)), GOutputStream.class);
	}
	@Ptr 
	protected native static long g_memory_output_stream_new(GIOLibrary.gpointer data, @org.bridj.ann.CLong long size, @Ptr long realloc_function, @Ptr long destroy_function);
	/**
	 * Original signature : <code>GOutputStream* g_memory_output_stream_new_resizable()</code><br>
	 * <i>native declaration : glib-2.0/gio/gmemoryoutputstream.h:41</i>
	 */
	public static Pointer<GOutputStream > g_memory_output_stream_new_resizable() {
		return Pointer.pointerToAddress(g_memory_output_stream_new_resizable$2(), GOutputStream.class);
	}
	@Ptr 
	protected native static long g_memory_output_stream_new_resizable$2();
	/**
	 * Original signature : <code>gpointer g_memory_output_stream_get_data(GMemoryOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmemoryoutputstream.h:43</i>
	 */
	public static GIOLibrary.gpointer g_memory_output_stream_get_data(Pointer<GMemoryOutputStream > ostream) {
		return g_memory_output_stream_get_data(Pointer.getPeer(ostream));
	}
	protected native static GIOLibrary.gpointer g_memory_output_stream_get_data(@Ptr long ostream);
	/**
	 * Original signature : <code>gsize g_memory_output_stream_get_size(GMemoryOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmemoryoutputstream.h:45</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_memory_output_stream_get_size(Pointer<GMemoryOutputStream > ostream) {
		return g_memory_output_stream_get_size(Pointer.getPeer(ostream));
	}
	@org.bridj.ann.CLong 
	protected native static long g_memory_output_stream_get_size(@Ptr long ostream);
	/**
	 * Original signature : <code>gsize g_memory_output_stream_get_data_size(GMemoryOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmemoryoutputstream.h:47</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_memory_output_stream_get_data_size(Pointer<GMemoryOutputStream > ostream) {
		return g_memory_output_stream_get_data_size(Pointer.getPeer(ostream));
	}
	@org.bridj.ann.CLong 
	protected native static long g_memory_output_stream_get_data_size(@Ptr long ostream);
	/**
	 * Original signature : <code>gpointer g_memory_output_stream_steal_data(GMemoryOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmemoryoutputstream.h:49</i>
	 */
	public static GIOLibrary.gpointer g_memory_output_stream_steal_data(Pointer<GMemoryOutputStream > ostream) {
		return g_memory_output_stream_steal_data(Pointer.getPeer(ostream));
	}
	protected native static GIOLibrary.gpointer g_memory_output_stream_steal_data(@Ptr long ostream);
	/**
	 * Original signature : <code>GBytes* g_memory_output_stream_steal_as_bytes(GMemoryOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmemoryoutputstream.h:51</i>
	 */
	public static Pointer<GIOLibrary.GBytes > g_memory_output_stream_steal_as_bytes(Pointer<GMemoryOutputStream > ostream) {
		return Pointer.pointerToAddress(g_memory_output_stream_steal_as_bytes(Pointer.getPeer(ostream)), GIOLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_memory_output_stream_steal_as_bytes(@Ptr long ostream);
	/**
	 * Original signature : <code>GType g_mount_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:100</i>
	 */
	public static native GIOLibrary.GType g_mount_get_type();
	/**
	 * Original signature : <code>GFile* g_mount_get_root(GMount*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:102</i>
	 */
	public static Pointer<GIOLibrary.GFile > g_mount_get_root(Pointer<GIOLibrary.GMount > mount) {
		return Pointer.pointerToAddress(g_mount_get_root(Pointer.getPeer(mount)), GIOLibrary.GFile.class);
	}
	@Ptr 
	protected native static long g_mount_get_root(@Ptr long mount);
	/**
	 * Original signature : <code>GFile* g_mount_get_default_location(GMount*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:104</i>
	 */
	public static Pointer<GIOLibrary.GFile > g_mount_get_default_location(Pointer<GIOLibrary.GMount > mount) {
		return Pointer.pointerToAddress(g_mount_get_default_location(Pointer.getPeer(mount)), GIOLibrary.GFile.class);
	}
	@Ptr 
	protected native static long g_mount_get_default_location(@Ptr long mount);
	/**
	 * Original signature : <code>char* g_mount_get_name(GMount*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:106</i>
	 */
	public static Pointer<Byte > g_mount_get_name(Pointer<GIOLibrary.GMount > mount) {
		return Pointer.pointerToAddress(g_mount_get_name(Pointer.getPeer(mount)), Byte.class);
	}
	@Ptr 
	protected native static long g_mount_get_name(@Ptr long mount);
	/**
	 * Original signature : <code>GIcon* g_mount_get_icon(GMount*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:108</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_mount_get_icon(Pointer<GIOLibrary.GMount > mount) {
		return Pointer.pointerToAddress(g_mount_get_icon(Pointer.getPeer(mount)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_mount_get_icon(@Ptr long mount);
	/**
	 * Original signature : <code>GIcon* g_mount_get_symbolic_icon(GMount*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:110</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_mount_get_symbolic_icon(Pointer<GIOLibrary.GMount > mount) {
		return Pointer.pointerToAddress(g_mount_get_symbolic_icon(Pointer.getPeer(mount)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_mount_get_symbolic_icon(@Ptr long mount);
	/**
	 * Original signature : <code>char* g_mount_get_uuid(GMount*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:112</i>
	 */
	public static Pointer<Byte > g_mount_get_uuid(Pointer<GIOLibrary.GMount > mount) {
		return Pointer.pointerToAddress(g_mount_get_uuid(Pointer.getPeer(mount)), Byte.class);
	}
	@Ptr 
	protected native static long g_mount_get_uuid(@Ptr long mount);
	/**
	 * Original signature : <code>GVolume* g_mount_get_volume(GMount*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:114</i>
	 */
	public static Pointer<GIOLibrary.GVolume > g_mount_get_volume(Pointer<GIOLibrary.GMount > mount) {
		return Pointer.pointerToAddress(g_mount_get_volume(Pointer.getPeer(mount)), GIOLibrary.GVolume.class);
	}
	@Ptr 
	protected native static long g_mount_get_volume(@Ptr long mount);
	/**
	 * Original signature : <code>GDrive* g_mount_get_drive(GMount*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:116</i>
	 */
	public static Pointer<GIOLibrary.GDrive > g_mount_get_drive(Pointer<GIOLibrary.GMount > mount) {
		return Pointer.pointerToAddress(g_mount_get_drive(Pointer.getPeer(mount)), GIOLibrary.GDrive.class);
	}
	@Ptr 
	protected native static long g_mount_get_drive(@Ptr long mount);
	/**
	 * Original signature : <code>gboolean g_mount_can_unmount(GMount*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:118</i>
	 */
	public static GIOLibrary.gboolean g_mount_can_unmount(Pointer<GIOLibrary.GMount > mount) {
		return g_mount_can_unmount(Pointer.getPeer(mount));
	}
	protected native static GIOLibrary.gboolean g_mount_can_unmount(@Ptr long mount);
	/**
	 * Original signature : <code>gboolean g_mount_can_eject(GMount*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:120</i>
	 */
	public static GIOLibrary.gboolean g_mount_can_eject(Pointer<GIOLibrary.GMount > mount) {
		return g_mount_can_eject(Pointer.getPeer(mount));
	}
	protected native static GIOLibrary.gboolean g_mount_can_eject(@Ptr long mount);
	/**
	 * Original signature : <code>void g_mount_unmount(GMount*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:122</i>
	 */
	public static void g_mount_unmount(Pointer<GIOLibrary.GMount > mount, IntValuedEnum<GIOLibrary.GMountUnmountFlags > flags, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_mount_unmount(Pointer.getPeer(mount), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_mount_unmount(@Ptr long mount, int flags, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_mount_unmount_finish(GMount*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:124</i>
	 */
	public static GIOLibrary.gboolean g_mount_unmount_finish(Pointer<GIOLibrary.GMount > mount, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_mount_unmount_finish(Pointer.getPeer(mount), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_mount_unmount_finish(@Ptr long mount, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_mount_eject(GMount*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:126</i>
	 */
	public static void g_mount_eject(Pointer<GIOLibrary.GMount > mount, IntValuedEnum<GIOLibrary.GMountUnmountFlags > flags, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_mount_eject(Pointer.getPeer(mount), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_mount_eject(@Ptr long mount, int flags, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_mount_eject_finish(GMount*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:128</i>
	 */
	public static GIOLibrary.gboolean g_mount_eject_finish(Pointer<GIOLibrary.GMount > mount, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_mount_eject_finish(Pointer.getPeer(mount), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_mount_eject_finish(@Ptr long mount, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_mount_remount(GMount*, GMountMountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:130</i>
	 */
	public static void g_mount_remount(Pointer<GIOLibrary.GMount > mount, IntValuedEnum<GIOLibrary.GMountMountFlags > flags, Pointer<GMountOperation > mount_operation, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_mount_remount(Pointer.getPeer(mount), (int)flags.value(), Pointer.getPeer(mount_operation), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_mount_remount(@Ptr long mount, int flags, @Ptr long mount_operation, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_mount_remount_finish(GMount*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:132</i>
	 */
	public static GIOLibrary.gboolean g_mount_remount_finish(Pointer<GIOLibrary.GMount > mount, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_mount_remount_finish(Pointer.getPeer(mount), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_mount_remount_finish(@Ptr long mount, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_mount_guess_content_type(GMount*, gboolean, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:134</i>
	 */
	public static void g_mount_guess_content_type(Pointer<GIOLibrary.GMount > mount, GIOLibrary.gboolean force_rescan, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_mount_guess_content_type(Pointer.getPeer(mount), force_rescan, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_mount_guess_content_type(@Ptr long mount, GIOLibrary.gboolean force_rescan, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gchar** g_mount_guess_content_type_finish(GMount*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:136</i>
	 */
	public static Pointer<Pointer<Byte > > g_mount_guess_content_type_finish(Pointer<GIOLibrary.GMount > mount, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_mount_guess_content_type_finish(Pointer.getPeer(mount), Pointer.getPeer(result), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_mount_guess_content_type_finish(@Ptr long mount, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>gchar** g_mount_guess_content_type_sync(GMount*, gboolean, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:138</i>
	 */
	public static Pointer<Pointer<Byte > > g_mount_guess_content_type_sync(Pointer<GIOLibrary.GMount > mount, GIOLibrary.gboolean force_rescan, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_mount_guess_content_type_sync(Pointer.getPeer(mount), force_rescan, Pointer.getPeer(cancellable), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_mount_guess_content_type_sync(@Ptr long mount, GIOLibrary.gboolean force_rescan, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_mount_is_shadowed(GMount*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:140</i>
	 */
	public static GIOLibrary.gboolean g_mount_is_shadowed(Pointer<GIOLibrary.GMount > mount) {
		return g_mount_is_shadowed(Pointer.getPeer(mount));
	}
	protected native static GIOLibrary.gboolean g_mount_is_shadowed(@Ptr long mount);
	/**
	 * Original signature : <code>void g_mount_shadow(GMount*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:142</i>
	 */
	public static void g_mount_shadow(Pointer<GIOLibrary.GMount > mount) {
		g_mount_shadow(Pointer.getPeer(mount));
	}
	protected native static void g_mount_shadow(@Ptr long mount);
	/**
	 * Original signature : <code>void g_mount_unshadow(GMount*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:144</i>
	 */
	public static void g_mount_unshadow(Pointer<GIOLibrary.GMount > mount) {
		g_mount_unshadow(Pointer.getPeer(mount));
	}
	protected native static void g_mount_unshadow(@Ptr long mount);
	/**
	 * Original signature : <code>void g_mount_unmount_with_operation(GMount*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:146</i>
	 */
	public static void g_mount_unmount_with_operation(Pointer<GIOLibrary.GMount > mount, IntValuedEnum<GIOLibrary.GMountUnmountFlags > flags, Pointer<GMountOperation > mount_operation, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_mount_unmount_with_operation(Pointer.getPeer(mount), (int)flags.value(), Pointer.getPeer(mount_operation), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_mount_unmount_with_operation(@Ptr long mount, int flags, @Ptr long mount_operation, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_mount_unmount_with_operation_finish(GMount*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:148</i>
	 */
	public static GIOLibrary.gboolean g_mount_unmount_with_operation_finish(Pointer<GIOLibrary.GMount > mount, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_mount_unmount_with_operation_finish(Pointer.getPeer(mount), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_mount_unmount_with_operation_finish(@Ptr long mount, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_mount_eject_with_operation(GMount*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:150</i>
	 */
	public static void g_mount_eject_with_operation(Pointer<GIOLibrary.GMount > mount, IntValuedEnum<GIOLibrary.GMountUnmountFlags > flags, Pointer<GMountOperation > mount_operation, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_mount_eject_with_operation(Pointer.getPeer(mount), (int)flags.value(), Pointer.getPeer(mount_operation), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_mount_eject_with_operation(@Ptr long mount, int flags, @Ptr long mount_operation, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_mount_eject_with_operation_finish(GMount*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:152</i>
	 */
	public static GIOLibrary.gboolean g_mount_eject_with_operation_finish(Pointer<GIOLibrary.GMount > mount, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_mount_eject_with_operation_finish(Pointer.getPeer(mount), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_mount_eject_with_operation_finish(@Ptr long mount, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_mount_get_sort_key(GMount*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmount.h:154</i>
	 */
	public static Pointer<Byte > g_mount_get_sort_key(Pointer<GIOLibrary.GMount > mount) {
		return Pointer.pointerToAddress(g_mount_get_sort_key(Pointer.getPeer(mount)), Byte.class);
	}
	@Ptr 
	protected native static long g_mount_get_sort_key(@Ptr long mount);
	/**
	 * Original signature : <code>GType g_mount_operation_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gmountoperation.h:47</i>
	 */
	public static native GIOLibrary.GType g_mount_operation_get_type();
	/**
	 * Original signature : <code>GMountOperation* g_mount_operation_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gmountoperation.h:49</i>
	 */
	public static Pointer<GMountOperation > g_mount_operation_new() {
		return Pointer.pointerToAddress(g_mount_operation_new$2(), GMountOperation.class);
	}
	@Ptr 
	protected native static long g_mount_operation_new$2();
	/**
	 * Original signature : <code>char* g_mount_operation_get_username(GMountOperation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmountoperation.h:51</i>
	 */
	public static Pointer<Byte > g_mount_operation_get_username(Pointer<GMountOperation > op) {
		return Pointer.pointerToAddress(g_mount_operation_get_username(Pointer.getPeer(op)), Byte.class);
	}
	@Ptr 
	protected native static long g_mount_operation_get_username(@Ptr long op);
	/**
	 * Original signature : <code>void g_mount_operation_set_username(GMountOperation*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmountoperation.h:53</i>
	 */
	public static void g_mount_operation_set_username(Pointer<GMountOperation > op, Pointer<Byte > username) {
		g_mount_operation_set_username(Pointer.getPeer(op), Pointer.getPeer(username));
	}
	protected native static void g_mount_operation_set_username(@Ptr long op, @Ptr long username);
	/**
	 * Original signature : <code>char* g_mount_operation_get_password(GMountOperation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmountoperation.h:55</i>
	 */
	public static Pointer<Byte > g_mount_operation_get_password(Pointer<GMountOperation > op) {
		return Pointer.pointerToAddress(g_mount_operation_get_password(Pointer.getPeer(op)), Byte.class);
	}
	@Ptr 
	protected native static long g_mount_operation_get_password(@Ptr long op);
	/**
	 * Original signature : <code>void g_mount_operation_set_password(GMountOperation*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmountoperation.h:57</i>
	 */
	public static void g_mount_operation_set_password(Pointer<GMountOperation > op, Pointer<Byte > password) {
		g_mount_operation_set_password(Pointer.getPeer(op), Pointer.getPeer(password));
	}
	protected native static void g_mount_operation_set_password(@Ptr long op, @Ptr long password);
	/**
	 * Original signature : <code>gboolean g_mount_operation_get_anonymous(GMountOperation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmountoperation.h:59</i>
	 */
	public static GIOLibrary.gboolean g_mount_operation_get_anonymous(Pointer<GMountOperation > op) {
		return g_mount_operation_get_anonymous(Pointer.getPeer(op));
	}
	protected native static GIOLibrary.gboolean g_mount_operation_get_anonymous(@Ptr long op);
	/**
	 * Original signature : <code>void g_mount_operation_set_anonymous(GMountOperation*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmountoperation.h:61</i>
	 */
	public static void g_mount_operation_set_anonymous(Pointer<GMountOperation > op, GIOLibrary.gboolean anonymous) {
		g_mount_operation_set_anonymous(Pointer.getPeer(op), anonymous);
	}
	protected native static void g_mount_operation_set_anonymous(@Ptr long op, GIOLibrary.gboolean anonymous);
	/**
	 * Original signature : <code>char* g_mount_operation_get_domain(GMountOperation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmountoperation.h:63</i>
	 */
	public static Pointer<Byte > g_mount_operation_get_domain(Pointer<GMountOperation > op) {
		return Pointer.pointerToAddress(g_mount_operation_get_domain(Pointer.getPeer(op)), Byte.class);
	}
	@Ptr 
	protected native static long g_mount_operation_get_domain(@Ptr long op);
	/**
	 * Original signature : <code>void g_mount_operation_set_domain(GMountOperation*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmountoperation.h:65</i>
	 */
	public static void g_mount_operation_set_domain(Pointer<GMountOperation > op, Pointer<Byte > domain) {
		g_mount_operation_set_domain(Pointer.getPeer(op), Pointer.getPeer(domain));
	}
	protected native static void g_mount_operation_set_domain(@Ptr long op, @Ptr long domain);
	/**
	 * Original signature : <code>GPasswordSave g_mount_operation_get_password_save(GMountOperation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmountoperation.h:67</i>
	 */
	public static IntValuedEnum<GIOLibrary.GPasswordSave > g_mount_operation_get_password_save(Pointer<GMountOperation > op) {
		return FlagSet.fromValue(g_mount_operation_get_password_save(Pointer.getPeer(op)), GIOLibrary.GPasswordSave.class);
	}
	protected native static int g_mount_operation_get_password_save(@Ptr long op);
	/**
	 * Original signature : <code>void g_mount_operation_set_password_save(GMountOperation*, GPasswordSave)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmountoperation.h:69</i>
	 */
	public static void g_mount_operation_set_password_save(Pointer<GMountOperation > op, IntValuedEnum<GIOLibrary.GPasswordSave > save) {
		g_mount_operation_set_password_save(Pointer.getPeer(op), (int)save.value());
	}
	protected native static void g_mount_operation_set_password_save(@Ptr long op, int save);
	/**
	 * Original signature : <code>int g_mount_operation_get_choice(GMountOperation*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmountoperation.h:71</i>
	 */
	public static int g_mount_operation_get_choice(Pointer<GMountOperation > op) {
		return g_mount_operation_get_choice(Pointer.getPeer(op));
	}
	protected native static int g_mount_operation_get_choice(@Ptr long op);
	/**
	 * Original signature : <code>void g_mount_operation_set_choice(GMountOperation*, int)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmountoperation.h:73</i>
	 */
	public static void g_mount_operation_set_choice(Pointer<GMountOperation > op, int choice) {
		g_mount_operation_set_choice(Pointer.getPeer(op), choice);
	}
	protected native static void g_mount_operation_set_choice(@Ptr long op, int choice);
	/**
	 * Original signature : <code>void g_mount_operation_reply(GMountOperation*, GMountOperationResult)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmountoperation.h:75</i>
	 */
	public static void g_mount_operation_reply(Pointer<GMountOperation > op, IntValuedEnum<GIOLibrary.GMountOperationResult > result) {
		g_mount_operation_reply(Pointer.getPeer(op), (int)result.value());
	}
	protected native static void g_mount_operation_reply(@Ptr long op, int result);
	/**
	 * Original signature : <code>GType g_volume_monitor_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolumemonitor.h:71</i>
	 */
	public static native GIOLibrary.GType g_volume_monitor_get_type();
	/**
	 * Original signature : <code>GVolumeMonitor* g_volume_monitor_get()</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolumemonitor.h:73</i>
	 */
	public static Pointer<GVolumeMonitor > g_volume_monitor_get() {
		return Pointer.pointerToAddress(g_volume_monitor_get$2(), GVolumeMonitor.class);
	}
	@Ptr 
	protected native static long g_volume_monitor_get$2();
	/**
	 * Original signature : <code>GList* g_volume_monitor_get_connected_drives(GVolumeMonitor*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolumemonitor.h:75</i>
	 */
	public static Pointer g_volume_monitor_get_connected_drives(Pointer<GVolumeMonitor > volume_monitor) {
		return Pointer.pointerToAddress(g_volume_monitor_get_connected_drives(Pointer.getPeer(volume_monitor)));
	}
	@Ptr 
	protected native static long g_volume_monitor_get_connected_drives(@Ptr long volume_monitor);
	/**
	 * Original signature : <code>GList* g_volume_monitor_get_volumes(GVolumeMonitor*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolumemonitor.h:77</i>
	 */
	public static Pointer g_volume_monitor_get_volumes(Pointer<GVolumeMonitor > volume_monitor) {
		return Pointer.pointerToAddress(g_volume_monitor_get_volumes(Pointer.getPeer(volume_monitor)));
	}
	@Ptr 
	protected native static long g_volume_monitor_get_volumes(@Ptr long volume_monitor);
	/**
	 * Original signature : <code>GList* g_volume_monitor_get_mounts(GVolumeMonitor*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolumemonitor.h:79</i>
	 */
	public static Pointer g_volume_monitor_get_mounts(Pointer<GVolumeMonitor > volume_monitor) {
		return Pointer.pointerToAddress(g_volume_monitor_get_mounts(Pointer.getPeer(volume_monitor)));
	}
	@Ptr 
	protected native static long g_volume_monitor_get_mounts(@Ptr long volume_monitor);
	/**
	 * Original signature : <code>GVolume* g_volume_monitor_get_volume_for_uuid(GVolumeMonitor*, uuid const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolumemonitor.h:81</i>
	 */
	public static Pointer<GIOLibrary.GVolume > g_volume_monitor_get_volume_for_uuid(Pointer<GVolumeMonitor > volume_monitor, Pointer<Byte > charPtr1) {
		return Pointer.pointerToAddress(g_volume_monitor_get_volume_for_uuid(Pointer.getPeer(volume_monitor), Pointer.getPeer(charPtr1)), GIOLibrary.GVolume.class);
	}
	@Ptr 
	protected native static long g_volume_monitor_get_volume_for_uuid(@Ptr long volume_monitor, @Ptr long charPtr1);
	/**
	 * Original signature : <code>GMount* g_volume_monitor_get_mount_for_uuid(GVolumeMonitor*, uuid const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolumemonitor.h:83</i>
	 */
	public static Pointer<GIOLibrary.GMount > g_volume_monitor_get_mount_for_uuid(Pointer<GVolumeMonitor > volume_monitor, Pointer<Byte > charPtr1) {
		return Pointer.pointerToAddress(g_volume_monitor_get_mount_for_uuid(Pointer.getPeer(volume_monitor), Pointer.getPeer(charPtr1)), GIOLibrary.GMount.class);
	}
	@Ptr 
	protected native static long g_volume_monitor_get_mount_for_uuid(@Ptr long volume_monitor, @Ptr long charPtr1);
	/**
	 * Original signature : <code>GVolume* g_volume_monitor_adopt_orphan_mount(GMount*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolumemonitor.h:85</i>
	 */
	public static Pointer<GIOLibrary.GVolume > g_volume_monitor_adopt_orphan_mount(Pointer<GIOLibrary.GMount > mount) {
		return Pointer.pointerToAddress(g_volume_monitor_adopt_orphan_mount(Pointer.getPeer(mount)), GIOLibrary.GVolume.class);
	}
	@Ptr 
	protected native static long g_volume_monitor_adopt_orphan_mount(@Ptr long mount);
	/**
	 * Original signature : <code>GType g_native_volume_monitor_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gnativevolumemonitor.h:12</i>
	 */
	public static native GIOLibrary.GType g_native_volume_monitor_get_type();
	/**
	 * Original signature : <code>GType g_network_address_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkaddress.h:12</i>
	 */
	public static native GIOLibrary.GType g_network_address_get_type();
	/**
	 * Original signature : <code>GSocketConnectable* g_network_address_new(const gchar*, guint16)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkaddress.h:14</i>
	 */
	public static Pointer<GIOLibrary.GSocketConnectable > g_network_address_new(Pointer<Byte > hostname, short port) {
		return Pointer.pointerToAddress(g_network_address_new(Pointer.getPeer(hostname), port), GIOLibrary.GSocketConnectable.class);
	}
	@Ptr 
	protected native static long g_network_address_new(@Ptr long hostname, short port);
	/**
	 * Original signature : <code>GSocketConnectable* g_network_address_parse(const gchar*, guint16, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkaddress.h:16</i>
	 */
	public static Pointer<GIOLibrary.GSocketConnectable > g_network_address_parse(Pointer<Byte > host_and_port, short default_port, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_network_address_parse(Pointer.getPeer(host_and_port), default_port, Pointer.getPeer(error)), GIOLibrary.GSocketConnectable.class);
	}
	@Ptr 
	protected native static long g_network_address_parse(@Ptr long host_and_port, short default_port, @Ptr long error);
	/**
	 * Original signature : <code>GSocketConnectable* g_network_address_parse_uri(const gchar*, guint16, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkaddress.h:18</i>
	 */
	public static Pointer<GIOLibrary.GSocketConnectable > g_network_address_parse_uri(Pointer<Byte > uri, short default_port, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_network_address_parse_uri(Pointer.getPeer(uri), default_port, Pointer.getPeer(error)), GIOLibrary.GSocketConnectable.class);
	}
	@Ptr 
	protected native static long g_network_address_parse_uri(@Ptr long uri, short default_port, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_network_address_get_hostname(GNetworkAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkaddress.h:20</i>
	 */
	public static Pointer<Byte > g_network_address_get_hostname(Pointer<GNetworkAddress > addr) {
		return Pointer.pointerToAddress(g_network_address_get_hostname(Pointer.getPeer(addr)), Byte.class);
	}
	@Ptr 
	protected native static long g_network_address_get_hostname(@Ptr long addr);
	/**
	 * Original signature : <code>guint16 g_network_address_get_port(GNetworkAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkaddress.h:22</i>
	 */
	public static short g_network_address_get_port(Pointer<GNetworkAddress > addr) {
		return g_network_address_get_port(Pointer.getPeer(addr));
	}
	protected native static short g_network_address_get_port(@Ptr long addr);
	/**
	 * Original signature : <code>gchar* g_network_address_get_scheme(GNetworkAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkaddress.h:24</i>
	 */
	public static Pointer<Byte > g_network_address_get_scheme(Pointer<GNetworkAddress > addr) {
		return Pointer.pointerToAddress(g_network_address_get_scheme(Pointer.getPeer(addr)), Byte.class);
	}
	@Ptr 
	protected native static long g_network_address_get_scheme(@Ptr long addr);
	/**
	 * Original signature : <code>GType g_network_monitor_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkmonitor.h:14</i>
	 */
	public static native GIOLibrary.GType g_network_monitor_get_type();
	/**
	 * Original signature : <code>GNetworkMonitor* g_network_monitor_get_default()</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkmonitor.h:16</i>
	 */
	public static Pointer<GIOLibrary.GNetworkMonitor > g_network_monitor_get_default() {
		return Pointer.pointerToAddress(g_network_monitor_get_default$2(), GIOLibrary.GNetworkMonitor.class);
	}
	@Ptr 
	protected native static long g_network_monitor_get_default$2();
	/**
	 * Original signature : <code>gboolean g_network_monitor_get_network_available(GNetworkMonitor*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkmonitor.h:18</i>
	 */
	public static GIOLibrary.gboolean g_network_monitor_get_network_available(Pointer<GIOLibrary.GNetworkMonitor > monitor) {
		return g_network_monitor_get_network_available(Pointer.getPeer(monitor));
	}
	protected native static GIOLibrary.gboolean g_network_monitor_get_network_available(@Ptr long monitor);
	/**
	 * Original signature : <code>gboolean g_network_monitor_can_reach(GNetworkMonitor*, GSocketConnectable*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkmonitor.h:20</i>
	 */
	public static GIOLibrary.gboolean g_network_monitor_can_reach(Pointer<GIOLibrary.GNetworkMonitor > monitor, Pointer<GIOLibrary.GSocketConnectable > connectable, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_network_monitor_can_reach(Pointer.getPeer(monitor), Pointer.getPeer(connectable), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_network_monitor_can_reach(@Ptr long monitor, @Ptr long connectable, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_network_monitor_can_reach_async(GNetworkMonitor*, GSocketConnectable*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkmonitor.h:22</i>
	 */
	public static void g_network_monitor_can_reach_async(Pointer<GIOLibrary.GNetworkMonitor > monitor, Pointer<GIOLibrary.GSocketConnectable > connectable, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_network_monitor_can_reach_async(Pointer.getPeer(monitor), Pointer.getPeer(connectable), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_network_monitor_can_reach_async(@Ptr long monitor, @Ptr long connectable, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_network_monitor_can_reach_finish(GNetworkMonitor*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkmonitor.h:24</i>
	 */
	public static GIOLibrary.gboolean g_network_monitor_can_reach_finish(Pointer<GIOLibrary.GNetworkMonitor > monitor, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_network_monitor_can_reach_finish(Pointer.getPeer(monitor), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_network_monitor_can_reach_finish(@Ptr long monitor, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>GType g_network_service_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkservice.h:12</i>
	 */
	public static native GIOLibrary.GType g_network_service_get_type();
	/**
	 * Original signature : <code>GSocketConnectable* g_network_service_new(const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkservice.h:14</i>
	 */
	public static Pointer<GIOLibrary.GSocketConnectable > g_network_service_new(Pointer<Byte > service, Pointer<Byte > protocol, Pointer<Byte > domain) {
		return Pointer.pointerToAddress(g_network_service_new(Pointer.getPeer(service), Pointer.getPeer(protocol), Pointer.getPeer(domain)), GIOLibrary.GSocketConnectable.class);
	}
	@Ptr 
	protected native static long g_network_service_new(@Ptr long service, @Ptr long protocol, @Ptr long domain);
	/**
	 * Original signature : <code>gchar* g_network_service_get_service(GNetworkService*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkservice.h:16</i>
	 */
	public static Pointer<Byte > g_network_service_get_service(Pointer<GNetworkService > srv) {
		return Pointer.pointerToAddress(g_network_service_get_service(Pointer.getPeer(srv)), Byte.class);
	}
	@Ptr 
	protected native static long g_network_service_get_service(@Ptr long srv);
	/**
	 * Original signature : <code>gchar* g_network_service_get_protocol(GNetworkService*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkservice.h:18</i>
	 */
	public static Pointer<Byte > g_network_service_get_protocol(Pointer<GNetworkService > srv) {
		return Pointer.pointerToAddress(g_network_service_get_protocol(Pointer.getPeer(srv)), Byte.class);
	}
	@Ptr 
	protected native static long g_network_service_get_protocol(@Ptr long srv);
	/**
	 * Original signature : <code>gchar* g_network_service_get_domain(GNetworkService*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkservice.h:20</i>
	 */
	public static Pointer<Byte > g_network_service_get_domain(Pointer<GNetworkService > srv) {
		return Pointer.pointerToAddress(g_network_service_get_domain(Pointer.getPeer(srv)), Byte.class);
	}
	@Ptr 
	protected native static long g_network_service_get_domain(@Ptr long srv);
	/**
	 * Original signature : <code>gchar* g_network_service_get_scheme(GNetworkService*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkservice.h:22</i>
	 */
	public static Pointer<Byte > g_network_service_get_scheme(Pointer<GNetworkService > srv) {
		return Pointer.pointerToAddress(g_network_service_get_scheme(Pointer.getPeer(srv)), Byte.class);
	}
	@Ptr 
	protected native static long g_network_service_get_scheme(@Ptr long srv);
	/**
	 * Original signature : <code>void g_network_service_set_scheme(GNetworkService*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworkservice.h:24</i>
	 */
	public static void g_network_service_set_scheme(Pointer<GNetworkService > srv, Pointer<Byte > scheme) {
		g_network_service_set_scheme(Pointer.getPeer(srv), Pointer.getPeer(scheme));
	}
	protected native static void g_network_service_set_scheme(@Ptr long srv, @Ptr long scheme);
	/**
	 * Original signature : <code>GType g_permission_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gpermission.h:29</i>
	 */
	public static native GIOLibrary.GType g_permission_get_type();
	/**
	 * Original signature : <code>gboolean g_permission_acquire(GPermission*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpermission.h:31</i>
	 */
	public static GIOLibrary.gboolean g_permission_acquire(Pointer<GPermission > permission, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_permission_acquire(Pointer.getPeer(permission), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_permission_acquire(@Ptr long permission, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_permission_acquire_async(GPermission*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpermission.h:33</i>
	 */
	public static void g_permission_acquire_async(Pointer<GPermission > permission, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_permission_acquire_async(Pointer.getPeer(permission), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_permission_acquire_async(@Ptr long permission, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_permission_acquire_finish(GPermission*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpermission.h:35</i>
	 */
	public static GIOLibrary.gboolean g_permission_acquire_finish(Pointer<GPermission > permission, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_permission_acquire_finish(Pointer.getPeer(permission), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_permission_acquire_finish(@Ptr long permission, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_permission_release(GPermission*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpermission.h:37</i>
	 */
	public static GIOLibrary.gboolean g_permission_release(Pointer<GPermission > permission, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_permission_release(Pointer.getPeer(permission), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_permission_release(@Ptr long permission, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_permission_release_async(GPermission*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpermission.h:39</i>
	 */
	public static void g_permission_release_async(Pointer<GPermission > permission, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_permission_release_async(Pointer.getPeer(permission), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_permission_release_async(@Ptr long permission, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_permission_release_finish(GPermission*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpermission.h:41</i>
	 */
	public static GIOLibrary.gboolean g_permission_release_finish(Pointer<GPermission > permission, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_permission_release_finish(Pointer.getPeer(permission), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_permission_release_finish(@Ptr long permission, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_permission_get_allowed(GPermission*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpermission.h:43</i>
	 */
	public static GIOLibrary.gboolean g_permission_get_allowed(Pointer<GPermission > permission) {
		return g_permission_get_allowed(Pointer.getPeer(permission));
	}
	protected native static GIOLibrary.gboolean g_permission_get_allowed(@Ptr long permission);
	/**
	 * Original signature : <code>gboolean g_permission_get_can_acquire(GPermission*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpermission.h:45</i>
	 */
	public static GIOLibrary.gboolean g_permission_get_can_acquire(Pointer<GPermission > permission) {
		return g_permission_get_can_acquire(Pointer.getPeer(permission));
	}
	protected native static GIOLibrary.gboolean g_permission_get_can_acquire(@Ptr long permission);
	/**
	 * Original signature : <code>gboolean g_permission_get_can_release(GPermission*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpermission.h:47</i>
	 */
	public static GIOLibrary.gboolean g_permission_get_can_release(Pointer<GPermission > permission) {
		return g_permission_get_can_release(Pointer.getPeer(permission));
	}
	protected native static GIOLibrary.gboolean g_permission_get_can_release(@Ptr long permission);
	/**
	 * Original signature : <code>void g_permission_impl_update(GPermission*, gboolean, gboolean, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpermission.h:49</i>
	 */
	public static void g_permission_impl_update(Pointer<GPermission > permission, GIOLibrary.gboolean allowed, GIOLibrary.gboolean can_acquire, GIOLibrary.gboolean can_release) {
		g_permission_impl_update(Pointer.getPeer(permission), allowed, can_acquire, can_release);
	}
	protected native static void g_permission_impl_update(@Ptr long permission, GIOLibrary.gboolean allowed, GIOLibrary.gboolean can_acquire, GIOLibrary.gboolean can_release);
	/**
	 * Original signature : <code>GType g_pollable_input_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gpollableinputstream.h:43</i>
	 */
	public static native GIOLibrary.GType g_pollable_input_stream_get_type();
	/**
	 * Original signature : <code>gboolean g_pollable_input_stream_can_poll(GPollableInputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpollableinputstream.h:45</i>
	 */
	public static GIOLibrary.gboolean g_pollable_input_stream_can_poll(Pointer<GIOLibrary.GPollableInputStream > stream) {
		return g_pollable_input_stream_can_poll(Pointer.getPeer(stream));
	}
	protected native static GIOLibrary.gboolean g_pollable_input_stream_can_poll(@Ptr long stream);
	/**
	 * Original signature : <code>gboolean g_pollable_input_stream_is_readable(GPollableInputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpollableinputstream.h:47</i>
	 */
	public static GIOLibrary.gboolean g_pollable_input_stream_is_readable(Pointer<GIOLibrary.GPollableInputStream > stream) {
		return g_pollable_input_stream_is_readable(Pointer.getPeer(stream));
	}
	protected native static GIOLibrary.gboolean g_pollable_input_stream_is_readable(@Ptr long stream);
	/**
	 * Original signature : <code>GSource* g_pollable_input_stream_create_source(GPollableInputStream*, GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpollableinputstream.h:49</i>
	 */
	public static Pointer g_pollable_input_stream_create_source(Pointer<GIOLibrary.GPollableInputStream > stream, Pointer<GCancellable > cancellable) {
		return Pointer.pointerToAddress(g_pollable_input_stream_create_source(Pointer.getPeer(stream), Pointer.getPeer(cancellable)));
	}
	@Ptr 
	protected native static long g_pollable_input_stream_create_source(@Ptr long stream, @Ptr long cancellable);
	/**
	 * Original signature : <code>gssize g_pollable_input_stream_read_nonblocking(GPollableInputStream*, void*, gsize, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpollableinputstream.h:51</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_pollable_input_stream_read_nonblocking(Pointer<GIOLibrary.GPollableInputStream > stream, Pointer<? > buffer, @org.bridj.ann.CLong long count, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_pollable_input_stream_read_nonblocking(Pointer.getPeer(stream), Pointer.getPeer(buffer), count, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_pollable_input_stream_read_nonblocking(@Ptr long stream, @Ptr long buffer, @org.bridj.ann.CLong long count, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>GType g_pollable_output_stream_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gpollableoutputstream.h:43</i>
	 */
	public static native GIOLibrary.GType g_pollable_output_stream_get_type();
	/**
	 * Original signature : <code>gboolean g_pollable_output_stream_can_poll(GPollableOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpollableoutputstream.h:45</i>
	 */
	public static GIOLibrary.gboolean g_pollable_output_stream_can_poll(Pointer<GIOLibrary.GPollableOutputStream > stream) {
		return g_pollable_output_stream_can_poll(Pointer.getPeer(stream));
	}
	protected native static GIOLibrary.gboolean g_pollable_output_stream_can_poll(@Ptr long stream);
	/**
	 * Original signature : <code>gboolean g_pollable_output_stream_is_writable(GPollableOutputStream*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpollableoutputstream.h:47</i>
	 */
	public static GIOLibrary.gboolean g_pollable_output_stream_is_writable(Pointer<GIOLibrary.GPollableOutputStream > stream) {
		return g_pollable_output_stream_is_writable(Pointer.getPeer(stream));
	}
	protected native static GIOLibrary.gboolean g_pollable_output_stream_is_writable(@Ptr long stream);
	/**
	 * Original signature : <code>GSource* g_pollable_output_stream_create_source(GPollableOutputStream*, GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpollableoutputstream.h:49</i>
	 */
	public static Pointer g_pollable_output_stream_create_source(Pointer<GIOLibrary.GPollableOutputStream > stream, Pointer<GCancellable > cancellable) {
		return Pointer.pointerToAddress(g_pollable_output_stream_create_source(Pointer.getPeer(stream), Pointer.getPeer(cancellable)));
	}
	@Ptr 
	protected native static long g_pollable_output_stream_create_source(@Ptr long stream, @Ptr long cancellable);
	/**
	 * Original signature : <code>gssize g_pollable_output_stream_write_nonblocking(GPollableOutputStream*, const void*, gsize, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpollableoutputstream.h:51</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_pollable_output_stream_write_nonblocking(Pointer<GIOLibrary.GPollableOutputStream > stream, Pointer<? > buffer, @org.bridj.ann.CLong long count, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_pollable_output_stream_write_nonblocking(Pointer.getPeer(stream), Pointer.getPeer(buffer), count, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_pollable_output_stream_write_nonblocking(@Ptr long stream, @Ptr long buffer, @org.bridj.ann.CLong long count, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>GSource* g_pollable_source_new(GObject*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpollableutils.h:2</i>
	 */
	public static Pointer g_pollable_source_new(Pointer pollable_stream) {
		return Pointer.pointerToAddress(g_pollable_source_new(Pointer.getPeer(pollable_stream)));
	}
	@Ptr 
	protected native static long g_pollable_source_new(@Ptr long pollable_stream);
	/**
	 * Original signature : <code>GSource* g_pollable_source_new_full(gpointer, GSource*, GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpollableutils.h:4</i>
	 */
	public static Pointer g_pollable_source_new_full(GIOLibrary.gpointer pollable_stream, Pointer child_source, Pointer<GCancellable > cancellable) {
		return Pointer.pointerToAddress(g_pollable_source_new_full(pollable_stream, Pointer.getPeer(child_source), Pointer.getPeer(cancellable)));
	}
	@Ptr 
	protected native static long g_pollable_source_new_full(GIOLibrary.gpointer pollable_stream, @Ptr long child_source, @Ptr long cancellable);
	/**
	 * Original signature : <code>gssize g_pollable_stream_read(GInputStream*, void*, gsize, gboolean, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpollableutils.h:6</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_pollable_stream_read(Pointer<GInputStream > stream, Pointer<? > buffer, @org.bridj.ann.CLong long count, GIOLibrary.gboolean blocking, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_pollable_stream_read(Pointer.getPeer(stream), Pointer.getPeer(buffer), count, blocking, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_pollable_stream_read(@Ptr long stream, @Ptr long buffer, @org.bridj.ann.CLong long count, GIOLibrary.gboolean blocking, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_pollable_stream_write(GOutputStream*, const void*, gsize, gboolean, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpollableutils.h:8</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_pollable_stream_write(Pointer<GOutputStream > stream, Pointer<? > buffer, @org.bridj.ann.CLong long count, GIOLibrary.gboolean blocking, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_pollable_stream_write(Pointer.getPeer(stream), Pointer.getPeer(buffer), count, blocking, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_pollable_stream_write(@Ptr long stream, @Ptr long buffer, @org.bridj.ann.CLong long count, GIOLibrary.gboolean blocking, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_pollable_stream_write_all(GOutputStream*, const void*, gsize, gboolean, gsize*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpollableutils.h:10</i>
	 */
	public static GIOLibrary.gboolean g_pollable_stream_write_all(Pointer<GOutputStream > stream, Pointer<? > buffer, @org.bridj.ann.CLong long count, GIOLibrary.gboolean blocking, Pointer<org.bridj.CLong > bytes_written, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_pollable_stream_write_all(Pointer.getPeer(stream), Pointer.getPeer(buffer), count, blocking, Pointer.getPeer(bytes_written), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_pollable_stream_write_all(@Ptr long stream, @Ptr long buffer, @org.bridj.ann.CLong long count, GIOLibrary.gboolean blocking, @Ptr long bytes_written, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>GType g_property_action_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gpropertyaction.h:2</i>
	 */
	public static native GIOLibrary.GType g_property_action_get_type();
	/**
	 * Original signature : <code>GPropertyAction* g_property_action_new(const gchar*, gpointer, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gpropertyaction.h:4</i>
	 */
	public static Pointer<GIOLibrary.GPropertyAction > g_property_action_new(Pointer<Byte > name, GIOLibrary.gpointer object, Pointer<Byte > property_name) {
		return Pointer.pointerToAddress(g_property_action_new(Pointer.getPeer(name), object, Pointer.getPeer(property_name)), GIOLibrary.GPropertyAction.class);
	}
	@Ptr 
	protected native static long g_property_action_new(@Ptr long name, GIOLibrary.gpointer object, @Ptr long property_name);
	/**
	 * Original signature : <code>GType g_proxy_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxy.h:31</i>
	 */
	public static native GIOLibrary.GType g_proxy_get_type();
	/**
	 * Original signature : <code>GProxy* g_proxy_get_default_for_protocol(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxy.h:33</i>
	 */
	public static Pointer<GIOLibrary.GProxy > g_proxy_get_default_for_protocol(Pointer<Byte > protocol) {
		return Pointer.pointerToAddress(g_proxy_get_default_for_protocol(Pointer.getPeer(protocol)), GIOLibrary.GProxy.class);
	}
	@Ptr 
	protected native static long g_proxy_get_default_for_protocol(@Ptr long protocol);
	/**
	 * Original signature : <code>GIOStream* g_proxy_connect(GProxy*, GIOStream*, GProxyAddress*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxy.h:35</i>
	 */
	public static Pointer<GIOStream > g_proxy_connect(Pointer<GIOLibrary.GProxy > proxy, Pointer<GIOStream > connection, Pointer<GProxyAddress > proxy_address, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_proxy_connect(Pointer.getPeer(proxy), Pointer.getPeer(connection), Pointer.getPeer(proxy_address), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOStream.class);
	}
	@Ptr 
	protected native static long g_proxy_connect(@Ptr long proxy, @Ptr long connection, @Ptr long proxy_address, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_proxy_connect_async(GProxy*, GIOStream*, GProxyAddress*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxy.h:37</i>
	 */
	public static void g_proxy_connect_async(Pointer<GIOLibrary.GProxy > proxy, Pointer<GIOStream > connection, Pointer<GProxyAddress > proxy_address, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_proxy_connect_async(Pointer.getPeer(proxy), Pointer.getPeer(connection), Pointer.getPeer(proxy_address), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_proxy_connect_async(@Ptr long proxy, @Ptr long connection, @Ptr long proxy_address, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GIOStream* g_proxy_connect_finish(GProxy*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxy.h:39</i>
	 */
	public static Pointer<GIOStream > g_proxy_connect_finish(Pointer<GIOLibrary.GProxy > proxy, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_proxy_connect_finish(Pointer.getPeer(proxy), Pointer.getPeer(result), Pointer.getPeer(error)), GIOStream.class);
	}
	@Ptr 
	protected native static long g_proxy_connect_finish(@Ptr long proxy, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_proxy_supports_hostname(GProxy*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxy.h:41</i>
	 */
	public static GIOLibrary.gboolean g_proxy_supports_hostname(Pointer<GIOLibrary.GProxy > proxy) {
		return g_proxy_supports_hostname(Pointer.getPeer(proxy));
	}
	protected native static GIOLibrary.gboolean g_proxy_supports_hostname(@Ptr long proxy);
	/**
	 * Original signature : <code>GType g_proxy_address_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyaddress.h:12</i>
	 */
	public static native GIOLibrary.GType g_proxy_address_get_type();
	/**
	 * Original signature : <code>GSocketAddress* g_proxy_address_new(GInetAddress*, guint16, const gchar*, const gchar*, guint16, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyaddress.h:14</i>
	 */
	public static Pointer<GSocketAddress > g_proxy_address_new(Pointer<GInetAddress > inetaddr, short port, Pointer<Byte > protocol, Pointer<Byte > dest_hostname, short dest_port, Pointer<Byte > username, Pointer<Byte > password) {
		return Pointer.pointerToAddress(g_proxy_address_new(Pointer.getPeer(inetaddr), port, Pointer.getPeer(protocol), Pointer.getPeer(dest_hostname), dest_port, Pointer.getPeer(username), Pointer.getPeer(password)), GSocketAddress.class);
	}
	@Ptr 
	protected native static long g_proxy_address_new(@Ptr long inetaddr, short port, @Ptr long protocol, @Ptr long dest_hostname, short dest_port, @Ptr long username, @Ptr long password);
	/**
	 * Original signature : <code>gchar* g_proxy_address_get_protocol(GProxyAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyaddress.h:16</i>
	 */
	public static Pointer<Byte > g_proxy_address_get_protocol(Pointer<GProxyAddress > proxy) {
		return Pointer.pointerToAddress(g_proxy_address_get_protocol(Pointer.getPeer(proxy)), Byte.class);
	}
	@Ptr 
	protected native static long g_proxy_address_get_protocol(@Ptr long proxy);
	/**
	 * Original signature : <code>gchar* g_proxy_address_get_destination_protocol(GProxyAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyaddress.h:18</i>
	 */
	public static Pointer<Byte > g_proxy_address_get_destination_protocol(Pointer<GProxyAddress > proxy) {
		return Pointer.pointerToAddress(g_proxy_address_get_destination_protocol(Pointer.getPeer(proxy)), Byte.class);
	}
	@Ptr 
	protected native static long g_proxy_address_get_destination_protocol(@Ptr long proxy);
	/**
	 * Original signature : <code>gchar* g_proxy_address_get_destination_hostname(GProxyAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyaddress.h:20</i>
	 */
	public static Pointer<Byte > g_proxy_address_get_destination_hostname(Pointer<GProxyAddress > proxy) {
		return Pointer.pointerToAddress(g_proxy_address_get_destination_hostname(Pointer.getPeer(proxy)), Byte.class);
	}
	@Ptr 
	protected native static long g_proxy_address_get_destination_hostname(@Ptr long proxy);
	/**
	 * Original signature : <code>guint16 g_proxy_address_get_destination_port(GProxyAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyaddress.h:22</i>
	 */
	public static short g_proxy_address_get_destination_port(Pointer<GProxyAddress > proxy) {
		return g_proxy_address_get_destination_port(Pointer.getPeer(proxy));
	}
	protected native static short g_proxy_address_get_destination_port(@Ptr long proxy);
	/**
	 * Original signature : <code>gchar* g_proxy_address_get_username(GProxyAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyaddress.h:24</i>
	 */
	public static Pointer<Byte > g_proxy_address_get_username(Pointer<GProxyAddress > proxy) {
		return Pointer.pointerToAddress(g_proxy_address_get_username(Pointer.getPeer(proxy)), Byte.class);
	}
	@Ptr 
	protected native static long g_proxy_address_get_username(@Ptr long proxy);
	/**
	 * Original signature : <code>gchar* g_proxy_address_get_password(GProxyAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyaddress.h:26</i>
	 */
	public static Pointer<Byte > g_proxy_address_get_password(Pointer<GProxyAddress > proxy) {
		return Pointer.pointerToAddress(g_proxy_address_get_password(Pointer.getPeer(proxy)), Byte.class);
	}
	@Ptr 
	protected native static long g_proxy_address_get_password(@Ptr long proxy);
	/**
	 * Original signature : <code>gchar* g_proxy_address_get_uri(GProxyAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyaddress.h:28</i>
	 */
	public static Pointer<Byte > g_proxy_address_get_uri(Pointer<GProxyAddress > proxy) {
		return Pointer.pointerToAddress(g_proxy_address_get_uri(Pointer.getPeer(proxy)), Byte.class);
	}
	@Ptr 
	protected native static long g_proxy_address_get_uri(@Ptr long proxy);
	/**
	 * Original signature : <code>GType g_socket_address_enumerator_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketaddressenumerator.h:20</i>
	 */
	public static native GIOLibrary.GType g_socket_address_enumerator_get_type();
	/**
	 * Original signature : <code>GSocketAddress* g_socket_address_enumerator_next(GSocketAddressEnumerator*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketaddressenumerator.h:22</i>
	 */
	public static Pointer<GSocketAddress > g_socket_address_enumerator_next(Pointer<GSocketAddressEnumerator > enumerator, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_address_enumerator_next(Pointer.getPeer(enumerator), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GSocketAddress.class);
	}
	@Ptr 
	protected native static long g_socket_address_enumerator_next(@Ptr long enumerator, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_socket_address_enumerator_next_async(GSocketAddressEnumerator*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketaddressenumerator.h:24</i>
	 */
	public static void g_socket_address_enumerator_next_async(Pointer<GSocketAddressEnumerator > enumerator, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_socket_address_enumerator_next_async(Pointer.getPeer(enumerator), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_socket_address_enumerator_next_async(@Ptr long enumerator, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GSocketAddress* g_socket_address_enumerator_next_finish(GSocketAddressEnumerator*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketaddressenumerator.h:26</i>
	 */
	public static Pointer<GSocketAddress > g_socket_address_enumerator_next_finish(Pointer<GSocketAddressEnumerator > enumerator, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_address_enumerator_next_finish(Pointer.getPeer(enumerator), Pointer.getPeer(result), Pointer.getPeer(error)), GSocketAddress.class);
	}
	@Ptr 
	protected native static long g_socket_address_enumerator_next_finish(@Ptr long enumerator, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>GType g_proxy_address_enumerator_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyaddressenumerator.h:25</i>
	 */
	public static native GIOLibrary.GType g_proxy_address_enumerator_get_type();
	/**
	 * Original signature : <code>GType g_proxy_resolver_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyresolver.h:18</i>
	 */
	public static native GIOLibrary.GType g_proxy_resolver_get_type();
	/**
	 * Original signature : <code>GProxyResolver* g_proxy_resolver_get_default()</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyresolver.h:20</i>
	 */
	public static Pointer<GIOLibrary.GProxyResolver > g_proxy_resolver_get_default() {
		return Pointer.pointerToAddress(g_proxy_resolver_get_default$2(), GIOLibrary.GProxyResolver.class);
	}
	@Ptr 
	protected native static long g_proxy_resolver_get_default$2();
	/**
	 * Original signature : <code>gboolean g_proxy_resolver_is_supported(GProxyResolver*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyresolver.h:22</i>
	 */
	public static GIOLibrary.gboolean g_proxy_resolver_is_supported(Pointer<GIOLibrary.GProxyResolver > resolver) {
		return g_proxy_resolver_is_supported(Pointer.getPeer(resolver));
	}
	protected native static GIOLibrary.gboolean g_proxy_resolver_is_supported(@Ptr long resolver);
	/**
	 * Original signature : <code>gchar** g_proxy_resolver_lookup(GProxyResolver*, const gchar*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyresolver.h:24</i>
	 */
	public static Pointer<Pointer<Byte > > g_proxy_resolver_lookup(Pointer<GIOLibrary.GProxyResolver > resolver, Pointer<Byte > uri, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_proxy_resolver_lookup(Pointer.getPeer(resolver), Pointer.getPeer(uri), Pointer.getPeer(cancellable), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_proxy_resolver_lookup(@Ptr long resolver, @Ptr long uri, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_proxy_resolver_lookup_async(GProxyResolver*, const gchar*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyresolver.h:26</i>
	 */
	public static void g_proxy_resolver_lookup_async(Pointer<GIOLibrary.GProxyResolver > resolver, Pointer<Byte > uri, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_proxy_resolver_lookup_async(Pointer.getPeer(resolver), Pointer.getPeer(uri), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_proxy_resolver_lookup_async(@Ptr long resolver, @Ptr long uri, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gchar** g_proxy_resolver_lookup_finish(GProxyResolver*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gproxyresolver.h:28</i>
	 */
	public static Pointer<Pointer<Byte > > g_proxy_resolver_lookup_finish(Pointer<GIOLibrary.GProxyResolver > resolver, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_proxy_resolver_lookup_finish(Pointer.getPeer(resolver), Pointer.getPeer(result), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_proxy_resolver_lookup_finish(@Ptr long resolver, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>GType g_resolver_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:46</i>
	 */
	public static native GIOLibrary.GType g_resolver_get_type();
	/**
	 * Original signature : <code>GResolver* g_resolver_get_default()</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:48</i>
	 */
	public static Pointer<GResolver > g_resolver_get_default() {
		return Pointer.pointerToAddress(g_resolver_get_default$2(), GResolver.class);
	}
	@Ptr 
	protected native static long g_resolver_get_default$2();
	/**
	 * Original signature : <code>void g_resolver_set_default(GResolver*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:50</i>
	 */
	public static void g_resolver_set_default(Pointer<GResolver > resolver) {
		g_resolver_set_default(Pointer.getPeer(resolver));
	}
	protected native static void g_resolver_set_default(@Ptr long resolver);
	/**
	 * Original signature : <code>GList* g_resolver_lookup_by_name(GResolver*, const gchar*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:52</i>
	 */
	public static Pointer g_resolver_lookup_by_name(Pointer<GResolver > resolver, Pointer<Byte > hostname, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resolver_lookup_by_name(Pointer.getPeer(resolver), Pointer.getPeer(hostname), Pointer.getPeer(cancellable), Pointer.getPeer(error)));
	}
	@Ptr 
	protected native static long g_resolver_lookup_by_name(@Ptr long resolver, @Ptr long hostname, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_resolver_lookup_by_name_async(GResolver*, const gchar*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:54</i>
	 */
	public static void g_resolver_lookup_by_name_async(Pointer<GResolver > resolver, Pointer<Byte > hostname, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_resolver_lookup_by_name_async(Pointer.getPeer(resolver), Pointer.getPeer(hostname), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_resolver_lookup_by_name_async(@Ptr long resolver, @Ptr long hostname, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GList* g_resolver_lookup_by_name_finish(GResolver*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:56</i>
	 */
	public static Pointer g_resolver_lookup_by_name_finish(Pointer<GResolver > resolver, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resolver_lookup_by_name_finish(Pointer.getPeer(resolver), Pointer.getPeer(result), Pointer.getPeer(error)));
	}
	@Ptr 
	protected native static long g_resolver_lookup_by_name_finish(@Ptr long resolver, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_resolver_free_addresses(GList*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:58</i>
	 */
	public static void g_resolver_free_addresses(Pointer addresses) {
		g_resolver_free_addresses(Pointer.getPeer(addresses));
	}
	protected native static void g_resolver_free_addresses(@Ptr long addresses);
	/**
	 * Original signature : <code>gchar* g_resolver_lookup_by_address(GResolver*, GInetAddress*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:60</i>
	 */
	public static Pointer<Byte > g_resolver_lookup_by_address(Pointer<GResolver > resolver, Pointer<GInetAddress > address, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resolver_lookup_by_address(Pointer.getPeer(resolver), Pointer.getPeer(address), Pointer.getPeer(cancellable), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_resolver_lookup_by_address(@Ptr long resolver, @Ptr long address, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_resolver_lookup_by_address_async(GResolver*, GInetAddress*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:62</i>
	 */
	public static void g_resolver_lookup_by_address_async(Pointer<GResolver > resolver, Pointer<GInetAddress > address, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_resolver_lookup_by_address_async(Pointer.getPeer(resolver), Pointer.getPeer(address), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_resolver_lookup_by_address_async(@Ptr long resolver, @Ptr long address, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gchar* g_resolver_lookup_by_address_finish(GResolver*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:64</i>
	 */
	public static Pointer<Byte > g_resolver_lookup_by_address_finish(Pointer<GResolver > resolver, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resolver_lookup_by_address_finish(Pointer.getPeer(resolver), Pointer.getPeer(result), Pointer.getPeer(error)), Byte.class);
	}
	@Ptr 
	protected native static long g_resolver_lookup_by_address_finish(@Ptr long resolver, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>GList* g_resolver_lookup_service(GResolver*, const gchar*, const gchar*, const gchar*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:66</i>
	 */
	public static Pointer g_resolver_lookup_service(Pointer<GResolver > resolver, Pointer<Byte > service, Pointer<Byte > protocol, Pointer<Byte > domain, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resolver_lookup_service(Pointer.getPeer(resolver), Pointer.getPeer(service), Pointer.getPeer(protocol), Pointer.getPeer(domain), Pointer.getPeer(cancellable), Pointer.getPeer(error)));
	}
	@Ptr 
	protected native static long g_resolver_lookup_service(@Ptr long resolver, @Ptr long service, @Ptr long protocol, @Ptr long domain, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_resolver_lookup_service_async(GResolver*, const gchar*, const gchar*, const gchar*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:68</i>
	 */
	public static void g_resolver_lookup_service_async(Pointer<GResolver > resolver, Pointer<Byte > service, Pointer<Byte > protocol, Pointer<Byte > domain, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_resolver_lookup_service_async(Pointer.getPeer(resolver), Pointer.getPeer(service), Pointer.getPeer(protocol), Pointer.getPeer(domain), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_resolver_lookup_service_async(@Ptr long resolver, @Ptr long service, @Ptr long protocol, @Ptr long domain, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GList* g_resolver_lookup_service_finish(GResolver*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:70</i>
	 */
	public static Pointer g_resolver_lookup_service_finish(Pointer<GResolver > resolver, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resolver_lookup_service_finish(Pointer.getPeer(resolver), Pointer.getPeer(result), Pointer.getPeer(error)));
	}
	@Ptr 
	protected native static long g_resolver_lookup_service_finish(@Ptr long resolver, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>GList* g_resolver_lookup_records(GResolver*, const gchar*, GResolverRecordType, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:72</i>
	 */
	public static Pointer g_resolver_lookup_records(Pointer<GResolver > resolver, Pointer<Byte > rrname, IntValuedEnum<GIOLibrary.GResolverRecordType > record_type, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resolver_lookup_records(Pointer.getPeer(resolver), Pointer.getPeer(rrname), (int)record_type.value(), Pointer.getPeer(cancellable), Pointer.getPeer(error)));
	}
	@Ptr 
	protected native static long g_resolver_lookup_records(@Ptr long resolver, @Ptr long rrname, int record_type, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_resolver_lookup_records_async(GResolver*, const gchar*, GResolverRecordType, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:74</i>
	 */
	public static void g_resolver_lookup_records_async(Pointer<GResolver > resolver, Pointer<Byte > rrname, IntValuedEnum<GIOLibrary.GResolverRecordType > record_type, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_resolver_lookup_records_async(Pointer.getPeer(resolver), Pointer.getPeer(rrname), (int)record_type.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_resolver_lookup_records_async(@Ptr long resolver, @Ptr long rrname, int record_type, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GList* g_resolver_lookup_records_finish(GResolver*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:76</i>
	 */
	public static Pointer g_resolver_lookup_records_finish(Pointer<GResolver > resolver, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resolver_lookup_records_finish(Pointer.getPeer(resolver), Pointer.getPeer(result), Pointer.getPeer(error)));
	}
	@Ptr 
	protected native static long g_resolver_lookup_records_finish(@Ptr long resolver, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_resolver_free_targets(GList*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:78</i>
	 */
	public static void g_resolver_free_targets(Pointer targets) {
		g_resolver_free_targets(Pointer.getPeer(targets));
	}
	protected native static void g_resolver_free_targets(@Ptr long targets);
	/**
	 * Original signature : <code>GQuark g_resolver_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/gio/gresolver.h:80</i>
	 */
	public static native int g_resolver_error_quark();
	/**
	 * Original signature : <code>GQuark g_resource_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:2</i>
	 */
	public static native int g_resource_error_quark();
	/**
	 * Original signature : <code>GType g_resource_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:12</i>
	 */
	public static native GIOLibrary.GType g_resource_get_type();
	/**
	 * Original signature : <code>GResource* g_resource_new_from_data(GBytes*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:14</i>
	 */
	public static Pointer<GIOLibrary.GResource > g_resource_new_from_data(Pointer<GIOLibrary.GBytes > data, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resource_new_from_data(Pointer.getPeer(data), Pointer.getPeer(error)), GIOLibrary.GResource.class);
	}
	@Ptr 
	protected native static long g_resource_new_from_data(@Ptr long data, @Ptr long error);
	/**
	 * Original signature : <code>GResource* g_resource_ref(GResource*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:16</i>
	 */
	public static Pointer<GIOLibrary.GResource > g_resource_ref(Pointer<GIOLibrary.GResource > resource) {
		return Pointer.pointerToAddress(g_resource_ref(Pointer.getPeer(resource)), GIOLibrary.GResource.class);
	}
	@Ptr 
	protected native static long g_resource_ref(@Ptr long resource);
	/**
	 * Original signature : <code>void g_resource_unref(GResource*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:18</i>
	 */
	public static void g_resource_unref(Pointer<GIOLibrary.GResource > resource) {
		g_resource_unref(Pointer.getPeer(resource));
	}
	protected native static void g_resource_unref(@Ptr long resource);
	/**
	 * Original signature : <code>GResource* g_resource_load(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:20</i>
	 */
	public static Pointer<GIOLibrary.GResource > g_resource_load(Pointer<Byte > filename, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resource_load(Pointer.getPeer(filename), Pointer.getPeer(error)), GIOLibrary.GResource.class);
	}
	@Ptr 
	protected native static long g_resource_load(@Ptr long filename, @Ptr long error);
	/**
	 * Original signature : <code>GInputStream* g_resource_open_stream(GResource*, const char*, GResourceLookupFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:22</i>
	 */
	public static Pointer<GInputStream > g_resource_open_stream(Pointer<GIOLibrary.GResource > resource, Pointer<Byte > path, IntValuedEnum<GIOLibrary.GResourceLookupFlags > lookup_flags, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resource_open_stream(Pointer.getPeer(resource), Pointer.getPeer(path), (int)lookup_flags.value(), Pointer.getPeer(error)), GInputStream.class);
	}
	@Ptr 
	protected native static long g_resource_open_stream(@Ptr long resource, @Ptr long path, int lookup_flags, @Ptr long error);
	/**
	 * Original signature : <code>GBytes* g_resource_lookup_data(GResource*, const char*, GResourceLookupFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:24</i>
	 */
	public static Pointer<GIOLibrary.GBytes > g_resource_lookup_data(Pointer<GIOLibrary.GResource > resource, Pointer<Byte > path, IntValuedEnum<GIOLibrary.GResourceLookupFlags > lookup_flags, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resource_lookup_data(Pointer.getPeer(resource), Pointer.getPeer(path), (int)lookup_flags.value(), Pointer.getPeer(error)), GIOLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_resource_lookup_data(@Ptr long resource, @Ptr long path, int lookup_flags, @Ptr long error);
	/**
	 * Original signature : <code>char** g_resource_enumerate_children(GResource*, const char*, GResourceLookupFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:26</i>
	 */
	public static Pointer<Pointer<Byte > > g_resource_enumerate_children(Pointer<GIOLibrary.GResource > resource, Pointer<Byte > path, IntValuedEnum<GIOLibrary.GResourceLookupFlags > lookup_flags, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resource_enumerate_children(Pointer.getPeer(resource), Pointer.getPeer(path), (int)lookup_flags.value(), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_resource_enumerate_children(@Ptr long resource, @Ptr long path, int lookup_flags, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_resource_get_info(GResource*, const char*, GResourceLookupFlags, gsize*, guint32*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:28</i>
	 */
	public static GIOLibrary.gboolean g_resource_get_info(Pointer<GIOLibrary.GResource > resource, Pointer<Byte > path, IntValuedEnum<GIOLibrary.GResourceLookupFlags > lookup_flags, Pointer<org.bridj.CLong > size, Pointer<Integer > flags, Pointer<Pointer > error) {
		return g_resource_get_info(Pointer.getPeer(resource), Pointer.getPeer(path), (int)lookup_flags.value(), Pointer.getPeer(size), Pointer.getPeer(flags), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_resource_get_info(@Ptr long resource, @Ptr long path, int lookup_flags, @Ptr long size, @Ptr long flags, @Ptr long error);
	/**
	 * Original signature : <code>void g_resources_register(GResource*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:30</i>
	 */
	public static void g_resources_register(Pointer<GIOLibrary.GResource > resource) {
		g_resources_register(Pointer.getPeer(resource));
	}
	protected native static void g_resources_register(@Ptr long resource);
	/**
	 * Original signature : <code>void g_resources_unregister(GResource*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:32</i>
	 */
	public static void g_resources_unregister(Pointer<GIOLibrary.GResource > resource) {
		g_resources_unregister(Pointer.getPeer(resource));
	}
	protected native static void g_resources_unregister(@Ptr long resource);
	/**
	 * Original signature : <code>GInputStream* g_resources_open_stream(const char*, GResourceLookupFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:34</i>
	 */
	public static Pointer<GInputStream > g_resources_open_stream(Pointer<Byte > path, IntValuedEnum<GIOLibrary.GResourceLookupFlags > lookup_flags, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resources_open_stream(Pointer.getPeer(path), (int)lookup_flags.value(), Pointer.getPeer(error)), GInputStream.class);
	}
	@Ptr 
	protected native static long g_resources_open_stream(@Ptr long path, int lookup_flags, @Ptr long error);
	/**
	 * Original signature : <code>GBytes* g_resources_lookup_data(const char*, GResourceLookupFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:36</i>
	 */
	public static Pointer<GIOLibrary.GBytes > g_resources_lookup_data(Pointer<Byte > path, IntValuedEnum<GIOLibrary.GResourceLookupFlags > lookup_flags, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resources_lookup_data(Pointer.getPeer(path), (int)lookup_flags.value(), Pointer.getPeer(error)), GIOLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_resources_lookup_data(@Ptr long path, int lookup_flags, @Ptr long error);
	/**
	 * Original signature : <code>char** g_resources_enumerate_children(const char*, GResourceLookupFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:38</i>
	 */
	public static Pointer<Pointer<Byte > > g_resources_enumerate_children(Pointer<Byte > path, IntValuedEnum<GIOLibrary.GResourceLookupFlags > lookup_flags, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_resources_enumerate_children(Pointer.getPeer(path), (int)lookup_flags.value(), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_resources_enumerate_children(@Ptr long path, int lookup_flags, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_resources_get_info(const char*, GResourceLookupFlags, gsize*, guint32*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:40</i>
	 */
	public static GIOLibrary.gboolean g_resources_get_info(Pointer<Byte > path, IntValuedEnum<GIOLibrary.GResourceLookupFlags > lookup_flags, Pointer<org.bridj.CLong > size, Pointer<Integer > flags, Pointer<Pointer > error) {
		return g_resources_get_info(Pointer.getPeer(path), (int)lookup_flags.value(), Pointer.getPeer(size), Pointer.getPeer(flags), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_resources_get_info(@Ptr long path, int lookup_flags, @Ptr long size, @Ptr long flags, @Ptr long error);
	/**
	 * Original signature : <code>void g_static_resource_init(GStaticResource*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:42</i>
	 */
	public static void g_static_resource_init(Pointer<GStaticResource > static_resource) {
		g_static_resource_init(Pointer.getPeer(static_resource));
	}
	protected native static void g_static_resource_init(@Ptr long static_resource);
	/**
	 * Original signature : <code>void g_static_resource_fini(GStaticResource*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:44</i>
	 */
	public static void g_static_resource_fini(Pointer<GStaticResource > static_resource) {
		g_static_resource_fini(Pointer.getPeer(static_resource));
	}
	protected native static void g_static_resource_fini(@Ptr long static_resource);
	/**
	 * Original signature : <code>GResource* g_static_resource_get_resource(GStaticResource*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gresource.h:46</i>
	 */
	public static Pointer<GIOLibrary.GResource > g_static_resource_get_resource(Pointer<GStaticResource > static_resource) {
		return Pointer.pointerToAddress(g_static_resource_get_resource(Pointer.getPeer(static_resource)), GIOLibrary.GResource.class);
	}
	@Ptr 
	protected native static long g_static_resource_get_resource(@Ptr long static_resource);
	/**
	 * Original signature : <code>GType g_seekable_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gseekable.h:35</i>
	 */
	public static native GIOLibrary.GType g_seekable_get_type();
	/**
	 * Original signature : <code>goffset g_seekable_tell(GSeekable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gseekable.h:37</i>
	 */
	public static long g_seekable_tell(Pointer<GIOLibrary.GSeekable > seekable) {
		return g_seekable_tell(Pointer.getPeer(seekable));
	}
	protected native static long g_seekable_tell(@Ptr long seekable);
	/**
	 * Original signature : <code>gboolean g_seekable_can_seek(GSeekable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gseekable.h:39</i>
	 */
	public static GIOLibrary.gboolean g_seekable_can_seek(Pointer<GIOLibrary.GSeekable > seekable) {
		return g_seekable_can_seek(Pointer.getPeer(seekable));
	}
	protected native static GIOLibrary.gboolean g_seekable_can_seek(@Ptr long seekable);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_seekable_seek(GSeekable*, goffset, GSeekType, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gseekable.h:41</i><br>
	 * Original signature : <code>gboolean g_seekable_seek(GSeekable*, goffset, GSeekType, GCancellable*, GError**)</code> * /<br>
	 * extern gboolean g_seekable_seek(GSeekable* seekable, goffset offset, GSeekType type, GCancellable* cancellable, GError** error);<br>
	 * Conversion Error : GSeekType (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_seekable_seek(GSeekable*, goffset, GSeekType, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gseekable.h:41</i><br>
	 * Original signature : <code>gboolean g_seekable_seek(GSeekable*, goffset, GSeekType, GCancellable*, GError**)</code> * /<br>
	 * extern gboolean g_seekable_seek(GSeekable* seekable, goffset offset, GSeekType type, GCancellable* cancellable, GError** error);<br>
	 * Conversion Error : GSeekType (Unsupported type)
	 */
	/**
	 * Original signature : <code>gboolean g_seekable_can_truncate(GSeekable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gseekable.h:43</i>
	 */
	public static GIOLibrary.gboolean g_seekable_can_truncate(Pointer<GIOLibrary.GSeekable > seekable) {
		return g_seekable_can_truncate(Pointer.getPeer(seekable));
	}
	protected native static GIOLibrary.gboolean g_seekable_can_truncate(@Ptr long seekable);
	/**
	 * Original signature : <code>gboolean g_seekable_truncate(GSeekable*, goffset, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gseekable.h:45</i>
	 */
	public static GIOLibrary.gboolean g_seekable_truncate(Pointer<GIOLibrary.GSeekable > seekable, long offset, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_seekable_truncate(Pointer.getPeer(seekable), offset, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_seekable_truncate(@Ptr long seekable, long offset, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>GType g_settings_schema_source_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsschema.h:4</i>
	 */
	public static native GIOLibrary.GType g_settings_schema_source_get_type();
	/**
	 * Original signature : <code>GSettingsSchemaSource* g_settings_schema_source_get_default()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsschema.h:6</i>
	 */
	public static Pointer<GIOLibrary.GSettingsSchemaSource > g_settings_schema_source_get_default() {
		return Pointer.pointerToAddress(g_settings_schema_source_get_default$2(), GIOLibrary.GSettingsSchemaSource.class);
	}
	@Ptr 
	protected native static long g_settings_schema_source_get_default$2();
	/**
	 * Original signature : <code>GSettingsSchemaSource* g_settings_schema_source_ref(GSettingsSchemaSource*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsschema.h:8</i>
	 */
	public static Pointer<GIOLibrary.GSettingsSchemaSource > g_settings_schema_source_ref(Pointer<GIOLibrary.GSettingsSchemaSource > source) {
		return Pointer.pointerToAddress(g_settings_schema_source_ref(Pointer.getPeer(source)), GIOLibrary.GSettingsSchemaSource.class);
	}
	@Ptr 
	protected native static long g_settings_schema_source_ref(@Ptr long source);
	/**
	 * Original signature : <code>void g_settings_schema_source_unref(GSettingsSchemaSource*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsschema.h:10</i>
	 */
	public static void g_settings_schema_source_unref(Pointer<GIOLibrary.GSettingsSchemaSource > source) {
		g_settings_schema_source_unref(Pointer.getPeer(source));
	}
	protected native static void g_settings_schema_source_unref(@Ptr long source);
	/**
	 * Original signature : <code>GSettingsSchemaSource* g_settings_schema_source_new_from_directory(const gchar*, GSettingsSchemaSource*, gboolean, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsschema.h:12</i>
	 */
	public static Pointer<GIOLibrary.GSettingsSchemaSource > g_settings_schema_source_new_from_directory(Pointer<Byte > directory, Pointer<GIOLibrary.GSettingsSchemaSource > parent, GIOLibrary.gboolean trusted, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_settings_schema_source_new_from_directory(Pointer.getPeer(directory), Pointer.getPeer(parent), trusted, Pointer.getPeer(error)), GIOLibrary.GSettingsSchemaSource.class);
	}
	@Ptr 
	protected native static long g_settings_schema_source_new_from_directory(@Ptr long directory, @Ptr long parent, GIOLibrary.gboolean trusted, @Ptr long error);
	/**
	 * Original signature : <code>GSettingsSchema* g_settings_schema_source_lookup(GSettingsSchemaSource*, const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsschema.h:14</i>
	 */
	public static Pointer<GIOLibrary.GSettingsSchema > g_settings_schema_source_lookup(Pointer<GIOLibrary.GSettingsSchemaSource > source, Pointer<Byte > schema_id, GIOLibrary.gboolean recursive) {
		return Pointer.pointerToAddress(g_settings_schema_source_lookup(Pointer.getPeer(source), Pointer.getPeer(schema_id), recursive), GIOLibrary.GSettingsSchema.class);
	}
	@Ptr 
	protected native static long g_settings_schema_source_lookup(@Ptr long source, @Ptr long schema_id, GIOLibrary.gboolean recursive);
	/**
	 * Original signature : <code>GType g_settings_schema_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsschema.h:16</i>
	 */
	public static native GIOLibrary.GType g_settings_schema_get_type();
	/**
	 * Original signature : <code>GSettingsSchema* g_settings_schema_ref(GSettingsSchema*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsschema.h:18</i>
	 */
	public static Pointer<GIOLibrary.GSettingsSchema > g_settings_schema_ref(Pointer<GIOLibrary.GSettingsSchema > schema) {
		return Pointer.pointerToAddress(g_settings_schema_ref(Pointer.getPeer(schema)), GIOLibrary.GSettingsSchema.class);
	}
	@Ptr 
	protected native static long g_settings_schema_ref(@Ptr long schema);
	/**
	 * Original signature : <code>void g_settings_schema_unref(GSettingsSchema*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsschema.h:20</i>
	 */
	public static void g_settings_schema_unref(Pointer<GIOLibrary.GSettingsSchema > schema) {
		g_settings_schema_unref(Pointer.getPeer(schema));
	}
	protected native static void g_settings_schema_unref(@Ptr long schema);
	/**
	 * Original signature : <code>gchar* g_settings_schema_get_id(GSettingsSchema*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsschema.h:22</i>
	 */
	public static Pointer<Byte > g_settings_schema_get_id(Pointer<GIOLibrary.GSettingsSchema > schema) {
		return Pointer.pointerToAddress(g_settings_schema_get_id(Pointer.getPeer(schema)), Byte.class);
	}
	@Ptr 
	protected native static long g_settings_schema_get_id(@Ptr long schema);
	/**
	 * Original signature : <code>gchar* g_settings_schema_get_path(GSettingsSchema*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsschema.h:24</i>
	 */
	public static Pointer<Byte > g_settings_schema_get_path(Pointer<GIOLibrary.GSettingsSchema > schema) {
		return Pointer.pointerToAddress(g_settings_schema_get_path(Pointer.getPeer(schema)), Byte.class);
	}
	@Ptr 
	protected native static long g_settings_schema_get_path(@Ptr long schema);
	/**
	 * Original signature : <code>GType g_settings_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:23</i>
	 */
	public static native GIOLibrary.GType g_settings_get_type();
	/**
	 * Original signature : <code>const gchar** g_settings_list_schemas()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:25</i>
	 */
	public static Pointer<Pointer<Byte > > g_settings_list_schemas() {
		return Pointer.pointerToAddress(g_settings_list_schemas$2(), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_settings_list_schemas$2();
	/**
	 * Original signature : <code>const gchar** g_settings_list_relocatable_schemas()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:27</i>
	 */
	public static Pointer<Pointer<Byte > > g_settings_list_relocatable_schemas() {
		return Pointer.pointerToAddress(g_settings_list_relocatable_schemas$2(), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_settings_list_relocatable_schemas$2();
	/**
	 * Original signature : <code>GSettings* g_settings_new(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:29</i>
	 */
	public static Pointer<GSettings > g_settings_new(Pointer<Byte > schema_id) {
		return Pointer.pointerToAddress(g_settings_new(Pointer.getPeer(schema_id)), GSettings.class);
	}
	@Ptr 
	protected native static long g_settings_new(@Ptr long schema_id);
	/**
	 * Original signature : <code>GSettings* g_settings_new_with_path(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:31</i>
	 */
	public static Pointer<GSettings > g_settings_new_with_path(Pointer<Byte > schema_id, Pointer<Byte > path) {
		return Pointer.pointerToAddress(g_settings_new_with_path(Pointer.getPeer(schema_id), Pointer.getPeer(path)), GSettings.class);
	}
	@Ptr 
	protected native static long g_settings_new_with_path(@Ptr long schema_id, @Ptr long path);
	/**
	 * Original signature : <code>GSettings* g_settings_new_with_backend(const gchar*, GSettingsBackend*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:33</i>
	 */
	public static Pointer<GSettings > g_settings_new_with_backend(Pointer<Byte > schema_id, Pointer<GSettingsBackend > backend) {
		return Pointer.pointerToAddress(g_settings_new_with_backend(Pointer.getPeer(schema_id), Pointer.getPeer(backend)), GSettings.class);
	}
	@Ptr 
	protected native static long g_settings_new_with_backend(@Ptr long schema_id, @Ptr long backend);
	/**
	 * Original signature : <code>GSettings* g_settings_new_with_backend_and_path(const gchar*, GSettingsBackend*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:35</i>
	 */
	public static Pointer<GSettings > g_settings_new_with_backend_and_path(Pointer<Byte > schema_id, Pointer<GSettingsBackend > backend, Pointer<Byte > path) {
		return Pointer.pointerToAddress(g_settings_new_with_backend_and_path(Pointer.getPeer(schema_id), Pointer.getPeer(backend), Pointer.getPeer(path)), GSettings.class);
	}
	@Ptr 
	protected native static long g_settings_new_with_backend_and_path(@Ptr long schema_id, @Ptr long backend, @Ptr long path);
	/**
	 * Original signature : <code>GSettings* g_settings_new_full(GSettingsSchema*, GSettingsBackend*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:37</i>
	 */
	public static Pointer<GSettings > g_settings_new_full(Pointer<GIOLibrary.GSettingsSchema > schema, Pointer<GSettingsBackend > backend, Pointer<Byte > path) {
		return Pointer.pointerToAddress(g_settings_new_full(Pointer.getPeer(schema), Pointer.getPeer(backend), Pointer.getPeer(path)), GSettings.class);
	}
	@Ptr 
	protected native static long g_settings_new_full(@Ptr long schema, @Ptr long backend, @Ptr long path);
	/**
	 * Original signature : <code>gchar** g_settings_list_children(GSettings*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:39</i>
	 */
	public static Pointer<Pointer<Byte > > g_settings_list_children(Pointer<GSettings > settings) {
		return Pointer.pointerToAddress(g_settings_list_children(Pointer.getPeer(settings)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_settings_list_children(@Ptr long settings);
	/**
	 * Original signature : <code>gchar** g_settings_list_keys(GSettings*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:41</i>
	 */
	public static Pointer<Pointer<Byte > > g_settings_list_keys(Pointer<GSettings > settings) {
		return Pointer.pointerToAddress(g_settings_list_keys(Pointer.getPeer(settings)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_settings_list_keys(@Ptr long settings);
	/**
	 * Original signature : <code>GVariant* g_settings_get_range(GSettings*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:43</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_settings_get_range(Pointer<GSettings > settings, Pointer<Byte > key) {
		return Pointer.pointerToAddress(g_settings_get_range(Pointer.getPeer(settings), Pointer.getPeer(key)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_settings_get_range(@Ptr long settings, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_settings_range_check(GSettings*, const gchar*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:45</i>
	 */
	public static GIOLibrary.gboolean g_settings_range_check(Pointer<GSettings > settings, Pointer<Byte > key, Pointer<GIOLibrary.GVariant > value) {
		return g_settings_range_check(Pointer.getPeer(settings), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static GIOLibrary.gboolean g_settings_range_check(@Ptr long settings, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>gboolean g_settings_set_value(GSettings*, const gchar*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:47</i>
	 */
	public static GIOLibrary.gboolean g_settings_set_value(Pointer<GSettings > settings, Pointer<Byte > key, Pointer<GIOLibrary.GVariant > value) {
		return g_settings_set_value(Pointer.getPeer(settings), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static GIOLibrary.gboolean g_settings_set_value(@Ptr long settings, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_settings_get_value(GSettings*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:49</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_settings_get_value(Pointer<GSettings > settings, Pointer<Byte > key) {
		return Pointer.pointerToAddress(g_settings_get_value(Pointer.getPeer(settings), Pointer.getPeer(key)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_settings_get_value(@Ptr long settings, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_settings_set(GSettings*, const gchar*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:51</i>
	 */
	public static GIOLibrary.gboolean g_settings_set(Pointer<GSettings > settings, Pointer<Byte > key, Pointer<Byte > format, Object... varArgs1) {
		return g_settings_set(Pointer.getPeer(settings), Pointer.getPeer(key), Pointer.getPeer(format), varArgs1);
	}
	protected native static GIOLibrary.gboolean g_settings_set(@Ptr long settings, @Ptr long key, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>void g_settings_get(GSettings*, const gchar*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:53</i>
	 */
	public static void g_settings_get(Pointer<GSettings > settings, Pointer<Byte > key, Pointer<Byte > format, Object... varArgs1) {
		g_settings_get(Pointer.getPeer(settings), Pointer.getPeer(key), Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_settings_get(@Ptr long settings, @Ptr long key, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>void g_settings_reset(GSettings*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:55</i>
	 */
	public static void g_settings_reset(Pointer<GSettings > settings, Pointer<Byte > key) {
		g_settings_reset(Pointer.getPeer(settings), Pointer.getPeer(key));
	}
	protected native static void g_settings_reset(@Ptr long settings, @Ptr long key);
	/**
	 * Original signature : <code>gint g_settings_get_int(GSettings*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:57</i>
	 */
	public static int g_settings_get_int(Pointer<GSettings > settings, Pointer<Byte > key) {
		return g_settings_get_int(Pointer.getPeer(settings), Pointer.getPeer(key));
	}
	protected native static int g_settings_get_int(@Ptr long settings, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_settings_set_int(GSettings*, const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:59</i>
	 */
	public static GIOLibrary.gboolean g_settings_set_int(Pointer<GSettings > settings, Pointer<Byte > key, int value) {
		return g_settings_set_int(Pointer.getPeer(settings), Pointer.getPeer(key), value);
	}
	protected native static GIOLibrary.gboolean g_settings_set_int(@Ptr long settings, @Ptr long key, int value);
	/**
	 * Original signature : <code>guint g_settings_get_uint(GSettings*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:61</i>
	 */
	public static int g_settings_get_uint(Pointer<GSettings > settings, Pointer<Byte > key) {
		return g_settings_get_uint(Pointer.getPeer(settings), Pointer.getPeer(key));
	}
	protected native static int g_settings_get_uint(@Ptr long settings, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_settings_set_uint(GSettings*, const gchar*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:63</i>
	 */
	public static GIOLibrary.gboolean g_settings_set_uint(Pointer<GSettings > settings, Pointer<Byte > key, int value) {
		return g_settings_set_uint(Pointer.getPeer(settings), Pointer.getPeer(key), value);
	}
	protected native static GIOLibrary.gboolean g_settings_set_uint(@Ptr long settings, @Ptr long key, int value);
	/**
	 * Original signature : <code>gchar* g_settings_get_string(GSettings*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:65</i>
	 */
	public static Pointer<Byte > g_settings_get_string(Pointer<GSettings > settings, Pointer<Byte > key) {
		return Pointer.pointerToAddress(g_settings_get_string(Pointer.getPeer(settings), Pointer.getPeer(key)), Byte.class);
	}
	@Ptr 
	protected native static long g_settings_get_string(@Ptr long settings, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_settings_set_string(GSettings*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:67</i>
	 */
	public static GIOLibrary.gboolean g_settings_set_string(Pointer<GSettings > settings, Pointer<Byte > key, Pointer<Byte > value) {
		return g_settings_set_string(Pointer.getPeer(settings), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static GIOLibrary.gboolean g_settings_set_string(@Ptr long settings, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>gboolean g_settings_get_boolean(GSettings*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:69</i>
	 */
	public static GIOLibrary.gboolean g_settings_get_boolean(Pointer<GSettings > settings, Pointer<Byte > key) {
		return g_settings_get_boolean(Pointer.getPeer(settings), Pointer.getPeer(key));
	}
	protected native static GIOLibrary.gboolean g_settings_get_boolean(@Ptr long settings, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_settings_set_boolean(GSettings*, const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:71</i>
	 */
	public static GIOLibrary.gboolean g_settings_set_boolean(Pointer<GSettings > settings, Pointer<Byte > key, GIOLibrary.gboolean value) {
		return g_settings_set_boolean(Pointer.getPeer(settings), Pointer.getPeer(key), value);
	}
	protected native static GIOLibrary.gboolean g_settings_set_boolean(@Ptr long settings, @Ptr long key, GIOLibrary.gboolean value);
	/**
	 * Original signature : <code>gdouble g_settings_get_double(GSettings*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:73</i>
	 */
	public static double g_settings_get_double(Pointer<GSettings > settings, Pointer<Byte > key) {
		return g_settings_get_double(Pointer.getPeer(settings), Pointer.getPeer(key));
	}
	protected native static double g_settings_get_double(@Ptr long settings, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_settings_set_double(GSettings*, const gchar*, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:75</i>
	 */
	public static GIOLibrary.gboolean g_settings_set_double(Pointer<GSettings > settings, Pointer<Byte > key, double value) {
		return g_settings_set_double(Pointer.getPeer(settings), Pointer.getPeer(key), value);
	}
	protected native static GIOLibrary.gboolean g_settings_set_double(@Ptr long settings, @Ptr long key, double value);
	/**
	 * Original signature : <code>gchar** g_settings_get_strv(GSettings*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:77</i>
	 */
	public static Pointer<Pointer<Byte > > g_settings_get_strv(Pointer<GSettings > settings, Pointer<Byte > key) {
		return Pointer.pointerToAddress(g_settings_get_strv(Pointer.getPeer(settings), Pointer.getPeer(key)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_settings_get_strv(@Ptr long settings, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_settings_set_strv(GSettings*, const gchar*, const const gchar**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:79</i>
	 */
	public static GIOLibrary.gboolean g_settings_set_strv(Pointer<GSettings > settings, Pointer<Byte > key, Pointer<Pointer<Byte > > value) {
		return g_settings_set_strv(Pointer.getPeer(settings), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static GIOLibrary.gboolean g_settings_set_strv(@Ptr long settings, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>gint g_settings_get_enum(GSettings*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:81</i>
	 */
	public static int g_settings_get_enum(Pointer<GSettings > settings, Pointer<Byte > key) {
		return g_settings_get_enum(Pointer.getPeer(settings), Pointer.getPeer(key));
	}
	protected native static int g_settings_get_enum(@Ptr long settings, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_settings_set_enum(GSettings*, const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:83</i>
	 */
	public static GIOLibrary.gboolean g_settings_set_enum(Pointer<GSettings > settings, Pointer<Byte > key, int value) {
		return g_settings_set_enum(Pointer.getPeer(settings), Pointer.getPeer(key), value);
	}
	protected native static GIOLibrary.gboolean g_settings_set_enum(@Ptr long settings, @Ptr long key, int value);
	/**
	 * Original signature : <code>guint g_settings_get_flags(GSettings*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:85</i>
	 */
	public static int g_settings_get_flags(Pointer<GSettings > settings, Pointer<Byte > key) {
		return g_settings_get_flags(Pointer.getPeer(settings), Pointer.getPeer(key));
	}
	protected native static int g_settings_get_flags(@Ptr long settings, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_settings_set_flags(GSettings*, const gchar*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:87</i>
	 */
	public static GIOLibrary.gboolean g_settings_set_flags(Pointer<GSettings > settings, Pointer<Byte > key, int value) {
		return g_settings_set_flags(Pointer.getPeer(settings), Pointer.getPeer(key), value);
	}
	protected native static GIOLibrary.gboolean g_settings_set_flags(@Ptr long settings, @Ptr long key, int value);
	/**
	 * Original signature : <code>GSettings* g_settings_get_child(GSettings*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:89</i>
	 */
	public static Pointer<GSettings > g_settings_get_child(Pointer<GSettings > settings, Pointer<Byte > name) {
		return Pointer.pointerToAddress(g_settings_get_child(Pointer.getPeer(settings), Pointer.getPeer(name)), GSettings.class);
	}
	@Ptr 
	protected native static long g_settings_get_child(@Ptr long settings, @Ptr long name);
	/**
	 * Original signature : <code>gboolean g_settings_is_writable(GSettings*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:91</i>
	 */
	public static GIOLibrary.gboolean g_settings_is_writable(Pointer<GSettings > settings, Pointer<Byte > name) {
		return g_settings_is_writable(Pointer.getPeer(settings), Pointer.getPeer(name));
	}
	protected native static GIOLibrary.gboolean g_settings_is_writable(@Ptr long settings, @Ptr long name);
	/**
	 * Original signature : <code>void g_settings_delay(GSettings*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:93</i>
	 */
	public static void g_settings_delay(Pointer<GSettings > settings) {
		g_settings_delay(Pointer.getPeer(settings));
	}
	protected native static void g_settings_delay(@Ptr long settings);
	/**
	 * Original signature : <code>void g_settings_apply(GSettings*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:95</i>
	 */
	public static void g_settings_apply(Pointer<GSettings > settings) {
		g_settings_apply(Pointer.getPeer(settings));
	}
	protected native static void g_settings_apply(@Ptr long settings);
	/**
	 * Original signature : <code>void g_settings_revert(GSettings*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:97</i>
	 */
	public static void g_settings_revert(Pointer<GSettings > settings) {
		g_settings_revert(Pointer.getPeer(settings));
	}
	protected native static void g_settings_revert(@Ptr long settings);
	/**
	 * Original signature : <code>gboolean g_settings_get_has_unapplied(GSettings*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:99</i>
	 */
	public static GIOLibrary.gboolean g_settings_get_has_unapplied(Pointer<GSettings > settings) {
		return g_settings_get_has_unapplied(Pointer.getPeer(settings));
	}
	protected native static GIOLibrary.gboolean g_settings_get_has_unapplied(@Ptr long settings);
	/**
	 * Original signature : <code>void g_settings_sync()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:101</i>
	 */
	public static native void g_settings_sync();
	/**
	 * Original signature : <code>void g_settings_bind(GSettings*, const gchar*, gpointer, __declspec(property) const gchar*, GSettingsBindFlags)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:167</i>
	 */
	public static void g_settings_bind(Pointer<GSettings > settings, Pointer<Byte > key, GIOLibrary.gpointer object, Pointer<Byte > gcharPtr1, IntValuedEnum<GIOLibrary.GSettingsBindFlags > flags) {
		g_settings_bind(Pointer.getPeer(settings), Pointer.getPeer(key), object, Pointer.getPeer(gcharPtr1), (int)flags.value());
	}
	protected native static void g_settings_bind(@Ptr long settings, @Ptr long key, GIOLibrary.gpointer object, @Ptr long gcharPtr1, int flags);
	/**
	 * Original signature : <code>void g_settings_bind_with_mapping(GSettings*, const gchar*, gpointer, __declspec(property) const gchar*, GSettingsBindFlags, GSettingsBindGetMapping, GSettingsBindSetMapping, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:169</i>
	 */
	public static void g_settings_bind_with_mapping(Pointer<GSettings > settings, Pointer<Byte > key, GIOLibrary.gpointer object, Pointer<Byte > gcharPtr1, IntValuedEnum<GIOLibrary.GSettingsBindFlags > flags, GIOLibrary.GSettingsBindGetMapping get_mapping, Pointer<GIOLibrary.GSettingsBindSetMapping > set_mapping, GIOLibrary.gpointer user_data, GIOLibrary.GDestroyNotify destroy) {
		g_settings_bind_with_mapping(Pointer.getPeer(settings), Pointer.getPeer(key), object, Pointer.getPeer(gcharPtr1), (int)flags.value(), Pointer.getPeer(get_mapping), Pointer.getPeer(set_mapping), user_data, Pointer.getPeer(destroy));
	}
	protected native static void g_settings_bind_with_mapping(@Ptr long settings, @Ptr long key, GIOLibrary.gpointer object, @Ptr long gcharPtr1, int flags, @Ptr long get_mapping, @Ptr long set_mapping, GIOLibrary.gpointer user_data, @Ptr long destroy);
	/**
	 * Original signature : <code>void g_settings_bind_writable(GSettings*, const gchar*, gpointer, __declspec(property) const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:171</i>
	 */
	public static void g_settings_bind_writable(Pointer<GSettings > settings, Pointer<Byte > key, GIOLibrary.gpointer object, Pointer<Byte > gcharPtr1, GIOLibrary.gboolean inverted) {
		g_settings_bind_writable(Pointer.getPeer(settings), Pointer.getPeer(key), object, Pointer.getPeer(gcharPtr1), inverted);
	}
	protected native static void g_settings_bind_writable(@Ptr long settings, @Ptr long key, GIOLibrary.gpointer object, @Ptr long gcharPtr1, GIOLibrary.gboolean inverted);
	/**
	 * Original signature : <code>void g_settings_unbind(gpointer, __declspec(property) const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:173</i>
	 */
	public static void g_settings_unbind(GIOLibrary.gpointer object, Pointer<Byte > gcharPtr1) {
		g_settings_unbind(object, Pointer.getPeer(gcharPtr1));
	}
	protected native static void g_settings_unbind(GIOLibrary.gpointer object, @Ptr long gcharPtr1);
	/**
	 * Original signature : <code>GAction* g_settings_create_action(GSettings*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:175</i>
	 */
	public static Pointer<GIOLibrary.GAction > g_settings_create_action(Pointer<GSettings > settings, Pointer<Byte > key) {
		return Pointer.pointerToAddress(g_settings_create_action(Pointer.getPeer(settings), Pointer.getPeer(key)), GIOLibrary.GAction.class);
	}
	@Ptr 
	protected native static long g_settings_create_action(@Ptr long settings, @Ptr long key);
	/**
	 * Original signature : <code>gpointer g_settings_get_mapped(GSettings*, const gchar*, GSettingsGetMapping, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettings.h:177</i>
	 */
	public static GIOLibrary.gpointer g_settings_get_mapped(Pointer<GSettings > settings, Pointer<Byte > key, Pointer<GIOLibrary.GSettingsGetMapping > mapping, GIOLibrary.gpointer user_data) {
		return g_settings_get_mapped(Pointer.getPeer(settings), Pointer.getPeer(key), Pointer.getPeer(mapping), user_data);
	}
	protected native static GIOLibrary.gpointer g_settings_get_mapped(@Ptr long settings, @Ptr long key, @Ptr long mapping, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GType g_simple_action_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleaction.h:2</i>
	 */
	public static native GIOLibrary.GType g_simple_action_get_type();
	/**
	 * Original signature : <code>GSimpleAction* g_simple_action_new(const gchar*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleaction.h:4</i>
	 */
	public static Pointer<GIOLibrary.GSimpleAction > g_simple_action_new(Pointer<Byte > name, Pointer<GIOLibrary.GVariantType > parameter_type) {
		return Pointer.pointerToAddress(g_simple_action_new(Pointer.getPeer(name), Pointer.getPeer(parameter_type)), GIOLibrary.GSimpleAction.class);
	}
	@Ptr 
	protected native static long g_simple_action_new(@Ptr long name, @Ptr long parameter_type);
	/**
	 * Original signature : <code>GSimpleAction* g_simple_action_new_stateful(const gchar*, const GVariantType*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleaction.h:6</i>
	 */
	public static Pointer<GIOLibrary.GSimpleAction > g_simple_action_new_stateful(Pointer<Byte > name, Pointer<GIOLibrary.GVariantType > parameter_type, Pointer<GIOLibrary.GVariant > state) {
		return Pointer.pointerToAddress(g_simple_action_new_stateful(Pointer.getPeer(name), Pointer.getPeer(parameter_type), Pointer.getPeer(state)), GIOLibrary.GSimpleAction.class);
	}
	@Ptr 
	protected native static long g_simple_action_new_stateful(@Ptr long name, @Ptr long parameter_type, @Ptr long state);
	/**
	 * Original signature : <code>void g_simple_action_set_enabled(GSimpleAction*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleaction.h:8</i>
	 */
	public static void g_simple_action_set_enabled(Pointer<GIOLibrary.GSimpleAction > simple, GIOLibrary.gboolean enabled) {
		g_simple_action_set_enabled(Pointer.getPeer(simple), enabled);
	}
	protected native static void g_simple_action_set_enabled(@Ptr long simple, GIOLibrary.gboolean enabled);
	/**
	 * Original signature : <code>void g_simple_action_set_state(GSimpleAction*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleaction.h:10</i>
	 */
	public static void g_simple_action_set_state(Pointer<GIOLibrary.GSimpleAction > simple, Pointer<GIOLibrary.GVariant > value) {
		g_simple_action_set_state(Pointer.getPeer(simple), Pointer.getPeer(value));
	}
	protected native static void g_simple_action_set_state(@Ptr long simple, @Ptr long value);
	/**
	 * Original signature : <code>GType g_simple_action_group_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleactiongroup.h:20</i>
	 */
	public static native GIOLibrary.GType g_simple_action_group_get_type();
	/**
	 * Original signature : <code>GSimpleActionGroup* g_simple_action_group_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleactiongroup.h:22</i>
	 */
	public static Pointer<GSimpleActionGroup > g_simple_action_group_new() {
		return Pointer.pointerToAddress(g_simple_action_group_new$2(), GSimpleActionGroup.class);
	}
	@Ptr 
	protected native static long g_simple_action_group_new$2();
	/**
	 * Original signature : <code>GAction* g_simple_action_group_lookup(GSimpleActionGroup*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleactiongroup.h:24</i>
	 */
	public static Pointer<GIOLibrary.GAction > g_simple_action_group_lookup(Pointer<GSimpleActionGroup > simple, Pointer<Byte > action_name) {
		return Pointer.pointerToAddress(g_simple_action_group_lookup(Pointer.getPeer(simple), Pointer.getPeer(action_name)), GIOLibrary.GAction.class);
	}
	@Ptr 
	protected native static long g_simple_action_group_lookup(@Ptr long simple, @Ptr long action_name);
	/**
	 * Original signature : <code>void g_simple_action_group_insert(GSimpleActionGroup*, GAction*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleactiongroup.h:26</i>
	 */
	public static void g_simple_action_group_insert(Pointer<GSimpleActionGroup > simple, Pointer<GIOLibrary.GAction > action) {
		g_simple_action_group_insert(Pointer.getPeer(simple), Pointer.getPeer(action));
	}
	protected native static void g_simple_action_group_insert(@Ptr long simple, @Ptr long action);
	/**
	 * Original signature : <code>void g_simple_action_group_remove(GSimpleActionGroup*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleactiongroup.h:28</i>
	 */
	public static void g_simple_action_group_remove(Pointer<GSimpleActionGroup > simple, Pointer<Byte > action_name) {
		g_simple_action_group_remove(Pointer.getPeer(simple), Pointer.getPeer(action_name));
	}
	protected native static void g_simple_action_group_remove(@Ptr long simple, @Ptr long action_name);
	/**
	 * Original signature : <code>void g_simple_action_group_add_entries(GSimpleActionGroup*, const GActionEntry*, gint, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleactiongroup.h:30</i>
	 */
	public static void g_simple_action_group_add_entries(Pointer<GSimpleActionGroup > simple, Pointer<GActionEntry > entries, int n_entries, GIOLibrary.gpointer user_data) {
		g_simple_action_group_add_entries(Pointer.getPeer(simple), Pointer.getPeer(entries), n_entries, user_data);
	}
	protected native static void g_simple_action_group_add_entries(@Ptr long simple, @Ptr long entries, int n_entries, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GType g_simple_async_result_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:7</i>
	 */
	public static native GIOLibrary.GType g_simple_async_result_get_type();
	/**
	 * Original signature : <code>GSimpleAsyncResult* g_simple_async_result_new(GObject*, GAsyncReadyCallback, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:9</i>
	 */
	public static Pointer<GIOLibrary.GSimpleAsyncResult > g_simple_async_result_new(Pointer source_object, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data, GIOLibrary.gpointer source_tag) {
		return Pointer.pointerToAddress(g_simple_async_result_new(Pointer.getPeer(source_object), Pointer.getPeer(callback), user_data, source_tag), GIOLibrary.GSimpleAsyncResult.class);
	}
	@Ptr 
	protected native static long g_simple_async_result_new(@Ptr long source_object, @Ptr long callback, GIOLibrary.gpointer user_data, GIOLibrary.gpointer source_tag);
	/**
	 * Original signature : <code>GSimpleAsyncResult* g_simple_async_result_new_error(GObject*, GAsyncReadyCallback, gpointer, GQuark, gint, const char*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:11</i>
	 */
	public static Pointer<GIOLibrary.GSimpleAsyncResult > g_simple_async_result_new_error(Pointer source_object, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data, int domain, int code, Pointer<Byte > format, Object... varArgs1) {
		return Pointer.pointerToAddress(g_simple_async_result_new_error(Pointer.getPeer(source_object), Pointer.getPeer(callback), user_data, domain, code, Pointer.getPeer(format), varArgs1), GIOLibrary.GSimpleAsyncResult.class);
	}
	@Ptr 
	protected native static long g_simple_async_result_new_error(@Ptr long source_object, @Ptr long callback, GIOLibrary.gpointer user_data, int domain, int code, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>GSimpleAsyncResult* g_simple_async_result_new_from_error(GObject*, GAsyncReadyCallback, gpointer, const GError*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:13</i>
	 */
	public static Pointer<GIOLibrary.GSimpleAsyncResult > g_simple_async_result_new_from_error(Pointer source_object, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data, Pointer error) {
		return Pointer.pointerToAddress(g_simple_async_result_new_from_error(Pointer.getPeer(source_object), Pointer.getPeer(callback), user_data, Pointer.getPeer(error)), GIOLibrary.GSimpleAsyncResult.class);
	}
	@Ptr 
	protected native static long g_simple_async_result_new_from_error(@Ptr long source_object, @Ptr long callback, GIOLibrary.gpointer user_data, @Ptr long error);
	/**
	 * Original signature : <code>GSimpleAsyncResult* g_simple_async_result_new_take_error(GObject*, GAsyncReadyCallback, gpointer, GError*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:15</i>
	 */
	public static Pointer<GIOLibrary.GSimpleAsyncResult > g_simple_async_result_new_take_error(Pointer source_object, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data, Pointer error) {
		return Pointer.pointerToAddress(g_simple_async_result_new_take_error(Pointer.getPeer(source_object), Pointer.getPeer(callback), user_data, Pointer.getPeer(error)), GIOLibrary.GSimpleAsyncResult.class);
	}
	@Ptr 
	protected native static long g_simple_async_result_new_take_error(@Ptr long source_object, @Ptr long callback, GIOLibrary.gpointer user_data, @Ptr long error);
	/**
	 * Original signature : <code>void g_simple_async_result_set_op_res_gpointer(GSimpleAsyncResult*, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:17</i>
	 */
	public static void g_simple_async_result_set_op_res_gpointer(Pointer<GIOLibrary.GSimpleAsyncResult > simple, GIOLibrary.gpointer op_res, GIOLibrary.GDestroyNotify destroy_op_res) {
		g_simple_async_result_set_op_res_gpointer(Pointer.getPeer(simple), op_res, Pointer.getPeer(destroy_op_res));
	}
	protected native static void g_simple_async_result_set_op_res_gpointer(@Ptr long simple, GIOLibrary.gpointer op_res, @Ptr long destroy_op_res);
	/**
	 * Original signature : <code>gpointer g_simple_async_result_get_op_res_gpointer(GSimpleAsyncResult*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:19</i>
	 */
	public static GIOLibrary.gpointer g_simple_async_result_get_op_res_gpointer(Pointer<GIOLibrary.GSimpleAsyncResult > simple) {
		return g_simple_async_result_get_op_res_gpointer(Pointer.getPeer(simple));
	}
	protected native static GIOLibrary.gpointer g_simple_async_result_get_op_res_gpointer(@Ptr long simple);
	/**
	 * Original signature : <code>void g_simple_async_result_set_op_res_gssize(GSimpleAsyncResult*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:21</i>
	 */
	public static void g_simple_async_result_set_op_res_gssize(Pointer<GIOLibrary.GSimpleAsyncResult > simple, @org.bridj.ann.CLong long op_res) {
		g_simple_async_result_set_op_res_gssize(Pointer.getPeer(simple), op_res);
	}
	protected native static void g_simple_async_result_set_op_res_gssize(@Ptr long simple, @org.bridj.ann.CLong long op_res);
	/**
	 * Original signature : <code>gssize g_simple_async_result_get_op_res_gssize(GSimpleAsyncResult*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:23</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_simple_async_result_get_op_res_gssize(Pointer<GIOLibrary.GSimpleAsyncResult > simple) {
		return g_simple_async_result_get_op_res_gssize(Pointer.getPeer(simple));
	}
	@org.bridj.ann.CLong 
	protected native static long g_simple_async_result_get_op_res_gssize(@Ptr long simple);
	/**
	 * Original signature : <code>void g_simple_async_result_set_op_res_gboolean(GSimpleAsyncResult*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:25</i>
	 */
	public static void g_simple_async_result_set_op_res_gboolean(Pointer<GIOLibrary.GSimpleAsyncResult > simple, GIOLibrary.gboolean op_res) {
		g_simple_async_result_set_op_res_gboolean(Pointer.getPeer(simple), op_res);
	}
	protected native static void g_simple_async_result_set_op_res_gboolean(@Ptr long simple, GIOLibrary.gboolean op_res);
	/**
	 * Original signature : <code>gboolean g_simple_async_result_get_op_res_gboolean(GSimpleAsyncResult*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:27</i>
	 */
	public static GIOLibrary.gboolean g_simple_async_result_get_op_res_gboolean(Pointer<GIOLibrary.GSimpleAsyncResult > simple) {
		return g_simple_async_result_get_op_res_gboolean(Pointer.getPeer(simple));
	}
	protected native static GIOLibrary.gboolean g_simple_async_result_get_op_res_gboolean(@Ptr long simple);
	/**
	 * Original signature : <code>void g_simple_async_result_set_check_cancellable(GSimpleAsyncResult*, GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:29</i>
	 */
	public static void g_simple_async_result_set_check_cancellable(Pointer<GIOLibrary.GSimpleAsyncResult > simple, Pointer<GCancellable > check_cancellable) {
		g_simple_async_result_set_check_cancellable(Pointer.getPeer(simple), Pointer.getPeer(check_cancellable));
	}
	protected native static void g_simple_async_result_set_check_cancellable(@Ptr long simple, @Ptr long check_cancellable);
	/**
	 * Original signature : <code>gpointer g_simple_async_result_get_source_tag(GSimpleAsyncResult*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:31</i>
	 */
	public static GIOLibrary.gpointer g_simple_async_result_get_source_tag(Pointer<GIOLibrary.GSimpleAsyncResult > simple) {
		return g_simple_async_result_get_source_tag(Pointer.getPeer(simple));
	}
	protected native static GIOLibrary.gpointer g_simple_async_result_get_source_tag(@Ptr long simple);
	/**
	 * Original signature : <code>void g_simple_async_result_set_handle_cancellation(GSimpleAsyncResult*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:33</i>
	 */
	public static void g_simple_async_result_set_handle_cancellation(Pointer<GIOLibrary.GSimpleAsyncResult > simple, GIOLibrary.gboolean handle_cancellation) {
		g_simple_async_result_set_handle_cancellation(Pointer.getPeer(simple), handle_cancellation);
	}
	protected native static void g_simple_async_result_set_handle_cancellation(@Ptr long simple, GIOLibrary.gboolean handle_cancellation);
	/**
	 * Original signature : <code>void g_simple_async_result_complete(GSimpleAsyncResult*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:35</i>
	 */
	public static void g_simple_async_result_complete(Pointer<GIOLibrary.GSimpleAsyncResult > simple) {
		g_simple_async_result_complete(Pointer.getPeer(simple));
	}
	protected native static void g_simple_async_result_complete(@Ptr long simple);
	/**
	 * Original signature : <code>void g_simple_async_result_complete_in_idle(GSimpleAsyncResult*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:37</i>
	 */
	public static void g_simple_async_result_complete_in_idle(Pointer<GIOLibrary.GSimpleAsyncResult > simple) {
		g_simple_async_result_complete_in_idle(Pointer.getPeer(simple));
	}
	protected native static void g_simple_async_result_complete_in_idle(@Ptr long simple);
	/**
	 * Original signature : <code>void g_simple_async_result_run_in_thread(GSimpleAsyncResult*, GSimpleAsyncThreadFunc, int, GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:39</i>
	 */
	public static void g_simple_async_result_run_in_thread(Pointer<GIOLibrary.GSimpleAsyncResult > simple, Pointer<GIOLibrary.GSimpleAsyncThreadFunc > func, int io_priority, Pointer<GCancellable > cancellable) {
		g_simple_async_result_run_in_thread(Pointer.getPeer(simple), Pointer.getPeer(func), io_priority, Pointer.getPeer(cancellable));
	}
	protected native static void g_simple_async_result_run_in_thread(@Ptr long simple, @Ptr long func, int io_priority, @Ptr long cancellable);
	/**
	 * Original signature : <code>void g_simple_async_result_set_from_error(GSimpleAsyncResult*, const GError*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:41</i>
	 */
	public static void g_simple_async_result_set_from_error(Pointer<GIOLibrary.GSimpleAsyncResult > simple, Pointer error) {
		g_simple_async_result_set_from_error(Pointer.getPeer(simple), Pointer.getPeer(error));
	}
	protected native static void g_simple_async_result_set_from_error(@Ptr long simple, @Ptr long error);
	/**
	 * Original signature : <code>void g_simple_async_result_take_error(GSimpleAsyncResult*, GError*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:43</i>
	 */
	public static void g_simple_async_result_take_error(Pointer<GIOLibrary.GSimpleAsyncResult > simple, Pointer error) {
		g_simple_async_result_take_error(Pointer.getPeer(simple), Pointer.getPeer(error));
	}
	protected native static void g_simple_async_result_take_error(@Ptr long simple, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_simple_async_result_propagate_error(GSimpleAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:45</i>
	 */
	public static GIOLibrary.gboolean g_simple_async_result_propagate_error(Pointer<GIOLibrary.GSimpleAsyncResult > simple, Pointer<Pointer > dest) {
		return g_simple_async_result_propagate_error(Pointer.getPeer(simple), Pointer.getPeer(dest));
	}
	protected native static GIOLibrary.gboolean g_simple_async_result_propagate_error(@Ptr long simple, @Ptr long dest);
	/**
	 * Original signature : <code>void g_simple_async_result_set_error(GSimpleAsyncResult*, GQuark, gint, const char*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:47</i>
	 */
	public static void g_simple_async_result_set_error(Pointer<GIOLibrary.GSimpleAsyncResult > simple, int domain, int code, Pointer<Byte > format, Object... varArgs1) {
		g_simple_async_result_set_error(Pointer.getPeer(simple), domain, code, Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_simple_async_result_set_error(@Ptr long simple, int domain, int code, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>void g_simple_async_result_set_error_va(GSimpleAsyncResult*, GQuark, gint, const char*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:49</i>
	 */
	public static void g_simple_async_result_set_error_va(Pointer<GIOLibrary.GSimpleAsyncResult > simple, int domain, int code, Pointer<Byte > format, Object... args) {
		g_simple_async_result_set_error_va(Pointer.getPeer(simple), domain, code, Pointer.getPeer(format), args);
	}
	protected native static void g_simple_async_result_set_error_va(@Ptr long simple, int domain, int code, @Ptr long format, Object... args);
	/**
	 * Original signature : <code>gboolean g_simple_async_result_is_valid(GAsyncResult*, GObject*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:51</i>
	 */
	public static GIOLibrary.gboolean g_simple_async_result_is_valid(Pointer<GIOLibrary.GAsyncResult > result, Pointer source, GIOLibrary.gpointer source_tag) {
		return g_simple_async_result_is_valid(Pointer.getPeer(result), Pointer.getPeer(source), source_tag);
	}
	protected native static GIOLibrary.gboolean g_simple_async_result_is_valid(@Ptr long result, @Ptr long source, GIOLibrary.gpointer source_tag);
	/**
	 * Original signature : <code>void g_simple_async_report_error_in_idle(GObject*, GAsyncReadyCallback, gpointer, GQuark, gint, const char*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:53</i>
	 */
	public static void g_simple_async_report_error_in_idle(Pointer object, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data, int domain, int code, Pointer<Byte > format, Object... varArgs1) {
		g_simple_async_report_error_in_idle(Pointer.getPeer(object), Pointer.getPeer(callback), user_data, domain, code, Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_simple_async_report_error_in_idle(@Ptr long object, @Ptr long callback, GIOLibrary.gpointer user_data, int domain, int code, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>void g_simple_async_report_gerror_in_idle(GObject*, GAsyncReadyCallback, gpointer, const GError*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:55</i>
	 */
	public static void g_simple_async_report_gerror_in_idle(Pointer object, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data, Pointer error) {
		g_simple_async_report_gerror_in_idle(Pointer.getPeer(object), Pointer.getPeer(callback), user_data, Pointer.getPeer(error));
	}
	protected native static void g_simple_async_report_gerror_in_idle(@Ptr long object, @Ptr long callback, GIOLibrary.gpointer user_data, @Ptr long error);
	/**
	 * Original signature : <code>void g_simple_async_report_take_gerror_in_idle(GObject*, GAsyncReadyCallback, gpointer, GError*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleasyncresult.h:57</i>
	 */
	public static void g_simple_async_report_take_gerror_in_idle(Pointer object, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data, Pointer error) {
		g_simple_async_report_take_gerror_in_idle(Pointer.getPeer(object), Pointer.getPeer(callback), user_data, Pointer.getPeer(error));
	}
	protected native static void g_simple_async_report_take_gerror_in_idle(@Ptr long object, @Ptr long callback, GIOLibrary.gpointer user_data, @Ptr long error);
	/**
	 * Original signature : <code>GType g_simple_permission_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimplepermission.h:2</i>
	 */
	public static native GIOLibrary.GType g_simple_permission_get_type();
	/**
	 * Original signature : <code>GPermission* g_simple_permission_new(gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimplepermission.h:4</i>
	 */
	public static Pointer<GPermission > g_simple_permission_new(GIOLibrary.gboolean allowed) {
		return Pointer.pointerToAddress(g_simple_permission_new$2(allowed), GPermission.class);
	}
	@Ptr 
	protected native static long g_simple_permission_new$2(GIOLibrary.gboolean allowed);
	/**
	 * Original signature : <code>GType g_socket_client_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:22</i>
	 */
	public static native GIOLibrary.GType g_socket_client_get_type();
	/**
	 * Original signature : <code>GSocketClient* g_socket_client_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:24</i>
	 */
	public static Pointer<GSocketClient > g_socket_client_new() {
		return Pointer.pointerToAddress(g_socket_client_new$2(), GSocketClient.class);
	}
	@Ptr 
	protected native static long g_socket_client_new$2();
	/**
	 * Original signature : <code>GSocketFamily g_socket_client_get_family(GSocketClient*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:26</i>
	 */
	public static IntValuedEnum<GIOLibrary.GSocketFamily > g_socket_client_get_family(Pointer<GSocketClient > client) {
		return FlagSet.fromValue(g_socket_client_get_family(Pointer.getPeer(client)), GIOLibrary.GSocketFamily.class);
	}
	protected native static int g_socket_client_get_family(@Ptr long client);
	/**
	 * Original signature : <code>void g_socket_client_set_family(GSocketClient*, GSocketFamily)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:28</i>
	 */
	public static void g_socket_client_set_family(Pointer<GSocketClient > client, IntValuedEnum<GIOLibrary.GSocketFamily > family) {
		g_socket_client_set_family(Pointer.getPeer(client), (int)family.value());
	}
	protected native static void g_socket_client_set_family(@Ptr long client, int family);
	/**
	 * Original signature : <code>GSocketType g_socket_client_get_socket_type(GSocketClient*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:30</i>
	 */
	public static IntValuedEnum<GIOLibrary.GSocketType > g_socket_client_get_socket_type(Pointer<GSocketClient > client) {
		return FlagSet.fromValue(g_socket_client_get_socket_type(Pointer.getPeer(client)), GIOLibrary.GSocketType.class);
	}
	protected native static int g_socket_client_get_socket_type(@Ptr long client);
	/**
	 * Original signature : <code>void g_socket_client_set_socket_type(GSocketClient*, GSocketType)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:32</i>
	 */
	public static void g_socket_client_set_socket_type(Pointer<GSocketClient > client, IntValuedEnum<GIOLibrary.GSocketType > type) {
		g_socket_client_set_socket_type(Pointer.getPeer(client), (int)type.value());
	}
	protected native static void g_socket_client_set_socket_type(@Ptr long client, int type);
	/**
	 * Original signature : <code>GSocketProtocol g_socket_client_get_protocol(GSocketClient*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:34</i>
	 */
	public static IntValuedEnum<GIOLibrary.GSocketProtocol > g_socket_client_get_protocol(Pointer<GSocketClient > client) {
		return FlagSet.fromValue(g_socket_client_get_protocol(Pointer.getPeer(client)), GIOLibrary.GSocketProtocol.class);
	}
	protected native static int g_socket_client_get_protocol(@Ptr long client);
	/**
	 * Original signature : <code>void g_socket_client_set_protocol(GSocketClient*, GSocketProtocol)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:36</i>
	 */
	public static void g_socket_client_set_protocol(Pointer<GSocketClient > client, IntValuedEnum<GIOLibrary.GSocketProtocol > protocol) {
		g_socket_client_set_protocol(Pointer.getPeer(client), (int)protocol.value());
	}
	protected native static void g_socket_client_set_protocol(@Ptr long client, int protocol);
	/**
	 * Original signature : <code>GSocketAddress* g_socket_client_get_local_address(GSocketClient*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:38</i>
	 */
	public static Pointer<GSocketAddress > g_socket_client_get_local_address(Pointer<GSocketClient > client) {
		return Pointer.pointerToAddress(g_socket_client_get_local_address(Pointer.getPeer(client)), GSocketAddress.class);
	}
	@Ptr 
	protected native static long g_socket_client_get_local_address(@Ptr long client);
	/**
	 * Original signature : <code>void g_socket_client_set_local_address(GSocketClient*, GSocketAddress*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:40</i>
	 */
	public static void g_socket_client_set_local_address(Pointer<GSocketClient > client, Pointer<GSocketAddress > address) {
		g_socket_client_set_local_address(Pointer.getPeer(client), Pointer.getPeer(address));
	}
	protected native static void g_socket_client_set_local_address(@Ptr long client, @Ptr long address);
	/**
	 * Original signature : <code>guint g_socket_client_get_timeout(GSocketClient*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:42</i>
	 */
	public static int g_socket_client_get_timeout(Pointer<GSocketClient > client) {
		return g_socket_client_get_timeout(Pointer.getPeer(client));
	}
	protected native static int g_socket_client_get_timeout(@Ptr long client);
	/**
	 * Original signature : <code>void g_socket_client_set_timeout(GSocketClient*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:44</i>
	 */
	public static void g_socket_client_set_timeout(Pointer<GSocketClient > client, int timeout) {
		g_socket_client_set_timeout(Pointer.getPeer(client), timeout);
	}
	protected native static void g_socket_client_set_timeout(@Ptr long client, int timeout);
	/**
	 * Original signature : <code>gboolean g_socket_client_get_enable_proxy(GSocketClient*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:46</i>
	 */
	public static GIOLibrary.gboolean g_socket_client_get_enable_proxy(Pointer<GSocketClient > client) {
		return g_socket_client_get_enable_proxy(Pointer.getPeer(client));
	}
	protected native static GIOLibrary.gboolean g_socket_client_get_enable_proxy(@Ptr long client);
	/**
	 * Original signature : <code>void g_socket_client_set_enable_proxy(GSocketClient*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:48</i>
	 */
	public static void g_socket_client_set_enable_proxy(Pointer<GSocketClient > client, GIOLibrary.gboolean enable) {
		g_socket_client_set_enable_proxy(Pointer.getPeer(client), enable);
	}
	protected native static void g_socket_client_set_enable_proxy(@Ptr long client, GIOLibrary.gboolean enable);
	/**
	 * Original signature : <code>gboolean g_socket_client_get_tls(GSocketClient*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:50</i>
	 */
	public static GIOLibrary.gboolean g_socket_client_get_tls(Pointer<GSocketClient > client) {
		return g_socket_client_get_tls(Pointer.getPeer(client));
	}
	protected native static GIOLibrary.gboolean g_socket_client_get_tls(@Ptr long client);
	/**
	 * Original signature : <code>void g_socket_client_set_tls(GSocketClient*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:52</i>
	 */
	public static void g_socket_client_set_tls(Pointer<GSocketClient > client, GIOLibrary.gboolean tls) {
		g_socket_client_set_tls(Pointer.getPeer(client), tls);
	}
	protected native static void g_socket_client_set_tls(@Ptr long client, GIOLibrary.gboolean tls);
	/**
	 * Original signature : <code>GTlsCertificateFlags g_socket_client_get_tls_validation_flags(GSocketClient*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:54</i>
	 */
	public static IntValuedEnum<GIOLibrary.GTlsCertificateFlags > g_socket_client_get_tls_validation_flags(Pointer<GSocketClient > client) {
		return FlagSet.fromValue(g_socket_client_get_tls_validation_flags(Pointer.getPeer(client)), GIOLibrary.GTlsCertificateFlags.class);
	}
	protected native static int g_socket_client_get_tls_validation_flags(@Ptr long client);
	/**
	 * Original signature : <code>void g_socket_client_set_tls_validation_flags(GSocketClient*, GTlsCertificateFlags)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:56</i>
	 */
	public static void g_socket_client_set_tls_validation_flags(Pointer<GSocketClient > client, IntValuedEnum<GIOLibrary.GTlsCertificateFlags > flags) {
		g_socket_client_set_tls_validation_flags(Pointer.getPeer(client), (int)flags.value());
	}
	protected native static void g_socket_client_set_tls_validation_flags(@Ptr long client, int flags);
	/**
	 * Original signature : <code>GProxyResolver* g_socket_client_get_proxy_resolver(GSocketClient*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:58</i>
	 */
	public static Pointer<GIOLibrary.GProxyResolver > g_socket_client_get_proxy_resolver(Pointer<GSocketClient > client) {
		return Pointer.pointerToAddress(g_socket_client_get_proxy_resolver(Pointer.getPeer(client)), GIOLibrary.GProxyResolver.class);
	}
	@Ptr 
	protected native static long g_socket_client_get_proxy_resolver(@Ptr long client);
	/**
	 * Original signature : <code>void g_socket_client_set_proxy_resolver(GSocketClient*, GProxyResolver*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:60</i>
	 */
	public static void g_socket_client_set_proxy_resolver(Pointer<GSocketClient > client, Pointer<GIOLibrary.GProxyResolver > proxy_resolver) {
		g_socket_client_set_proxy_resolver(Pointer.getPeer(client), Pointer.getPeer(proxy_resolver));
	}
	protected native static void g_socket_client_set_proxy_resolver(@Ptr long client, @Ptr long proxy_resolver);
	/**
	 * Original signature : <code>GSocketConnection* g_socket_client_connect(GSocketClient*, GSocketConnectable*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:62</i>
	 */
	public static Pointer<GSocketConnection > g_socket_client_connect(Pointer<GSocketClient > client, Pointer<GIOLibrary.GSocketConnectable > connectable, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_client_connect(Pointer.getPeer(client), Pointer.getPeer(connectable), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GSocketConnection.class);
	}
	@Ptr 
	protected native static long g_socket_client_connect(@Ptr long client, @Ptr long connectable, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>GSocketConnection* g_socket_client_connect_to_host(GSocketClient*, const gchar*, guint16, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:64</i>
	 */
	public static Pointer<GSocketConnection > g_socket_client_connect_to_host(Pointer<GSocketClient > client, Pointer<Byte > host_and_port, short default_port, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_client_connect_to_host(Pointer.getPeer(client), Pointer.getPeer(host_and_port), default_port, Pointer.getPeer(cancellable), Pointer.getPeer(error)), GSocketConnection.class);
	}
	@Ptr 
	protected native static long g_socket_client_connect_to_host(@Ptr long client, @Ptr long host_and_port, short default_port, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>GSocketConnection* g_socket_client_connect_to_service(GSocketClient*, const gchar*, const gchar*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:66</i>
	 */
	public static Pointer<GSocketConnection > g_socket_client_connect_to_service(Pointer<GSocketClient > client, Pointer<Byte > domain, Pointer<Byte > service, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_client_connect_to_service(Pointer.getPeer(client), Pointer.getPeer(domain), Pointer.getPeer(service), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GSocketConnection.class);
	}
	@Ptr 
	protected native static long g_socket_client_connect_to_service(@Ptr long client, @Ptr long domain, @Ptr long service, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>GSocketConnection* g_socket_client_connect_to_uri(GSocketClient*, const gchar*, guint16, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:68</i>
	 */
	public static Pointer<GSocketConnection > g_socket_client_connect_to_uri(Pointer<GSocketClient > client, Pointer<Byte > uri, short default_port, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_client_connect_to_uri(Pointer.getPeer(client), Pointer.getPeer(uri), default_port, Pointer.getPeer(cancellable), Pointer.getPeer(error)), GSocketConnection.class);
	}
	@Ptr 
	protected native static long g_socket_client_connect_to_uri(@Ptr long client, @Ptr long uri, short default_port, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_socket_client_connect_async(GSocketClient*, GSocketConnectable*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:70</i>
	 */
	public static void g_socket_client_connect_async(Pointer<GSocketClient > client, Pointer<GIOLibrary.GSocketConnectable > connectable, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_socket_client_connect_async(Pointer.getPeer(client), Pointer.getPeer(connectable), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_socket_client_connect_async(@Ptr long client, @Ptr long connectable, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GSocketConnection* g_socket_client_connect_finish(GSocketClient*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:72</i>
	 */
	public static Pointer<GSocketConnection > g_socket_client_connect_finish(Pointer<GSocketClient > client, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_client_connect_finish(Pointer.getPeer(client), Pointer.getPeer(result), Pointer.getPeer(error)), GSocketConnection.class);
	}
	@Ptr 
	protected native static long g_socket_client_connect_finish(@Ptr long client, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_socket_client_connect_to_host_async(GSocketClient*, const gchar*, guint16, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:74</i>
	 */
	public static void g_socket_client_connect_to_host_async(Pointer<GSocketClient > client, Pointer<Byte > host_and_port, short default_port, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_socket_client_connect_to_host_async(Pointer.getPeer(client), Pointer.getPeer(host_and_port), default_port, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_socket_client_connect_to_host_async(@Ptr long client, @Ptr long host_and_port, short default_port, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GSocketConnection* g_socket_client_connect_to_host_finish(GSocketClient*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:76</i>
	 */
	public static Pointer<GSocketConnection > g_socket_client_connect_to_host_finish(Pointer<GSocketClient > client, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_client_connect_to_host_finish(Pointer.getPeer(client), Pointer.getPeer(result), Pointer.getPeer(error)), GSocketConnection.class);
	}
	@Ptr 
	protected native static long g_socket_client_connect_to_host_finish(@Ptr long client, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_socket_client_connect_to_service_async(GSocketClient*, const gchar*, const gchar*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:78</i>
	 */
	public static void g_socket_client_connect_to_service_async(Pointer<GSocketClient > client, Pointer<Byte > domain, Pointer<Byte > service, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_socket_client_connect_to_service_async(Pointer.getPeer(client), Pointer.getPeer(domain), Pointer.getPeer(service), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_socket_client_connect_to_service_async(@Ptr long client, @Ptr long domain, @Ptr long service, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GSocketConnection* g_socket_client_connect_to_service_finish(GSocketClient*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:80</i>
	 */
	public static Pointer<GSocketConnection > g_socket_client_connect_to_service_finish(Pointer<GSocketClient > client, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_client_connect_to_service_finish(Pointer.getPeer(client), Pointer.getPeer(result), Pointer.getPeer(error)), GSocketConnection.class);
	}
	@Ptr 
	protected native static long g_socket_client_connect_to_service_finish(@Ptr long client, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_socket_client_connect_to_uri_async(GSocketClient*, const gchar*, guint16, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:82</i>
	 */
	public static void g_socket_client_connect_to_uri_async(Pointer<GSocketClient > client, Pointer<Byte > uri, short default_port, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_socket_client_connect_to_uri_async(Pointer.getPeer(client), Pointer.getPeer(uri), default_port, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_socket_client_connect_to_uri_async(@Ptr long client, @Ptr long uri, short default_port, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GSocketConnection* g_socket_client_connect_to_uri_finish(GSocketClient*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:84</i>
	 */
	public static Pointer<GSocketConnection > g_socket_client_connect_to_uri_finish(Pointer<GSocketClient > client, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_client_connect_to_uri_finish(Pointer.getPeer(client), Pointer.getPeer(result), Pointer.getPeer(error)), GSocketConnection.class);
	}
	@Ptr 
	protected native static long g_socket_client_connect_to_uri_finish(@Ptr long client, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_socket_client_add_application_proxy(GSocketClient*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketclient.h:86</i>
	 */
	public static void g_socket_client_add_application_proxy(Pointer<GSocketClient > client, Pointer<Byte > protocol) {
		g_socket_client_add_application_proxy(Pointer.getPeer(client), Pointer.getPeer(protocol));
	}
	protected native static void g_socket_client_add_application_proxy(@Ptr long client, @Ptr long protocol);
	/**
	 * Original signature : <code>GType g_socket_connectable_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketconnectable.h:22</i>
	 */
	public static native GIOLibrary.GType g_socket_connectable_get_type();
	/**
	 * Original signature : <code>GSocketAddressEnumerator* g_socket_connectable_enumerate(GSocketConnectable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketconnectable.h:24</i>
	 */
	public static Pointer<GSocketAddressEnumerator > g_socket_connectable_enumerate(Pointer<GIOLibrary.GSocketConnectable > connectable) {
		return Pointer.pointerToAddress(g_socket_connectable_enumerate(Pointer.getPeer(connectable)), GSocketAddressEnumerator.class);
	}
	@Ptr 
	protected native static long g_socket_connectable_enumerate(@Ptr long connectable);
	/**
	 * Original signature : <code>GSocketAddressEnumerator* g_socket_connectable_proxy_enumerate(GSocketConnectable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketconnectable.h:26</i>
	 */
	public static Pointer<GSocketAddressEnumerator > g_socket_connectable_proxy_enumerate(Pointer<GIOLibrary.GSocketConnectable > connectable) {
		return Pointer.pointerToAddress(g_socket_connectable_proxy_enumerate(Pointer.getPeer(connectable)), GSocketAddressEnumerator.class);
	}
	@Ptr 
	protected native static long g_socket_connectable_proxy_enumerate(@Ptr long connectable);
	/**
	 * Original signature : <code>GType g_socket_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:32</i>
	 */
	public static native GIOLibrary.GType g_socket_get_type();
	/**
	 * Original signature : <code>GSocket* g_socket_new(GSocketFamily, GSocketType, GSocketProtocol, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:34</i>
	 */
	public static Pointer<GSocket > g_socket_new(IntValuedEnum<GIOLibrary.GSocketFamily > family, IntValuedEnum<GIOLibrary.GSocketType > type, IntValuedEnum<GIOLibrary.GSocketProtocol > protocol, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_new((int)family.value(), (int)type.value(), (int)protocol.value(), Pointer.getPeer(error)), GSocket.class);
	}
	@Ptr 
	protected native static long g_socket_new(int family, int type, int protocol, @Ptr long error);
	/**
	 * Original signature : <code>GSocket* g_socket_new_from_fd(gint, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:36</i>
	 */
	public static Pointer<GSocket > g_socket_new_from_fd(int fd, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_new_from_fd(fd, Pointer.getPeer(error)), GSocket.class);
	}
	@Ptr 
	protected native static long g_socket_new_from_fd(int fd, @Ptr long error);
	/**
	 * Original signature : <code>int g_socket_get_fd(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:38</i>
	 */
	public static int g_socket_get_fd(Pointer<GSocket > socket) {
		return g_socket_get_fd(Pointer.getPeer(socket));
	}
	protected native static int g_socket_get_fd(@Ptr long socket);
	/**
	 * Original signature : <code>GSocketFamily g_socket_get_family(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:40</i>
	 */
	public static IntValuedEnum<GIOLibrary.GSocketFamily > g_socket_get_family(Pointer<GSocket > socket) {
		return FlagSet.fromValue(g_socket_get_family(Pointer.getPeer(socket)), GIOLibrary.GSocketFamily.class);
	}
	protected native static int g_socket_get_family(@Ptr long socket);
	/**
	 * Original signature : <code>GSocketType g_socket_get_socket_type(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:42</i>
	 */
	public static IntValuedEnum<GIOLibrary.GSocketType > g_socket_get_socket_type(Pointer<GSocket > socket) {
		return FlagSet.fromValue(g_socket_get_socket_type(Pointer.getPeer(socket)), GIOLibrary.GSocketType.class);
	}
	protected native static int g_socket_get_socket_type(@Ptr long socket);
	/**
	 * Original signature : <code>GSocketProtocol g_socket_get_protocol(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:44</i>
	 */
	public static IntValuedEnum<GIOLibrary.GSocketProtocol > g_socket_get_protocol(Pointer<GSocket > socket) {
		return FlagSet.fromValue(g_socket_get_protocol(Pointer.getPeer(socket)), GIOLibrary.GSocketProtocol.class);
	}
	protected native static int g_socket_get_protocol(@Ptr long socket);
	/**
	 * Original signature : <code>GSocketAddress* g_socket_get_local_address(GSocket*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:46</i>
	 */
	public static Pointer<GSocketAddress > g_socket_get_local_address(Pointer<GSocket > socket, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_get_local_address(Pointer.getPeer(socket), Pointer.getPeer(error)), GSocketAddress.class);
	}
	@Ptr 
	protected native static long g_socket_get_local_address(@Ptr long socket, @Ptr long error);
	/**
	 * Original signature : <code>GSocketAddress* g_socket_get_remote_address(GSocket*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:48</i>
	 */
	public static Pointer<GSocketAddress > g_socket_get_remote_address(Pointer<GSocket > socket, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_get_remote_address(Pointer.getPeer(socket), Pointer.getPeer(error)), GSocketAddress.class);
	}
	@Ptr 
	protected native static long g_socket_get_remote_address(@Ptr long socket, @Ptr long error);
	/**
	 * Original signature : <code>void g_socket_set_blocking(GSocket*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:50</i>
	 */
	public static void g_socket_set_blocking(Pointer<GSocket > socket, GIOLibrary.gboolean blocking) {
		g_socket_set_blocking(Pointer.getPeer(socket), blocking);
	}
	protected native static void g_socket_set_blocking(@Ptr long socket, GIOLibrary.gboolean blocking);
	/**
	 * Original signature : <code>gboolean g_socket_get_blocking(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:52</i>
	 */
	public static GIOLibrary.gboolean g_socket_get_blocking(Pointer<GSocket > socket) {
		return g_socket_get_blocking(Pointer.getPeer(socket));
	}
	protected native static GIOLibrary.gboolean g_socket_get_blocking(@Ptr long socket);
	/**
	 * Original signature : <code>void g_socket_set_keepalive(GSocket*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:54</i>
	 */
	public static void g_socket_set_keepalive(Pointer<GSocket > socket, GIOLibrary.gboolean keepalive) {
		g_socket_set_keepalive(Pointer.getPeer(socket), keepalive);
	}
	protected native static void g_socket_set_keepalive(@Ptr long socket, GIOLibrary.gboolean keepalive);
	/**
	 * Original signature : <code>gboolean g_socket_get_keepalive(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:56</i>
	 */
	public static GIOLibrary.gboolean g_socket_get_keepalive(Pointer<GSocket > socket) {
		return g_socket_get_keepalive(Pointer.getPeer(socket));
	}
	protected native static GIOLibrary.gboolean g_socket_get_keepalive(@Ptr long socket);
	/**
	 * Original signature : <code>gint g_socket_get_listen_backlog(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:58</i>
	 */
	public static int g_socket_get_listen_backlog(Pointer<GSocket > socket) {
		return g_socket_get_listen_backlog(Pointer.getPeer(socket));
	}
	protected native static int g_socket_get_listen_backlog(@Ptr long socket);
	/**
	 * Original signature : <code>void g_socket_set_listen_backlog(GSocket*, gint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:60</i>
	 */
	public static void g_socket_set_listen_backlog(Pointer<GSocket > socket, int backlog) {
		g_socket_set_listen_backlog(Pointer.getPeer(socket), backlog);
	}
	protected native static void g_socket_set_listen_backlog(@Ptr long socket, int backlog);
	/**
	 * Original signature : <code>guint g_socket_get_timeout(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:62</i>
	 */
	public static int g_socket_get_timeout(Pointer<GSocket > socket) {
		return g_socket_get_timeout(Pointer.getPeer(socket));
	}
	protected native static int g_socket_get_timeout(@Ptr long socket);
	/**
	 * Original signature : <code>void g_socket_set_timeout(GSocket*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:64</i>
	 */
	public static void g_socket_set_timeout(Pointer<GSocket > socket, int timeout) {
		g_socket_set_timeout(Pointer.getPeer(socket), timeout);
	}
	protected native static void g_socket_set_timeout(@Ptr long socket, int timeout);
	/**
	 * Original signature : <code>guint g_socket_get_ttl(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:66</i>
	 */
	public static int g_socket_get_ttl(Pointer<GSocket > socket) {
		return g_socket_get_ttl(Pointer.getPeer(socket));
	}
	protected native static int g_socket_get_ttl(@Ptr long socket);
	/**
	 * Original signature : <code>void g_socket_set_ttl(GSocket*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:68</i>
	 */
	public static void g_socket_set_ttl(Pointer<GSocket > socket, int ttl) {
		g_socket_set_ttl(Pointer.getPeer(socket), ttl);
	}
	protected native static void g_socket_set_ttl(@Ptr long socket, int ttl);
	/**
	 * Original signature : <code>gboolean g_socket_get_broadcast(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:70</i>
	 */
	public static GIOLibrary.gboolean g_socket_get_broadcast(Pointer<GSocket > socket) {
		return g_socket_get_broadcast(Pointer.getPeer(socket));
	}
	protected native static GIOLibrary.gboolean g_socket_get_broadcast(@Ptr long socket);
	/**
	 * Original signature : <code>void g_socket_set_broadcast(GSocket*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:72</i>
	 */
	public static void g_socket_set_broadcast(Pointer<GSocket > socket, GIOLibrary.gboolean broadcast) {
		g_socket_set_broadcast(Pointer.getPeer(socket), broadcast);
	}
	protected native static void g_socket_set_broadcast(@Ptr long socket, GIOLibrary.gboolean broadcast);
	/**
	 * Original signature : <code>gboolean g_socket_get_multicast_loopback(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:74</i>
	 */
	public static GIOLibrary.gboolean g_socket_get_multicast_loopback(Pointer<GSocket > socket) {
		return g_socket_get_multicast_loopback(Pointer.getPeer(socket));
	}
	protected native static GIOLibrary.gboolean g_socket_get_multicast_loopback(@Ptr long socket);
	/**
	 * Original signature : <code>void g_socket_set_multicast_loopback(GSocket*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:76</i>
	 */
	public static void g_socket_set_multicast_loopback(Pointer<GSocket > socket, GIOLibrary.gboolean loopback) {
		g_socket_set_multicast_loopback(Pointer.getPeer(socket), loopback);
	}
	protected native static void g_socket_set_multicast_loopback(@Ptr long socket, GIOLibrary.gboolean loopback);
	/**
	 * Original signature : <code>guint g_socket_get_multicast_ttl(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:78</i>
	 */
	public static int g_socket_get_multicast_ttl(Pointer<GSocket > socket) {
		return g_socket_get_multicast_ttl(Pointer.getPeer(socket));
	}
	protected native static int g_socket_get_multicast_ttl(@Ptr long socket);
	/**
	 * Original signature : <code>void g_socket_set_multicast_ttl(GSocket*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:80</i>
	 */
	public static void g_socket_set_multicast_ttl(Pointer<GSocket > socket, int ttl) {
		g_socket_set_multicast_ttl(Pointer.getPeer(socket), ttl);
	}
	protected native static void g_socket_set_multicast_ttl(@Ptr long socket, int ttl);
	/**
	 * Original signature : <code>gboolean g_socket_is_connected(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:82</i>
	 */
	public static GIOLibrary.gboolean g_socket_is_connected(Pointer<GSocket > socket) {
		return g_socket_is_connected(Pointer.getPeer(socket));
	}
	protected native static GIOLibrary.gboolean g_socket_is_connected(@Ptr long socket);
	/**
	 * Original signature : <code>gboolean g_socket_bind(GSocket*, GSocketAddress*, gboolean, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:84</i>
	 */
	public static GIOLibrary.gboolean g_socket_bind(Pointer<GSocket > socket, Pointer<GSocketAddress > address, GIOLibrary.gboolean allow_reuse, Pointer<Pointer > error) {
		return g_socket_bind(Pointer.getPeer(socket), Pointer.getPeer(address), allow_reuse, Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_bind(@Ptr long socket, @Ptr long address, GIOLibrary.gboolean allow_reuse, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_socket_join_multicast_group(GSocket*, GInetAddress*, gboolean, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:86</i>
	 */
	public static GIOLibrary.gboolean g_socket_join_multicast_group(Pointer<GSocket > socket, Pointer<GInetAddress > group, GIOLibrary.gboolean source_specific, Pointer<Byte > iface, Pointer<Pointer > error) {
		return g_socket_join_multicast_group(Pointer.getPeer(socket), Pointer.getPeer(group), source_specific, Pointer.getPeer(iface), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_join_multicast_group(@Ptr long socket, @Ptr long group, GIOLibrary.gboolean source_specific, @Ptr long iface, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_socket_leave_multicast_group(GSocket*, GInetAddress*, gboolean, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:88</i>
	 */
	public static GIOLibrary.gboolean g_socket_leave_multicast_group(Pointer<GSocket > socket, Pointer<GInetAddress > group, GIOLibrary.gboolean source_specific, Pointer<Byte > iface, Pointer<Pointer > error) {
		return g_socket_leave_multicast_group(Pointer.getPeer(socket), Pointer.getPeer(group), source_specific, Pointer.getPeer(iface), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_leave_multicast_group(@Ptr long socket, @Ptr long group, GIOLibrary.gboolean source_specific, @Ptr long iface, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_socket_connect(GSocket*, GSocketAddress*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:90</i>
	 */
	public static GIOLibrary.gboolean g_socket_connect(Pointer<GSocket > socket, Pointer<GSocketAddress > address, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_socket_connect(Pointer.getPeer(socket), Pointer.getPeer(address), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_connect(@Ptr long socket, @Ptr long address, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_socket_check_connect_result(GSocket*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:92</i>
	 */
	public static GIOLibrary.gboolean g_socket_check_connect_result(Pointer<GSocket > socket, Pointer<Pointer > error) {
		return g_socket_check_connect_result(Pointer.getPeer(socket), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_check_connect_result(@Ptr long socket, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_socket_get_available_bytes(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:94</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_socket_get_available_bytes(Pointer<GSocket > socket) {
		return g_socket_get_available_bytes(Pointer.getPeer(socket));
	}
	@org.bridj.ann.CLong 
	protected native static long g_socket_get_available_bytes(@Ptr long socket);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GIOCondition g_socket_condition_check(GSocket*, GIOCondition)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:96</i><br>
	 * Original signature : <code>GIOCondition g_socket_condition_check(GSocket*, GIOCondition)</code> * /<br>
	 * extern GIOCondition g_socket_condition_check(GSocket* socket, GIOCondition condition);<br>
	 * Conversion Error : GIOCondition (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GIOCondition g_socket_condition_check(GSocket*, GIOCondition)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:96</i><br>
	 * Original signature : <code>GIOCondition g_socket_condition_check(GSocket*, GIOCondition)</code> * /<br>
	 * extern GIOCondition g_socket_condition_check(GSocket* socket, GIOCondition condition);<br>
	 * Conversion Error : GIOCondition (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_socket_condition_wait(GSocket*, GIOCondition, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:98</i><br>
	 * Original signature : <code>gboolean g_socket_condition_wait(GSocket*, GIOCondition, GCancellable*, GError**)</code> * /<br>
	 * extern gboolean g_socket_condition_wait(GSocket* socket, GIOCondition condition, GCancellable* cancellable, GError** error);<br>
	 * Conversion Error : GIOCondition (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_socket_condition_wait(GSocket*, GIOCondition, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:98</i><br>
	 * Original signature : <code>gboolean g_socket_condition_wait(GSocket*, GIOCondition, GCancellable*, GError**)</code> * /<br>
	 * extern gboolean g_socket_condition_wait(GSocket* socket, GIOCondition condition, GCancellable* cancellable, GError** error);<br>
	 * Conversion Error : GIOCondition (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_socket_condition_timed_wait(GSocket*, GIOCondition, gint64, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:100</i><br>
	 * Original signature : <code>gboolean g_socket_condition_timed_wait(GSocket*, GIOCondition, gint64, GCancellable*, GError**)</code> * /<br>
	 * extern gboolean g_socket_condition_timed_wait(GSocket* socket, GIOCondition condition, gint64 timeout, GCancellable* cancellable, GError** error);<br>
	 * Conversion Error : GIOCondition (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>gboolean g_socket_condition_timed_wait(GSocket*, GIOCondition, gint64, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:100</i><br>
	 * Original signature : <code>gboolean g_socket_condition_timed_wait(GSocket*, GIOCondition, gint64, GCancellable*, GError**)</code> * /<br>
	 * extern gboolean g_socket_condition_timed_wait(GSocket* socket, GIOCondition condition, gint64 timeout, GCancellable* cancellable, GError** error);<br>
	 * Conversion Error : GIOCondition (Unsupported type)
	 */
	/**
	 * Original signature : <code>GSocket* g_socket_accept(GSocket*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:102</i>
	 */
	public static Pointer<GSocket > g_socket_accept(Pointer<GSocket > socket, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_accept(Pointer.getPeer(socket), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GSocket.class);
	}
	@Ptr 
	protected native static long g_socket_accept(@Ptr long socket, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_socket_listen(GSocket*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:104</i>
	 */
	public static GIOLibrary.gboolean g_socket_listen(Pointer<GSocket > socket, Pointer<Pointer > error) {
		return g_socket_listen(Pointer.getPeer(socket), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_listen(@Ptr long socket, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_socket_receive(GSocket*, gchar*, gsize, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:106</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_socket_receive(Pointer<GSocket > socket, Pointer<Byte > buffer, @org.bridj.ann.CLong long size, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_socket_receive(Pointer.getPeer(socket), Pointer.getPeer(buffer), size, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_socket_receive(@Ptr long socket, @Ptr long buffer, @org.bridj.ann.CLong long size, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_socket_receive_from(GSocket*, GSocketAddress**, gchar*, gsize, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:108</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_socket_receive_from(Pointer<GSocket > socket, Pointer<Pointer<GSocketAddress > > address, Pointer<Byte > buffer, @org.bridj.ann.CLong long size, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_socket_receive_from(Pointer.getPeer(socket), Pointer.getPeer(address), Pointer.getPeer(buffer), size, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_socket_receive_from(@Ptr long socket, @Ptr long address, @Ptr long buffer, @org.bridj.ann.CLong long size, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_socket_send(GSocket*, const gchar*, gsize, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:110</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_socket_send(Pointer<GSocket > socket, Pointer<Byte > buffer, @org.bridj.ann.CLong long size, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_socket_send(Pointer.getPeer(socket), Pointer.getPeer(buffer), size, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_socket_send(@Ptr long socket, @Ptr long buffer, @org.bridj.ann.CLong long size, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_socket_send_to(GSocket*, GSocketAddress*, const gchar*, gsize, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:112</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_socket_send_to(Pointer<GSocket > socket, Pointer<GSocketAddress > address, Pointer<Byte > buffer, @org.bridj.ann.CLong long size, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_socket_send_to(Pointer.getPeer(socket), Pointer.getPeer(address), Pointer.getPeer(buffer), size, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_socket_send_to(@Ptr long socket, @Ptr long address, @Ptr long buffer, @org.bridj.ann.CLong long size, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_socket_receive_message(GSocket*, GSocketAddress**, GInputVector*, gint, GSocketControlMessage***, gint*, gint*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:114</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_socket_receive_message(Pointer<GSocket > socket, Pointer<Pointer<GSocketAddress > > address, Pointer<GInputVector > vectors, int num_vectors, Pointer<Pointer<Pointer<GSocketControlMessage > > > messages, Pointer<Integer > num_messages, Pointer<Integer > flags, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_socket_receive_message(Pointer.getPeer(socket), Pointer.getPeer(address), Pointer.getPeer(vectors), num_vectors, Pointer.getPeer(messages), Pointer.getPeer(num_messages), Pointer.getPeer(flags), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_socket_receive_message(@Ptr long socket, @Ptr long address, @Ptr long vectors, int num_vectors, @Ptr long messages, @Ptr long num_messages, @Ptr long flags, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_socket_send_message(GSocket*, GSocketAddress*, GOutputVector*, gint, GSocketControlMessage**, gint, gint, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:116</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_socket_send_message(Pointer<GSocket > socket, Pointer<GSocketAddress > address, Pointer<GOutputVector > vectors, int num_vectors, Pointer<Pointer<GSocketControlMessage > > messages, int num_messages, int flags, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_socket_send_message(Pointer.getPeer(socket), Pointer.getPeer(address), Pointer.getPeer(vectors), num_vectors, Pointer.getPeer(messages), num_messages, flags, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_socket_send_message(@Ptr long socket, @Ptr long address, @Ptr long vectors, int num_vectors, @Ptr long messages, int num_messages, int flags, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_socket_close(GSocket*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:118</i>
	 */
	public static GIOLibrary.gboolean g_socket_close(Pointer<GSocket > socket, Pointer<Pointer > error) {
		return g_socket_close(Pointer.getPeer(socket), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_close(@Ptr long socket, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_socket_shutdown(GSocket*, gboolean, gboolean, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:120</i>
	 */
	public static GIOLibrary.gboolean g_socket_shutdown(Pointer<GSocket > socket, GIOLibrary.gboolean shutdown_read, GIOLibrary.gboolean shutdown_write, Pointer<Pointer > error) {
		return g_socket_shutdown(Pointer.getPeer(socket), shutdown_read, shutdown_write, Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_shutdown(@Ptr long socket, GIOLibrary.gboolean shutdown_read, GIOLibrary.gboolean shutdown_write, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_socket_is_closed(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:122</i>
	 */
	public static GIOLibrary.gboolean g_socket_is_closed(Pointer<GSocket > socket) {
		return g_socket_is_closed(Pointer.getPeer(socket));
	}
	protected native static GIOLibrary.gboolean g_socket_is_closed(@Ptr long socket);
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSource* g_socket_create_source(GSocket*, GIOCondition, GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:124</i><br>
	 * Original signature : <code>GSource* g_socket_create_source(GSocket*, GIOCondition, GCancellable*)</code> * /<br>
	 * extern GSource* g_socket_create_source(GSocket* socket, GIOCondition condition, GCancellable* cancellable);<br>
	 * Conversion Error : GIOCondition (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>GSource* g_socket_create_source(GSocket*, GIOCondition, GCancellable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:124</i><br>
	 * Original signature : <code>GSource* g_socket_create_source(GSocket*, GIOCondition, GCancellable*)</code> * /<br>
	 * extern GSource* g_socket_create_source(GSocket* socket, GIOCondition condition, GCancellable* cancellable);<br>
	 * Conversion Error : GIOCondition (Unsupported type)
	 */
	/**
	 * Original signature : <code>gboolean g_socket_speaks_ipv4(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:126</i>
	 */
	public static GIOLibrary.gboolean g_socket_speaks_ipv4(Pointer<GSocket > socket) {
		return g_socket_speaks_ipv4(Pointer.getPeer(socket));
	}
	protected native static GIOLibrary.gboolean g_socket_speaks_ipv4(@Ptr long socket);
	/**
	 * Original signature : <code>GCredentials* g_socket_get_credentials(GSocket*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:128</i>
	 */
	public static Pointer<GIOLibrary.GCredentials > g_socket_get_credentials(Pointer<GSocket > socket, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_get_credentials(Pointer.getPeer(socket), Pointer.getPeer(error)), GIOLibrary.GCredentials.class);
	}
	@Ptr 
	protected native static long g_socket_get_credentials(@Ptr long socket, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_socket_receive_with_blocking(GSocket*, gchar*, gsize, gboolean, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:130</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_socket_receive_with_blocking(Pointer<GSocket > socket, Pointer<Byte > buffer, @org.bridj.ann.CLong long size, GIOLibrary.gboolean blocking, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_socket_receive_with_blocking(Pointer.getPeer(socket), Pointer.getPeer(buffer), size, blocking, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_socket_receive_with_blocking(@Ptr long socket, @Ptr long buffer, @org.bridj.ann.CLong long size, GIOLibrary.gboolean blocking, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_socket_send_with_blocking(GSocket*, const gchar*, gsize, gboolean, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:132</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_socket_send_with_blocking(Pointer<GSocket > socket, Pointer<Byte > buffer, @org.bridj.ann.CLong long size, GIOLibrary.gboolean blocking, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_socket_send_with_blocking(Pointer.getPeer(socket), Pointer.getPeer(buffer), size, blocking, Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_socket_send_with_blocking(@Ptr long socket, @Ptr long buffer, @org.bridj.ann.CLong long size, GIOLibrary.gboolean blocking, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_socket_get_option(GSocket*, gint, gint, gint*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:134</i>
	 */
	public static GIOLibrary.gboolean g_socket_get_option(Pointer<GSocket > socket, int level, int optname, Pointer<Integer > value, Pointer<Pointer > error) {
		return g_socket_get_option(Pointer.getPeer(socket), level, optname, Pointer.getPeer(value), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_get_option(@Ptr long socket, int level, int optname, @Ptr long value, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_socket_set_option(GSocket*, gint, gint, gint, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocket.h:136</i>
	 */
	public static GIOLibrary.gboolean g_socket_set_option(Pointer<GSocket > socket, int level, int optname, int value, Pointer<Pointer > error) {
		return g_socket_set_option(Pointer.getPeer(socket), level, optname, value, Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_set_option(@Ptr long socket, int level, int optname, int value, @Ptr long error);
	/**
	 * Original signature : <code>GType g_socket_connection_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketconnection.h:24</i>
	 */
	public static native GIOLibrary.GType g_socket_connection_get_type();
	/**
	 * Original signature : <code>gboolean g_socket_connection_is_connected(GSocketConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketconnection.h:26</i>
	 */
	public static GIOLibrary.gboolean g_socket_connection_is_connected(Pointer<GSocketConnection > connection) {
		return g_socket_connection_is_connected(Pointer.getPeer(connection));
	}
	protected native static GIOLibrary.gboolean g_socket_connection_is_connected(@Ptr long connection);
	/**
	 * Original signature : <code>gboolean g_socket_connection_connect(GSocketConnection*, GSocketAddress*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketconnection.h:28</i>
	 */
	public static GIOLibrary.gboolean g_socket_connection_connect(Pointer<GSocketConnection > connection, Pointer<GSocketAddress > address, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_socket_connection_connect(Pointer.getPeer(connection), Pointer.getPeer(address), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_connection_connect(@Ptr long connection, @Ptr long address, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_socket_connection_connect_async(GSocketConnection*, GSocketAddress*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketconnection.h:30</i>
	 */
	public static void g_socket_connection_connect_async(Pointer<GSocketConnection > connection, Pointer<GSocketAddress > address, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_socket_connection_connect_async(Pointer.getPeer(connection), Pointer.getPeer(address), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_socket_connection_connect_async(@Ptr long connection, @Ptr long address, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_socket_connection_connect_finish(GSocketConnection*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketconnection.h:32</i>
	 */
	public static GIOLibrary.gboolean g_socket_connection_connect_finish(Pointer<GSocketConnection > connection, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_socket_connection_connect_finish(Pointer.getPeer(connection), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_connection_connect_finish(@Ptr long connection, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>GSocket* g_socket_connection_get_socket(GSocketConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketconnection.h:34</i>
	 */
	public static Pointer<GSocket > g_socket_connection_get_socket(Pointer<GSocketConnection > connection) {
		return Pointer.pointerToAddress(g_socket_connection_get_socket(Pointer.getPeer(connection)), GSocket.class);
	}
	@Ptr 
	protected native static long g_socket_connection_get_socket(@Ptr long connection);
	/**
	 * Original signature : <code>GSocketAddress* g_socket_connection_get_local_address(GSocketConnection*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketconnection.h:36</i>
	 */
	public static Pointer<GSocketAddress > g_socket_connection_get_local_address(Pointer<GSocketConnection > connection, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_connection_get_local_address(Pointer.getPeer(connection), Pointer.getPeer(error)), GSocketAddress.class);
	}
	@Ptr 
	protected native static long g_socket_connection_get_local_address(@Ptr long connection, @Ptr long error);
	/**
	 * Original signature : <code>GSocketAddress* g_socket_connection_get_remote_address(GSocketConnection*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketconnection.h:38</i>
	 */
	public static Pointer<GSocketAddress > g_socket_connection_get_remote_address(Pointer<GSocketConnection > connection, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_connection_get_remote_address(Pointer.getPeer(connection), Pointer.getPeer(error)), GSocketAddress.class);
	}
	@Ptr 
	protected native static long g_socket_connection_get_remote_address(@Ptr long connection, @Ptr long error);
	/**
	 * Original signature : <code>void g_socket_connection_factory_register_type(GType, GSocketFamily, GSocketType, gint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketconnection.h:40</i>
	 */
	public static void g_socket_connection_factory_register_type(GIOLibrary.GType g_type, IntValuedEnum<GIOLibrary.GSocketFamily > family, IntValuedEnum<GIOLibrary.GSocketType > type, int protocol) {
		g_socket_connection_factory_register_type(g_type, (int)family.value(), (int)type.value(), protocol);
	}
	protected native static void g_socket_connection_factory_register_type(GIOLibrary.GType g_type, int family, int type, int protocol);
	/**
	 * Original signature : <code>GType g_socket_connection_factory_lookup_type(GSocketFamily, GSocketType, gint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketconnection.h:42</i>
	 */
	public static GIOLibrary.GType g_socket_connection_factory_lookup_type(IntValuedEnum<GIOLibrary.GSocketFamily > family, IntValuedEnum<GIOLibrary.GSocketType > type, int protocol_id) {
		return g_socket_connection_factory_lookup_type((int)family.value(), (int)type.value(), protocol_id);
	}
	protected native static GIOLibrary.GType g_socket_connection_factory_lookup_type(int family, int type, int protocol_id);
	/**
	 * Original signature : <code>GSocketConnection* g_socket_connection_factory_create_connection(GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketconnection.h:44</i>
	 */
	public static Pointer<GSocketConnection > g_socket_connection_factory_create_connection(Pointer<GSocket > socket) {
		return Pointer.pointerToAddress(g_socket_connection_factory_create_connection(Pointer.getPeer(socket)), GSocketConnection.class);
	}
	@Ptr 
	protected native static long g_socket_connection_factory_create_connection(@Ptr long socket);
	/**
	 * Original signature : <code>GType g_socket_control_message_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketcontrolmessage.h:33</i>
	 */
	public static native GIOLibrary.GType g_socket_control_message_get_type();
	/**
	 * Original signature : <code>gsize g_socket_control_message_get_size(GSocketControlMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketcontrolmessage.h:35</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_socket_control_message_get_size(Pointer<GSocketControlMessage > message) {
		return g_socket_control_message_get_size(Pointer.getPeer(message));
	}
	@org.bridj.ann.CLong 
	protected native static long g_socket_control_message_get_size(@Ptr long message);
	/**
	 * Original signature : <code>int g_socket_control_message_get_level(GSocketControlMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketcontrolmessage.h:37</i>
	 */
	public static int g_socket_control_message_get_level(Pointer<GSocketControlMessage > message) {
		return g_socket_control_message_get_level(Pointer.getPeer(message));
	}
	protected native static int g_socket_control_message_get_level(@Ptr long message);
	/**
	 * Original signature : <code>int g_socket_control_message_get_msg_type(GSocketControlMessage*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketcontrolmessage.h:39</i>
	 */
	public static int g_socket_control_message_get_msg_type(Pointer<GSocketControlMessage > message) {
		return g_socket_control_message_get_msg_type(Pointer.getPeer(message));
	}
	protected native static int g_socket_control_message_get_msg_type(@Ptr long message);
	/**
	 * Original signature : <code>void g_socket_control_message_serialize(GSocketControlMessage*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketcontrolmessage.h:41</i>
	 */
	public static void g_socket_control_message_serialize(Pointer<GSocketControlMessage > message, GIOLibrary.gpointer data) {
		g_socket_control_message_serialize(Pointer.getPeer(message), data);
	}
	protected native static void g_socket_control_message_serialize(@Ptr long message, GIOLibrary.gpointer data);
	/**
	 * Original signature : <code>GSocketControlMessage* g_socket_control_message_deserialize(int, int, gsize, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketcontrolmessage.h:43</i>
	 */
	public static Pointer<GSocketControlMessage > g_socket_control_message_deserialize(int level, int type, @org.bridj.ann.CLong long size, GIOLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_socket_control_message_deserialize$2(level, type, size, data), GSocketControlMessage.class);
	}
	@Ptr 
	protected native static long g_socket_control_message_deserialize$2(int level, int type, @org.bridj.ann.CLong long size, GIOLibrary.gpointer data);
	/**
	 * Original signature : <code>GType g_socket_listener_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketlistener.h:30</i>
	 */
	public static native GIOLibrary.GType g_socket_listener_get_type();
	/**
	 * Original signature : <code>GSocketListener* g_socket_listener_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketlistener.h:32</i>
	 */
	public static Pointer<GSocketListener > g_socket_listener_new() {
		return Pointer.pointerToAddress(g_socket_listener_new$2(), GSocketListener.class);
	}
	@Ptr 
	protected native static long g_socket_listener_new$2();
	/**
	 * Original signature : <code>void g_socket_listener_set_backlog(GSocketListener*, int)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketlistener.h:34</i>
	 */
	public static void g_socket_listener_set_backlog(Pointer<GSocketListener > listener, int listen_backlog) {
		g_socket_listener_set_backlog(Pointer.getPeer(listener), listen_backlog);
	}
	protected native static void g_socket_listener_set_backlog(@Ptr long listener, int listen_backlog);
	/**
	 * Original signature : <code>gboolean g_socket_listener_add_socket(GSocketListener*, GSocket*, GObject*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketlistener.h:36</i>
	 */
	public static GIOLibrary.gboolean g_socket_listener_add_socket(Pointer<GSocketListener > listener, Pointer<GSocket > socket, Pointer source_object, Pointer<Pointer > error) {
		return g_socket_listener_add_socket(Pointer.getPeer(listener), Pointer.getPeer(socket), Pointer.getPeer(source_object), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_listener_add_socket(@Ptr long listener, @Ptr long socket, @Ptr long source_object, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_socket_listener_add_address(GSocketListener*, GSocketAddress*, GSocketType, GSocketProtocol, GObject*, GSocketAddress**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketlistener.h:38</i>
	 */
	public static GIOLibrary.gboolean g_socket_listener_add_address(Pointer<GSocketListener > listener, Pointer<GSocketAddress > address, IntValuedEnum<GIOLibrary.GSocketType > type, IntValuedEnum<GIOLibrary.GSocketProtocol > protocol, Pointer source_object, Pointer<Pointer<GSocketAddress > > effective_address, Pointer<Pointer > error) {
		return g_socket_listener_add_address(Pointer.getPeer(listener), Pointer.getPeer(address), (int)type.value(), (int)protocol.value(), Pointer.getPeer(source_object), Pointer.getPeer(effective_address), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_listener_add_address(@Ptr long listener, @Ptr long address, int type, int protocol, @Ptr long source_object, @Ptr long effective_address, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_socket_listener_add_inet_port(GSocketListener*, guint16, GObject*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketlistener.h:40</i>
	 */
	public static GIOLibrary.gboolean g_socket_listener_add_inet_port(Pointer<GSocketListener > listener, short port, Pointer source_object, Pointer<Pointer > error) {
		return g_socket_listener_add_inet_port(Pointer.getPeer(listener), port, Pointer.getPeer(source_object), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_socket_listener_add_inet_port(@Ptr long listener, short port, @Ptr long source_object, @Ptr long error);
	/**
	 * Original signature : <code>guint16 g_socket_listener_add_any_inet_port(GSocketListener*, GObject*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketlistener.h:42</i>
	 */
	public static short g_socket_listener_add_any_inet_port(Pointer<GSocketListener > listener, Pointer source_object, Pointer<Pointer > error) {
		return g_socket_listener_add_any_inet_port(Pointer.getPeer(listener), Pointer.getPeer(source_object), Pointer.getPeer(error));
	}
	protected native static short g_socket_listener_add_any_inet_port(@Ptr long listener, @Ptr long source_object, @Ptr long error);
	/**
	 * Original signature : <code>GSocket* g_socket_listener_accept_socket(GSocketListener*, GObject**, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketlistener.h:44</i>
	 */
	public static Pointer<GSocket > g_socket_listener_accept_socket(Pointer<GSocketListener > listener, Pointer<Pointer > source_object, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_listener_accept_socket(Pointer.getPeer(listener), Pointer.getPeer(source_object), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GSocket.class);
	}
	@Ptr 
	protected native static long g_socket_listener_accept_socket(@Ptr long listener, @Ptr long source_object, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_socket_listener_accept_socket_async(GSocketListener*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketlistener.h:46</i>
	 */
	public static void g_socket_listener_accept_socket_async(Pointer<GSocketListener > listener, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_socket_listener_accept_socket_async(Pointer.getPeer(listener), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_socket_listener_accept_socket_async(@Ptr long listener, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GSocket* g_socket_listener_accept_socket_finish(GSocketListener*, GAsyncResult*, GObject**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketlistener.h:48</i>
	 */
	public static Pointer<GSocket > g_socket_listener_accept_socket_finish(Pointer<GSocketListener > listener, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > source_object, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_listener_accept_socket_finish(Pointer.getPeer(listener), Pointer.getPeer(result), Pointer.getPeer(source_object), Pointer.getPeer(error)), GSocket.class);
	}
	@Ptr 
	protected native static long g_socket_listener_accept_socket_finish(@Ptr long listener, @Ptr long result, @Ptr long source_object, @Ptr long error);
	/**
	 * Original signature : <code>GSocketConnection* g_socket_listener_accept(GSocketListener*, GObject**, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketlistener.h:50</i>
	 */
	public static Pointer<GSocketConnection > g_socket_listener_accept(Pointer<GSocketListener > listener, Pointer<Pointer > source_object, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_listener_accept(Pointer.getPeer(listener), Pointer.getPeer(source_object), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GSocketConnection.class);
	}
	@Ptr 
	protected native static long g_socket_listener_accept(@Ptr long listener, @Ptr long source_object, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_socket_listener_accept_async(GSocketListener*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketlistener.h:52</i>
	 */
	public static void g_socket_listener_accept_async(Pointer<GSocketListener > listener, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_socket_listener_accept_async(Pointer.getPeer(listener), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_socket_listener_accept_async(@Ptr long listener, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GSocketConnection* g_socket_listener_accept_finish(GSocketListener*, GAsyncResult*, GObject**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketlistener.h:54</i>
	 */
	public static Pointer<GSocketConnection > g_socket_listener_accept_finish(Pointer<GSocketListener > listener, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > source_object, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_socket_listener_accept_finish(Pointer.getPeer(listener), Pointer.getPeer(result), Pointer.getPeer(source_object), Pointer.getPeer(error)), GSocketConnection.class);
	}
	@Ptr 
	protected native static long g_socket_listener_accept_finish(@Ptr long listener, @Ptr long result, @Ptr long source_object, @Ptr long error);
	/**
	 * Original signature : <code>void g_socket_listener_close(GSocketListener*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketlistener.h:56</i>
	 */
	public static void g_socket_listener_close(Pointer<GSocketListener > listener) {
		g_socket_listener_close(Pointer.getPeer(listener));
	}
	protected native static void g_socket_listener_close(@Ptr long listener);
	/**
	 * Original signature : <code>GType g_socket_service_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketservice.h:31</i>
	 */
	public static native GIOLibrary.GType g_socket_service_get_type();
	/**
	 * Original signature : <code>GSocketService* g_socket_service_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketservice.h:33</i>
	 */
	public static Pointer<GSocketService > g_socket_service_new() {
		return Pointer.pointerToAddress(g_socket_service_new$2(), GSocketService.class);
	}
	@Ptr 
	protected native static long g_socket_service_new$2();
	/**
	 * Original signature : <code>void g_socket_service_start(GSocketService*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketservice.h:35</i>
	 */
	public static void g_socket_service_start(Pointer<GSocketService > service) {
		g_socket_service_start(Pointer.getPeer(service));
	}
	protected native static void g_socket_service_start(@Ptr long service);
	/**
	 * Original signature : <code>void g_socket_service_stop(GSocketService*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketservice.h:37</i>
	 */
	public static void g_socket_service_stop(Pointer<GSocketService > service) {
		g_socket_service_stop(Pointer.getPeer(service));
	}
	protected native static void g_socket_service_stop(@Ptr long service);
	/**
	 * Original signature : <code>gboolean g_socket_service_is_active(GSocketService*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsocketservice.h:39</i>
	 */
	public static GIOLibrary.gboolean g_socket_service_is_active(Pointer<GSocketService > service) {
		return g_socket_service_is_active(Pointer.getPeer(service));
	}
	protected native static GIOLibrary.gboolean g_socket_service_is_active(@Ptr long service);
	/**
	 * Original signature : <code>GType g_srv_target_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsrvtarget.h:2</i>
	 */
	public static native GIOLibrary.GType g_srv_target_get_type();
	/**
	 * Original signature : <code>GSrvTarget* g_srv_target_new(const gchar*, guint16, guint16, guint16)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsrvtarget.h:4</i>
	 */
	public static Pointer<GIOLibrary.GSrvTarget > g_srv_target_new(Pointer<Byte > hostname, short port, short priority, short weight) {
		return Pointer.pointerToAddress(g_srv_target_new(Pointer.getPeer(hostname), port, priority, weight), GIOLibrary.GSrvTarget.class);
	}
	@Ptr 
	protected native static long g_srv_target_new(@Ptr long hostname, short port, short priority, short weight);
	/**
	 * Original signature : <code>GSrvTarget* g_srv_target_copy(GSrvTarget*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsrvtarget.h:6</i>
	 */
	public static Pointer<GIOLibrary.GSrvTarget > g_srv_target_copy(Pointer<GIOLibrary.GSrvTarget > target) {
		return Pointer.pointerToAddress(g_srv_target_copy(Pointer.getPeer(target)), GIOLibrary.GSrvTarget.class);
	}
	@Ptr 
	protected native static long g_srv_target_copy(@Ptr long target);
	/**
	 * Original signature : <code>void g_srv_target_free(GSrvTarget*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsrvtarget.h:8</i>
	 */
	public static void g_srv_target_free(Pointer<GIOLibrary.GSrvTarget > target) {
		g_srv_target_free(Pointer.getPeer(target));
	}
	protected native static void g_srv_target_free(@Ptr long target);
	/**
	 * Original signature : <code>gchar* g_srv_target_get_hostname(GSrvTarget*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsrvtarget.h:10</i>
	 */
	public static Pointer<Byte > g_srv_target_get_hostname(Pointer<GIOLibrary.GSrvTarget > target) {
		return Pointer.pointerToAddress(g_srv_target_get_hostname(Pointer.getPeer(target)), Byte.class);
	}
	@Ptr 
	protected native static long g_srv_target_get_hostname(@Ptr long target);
	/**
	 * Original signature : <code>guint16 g_srv_target_get_port(GSrvTarget*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsrvtarget.h:12</i>
	 */
	public static short g_srv_target_get_port(Pointer<GIOLibrary.GSrvTarget > target) {
		return g_srv_target_get_port(Pointer.getPeer(target));
	}
	protected native static short g_srv_target_get_port(@Ptr long target);
	/**
	 * Original signature : <code>guint16 g_srv_target_get_priority(GSrvTarget*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsrvtarget.h:14</i>
	 */
	public static short g_srv_target_get_priority(Pointer<GIOLibrary.GSrvTarget > target) {
		return g_srv_target_get_priority(Pointer.getPeer(target));
	}
	protected native static short g_srv_target_get_priority(@Ptr long target);
	/**
	 * Original signature : <code>guint16 g_srv_target_get_weight(GSrvTarget*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsrvtarget.h:16</i>
	 */
	public static short g_srv_target_get_weight(Pointer<GIOLibrary.GSrvTarget > target) {
		return g_srv_target_get_weight(Pointer.getPeer(target));
	}
	protected native static short g_srv_target_get_weight(@Ptr long target);
	/**
	 * Original signature : <code>GList* g_srv_target_list_sort(GList*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsrvtarget.h:18</i>
	 */
	public static Pointer g_srv_target_list_sort(Pointer targets) {
		return Pointer.pointerToAddress(g_srv_target_list_sort(Pointer.getPeer(targets)));
	}
	@Ptr 
	protected native static long g_srv_target_list_sort(@Ptr long targets);
	/**
	 * Original signature : <code>GType g_simple_proxy_resolver_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleproxyresolver.h:28</i>
	 */
	public static native GIOLibrary.GType g_simple_proxy_resolver_get_type();
	/**
	 * Original signature : <code>GProxyResolver* g_simple_proxy_resolver_new(const gchar*, gchar**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleproxyresolver.h:30</i>
	 */
	public static Pointer<GIOLibrary.GProxyResolver > g_simple_proxy_resolver_new(Pointer<Byte > default_proxy, Pointer<Pointer<Byte > > ignore_hosts) {
		return Pointer.pointerToAddress(g_simple_proxy_resolver_new(Pointer.getPeer(default_proxy), Pointer.getPeer(ignore_hosts)), GIOLibrary.GProxyResolver.class);
	}
	@Ptr 
	protected native static long g_simple_proxy_resolver_new(@Ptr long default_proxy, @Ptr long ignore_hosts);
	/**
	 * Original signature : <code>void g_simple_proxy_resolver_set_default_proxy(GSimpleProxyResolver*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleproxyresolver.h:32</i>
	 */
	public static void g_simple_proxy_resolver_set_default_proxy(Pointer<GSimpleProxyResolver > resolver, Pointer<Byte > default_proxy) {
		g_simple_proxy_resolver_set_default_proxy(Pointer.getPeer(resolver), Pointer.getPeer(default_proxy));
	}
	protected native static void g_simple_proxy_resolver_set_default_proxy(@Ptr long resolver, @Ptr long default_proxy);
	/**
	 * Original signature : <code>void g_simple_proxy_resolver_set_ignore_hosts(GSimpleProxyResolver*, gchar**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleproxyresolver.h:34</i>
	 */
	public static void g_simple_proxy_resolver_set_ignore_hosts(Pointer<GSimpleProxyResolver > resolver, Pointer<Pointer<Byte > > ignore_hosts) {
		g_simple_proxy_resolver_set_ignore_hosts(Pointer.getPeer(resolver), Pointer.getPeer(ignore_hosts));
	}
	protected native static void g_simple_proxy_resolver_set_ignore_hosts(@Ptr long resolver, @Ptr long ignore_hosts);
	/**
	 * Original signature : <code>void g_simple_proxy_resolver_set_uri_proxy(GSimpleProxyResolver*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsimpleproxyresolver.h:36</i>
	 */
	public static void g_simple_proxy_resolver_set_uri_proxy(Pointer<GSimpleProxyResolver > resolver, Pointer<Byte > uri_scheme, Pointer<Byte > proxy) {
		g_simple_proxy_resolver_set_uri_proxy(Pointer.getPeer(resolver), Pointer.getPeer(uri_scheme), Pointer.getPeer(proxy));
	}
	protected native static void g_simple_proxy_resolver_set_uri_proxy(@Ptr long resolver, @Ptr long uri_scheme, @Ptr long proxy);
	/**
	 * Original signature : <code>GType g_task_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:3</i>
	 */
	public static native GIOLibrary.GType g_task_get_type();
	/**
	 * Original signature : <code>GTask* g_task_new(gpointer, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:5</i>
	 */
	public static Pointer<GIOLibrary.GTask > g_task_new(GIOLibrary.gpointer source_object, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer callback_data) {
		return Pointer.pointerToAddress(g_task_new(source_object, Pointer.getPeer(cancellable), Pointer.getPeer(callback), callback_data), GIOLibrary.GTask.class);
	}
	@Ptr 
	protected native static long g_task_new(GIOLibrary.gpointer source_object, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer callback_data);
	/**
	 * Original signature : <code>void g_task_report_error(gpointer, GAsyncReadyCallback, gpointer, gpointer, GError*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:7</i>
	 */
	public static void g_task_report_error(GIOLibrary.gpointer source_object, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer callback_data, GIOLibrary.gpointer source_tag, Pointer error) {
		g_task_report_error(source_object, Pointer.getPeer(callback), callback_data, source_tag, Pointer.getPeer(error));
	}
	protected native static void g_task_report_error(GIOLibrary.gpointer source_object, @Ptr long callback, GIOLibrary.gpointer callback_data, GIOLibrary.gpointer source_tag, @Ptr long error);
	/**
	 * Original signature : <code>void g_task_report_new_error(gpointer, GAsyncReadyCallback, gpointer, gpointer, GQuark, gint, const char*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:9</i>
	 */
	public static void g_task_report_new_error(GIOLibrary.gpointer source_object, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer callback_data, GIOLibrary.gpointer source_tag, int domain, int code, Pointer<Byte > format, Object... varArgs1) {
		g_task_report_new_error(source_object, Pointer.getPeer(callback), callback_data, source_tag, domain, code, Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_task_report_new_error(GIOLibrary.gpointer source_object, @Ptr long callback, GIOLibrary.gpointer callback_data, GIOLibrary.gpointer source_tag, int domain, int code, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>void g_task_set_task_data(GTask*, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:11</i>
	 */
	public static void g_task_set_task_data(Pointer<GIOLibrary.GTask > task, GIOLibrary.gpointer task_data, GIOLibrary.GDestroyNotify task_data_destroy) {
		g_task_set_task_data(Pointer.getPeer(task), task_data, Pointer.getPeer(task_data_destroy));
	}
	protected native static void g_task_set_task_data(@Ptr long task, GIOLibrary.gpointer task_data, @Ptr long task_data_destroy);
	/**
	 * Original signature : <code>void g_task_set_priority(GTask*, gint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:13</i>
	 */
	public static void g_task_set_priority(Pointer<GIOLibrary.GTask > task, int priority) {
		g_task_set_priority(Pointer.getPeer(task), priority);
	}
	protected native static void g_task_set_priority(@Ptr long task, int priority);
	/**
	 * Original signature : <code>void g_task_set_check_cancellable(GTask*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:15</i>
	 */
	public static void g_task_set_check_cancellable(Pointer<GIOLibrary.GTask > task, GIOLibrary.gboolean check_cancellable) {
		g_task_set_check_cancellable(Pointer.getPeer(task), check_cancellable);
	}
	protected native static void g_task_set_check_cancellable(@Ptr long task, GIOLibrary.gboolean check_cancellable);
	/**
	 * Original signature : <code>void g_task_set_source_tag(GTask*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:17</i>
	 */
	public static void g_task_set_source_tag(Pointer<GIOLibrary.GTask > task, GIOLibrary.gpointer source_tag) {
		g_task_set_source_tag(Pointer.getPeer(task), source_tag);
	}
	protected native static void g_task_set_source_tag(@Ptr long task, GIOLibrary.gpointer source_tag);
	/**
	 * Original signature : <code>gpointer g_task_get_source_object(GTask*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:19</i>
	 */
	public static GIOLibrary.gpointer g_task_get_source_object(Pointer<GIOLibrary.GTask > task) {
		return g_task_get_source_object(Pointer.getPeer(task));
	}
	protected native static GIOLibrary.gpointer g_task_get_source_object(@Ptr long task);
	/**
	 * Original signature : <code>gpointer g_task_get_task_data(GTask*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:21</i>
	 */
	public static GIOLibrary.gpointer g_task_get_task_data(Pointer<GIOLibrary.GTask > task) {
		return g_task_get_task_data(Pointer.getPeer(task));
	}
	protected native static GIOLibrary.gpointer g_task_get_task_data(@Ptr long task);
	/**
	 * Original signature : <code>gint g_task_get_priority(GTask*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:23</i>
	 */
	public static int g_task_get_priority(Pointer<GIOLibrary.GTask > task) {
		return g_task_get_priority(Pointer.getPeer(task));
	}
	protected native static int g_task_get_priority(@Ptr long task);
	/**
	 * Original signature : <code>GMainContext* g_task_get_context(GTask*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:25</i>
	 */
	public static Pointer<GIOLibrary.GMainContext > g_task_get_context(Pointer<GIOLibrary.GTask > task) {
		return Pointer.pointerToAddress(g_task_get_context(Pointer.getPeer(task)), GIOLibrary.GMainContext.class);
	}
	@Ptr 
	protected native static long g_task_get_context(@Ptr long task);
	/**
	 * Original signature : <code>GCancellable* g_task_get_cancellable(GTask*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:27</i>
	 */
	public static Pointer<GCancellable > g_task_get_cancellable(Pointer<GIOLibrary.GTask > task) {
		return Pointer.pointerToAddress(g_task_get_cancellable(Pointer.getPeer(task)), GCancellable.class);
	}
	@Ptr 
	protected native static long g_task_get_cancellable(@Ptr long task);
	/**
	 * Original signature : <code>gboolean g_task_get_check_cancellable(GTask*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:29</i>
	 */
	public static GIOLibrary.gboolean g_task_get_check_cancellable(Pointer<GIOLibrary.GTask > task) {
		return g_task_get_check_cancellable(Pointer.getPeer(task));
	}
	protected native static GIOLibrary.gboolean g_task_get_check_cancellable(@Ptr long task);
	/**
	 * Original signature : <code>gpointer g_task_get_source_tag(GTask*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:31</i>
	 */
	public static GIOLibrary.gpointer g_task_get_source_tag(Pointer<GIOLibrary.GTask > task) {
		return g_task_get_source_tag(Pointer.getPeer(task));
	}
	protected native static GIOLibrary.gpointer g_task_get_source_tag(@Ptr long task);
	/**
	 * Original signature : <code>gboolean g_task_is_valid(gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:33</i>
	 */
	public static native GIOLibrary.gboolean g_task_is_valid(GIOLibrary.gpointer result, GIOLibrary.gpointer source_object);
	/**
	 * Original signature : <code>void g_task_run_in_thread(GTask*, GTaskThreadFunc)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:36</i>
	 */
	public static void g_task_run_in_thread(Pointer<GIOLibrary.GTask > task, Pointer<GIOLibrary.GTaskThreadFunc > task_func) {
		g_task_run_in_thread(Pointer.getPeer(task), Pointer.getPeer(task_func));
	}
	protected native static void g_task_run_in_thread(@Ptr long task, @Ptr long task_func);
	/**
	 * Original signature : <code>void g_task_run_in_thread_sync(GTask*, GTaskThreadFunc)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:38</i>
	 */
	public static void g_task_run_in_thread_sync(Pointer<GIOLibrary.GTask > task, Pointer<GIOLibrary.GTaskThreadFunc > task_func) {
		g_task_run_in_thread_sync(Pointer.getPeer(task), Pointer.getPeer(task_func));
	}
	protected native static void g_task_run_in_thread_sync(@Ptr long task, @Ptr long task_func);
	/**
	 * Original signature : <code>gboolean g_task_set_return_on_cancel(GTask*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:40</i>
	 */
	public static GIOLibrary.gboolean g_task_set_return_on_cancel(Pointer<GIOLibrary.GTask > task, GIOLibrary.gboolean return_on_cancel) {
		return g_task_set_return_on_cancel(Pointer.getPeer(task), return_on_cancel);
	}
	protected native static GIOLibrary.gboolean g_task_set_return_on_cancel(@Ptr long task, GIOLibrary.gboolean return_on_cancel);
	/**
	 * Original signature : <code>gboolean g_task_get_return_on_cancel(GTask*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:42</i>
	 */
	public static GIOLibrary.gboolean g_task_get_return_on_cancel(Pointer<GIOLibrary.GTask > task) {
		return g_task_get_return_on_cancel(Pointer.getPeer(task));
	}
	protected native static GIOLibrary.gboolean g_task_get_return_on_cancel(@Ptr long task);
	/**
	 * Original signature : <code>void g_task_attach_source(GTask*, GSource*, GSourceFunc)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:44</i>
	 */
	public static void g_task_attach_source(Pointer<GIOLibrary.GTask > task, Pointer source, GIOLibrary.GSourceFunc callback) {
		g_task_attach_source(Pointer.getPeer(task), Pointer.getPeer(source), Pointer.getPeer(callback));
	}
	protected native static void g_task_attach_source(@Ptr long task, @Ptr long source, @Ptr long callback);
	/**
	 * Original signature : <code>void g_task_return_pointer(GTask*, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:46</i>
	 */
	public static void g_task_return_pointer(Pointer<GIOLibrary.GTask > task, GIOLibrary.gpointer result, GIOLibrary.GDestroyNotify result_destroy) {
		g_task_return_pointer(Pointer.getPeer(task), result, Pointer.getPeer(result_destroy));
	}
	protected native static void g_task_return_pointer(@Ptr long task, GIOLibrary.gpointer result, @Ptr long result_destroy);
	/**
	 * Original signature : <code>void g_task_return_boolean(GTask*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:48</i>
	 */
	public static void g_task_return_boolean(Pointer<GIOLibrary.GTask > task, GIOLibrary.gboolean result) {
		g_task_return_boolean(Pointer.getPeer(task), result);
	}
	protected native static void g_task_return_boolean(@Ptr long task, GIOLibrary.gboolean result);
	/**
	 * Original signature : <code>void g_task_return_int(GTask*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:50</i>
	 */
	public static void g_task_return_int(Pointer<GIOLibrary.GTask > task, @org.bridj.ann.CLong long result) {
		g_task_return_int(Pointer.getPeer(task), result);
	}
	protected native static void g_task_return_int(@Ptr long task, @org.bridj.ann.CLong long result);
	/**
	 * Original signature : <code>void g_task_return_error(GTask*, GError*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:52</i>
	 */
	public static void g_task_return_error(Pointer<GIOLibrary.GTask > task, Pointer error) {
		g_task_return_error(Pointer.getPeer(task), Pointer.getPeer(error));
	}
	protected native static void g_task_return_error(@Ptr long task, @Ptr long error);
	/**
	 * Original signature : <code>void g_task_return_new_error(GTask*, GQuark, gint, const char*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:54</i>
	 */
	public static void g_task_return_new_error(Pointer<GIOLibrary.GTask > task, int domain, int code, Pointer<Byte > format, Object... varArgs1) {
		g_task_return_new_error(Pointer.getPeer(task), domain, code, Pointer.getPeer(format), varArgs1);
	}
	protected native static void g_task_return_new_error(@Ptr long task, int domain, int code, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>gboolean g_task_return_error_if_cancelled(GTask*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:56</i>
	 */
	public static GIOLibrary.gboolean g_task_return_error_if_cancelled(Pointer<GIOLibrary.GTask > task) {
		return g_task_return_error_if_cancelled(Pointer.getPeer(task));
	}
	protected native static GIOLibrary.gboolean g_task_return_error_if_cancelled(@Ptr long task);
	/**
	 * Original signature : <code>gpointer g_task_propagate_pointer(GTask*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:58</i>
	 */
	public static GIOLibrary.gpointer g_task_propagate_pointer(Pointer<GIOLibrary.GTask > task, Pointer<Pointer > error) {
		return g_task_propagate_pointer(Pointer.getPeer(task), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gpointer g_task_propagate_pointer(@Ptr long task, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_task_propagate_boolean(GTask*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:60</i>
	 */
	public static GIOLibrary.gboolean g_task_propagate_boolean(Pointer<GIOLibrary.GTask > task, Pointer<Pointer > error) {
		return g_task_propagate_boolean(Pointer.getPeer(task), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_task_propagate_boolean(@Ptr long task, @Ptr long error);
	/**
	 * Original signature : <code>gssize g_task_propagate_int(GTask*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:62</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_task_propagate_int(Pointer<GIOLibrary.GTask > task, Pointer<Pointer > error) {
		return g_task_propagate_int(Pointer.getPeer(task), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_task_propagate_int(@Ptr long task, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_task_had_error(GTask*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtask.h:64</i>
	 */
	public static GIOLibrary.gboolean g_task_had_error(Pointer<GIOLibrary.GTask > task) {
		return g_task_had_error(Pointer.getPeer(task));
	}
	protected native static GIOLibrary.gboolean g_task_had_error(@Ptr long task);
	/**
	 * Original signature : <code>GType g_tcp_connection_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtcpconnection.h:11</i>
	 */
	public static native GIOLibrary.GType g_tcp_connection_get_type();
	/**
	 * Original signature : <code>void g_tcp_connection_set_graceful_disconnect(GTcpConnection*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtcpconnection.h:13</i>
	 */
	public static void g_tcp_connection_set_graceful_disconnect(Pointer<GTcpConnection > connection, GIOLibrary.gboolean graceful_disconnect) {
		g_tcp_connection_set_graceful_disconnect(Pointer.getPeer(connection), graceful_disconnect);
	}
	protected native static void g_tcp_connection_set_graceful_disconnect(@Ptr long connection, GIOLibrary.gboolean graceful_disconnect);
	/**
	 * Original signature : <code>gboolean g_tcp_connection_get_graceful_disconnect(GTcpConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtcpconnection.h:15</i>
	 */
	public static GIOLibrary.gboolean g_tcp_connection_get_graceful_disconnect(Pointer<GTcpConnection > connection) {
		return g_tcp_connection_get_graceful_disconnect(Pointer.getPeer(connection));
	}
	protected native static GIOLibrary.gboolean g_tcp_connection_get_graceful_disconnect(@Ptr long connection);
	/**
	 * Original signature : <code>GType g_tcp_wrapper_connection_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtcpwrapperconnection.h:11</i>
	 */
	public static native GIOLibrary.GType g_tcp_wrapper_connection_get_type();
	/**
	 * Original signature : <code>GSocketConnection* g_tcp_wrapper_connection_new(GIOStream*, GSocket*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtcpwrapperconnection.h:13</i>
	 */
	public static Pointer<GSocketConnection > g_tcp_wrapper_connection_new(Pointer<GIOStream > base_io_stream, Pointer<GSocket > socket) {
		return Pointer.pointerToAddress(g_tcp_wrapper_connection_new(Pointer.getPeer(base_io_stream), Pointer.getPeer(socket)), GSocketConnection.class);
	}
	@Ptr 
	protected native static long g_tcp_wrapper_connection_new(@Ptr long base_io_stream, @Ptr long socket);
	/**
	 * Original signature : <code>GIOStream* g_tcp_wrapper_connection_get_base_io_stream(GTcpWrapperConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtcpwrapperconnection.h:15</i>
	 */
	public static Pointer<GIOStream > g_tcp_wrapper_connection_get_base_io_stream(Pointer<GTcpWrapperConnection > conn) {
		return Pointer.pointerToAddress(g_tcp_wrapper_connection_get_base_io_stream(Pointer.getPeer(conn)), GIOStream.class);
	}
	@Ptr 
	protected native static long g_tcp_wrapper_connection_get_base_io_stream(@Ptr long conn);
	/**
	 * Original signature : <code>GType g_test_dbus_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtestdbus.h:2</i>
	 */
	public static native GIOLibrary.GType g_test_dbus_get_type();
	/**
	 * Original signature : <code>GTestDBus* g_test_dbus_new(GTestDBusFlags)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtestdbus.h:4</i>
	 */
	public static Pointer<GIOLibrary.GTestDBus > g_test_dbus_new(IntValuedEnum<GIOLibrary.GTestDBusFlags > flags) {
		return Pointer.pointerToAddress(g_test_dbus_new((int)flags.value()), GIOLibrary.GTestDBus.class);
	}
	@Ptr 
	protected native static long g_test_dbus_new(int flags);
	/**
	 * Original signature : <code>GTestDBusFlags g_test_dbus_get_flags(GTestDBus*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtestdbus.h:6</i>
	 */
	public static IntValuedEnum<GIOLibrary.GTestDBusFlags > g_test_dbus_get_flags(Pointer<GIOLibrary.GTestDBus > self) {
		return FlagSet.fromValue(g_test_dbus_get_flags(Pointer.getPeer(self)), GIOLibrary.GTestDBusFlags.class);
	}
	protected native static int g_test_dbus_get_flags(@Ptr long self);
	/**
	 * Original signature : <code>gchar* g_test_dbus_get_bus_address(GTestDBus*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtestdbus.h:8</i>
	 */
	public static Pointer<Byte > g_test_dbus_get_bus_address(Pointer<GIOLibrary.GTestDBus > self) {
		return Pointer.pointerToAddress(g_test_dbus_get_bus_address(Pointer.getPeer(self)), Byte.class);
	}
	@Ptr 
	protected native static long g_test_dbus_get_bus_address(@Ptr long self);
	/**
	 * Original signature : <code>void g_test_dbus_add_service_dir(GTestDBus*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtestdbus.h:10</i>
	 */
	public static void g_test_dbus_add_service_dir(Pointer<GIOLibrary.GTestDBus > self, Pointer<Byte > path) {
		g_test_dbus_add_service_dir(Pointer.getPeer(self), Pointer.getPeer(path));
	}
	protected native static void g_test_dbus_add_service_dir(@Ptr long self, @Ptr long path);
	/**
	 * Original signature : <code>void g_test_dbus_up(GTestDBus*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtestdbus.h:12</i>
	 */
	public static void g_test_dbus_up(Pointer<GIOLibrary.GTestDBus > self) {
		g_test_dbus_up(Pointer.getPeer(self));
	}
	protected native static void g_test_dbus_up(@Ptr long self);
	/**
	 * Original signature : <code>void g_test_dbus_stop(GTestDBus*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtestdbus.h:14</i>
	 */
	public static void g_test_dbus_stop(Pointer<GIOLibrary.GTestDBus > self) {
		g_test_dbus_stop(Pointer.getPeer(self));
	}
	protected native static void g_test_dbus_stop(@Ptr long self);
	/**
	 * Original signature : <code>void g_test_dbus_down(GTestDBus*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtestdbus.h:16</i>
	 */
	public static void g_test_dbus_down(Pointer<GIOLibrary.GTestDBus > self) {
		g_test_dbus_down(Pointer.getPeer(self));
	}
	protected native static void g_test_dbus_down(@Ptr long self);
	/**
	 * Original signature : <code>void g_test_dbus_unset()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtestdbus.h:18</i>
	 */
	public static native void g_test_dbus_unset();
	/**
	 * Original signature : <code>GType g_themed_icon_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gthemedicon.h:7</i>
	 */
	public static native GIOLibrary.GType g_themed_icon_get_type();
	/**
	 * Original signature : <code>GIcon* g_themed_icon_new(const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gthemedicon.h:9</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_themed_icon_new(Pointer<Byte > iconname) {
		return Pointer.pointerToAddress(g_themed_icon_new(Pointer.getPeer(iconname)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_themed_icon_new(@Ptr long iconname);
	/**
	 * Original signature : <code>GIcon* g_themed_icon_new_with_default_fallbacks(const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gthemedicon.h:11</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_themed_icon_new_with_default_fallbacks(Pointer<Byte > iconname) {
		return Pointer.pointerToAddress(g_themed_icon_new_with_default_fallbacks(Pointer.getPeer(iconname)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_themed_icon_new_with_default_fallbacks(@Ptr long iconname);
	/**
	 * Original signature : <code>GIcon* g_themed_icon_new_from_names(char**, int)</code><br>
	 * <i>native declaration : glib-2.0/gio/gthemedicon.h:13</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_themed_icon_new_from_names(Pointer<Pointer<Byte > > iconnames, int len) {
		return Pointer.pointerToAddress(g_themed_icon_new_from_names(Pointer.getPeer(iconnames), len), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_themed_icon_new_from_names(@Ptr long iconnames, int len);
	/**
	 * Original signature : <code>void g_themed_icon_prepend_name(GThemedIcon*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gthemedicon.h:15</i>
	 */
	public static void g_themed_icon_prepend_name(Pointer<GIOLibrary.GThemedIcon > icon, Pointer<Byte > iconname) {
		g_themed_icon_prepend_name(Pointer.getPeer(icon), Pointer.getPeer(iconname));
	}
	protected native static void g_themed_icon_prepend_name(@Ptr long icon, @Ptr long iconname);
	/**
	 * Original signature : <code>void g_themed_icon_append_name(GThemedIcon*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gthemedicon.h:17</i>
	 */
	public static void g_themed_icon_append_name(Pointer<GIOLibrary.GThemedIcon > icon, Pointer<Byte > iconname) {
		g_themed_icon_append_name(Pointer.getPeer(icon), Pointer.getPeer(iconname));
	}
	protected native static void g_themed_icon_append_name(@Ptr long icon, @Ptr long iconname);
	/**
	 * Original signature : <code>const gchar** g_themed_icon_get_names(GThemedIcon*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gthemedicon.h:19</i>
	 */
	public static Pointer<Pointer<Byte > > g_themed_icon_get_names(Pointer<GIOLibrary.GThemedIcon > icon) {
		return Pointer.pointerToAddress(g_themed_icon_get_names(Pointer.getPeer(icon)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_themed_icon_get_names(@Ptr long icon);
	/**
	 * Original signature : <code>GType g_threaded_socket_service_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gthreadedsocketservice.h:25</i>
	 */
	public static native GIOLibrary.GType g_threaded_socket_service_get_type();
	/**
	 * Original signature : <code>GSocketService* g_threaded_socket_service_new(int)</code><br>
	 * <i>native declaration : glib-2.0/gio/gthreadedsocketservice.h:27</i>
	 */
	public static Pointer<GSocketService > g_threaded_socket_service_new(int max_threads) {
		return Pointer.pointerToAddress(g_threaded_socket_service_new$2(max_threads), GSocketService.class);
	}
	@Ptr 
	protected native static long g_threaded_socket_service_new$2(int max_threads);
	/**
	 * Original signature : <code>GType g_tls_backend_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsbackend.h:39</i>
	 */
	public static native GIOLibrary.GType g_tls_backend_get_type();
	/**
	 * Original signature : <code>GTlsBackend* g_tls_backend_get_default()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsbackend.h:41</i>
	 */
	public static Pointer<GIOLibrary.GTlsBackend > g_tls_backend_get_default() {
		return Pointer.pointerToAddress(g_tls_backend_get_default$2(), GIOLibrary.GTlsBackend.class);
	}
	@Ptr 
	protected native static long g_tls_backend_get_default$2();
	/**
	 * Original signature : <code>GTlsDatabase* g_tls_backend_get_default_database(GTlsBackend*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsbackend.h:43</i>
	 */
	public static Pointer<GTlsDatabase > g_tls_backend_get_default_database(Pointer<GIOLibrary.GTlsBackend > backend) {
		return Pointer.pointerToAddress(g_tls_backend_get_default_database(Pointer.getPeer(backend)), GTlsDatabase.class);
	}
	@Ptr 
	protected native static long g_tls_backend_get_default_database(@Ptr long backend);
	/**
	 * Original signature : <code>gboolean g_tls_backend_supports_tls(GTlsBackend*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsbackend.h:45</i>
	 */
	public static GIOLibrary.gboolean g_tls_backend_supports_tls(Pointer<GIOLibrary.GTlsBackend > backend) {
		return g_tls_backend_supports_tls(Pointer.getPeer(backend));
	}
	protected native static GIOLibrary.gboolean g_tls_backend_supports_tls(@Ptr long backend);
	/**
	 * Original signature : <code>GType g_tls_backend_get_certificate_type(GTlsBackend*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsbackend.h:47</i>
	 */
	public static GIOLibrary.GType g_tls_backend_get_certificate_type(Pointer<GIOLibrary.GTlsBackend > backend) {
		return g_tls_backend_get_certificate_type(Pointer.getPeer(backend));
	}
	protected native static GIOLibrary.GType g_tls_backend_get_certificate_type(@Ptr long backend);
	/**
	 * Original signature : <code>GType g_tls_backend_get_client_connection_type(GTlsBackend*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsbackend.h:49</i>
	 */
	public static GIOLibrary.GType g_tls_backend_get_client_connection_type(Pointer<GIOLibrary.GTlsBackend > backend) {
		return g_tls_backend_get_client_connection_type(Pointer.getPeer(backend));
	}
	protected native static GIOLibrary.GType g_tls_backend_get_client_connection_type(@Ptr long backend);
	/**
	 * Original signature : <code>GType g_tls_backend_get_server_connection_type(GTlsBackend*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsbackend.h:51</i>
	 */
	public static GIOLibrary.GType g_tls_backend_get_server_connection_type(Pointer<GIOLibrary.GTlsBackend > backend) {
		return g_tls_backend_get_server_connection_type(Pointer.getPeer(backend));
	}
	protected native static GIOLibrary.GType g_tls_backend_get_server_connection_type(@Ptr long backend);
	/**
	 * Original signature : <code>GType g_tls_backend_get_file_database_type(GTlsBackend*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsbackend.h:53</i>
	 */
	public static GIOLibrary.GType g_tls_backend_get_file_database_type(Pointer<GIOLibrary.GTlsBackend > backend) {
		return g_tls_backend_get_file_database_type(Pointer.getPeer(backend));
	}
	protected native static GIOLibrary.GType g_tls_backend_get_file_database_type(@Ptr long backend);
	/**
	 * Original signature : <code>GType g_tls_certificate_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlscertificate.h:16</i>
	 */
	public static native GIOLibrary.GType g_tls_certificate_get_type();
	/**
	 * Original signature : <code>GTlsCertificate* g_tls_certificate_new_from_pem(const gchar*, gssize, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlscertificate.h:18</i>
	 */
	public static Pointer<GTlsCertificate > g_tls_certificate_new_from_pem(Pointer<Byte > data, @org.bridj.ann.CLong long length, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_tls_certificate_new_from_pem(Pointer.getPeer(data), length, Pointer.getPeer(error)), GTlsCertificate.class);
	}
	@Ptr 
	protected native static long g_tls_certificate_new_from_pem(@Ptr long data, @org.bridj.ann.CLong long length, @Ptr long error);
	/**
	 * Original signature : <code>GTlsCertificate* g_tls_certificate_new_from_file(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlscertificate.h:20</i>
	 */
	public static Pointer<GTlsCertificate > g_tls_certificate_new_from_file(Pointer<Byte > file, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_tls_certificate_new_from_file(Pointer.getPeer(file), Pointer.getPeer(error)), GTlsCertificate.class);
	}
	@Ptr 
	protected native static long g_tls_certificate_new_from_file(@Ptr long file, @Ptr long error);
	/**
	 * Original signature : <code>GTlsCertificate* g_tls_certificate_new_from_files(const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlscertificate.h:22</i>
	 */
	public static Pointer<GTlsCertificate > g_tls_certificate_new_from_files(Pointer<Byte > cert_file, Pointer<Byte > key_file, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_tls_certificate_new_from_files(Pointer.getPeer(cert_file), Pointer.getPeer(key_file), Pointer.getPeer(error)), GTlsCertificate.class);
	}
	@Ptr 
	protected native static long g_tls_certificate_new_from_files(@Ptr long cert_file, @Ptr long key_file, @Ptr long error);
	/**
	 * Original signature : <code>GList* g_tls_certificate_list_new_from_file(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlscertificate.h:24</i>
	 */
	public static Pointer g_tls_certificate_list_new_from_file(Pointer<Byte > file, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_tls_certificate_list_new_from_file(Pointer.getPeer(file), Pointer.getPeer(error)));
	}
	@Ptr 
	protected native static long g_tls_certificate_list_new_from_file(@Ptr long file, @Ptr long error);
	/**
	 * Original signature : <code>GTlsCertificate* g_tls_certificate_get_issuer(GTlsCertificate*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlscertificate.h:26</i>
	 */
	public static Pointer<GTlsCertificate > g_tls_certificate_get_issuer(Pointer<GTlsCertificate > cert) {
		return Pointer.pointerToAddress(g_tls_certificate_get_issuer(Pointer.getPeer(cert)), GTlsCertificate.class);
	}
	@Ptr 
	protected native static long g_tls_certificate_get_issuer(@Ptr long cert);
	/**
	 * Original signature : <code>GTlsCertificateFlags g_tls_certificate_verify(GTlsCertificate*, GSocketConnectable*, GTlsCertificate*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlscertificate.h:28</i>
	 */
	public static IntValuedEnum<GIOLibrary.GTlsCertificateFlags > g_tls_certificate_verify(Pointer<GTlsCertificate > cert, Pointer<GIOLibrary.GSocketConnectable > identity, Pointer<GTlsCertificate > trusted_ca) {
		return FlagSet.fromValue(g_tls_certificate_verify(Pointer.getPeer(cert), Pointer.getPeer(identity), Pointer.getPeer(trusted_ca)), GIOLibrary.GTlsCertificateFlags.class);
	}
	protected native static int g_tls_certificate_verify(@Ptr long cert, @Ptr long identity, @Ptr long trusted_ca);
	/**
	 * Original signature : <code>gboolean g_tls_certificate_is_same(GTlsCertificate*, GTlsCertificate*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlscertificate.h:30</i>
	 */
	public static GIOLibrary.gboolean g_tls_certificate_is_same(Pointer<GTlsCertificate > cert_one, Pointer<GTlsCertificate > cert_two) {
		return g_tls_certificate_is_same(Pointer.getPeer(cert_one), Pointer.getPeer(cert_two));
	}
	protected native static GIOLibrary.gboolean g_tls_certificate_is_same(@Ptr long cert_one, @Ptr long cert_two);
	/**
	 * Original signature : <code>GType g_tls_connection_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:30</i>
	 */
	public static native GIOLibrary.GType g_tls_connection_get_type();
	/**
	 * Original signature : <code>void g_tls_connection_set_use_system_certdb(GTlsConnection*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:32</i>
	 */
	public static void g_tls_connection_set_use_system_certdb(Pointer<GTlsConnection > conn, GIOLibrary.gboolean use_system_certdb) {
		g_tls_connection_set_use_system_certdb(Pointer.getPeer(conn), use_system_certdb);
	}
	protected native static void g_tls_connection_set_use_system_certdb(@Ptr long conn, GIOLibrary.gboolean use_system_certdb);
	/**
	 * Original signature : <code>gboolean g_tls_connection_get_use_system_certdb(GTlsConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:34</i>
	 */
	public static GIOLibrary.gboolean g_tls_connection_get_use_system_certdb(Pointer<GTlsConnection > conn) {
		return g_tls_connection_get_use_system_certdb(Pointer.getPeer(conn));
	}
	protected native static GIOLibrary.gboolean g_tls_connection_get_use_system_certdb(@Ptr long conn);
	/**
	 * Original signature : <code>void g_tls_connection_set_database(GTlsConnection*, GTlsDatabase*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:36</i>
	 */
	public static void g_tls_connection_set_database(Pointer<GTlsConnection > conn, Pointer<GTlsDatabase > database) {
		g_tls_connection_set_database(Pointer.getPeer(conn), Pointer.getPeer(database));
	}
	protected native static void g_tls_connection_set_database(@Ptr long conn, @Ptr long database);
	/**
	 * Original signature : <code>GTlsDatabase* g_tls_connection_get_database(GTlsConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:38</i>
	 */
	public static Pointer<GTlsDatabase > g_tls_connection_get_database(Pointer<GTlsConnection > conn) {
		return Pointer.pointerToAddress(g_tls_connection_get_database(Pointer.getPeer(conn)), GTlsDatabase.class);
	}
	@Ptr 
	protected native static long g_tls_connection_get_database(@Ptr long conn);
	/**
	 * Original signature : <code>void g_tls_connection_set_certificate(GTlsConnection*, GTlsCertificate*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:40</i>
	 */
	public static void g_tls_connection_set_certificate(Pointer<GTlsConnection > conn, Pointer<GTlsCertificate > certificate) {
		g_tls_connection_set_certificate(Pointer.getPeer(conn), Pointer.getPeer(certificate));
	}
	protected native static void g_tls_connection_set_certificate(@Ptr long conn, @Ptr long certificate);
	/**
	 * Original signature : <code>GTlsCertificate* g_tls_connection_get_certificate(GTlsConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:42</i>
	 */
	public static Pointer<GTlsCertificate > g_tls_connection_get_certificate(Pointer<GTlsConnection > conn) {
		return Pointer.pointerToAddress(g_tls_connection_get_certificate(Pointer.getPeer(conn)), GTlsCertificate.class);
	}
	@Ptr 
	protected native static long g_tls_connection_get_certificate(@Ptr long conn);
	/**
	 * Original signature : <code>void g_tls_connection_set_interaction(GTlsConnection*, GTlsInteraction*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:44</i>
	 */
	public static void g_tls_connection_set_interaction(Pointer<GTlsConnection > conn, Pointer<GTlsInteraction > interaction) {
		g_tls_connection_set_interaction(Pointer.getPeer(conn), Pointer.getPeer(interaction));
	}
	protected native static void g_tls_connection_set_interaction(@Ptr long conn, @Ptr long interaction);
	/**
	 * Original signature : <code>GTlsInteraction* g_tls_connection_get_interaction(GTlsConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:46</i>
	 */
	public static Pointer<GTlsInteraction > g_tls_connection_get_interaction(Pointer<GTlsConnection > conn) {
		return Pointer.pointerToAddress(g_tls_connection_get_interaction(Pointer.getPeer(conn)), GTlsInteraction.class);
	}
	@Ptr 
	protected native static long g_tls_connection_get_interaction(@Ptr long conn);
	/**
	 * Original signature : <code>GTlsCertificate* g_tls_connection_get_peer_certificate(GTlsConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:48</i>
	 */
	public static Pointer<GTlsCertificate > g_tls_connection_get_peer_certificate(Pointer<GTlsConnection > conn) {
		return Pointer.pointerToAddress(g_tls_connection_get_peer_certificate(Pointer.getPeer(conn)), GTlsCertificate.class);
	}
	@Ptr 
	protected native static long g_tls_connection_get_peer_certificate(@Ptr long conn);
	/**
	 * Original signature : <code>GTlsCertificateFlags g_tls_connection_get_peer_certificate_errors(GTlsConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:50</i>
	 */
	public static IntValuedEnum<GIOLibrary.GTlsCertificateFlags > g_tls_connection_get_peer_certificate_errors(Pointer<GTlsConnection > conn) {
		return FlagSet.fromValue(g_tls_connection_get_peer_certificate_errors(Pointer.getPeer(conn)), GIOLibrary.GTlsCertificateFlags.class);
	}
	protected native static int g_tls_connection_get_peer_certificate_errors(@Ptr long conn);
	/**
	 * Original signature : <code>void g_tls_connection_set_require_close_notify(GTlsConnection*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:52</i>
	 */
	public static void g_tls_connection_set_require_close_notify(Pointer<GTlsConnection > conn, GIOLibrary.gboolean require_close_notify) {
		g_tls_connection_set_require_close_notify(Pointer.getPeer(conn), require_close_notify);
	}
	protected native static void g_tls_connection_set_require_close_notify(@Ptr long conn, GIOLibrary.gboolean require_close_notify);
	/**
	 * Original signature : <code>gboolean g_tls_connection_get_require_close_notify(GTlsConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:54</i>
	 */
	public static GIOLibrary.gboolean g_tls_connection_get_require_close_notify(Pointer<GTlsConnection > conn) {
		return g_tls_connection_get_require_close_notify(Pointer.getPeer(conn));
	}
	protected native static GIOLibrary.gboolean g_tls_connection_get_require_close_notify(@Ptr long conn);
	/**
	 * Original signature : <code>void g_tls_connection_set_rehandshake_mode(GTlsConnection*, GTlsRehandshakeMode)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:56</i>
	 */
	public static void g_tls_connection_set_rehandshake_mode(Pointer<GTlsConnection > conn, IntValuedEnum<GIOLibrary.GTlsRehandshakeMode > mode) {
		g_tls_connection_set_rehandshake_mode(Pointer.getPeer(conn), (int)mode.value());
	}
	protected native static void g_tls_connection_set_rehandshake_mode(@Ptr long conn, int mode);
	/**
	 * Original signature : <code>GTlsRehandshakeMode g_tls_connection_get_rehandshake_mode(GTlsConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:58</i>
	 */
	public static IntValuedEnum<GIOLibrary.GTlsRehandshakeMode > g_tls_connection_get_rehandshake_mode(Pointer<GTlsConnection > conn) {
		return FlagSet.fromValue(g_tls_connection_get_rehandshake_mode(Pointer.getPeer(conn)), GIOLibrary.GTlsRehandshakeMode.class);
	}
	protected native static int g_tls_connection_get_rehandshake_mode(@Ptr long conn);
	/**
	 * Original signature : <code>gboolean g_tls_connection_handshake(GTlsConnection*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:60</i>
	 */
	public static GIOLibrary.gboolean g_tls_connection_handshake(Pointer<GTlsConnection > conn, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return g_tls_connection_handshake(Pointer.getPeer(conn), Pointer.getPeer(cancellable), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_tls_connection_handshake(@Ptr long conn, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_tls_connection_handshake_async(GTlsConnection*, int, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:62</i>
	 */
	public static void g_tls_connection_handshake_async(Pointer<GTlsConnection > conn, int io_priority, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_tls_connection_handshake_async(Pointer.getPeer(conn), io_priority, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_tls_connection_handshake_async(@Ptr long conn, int io_priority, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_tls_connection_handshake_finish(GTlsConnection*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:64</i>
	 */
	public static GIOLibrary.gboolean g_tls_connection_handshake_finish(Pointer<GTlsConnection > conn, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_tls_connection_handshake_finish(Pointer.getPeer(conn), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_tls_connection_handshake_finish(@Ptr long conn, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>GQuark g_tls_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:66</i>
	 */
	public static native int g_tls_error_quark();
	/**
	 * < protected ><br>
	 * Original signature : <code>gboolean g_tls_connection_emit_accept_certificate(GTlsConnection*, GTlsCertificate*, GTlsCertificateFlags)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsconnection.h:71</i>
	 */
	public static GIOLibrary.gboolean g_tls_connection_emit_accept_certificate(Pointer<GTlsConnection > conn, Pointer<GTlsCertificate > peer_cert, IntValuedEnum<GIOLibrary.GTlsCertificateFlags > errors) {
		return g_tls_connection_emit_accept_certificate(Pointer.getPeer(conn), Pointer.getPeer(peer_cert), (int)errors.value());
	}
	protected native static GIOLibrary.gboolean g_tls_connection_emit_accept_certificate(@Ptr long conn, @Ptr long peer_cert, int errors);
	/**
	 * Original signature : <code>GType g_tls_client_connection_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsclientconnection.h:6</i>
	 */
	public static native GIOLibrary.GType g_tls_client_connection_get_type();
	/**
	 * Original signature : <code>GIOStream* g_tls_client_connection_new(GIOStream*, GSocketConnectable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsclientconnection.h:8</i>
	 */
	public static Pointer<GIOStream > g_tls_client_connection_new(Pointer<GIOStream > base_io_stream, Pointer<GIOLibrary.GSocketConnectable > server_identity, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_tls_client_connection_new(Pointer.getPeer(base_io_stream), Pointer.getPeer(server_identity), Pointer.getPeer(error)), GIOStream.class);
	}
	@Ptr 
	protected native static long g_tls_client_connection_new(@Ptr long base_io_stream, @Ptr long server_identity, @Ptr long error);
	/**
	 * Original signature : <code>GTlsCertificateFlags g_tls_client_connection_get_validation_flags(GTlsClientConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsclientconnection.h:10</i>
	 */
	public static IntValuedEnum<GIOLibrary.GTlsCertificateFlags > g_tls_client_connection_get_validation_flags(Pointer<GIOLibrary.GTlsClientConnection > conn) {
		return FlagSet.fromValue(g_tls_client_connection_get_validation_flags(Pointer.getPeer(conn)), GIOLibrary.GTlsCertificateFlags.class);
	}
	protected native static int g_tls_client_connection_get_validation_flags(@Ptr long conn);
	/**
	 * Original signature : <code>void g_tls_client_connection_set_validation_flags(GTlsClientConnection*, GTlsCertificateFlags)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsclientconnection.h:12</i>
	 */
	public static void g_tls_client_connection_set_validation_flags(Pointer<GIOLibrary.GTlsClientConnection > conn, IntValuedEnum<GIOLibrary.GTlsCertificateFlags > flags) {
		g_tls_client_connection_set_validation_flags(Pointer.getPeer(conn), (int)flags.value());
	}
	protected native static void g_tls_client_connection_set_validation_flags(@Ptr long conn, int flags);
	/**
	 * Original signature : <code>GSocketConnectable* g_tls_client_connection_get_server_identity(GTlsClientConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsclientconnection.h:14</i>
	 */
	public static Pointer<GIOLibrary.GSocketConnectable > g_tls_client_connection_get_server_identity(Pointer<GIOLibrary.GTlsClientConnection > conn) {
		return Pointer.pointerToAddress(g_tls_client_connection_get_server_identity(Pointer.getPeer(conn)), GIOLibrary.GSocketConnectable.class);
	}
	@Ptr 
	protected native static long g_tls_client_connection_get_server_identity(@Ptr long conn);
	/**
	 * Original signature : <code>void g_tls_client_connection_set_server_identity(GTlsClientConnection*, GSocketConnectable*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsclientconnection.h:16</i>
	 */
	public static void g_tls_client_connection_set_server_identity(Pointer<GIOLibrary.GTlsClientConnection > conn, Pointer<GIOLibrary.GSocketConnectable > identity) {
		g_tls_client_connection_set_server_identity(Pointer.getPeer(conn), Pointer.getPeer(identity));
	}
	protected native static void g_tls_client_connection_set_server_identity(@Ptr long conn, @Ptr long identity);
	/**
	 * Original signature : <code>gboolean g_tls_client_connection_get_use_ssl3(GTlsClientConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsclientconnection.h:18</i>
	 */
	public static GIOLibrary.gboolean g_tls_client_connection_get_use_ssl3(Pointer<GIOLibrary.GTlsClientConnection > conn) {
		return g_tls_client_connection_get_use_ssl3(Pointer.getPeer(conn));
	}
	protected native static GIOLibrary.gboolean g_tls_client_connection_get_use_ssl3(@Ptr long conn);
	/**
	 * Original signature : <code>void g_tls_client_connection_set_use_ssl3(GTlsClientConnection*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsclientconnection.h:20</i>
	 */
	public static void g_tls_client_connection_set_use_ssl3(Pointer<GIOLibrary.GTlsClientConnection > conn, GIOLibrary.gboolean use_ssl3) {
		g_tls_client_connection_set_use_ssl3(Pointer.getPeer(conn), use_ssl3);
	}
	protected native static void g_tls_client_connection_set_use_ssl3(@Ptr long conn, GIOLibrary.gboolean use_ssl3);
	/**
	 * Original signature : <code>GList* g_tls_client_connection_get_accepted_cas(GTlsClientConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsclientconnection.h:22</i>
	 */
	public static Pointer g_tls_client_connection_get_accepted_cas(Pointer<GIOLibrary.GTlsClientConnection > conn) {
		return Pointer.pointerToAddress(g_tls_client_connection_get_accepted_cas(Pointer.getPeer(conn)));
	}
	@Ptr 
	protected native static long g_tls_client_connection_get_accepted_cas(@Ptr long conn);
	/**
	 * Original signature : <code>GType g_tls_database_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsdatabase.h:41</i>
	 */
	public static native GIOLibrary.GType g_tls_database_get_type();
	/**
	 * Original signature : <code>GTlsCertificateFlags g_tls_database_verify_chain(GTlsDatabase*, GTlsCertificate*, const gchar*, GSocketConnectable*, GTlsInteraction*, GTlsDatabaseVerifyFlags, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsdatabase.h:43</i>
	 */
	public static IntValuedEnum<GIOLibrary.GTlsCertificateFlags > g_tls_database_verify_chain(Pointer<GTlsDatabase > self, Pointer<GTlsCertificate > chain, Pointer<Byte > purpose, Pointer<GIOLibrary.GSocketConnectable > identity, Pointer<GTlsInteraction > interaction, IntValuedEnum<GIOLibrary.GTlsDatabaseVerifyFlags > flags, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return FlagSet.fromValue(g_tls_database_verify_chain(Pointer.getPeer(self), Pointer.getPeer(chain), Pointer.getPeer(purpose), Pointer.getPeer(identity), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GTlsCertificateFlags.class);
	}
	protected native static int g_tls_database_verify_chain(@Ptr long self, @Ptr long chain, @Ptr long purpose, @Ptr long identity, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_tls_database_verify_chain_async(GTlsDatabase*, GTlsCertificate*, const gchar*, GSocketConnectable*, GTlsInteraction*, GTlsDatabaseVerifyFlags, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsdatabase.h:45</i>
	 */
	public static void g_tls_database_verify_chain_async(Pointer<GTlsDatabase > self, Pointer<GTlsCertificate > chain, Pointer<Byte > purpose, Pointer<GIOLibrary.GSocketConnectable > identity, Pointer<GTlsInteraction > interaction, IntValuedEnum<GIOLibrary.GTlsDatabaseVerifyFlags > flags, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_tls_database_verify_chain_async(Pointer.getPeer(self), Pointer.getPeer(chain), Pointer.getPeer(purpose), Pointer.getPeer(identity), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_tls_database_verify_chain_async(@Ptr long self, @Ptr long chain, @Ptr long purpose, @Ptr long identity, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GTlsCertificateFlags g_tls_database_verify_chain_finish(GTlsDatabase*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsdatabase.h:47</i>
	 */
	public static IntValuedEnum<GIOLibrary.GTlsCertificateFlags > g_tls_database_verify_chain_finish(Pointer<GTlsDatabase > self, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return FlagSet.fromValue(g_tls_database_verify_chain_finish(Pointer.getPeer(self), Pointer.getPeer(result), Pointer.getPeer(error)), GIOLibrary.GTlsCertificateFlags.class);
	}
	protected native static int g_tls_database_verify_chain_finish(@Ptr long self, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_tls_database_create_certificate_handle(GTlsDatabase*, GTlsCertificate*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsdatabase.h:49</i>
	 */
	public static Pointer<Byte > g_tls_database_create_certificate_handle(Pointer<GTlsDatabase > self, Pointer<GTlsCertificate > certificate) {
		return Pointer.pointerToAddress(g_tls_database_create_certificate_handle(Pointer.getPeer(self), Pointer.getPeer(certificate)), Byte.class);
	}
	@Ptr 
	protected native static long g_tls_database_create_certificate_handle(@Ptr long self, @Ptr long certificate);
	/**
	 * Original signature : <code>GTlsCertificate* g_tls_database_lookup_certificate_for_handle(GTlsDatabase*, const gchar*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsdatabase.h:51</i>
	 */
	public static Pointer<GTlsCertificate > g_tls_database_lookup_certificate_for_handle(Pointer<GTlsDatabase > self, Pointer<Byte > handle, Pointer<GTlsInteraction > interaction, IntValuedEnum<GIOLibrary.GTlsDatabaseLookupFlags > flags, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_tls_database_lookup_certificate_for_handle(Pointer.getPeer(self), Pointer.getPeer(handle), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GTlsCertificate.class);
	}
	@Ptr 
	protected native static long g_tls_database_lookup_certificate_for_handle(@Ptr long self, @Ptr long handle, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_tls_database_lookup_certificate_for_handle_async(GTlsDatabase*, const gchar*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsdatabase.h:53</i>
	 */
	public static void g_tls_database_lookup_certificate_for_handle_async(Pointer<GTlsDatabase > self, Pointer<Byte > handle, Pointer<GTlsInteraction > interaction, IntValuedEnum<GIOLibrary.GTlsDatabaseLookupFlags > flags, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_tls_database_lookup_certificate_for_handle_async(Pointer.getPeer(self), Pointer.getPeer(handle), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_tls_database_lookup_certificate_for_handle_async(@Ptr long self, @Ptr long handle, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GTlsCertificate* g_tls_database_lookup_certificate_for_handle_finish(GTlsDatabase*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsdatabase.h:55</i>
	 */
	public static Pointer<GTlsCertificate > g_tls_database_lookup_certificate_for_handle_finish(Pointer<GTlsDatabase > self, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_tls_database_lookup_certificate_for_handle_finish(Pointer.getPeer(self), Pointer.getPeer(result), Pointer.getPeer(error)), GTlsCertificate.class);
	}
	@Ptr 
	protected native static long g_tls_database_lookup_certificate_for_handle_finish(@Ptr long self, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>GTlsCertificate* g_tls_database_lookup_certificate_issuer(GTlsDatabase*, GTlsCertificate*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsdatabase.h:57</i>
	 */
	public static Pointer<GTlsCertificate > g_tls_database_lookup_certificate_issuer(Pointer<GTlsDatabase > self, Pointer<GTlsCertificate > certificate, Pointer<GTlsInteraction > interaction, IntValuedEnum<GIOLibrary.GTlsDatabaseLookupFlags > flags, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_tls_database_lookup_certificate_issuer(Pointer.getPeer(self), Pointer.getPeer(certificate), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GTlsCertificate.class);
	}
	@Ptr 
	protected native static long g_tls_database_lookup_certificate_issuer(@Ptr long self, @Ptr long certificate, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_tls_database_lookup_certificate_issuer_async(GTlsDatabase*, GTlsCertificate*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsdatabase.h:59</i>
	 */
	public static void g_tls_database_lookup_certificate_issuer_async(Pointer<GTlsDatabase > self, Pointer<GTlsCertificate > certificate, Pointer<GTlsInteraction > interaction, IntValuedEnum<GIOLibrary.GTlsDatabaseLookupFlags > flags, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_tls_database_lookup_certificate_issuer_async(Pointer.getPeer(self), Pointer.getPeer(certificate), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_tls_database_lookup_certificate_issuer_async(@Ptr long self, @Ptr long certificate, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GTlsCertificate* g_tls_database_lookup_certificate_issuer_finish(GTlsDatabase*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsdatabase.h:61</i>
	 */
	public static Pointer<GTlsCertificate > g_tls_database_lookup_certificate_issuer_finish(Pointer<GTlsDatabase > self, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_tls_database_lookup_certificate_issuer_finish(Pointer.getPeer(self), Pointer.getPeer(result), Pointer.getPeer(error)), GTlsCertificate.class);
	}
	@Ptr 
	protected native static long g_tls_database_lookup_certificate_issuer_finish(@Ptr long self, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>GList* g_tls_database_lookup_certificates_issued_by(GTlsDatabase*, GByteArray*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsdatabase.h:63</i>
	 */
	public static Pointer g_tls_database_lookup_certificates_issued_by(Pointer<GTlsDatabase > self, Pointer issuer_raw_dn, Pointer<GTlsInteraction > interaction, IntValuedEnum<GIOLibrary.GTlsDatabaseLookupFlags > flags, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_tls_database_lookup_certificates_issued_by(Pointer.getPeer(self), Pointer.getPeer(issuer_raw_dn), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(error)));
	}
	@Ptr 
	protected native static long g_tls_database_lookup_certificates_issued_by(@Ptr long self, @Ptr long issuer_raw_dn, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_tls_database_lookup_certificates_issued_by_async(GTlsDatabase*, GByteArray*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsdatabase.h:65</i>
	 */
	public static void g_tls_database_lookup_certificates_issued_by_async(Pointer<GTlsDatabase > self, Pointer issuer_raw_dn, Pointer<GTlsInteraction > interaction, IntValuedEnum<GIOLibrary.GTlsDatabaseLookupFlags > flags, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_tls_database_lookup_certificates_issued_by_async(Pointer.getPeer(self), Pointer.getPeer(issuer_raw_dn), Pointer.getPeer(interaction), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_tls_database_lookup_certificates_issued_by_async(@Ptr long self, @Ptr long issuer_raw_dn, @Ptr long interaction, int flags, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GList* g_tls_database_lookup_certificates_issued_by_finish(GTlsDatabase*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsdatabase.h:67</i>
	 */
	public static Pointer g_tls_database_lookup_certificates_issued_by_finish(Pointer<GTlsDatabase > self, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_tls_database_lookup_certificates_issued_by_finish(Pointer.getPeer(self), Pointer.getPeer(result), Pointer.getPeer(error)));
	}
	@Ptr 
	protected native static long g_tls_database_lookup_certificates_issued_by_finish(@Ptr long self, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>GType g_tls_file_database_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsfiledatabase.h:13</i>
	 */
	public static native GIOLibrary.GType g_tls_file_database_get_type();
	/**
	 * Original signature : <code>GTlsDatabase* g_tls_file_database_new(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsfiledatabase.h:15</i>
	 */
	public static Pointer<GTlsDatabase > g_tls_file_database_new(Pointer<Byte > anchors, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_tls_file_database_new(Pointer.getPeer(anchors), Pointer.getPeer(error)), GTlsDatabase.class);
	}
	@Ptr 
	protected native static long g_tls_file_database_new(@Ptr long anchors, @Ptr long error);
	/**
	 * Original signature : <code>GType g_tls_interaction_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsinteraction.h:26</i>
	 */
	public static native GIOLibrary.GType g_tls_interaction_get_type();
	/**
	 * Original signature : <code>GTlsInteractionResult g_tls_interaction_invoke_ask_password(GTlsInteraction*, GTlsPassword*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsinteraction.h:28</i>
	 */
	public static IntValuedEnum<GIOLibrary.GTlsInteractionResult > g_tls_interaction_invoke_ask_password(Pointer<GTlsInteraction > interaction, Pointer<GTlsPassword > password, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return FlagSet.fromValue(g_tls_interaction_invoke_ask_password(Pointer.getPeer(interaction), Pointer.getPeer(password), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GTlsInteractionResult.class);
	}
	protected native static int g_tls_interaction_invoke_ask_password(@Ptr long interaction, @Ptr long password, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>GTlsInteractionResult g_tls_interaction_ask_password(GTlsInteraction*, GTlsPassword*, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsinteraction.h:30</i>
	 */
	public static IntValuedEnum<GIOLibrary.GTlsInteractionResult > g_tls_interaction_ask_password(Pointer<GTlsInteraction > interaction, Pointer<GTlsPassword > password, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return FlagSet.fromValue(g_tls_interaction_ask_password(Pointer.getPeer(interaction), Pointer.getPeer(password), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GTlsInteractionResult.class);
	}
	protected native static int g_tls_interaction_ask_password(@Ptr long interaction, @Ptr long password, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_tls_interaction_ask_password_async(GTlsInteraction*, GTlsPassword*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsinteraction.h:32</i>
	 */
	public static void g_tls_interaction_ask_password_async(Pointer<GTlsInteraction > interaction, Pointer<GTlsPassword > password, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_tls_interaction_ask_password_async(Pointer.getPeer(interaction), Pointer.getPeer(password), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_tls_interaction_ask_password_async(@Ptr long interaction, @Ptr long password, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GTlsInteractionResult g_tls_interaction_ask_password_finish(GTlsInteraction*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsinteraction.h:34</i>
	 */
	public static IntValuedEnum<GIOLibrary.GTlsInteractionResult > g_tls_interaction_ask_password_finish(Pointer<GTlsInteraction > interaction, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return FlagSet.fromValue(g_tls_interaction_ask_password_finish(Pointer.getPeer(interaction), Pointer.getPeer(result), Pointer.getPeer(error)), GIOLibrary.GTlsInteractionResult.class);
	}
	protected native static int g_tls_interaction_ask_password_finish(@Ptr long interaction, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>GType g_tls_server_connection_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsserverconnection.h:12</i>
	 */
	public static native GIOLibrary.GType g_tls_server_connection_get_type();
	/**
	 * Original signature : <code>GIOStream* g_tls_server_connection_new(GIOStream*, GTlsCertificate*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlsserverconnection.h:14</i>
	 */
	public static Pointer<GIOStream > g_tls_server_connection_new(Pointer<GIOStream > base_io_stream, Pointer<GTlsCertificate > certificate, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_tls_server_connection_new(Pointer.getPeer(base_io_stream), Pointer.getPeer(certificate), Pointer.getPeer(error)), GIOStream.class);
	}
	@Ptr 
	protected native static long g_tls_server_connection_new(@Ptr long base_io_stream, @Ptr long certificate, @Ptr long error);
	/**
	 * Original signature : <code>GType g_tls_password_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlspassword.h:19</i>
	 */
	public static native GIOLibrary.GType g_tls_password_get_type();
	/**
	 * Original signature : <code>GTlsPassword* g_tls_password_new(GTlsPasswordFlags, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlspassword.h:21</i>
	 */
	public static Pointer<GTlsPassword > g_tls_password_new(IntValuedEnum<GIOLibrary.GTlsPasswordFlags > flags, Pointer<Byte > description) {
		return Pointer.pointerToAddress(g_tls_password_new((int)flags.value(), Pointer.getPeer(description)), GTlsPassword.class);
	}
	@Ptr 
	protected native static long g_tls_password_new(int flags, @Ptr long description);
	/**
	 * Original signature : <code>guchar* g_tls_password_get_value(GTlsPassword*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlspassword.h:23</i>
	 */
	public static Pointer<Byte > g_tls_password_get_value(Pointer<GTlsPassword > password, Pointer<org.bridj.CLong > length) {
		return Pointer.pointerToAddress(g_tls_password_get_value(Pointer.getPeer(password), Pointer.getPeer(length)), Byte.class);
	}
	@Ptr 
	protected native static long g_tls_password_get_value(@Ptr long password, @Ptr long length);
	/**
	 * Original signature : <code>void g_tls_password_set_value(GTlsPassword*, const guchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlspassword.h:25</i>
	 */
	public static void g_tls_password_set_value(Pointer<GTlsPassword > password, Pointer<Byte > value, @org.bridj.ann.CLong long length) {
		g_tls_password_set_value(Pointer.getPeer(password), Pointer.getPeer(value), length);
	}
	protected native static void g_tls_password_set_value(@Ptr long password, @Ptr long value, @org.bridj.ann.CLong long length);
	/**
	 * Original signature : <code>void g_tls_password_set_value_full(GTlsPassword*, guchar*, gssize, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlspassword.h:27</i>
	 */
	public static void g_tls_password_set_value_full(Pointer<GTlsPassword > password, Pointer<Byte > value, @org.bridj.ann.CLong long length, GIOLibrary.GDestroyNotify destroy) {
		g_tls_password_set_value_full(Pointer.getPeer(password), Pointer.getPeer(value), length, Pointer.getPeer(destroy));
	}
	protected native static void g_tls_password_set_value_full(@Ptr long password, @Ptr long value, @org.bridj.ann.CLong long length, @Ptr long destroy);
	/**
	 * Original signature : <code>GTlsPasswordFlags g_tls_password_get_flags(GTlsPassword*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlspassword.h:29</i>
	 */
	public static IntValuedEnum<GIOLibrary.GTlsPasswordFlags > g_tls_password_get_flags(Pointer<GTlsPassword > password) {
		return FlagSet.fromValue(g_tls_password_get_flags(Pointer.getPeer(password)), GIOLibrary.GTlsPasswordFlags.class);
	}
	protected native static int g_tls_password_get_flags(@Ptr long password);
	/**
	 * Original signature : <code>void g_tls_password_set_flags(GTlsPassword*, GTlsPasswordFlags)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlspassword.h:31</i>
	 */
	public static void g_tls_password_set_flags(Pointer<GTlsPassword > password, IntValuedEnum<GIOLibrary.GTlsPasswordFlags > flags) {
		g_tls_password_set_flags(Pointer.getPeer(password), (int)flags.value());
	}
	protected native static void g_tls_password_set_flags(@Ptr long password, int flags);
	/**
	 * Original signature : <code>gchar* g_tls_password_get_description(GTlsPassword*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlspassword.h:33</i>
	 */
	public static Pointer<Byte > g_tls_password_get_description(Pointer<GTlsPassword > password) {
		return Pointer.pointerToAddress(g_tls_password_get_description(Pointer.getPeer(password)), Byte.class);
	}
	@Ptr 
	protected native static long g_tls_password_get_description(@Ptr long password);
	/**
	 * Original signature : <code>void g_tls_password_set_description(GTlsPassword*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlspassword.h:35</i>
	 */
	public static void g_tls_password_set_description(Pointer<GTlsPassword > password, Pointer<Byte > description) {
		g_tls_password_set_description(Pointer.getPeer(password), Pointer.getPeer(description));
	}
	protected native static void g_tls_password_set_description(@Ptr long password, @Ptr long description);
	/**
	 * Original signature : <code>gchar* g_tls_password_get_warning(GTlsPassword*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlspassword.h:37</i>
	 */
	public static Pointer<Byte > g_tls_password_get_warning(Pointer<GTlsPassword > password) {
		return Pointer.pointerToAddress(g_tls_password_get_warning(Pointer.getPeer(password)), Byte.class);
	}
	@Ptr 
	protected native static long g_tls_password_get_warning(@Ptr long password);
	/**
	 * Original signature : <code>void g_tls_password_set_warning(GTlsPassword*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gtlspassword.h:39</i>
	 */
	public static void g_tls_password_set_warning(Pointer<GTlsPassword > password, Pointer<Byte > warning) {
		g_tls_password_set_warning(Pointer.getPeer(password), Pointer.getPeer(warning));
	}
	protected native static void g_tls_password_set_warning(@Ptr long password, @Ptr long warning);
	/**
	 * Original signature : <code>GType g_vfs_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gvfs.h:51</i>
	 */
	public static native GIOLibrary.GType g_vfs_get_type();
	/**
	 * Original signature : <code>gboolean g_vfs_is_active(GVfs*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvfs.h:53</i>
	 */
	public static GIOLibrary.gboolean g_vfs_is_active(Pointer<GVfs > vfs) {
		return g_vfs_is_active(Pointer.getPeer(vfs));
	}
	protected native static GIOLibrary.gboolean g_vfs_is_active(@Ptr long vfs);
	/**
	 * Original signature : <code>GFile* g_vfs_get_file_for_path(GVfs*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvfs.h:55</i>
	 */
	public static Pointer<GIOLibrary.GFile > g_vfs_get_file_for_path(Pointer<GVfs > vfs, Pointer<Byte > path) {
		return Pointer.pointerToAddress(g_vfs_get_file_for_path(Pointer.getPeer(vfs), Pointer.getPeer(path)), GIOLibrary.GFile.class);
	}
	@Ptr 
	protected native static long g_vfs_get_file_for_path(@Ptr long vfs, @Ptr long path);
	/**
	 * Original signature : <code>GFile* g_vfs_get_file_for_uri(GVfs*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvfs.h:57</i>
	 */
	public static Pointer<GIOLibrary.GFile > g_vfs_get_file_for_uri(Pointer<GVfs > vfs, Pointer<Byte > uri) {
		return Pointer.pointerToAddress(g_vfs_get_file_for_uri(Pointer.getPeer(vfs), Pointer.getPeer(uri)), GIOLibrary.GFile.class);
	}
	@Ptr 
	protected native static long g_vfs_get_file_for_uri(@Ptr long vfs, @Ptr long uri);
	/**
	 * Original signature : <code>const gchar** g_vfs_get_supported_uri_schemes(GVfs*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvfs.h:59</i>
	 */
	public static Pointer<Pointer<Byte > > g_vfs_get_supported_uri_schemes(Pointer<GVfs > vfs) {
		return Pointer.pointerToAddress(g_vfs_get_supported_uri_schemes(Pointer.getPeer(vfs)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_vfs_get_supported_uri_schemes(@Ptr long vfs);
	/**
	 * Original signature : <code>GFile* g_vfs_parse_name(GVfs*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvfs.h:61</i>
	 */
	public static Pointer<GIOLibrary.GFile > g_vfs_parse_name(Pointer<GVfs > vfs, Pointer<Byte > parse_name) {
		return Pointer.pointerToAddress(g_vfs_parse_name(Pointer.getPeer(vfs), Pointer.getPeer(parse_name)), GIOLibrary.GFile.class);
	}
	@Ptr 
	protected native static long g_vfs_parse_name(@Ptr long vfs, @Ptr long parse_name);
	/**
	 * Original signature : <code>GVfs* g_vfs_get_default()</code><br>
	 * <i>native declaration : glib-2.0/gio/gvfs.h:63</i>
	 */
	public static Pointer<GVfs > g_vfs_get_default() {
		return Pointer.pointerToAddress(g_vfs_get_default$2(), GVfs.class);
	}
	@Ptr 
	protected native static long g_vfs_get_default$2();
	/**
	 * Original signature : <code>GVfs* g_vfs_get_local()</code><br>
	 * <i>native declaration : glib-2.0/gio/gvfs.h:65</i>
	 */
	public static Pointer<GVfs > g_vfs_get_local() {
		return Pointer.pointerToAddress(g_vfs_get_local$2(), GVfs.class);
	}
	@Ptr 
	protected native static long g_vfs_get_local$2();
	/**
	 * Original signature : <code>GType g_volume_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:86</i>
	 */
	public static native GIOLibrary.GType g_volume_get_type();
	/**
	 * Original signature : <code>char* g_volume_get_name(GVolume*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:88</i>
	 */
	public static Pointer<Byte > g_volume_get_name(Pointer<GIOLibrary.GVolume > volume) {
		return Pointer.pointerToAddress(g_volume_get_name(Pointer.getPeer(volume)), Byte.class);
	}
	@Ptr 
	protected native static long g_volume_get_name(@Ptr long volume);
	/**
	 * Original signature : <code>GIcon* g_volume_get_icon(GVolume*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:90</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_volume_get_icon(Pointer<GIOLibrary.GVolume > volume) {
		return Pointer.pointerToAddress(g_volume_get_icon(Pointer.getPeer(volume)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_volume_get_icon(@Ptr long volume);
	/**
	 * Original signature : <code>GIcon* g_volume_get_symbolic_icon(GVolume*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:92</i>
	 */
	public static Pointer<GIOLibrary.GIcon > g_volume_get_symbolic_icon(Pointer<GIOLibrary.GVolume > volume) {
		return Pointer.pointerToAddress(g_volume_get_symbolic_icon(Pointer.getPeer(volume)), GIOLibrary.GIcon.class);
	}
	@Ptr 
	protected native static long g_volume_get_symbolic_icon(@Ptr long volume);
	/**
	 * Original signature : <code>char* g_volume_get_uuid(GVolume*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:94</i>
	 */
	public static Pointer<Byte > g_volume_get_uuid(Pointer<GIOLibrary.GVolume > volume) {
		return Pointer.pointerToAddress(g_volume_get_uuid(Pointer.getPeer(volume)), Byte.class);
	}
	@Ptr 
	protected native static long g_volume_get_uuid(@Ptr long volume);
	/**
	 * Original signature : <code>GDrive* g_volume_get_drive(GVolume*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:96</i>
	 */
	public static Pointer<GIOLibrary.GDrive > g_volume_get_drive(Pointer<GIOLibrary.GVolume > volume) {
		return Pointer.pointerToAddress(g_volume_get_drive(Pointer.getPeer(volume)), GIOLibrary.GDrive.class);
	}
	@Ptr 
	protected native static long g_volume_get_drive(@Ptr long volume);
	/**
	 * Original signature : <code>GMount* g_volume_get_mount(GVolume*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:98</i>
	 */
	public static Pointer<GIOLibrary.GMount > g_volume_get_mount(Pointer<GIOLibrary.GVolume > volume) {
		return Pointer.pointerToAddress(g_volume_get_mount(Pointer.getPeer(volume)), GIOLibrary.GMount.class);
	}
	@Ptr 
	protected native static long g_volume_get_mount(@Ptr long volume);
	/**
	 * Original signature : <code>gboolean g_volume_can_mount(GVolume*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:100</i>
	 */
	public static GIOLibrary.gboolean g_volume_can_mount(Pointer<GIOLibrary.GVolume > volume) {
		return g_volume_can_mount(Pointer.getPeer(volume));
	}
	protected native static GIOLibrary.gboolean g_volume_can_mount(@Ptr long volume);
	/**
	 * Original signature : <code>gboolean g_volume_can_eject(GVolume*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:102</i>
	 */
	public static GIOLibrary.gboolean g_volume_can_eject(Pointer<GIOLibrary.GVolume > volume) {
		return g_volume_can_eject(Pointer.getPeer(volume));
	}
	protected native static GIOLibrary.gboolean g_volume_can_eject(@Ptr long volume);
	/**
	 * Original signature : <code>gboolean g_volume_should_automount(GVolume*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:104</i>
	 */
	public static GIOLibrary.gboolean g_volume_should_automount(Pointer<GIOLibrary.GVolume > volume) {
		return g_volume_should_automount(Pointer.getPeer(volume));
	}
	protected native static GIOLibrary.gboolean g_volume_should_automount(@Ptr long volume);
	/**
	 * Original signature : <code>void g_volume_mount(GVolume*, GMountMountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:106</i>
	 */
	public static void g_volume_mount(Pointer<GIOLibrary.GVolume > volume, IntValuedEnum<GIOLibrary.GMountMountFlags > flags, Pointer<GMountOperation > mount_operation, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_volume_mount(Pointer.getPeer(volume), (int)flags.value(), Pointer.getPeer(mount_operation), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_volume_mount(@Ptr long volume, int flags, @Ptr long mount_operation, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_volume_mount_finish(GVolume*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:108</i>
	 */
	public static GIOLibrary.gboolean g_volume_mount_finish(Pointer<GIOLibrary.GVolume > volume, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_volume_mount_finish(Pointer.getPeer(volume), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_volume_mount_finish(@Ptr long volume, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>void g_volume_eject(GVolume*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:110</i>
	 */
	public static void g_volume_eject(Pointer<GIOLibrary.GVolume > volume, IntValuedEnum<GIOLibrary.GMountUnmountFlags > flags, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_volume_eject(Pointer.getPeer(volume), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_volume_eject(@Ptr long volume, int flags, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_volume_eject_finish(GVolume*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:112</i>
	 */
	public static GIOLibrary.gboolean g_volume_eject_finish(Pointer<GIOLibrary.GVolume > volume, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_volume_eject_finish(Pointer.getPeer(volume), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_volume_eject_finish(@Ptr long volume, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>char* g_volume_get_identifier(GVolume*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:114</i>
	 */
	public static Pointer<Byte > g_volume_get_identifier(Pointer<GIOLibrary.GVolume > volume, Pointer<Byte > kind) {
		return Pointer.pointerToAddress(g_volume_get_identifier(Pointer.getPeer(volume), Pointer.getPeer(kind)), Byte.class);
	}
	@Ptr 
	protected native static long g_volume_get_identifier(@Ptr long volume, @Ptr long kind);
	/**
	 * Original signature : <code>char** g_volume_enumerate_identifiers(GVolume*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:116</i>
	 */
	public static Pointer<Pointer<Byte > > g_volume_enumerate_identifiers(Pointer<GIOLibrary.GVolume > volume) {
		return Pointer.pointerToAddress(g_volume_enumerate_identifiers(Pointer.getPeer(volume)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long g_volume_enumerate_identifiers(@Ptr long volume);
	/**
	 * Original signature : <code>GFile* g_volume_get_activation_root(GVolume*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:118</i>
	 */
	public static Pointer<GIOLibrary.GFile > g_volume_get_activation_root(Pointer<GIOLibrary.GVolume > volume) {
		return Pointer.pointerToAddress(g_volume_get_activation_root(Pointer.getPeer(volume)), GIOLibrary.GFile.class);
	}
	@Ptr 
	protected native static long g_volume_get_activation_root(@Ptr long volume);
	/**
	 * Original signature : <code>void g_volume_eject_with_operation(GVolume*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:120</i>
	 */
	public static void g_volume_eject_with_operation(Pointer<GIOLibrary.GVolume > volume, IntValuedEnum<GIOLibrary.GMountUnmountFlags > flags, Pointer<GMountOperation > mount_operation, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_volume_eject_with_operation(Pointer.getPeer(volume), (int)flags.value(), Pointer.getPeer(mount_operation), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_volume_eject_with_operation(@Ptr long volume, int flags, @Ptr long mount_operation, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_volume_eject_with_operation_finish(GVolume*, GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:122</i>
	 */
	public static GIOLibrary.gboolean g_volume_eject_with_operation_finish(Pointer<GIOLibrary.GVolume > volume, Pointer<GIOLibrary.GAsyncResult > result, Pointer<Pointer > error) {
		return g_volume_eject_with_operation_finish(Pointer.getPeer(volume), Pointer.getPeer(result), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_volume_eject_with_operation_finish(@Ptr long volume, @Ptr long result, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_volume_get_sort_key(GVolume*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gvolume.h:124</i>
	 */
	public static Pointer<Byte > g_volume_get_sort_key(Pointer<GIOLibrary.GVolume > volume) {
		return Pointer.pointerToAddress(g_volume_get_sort_key(Pointer.getPeer(volume)), Byte.class);
	}
	@Ptr 
	protected native static long g_volume_get_sort_key(@Ptr long volume);
	/**
	 * Original signature : <code>GType g_zlib_compressor_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gzlibcompressor.h:6</i>
	 */
	public static native GIOLibrary.GType g_zlib_compressor_get_type();
	/**
	 * Original signature : <code>GZlibCompressor* g_zlib_compressor_new(GZlibCompressorFormat, int)</code><br>
	 * <i>native declaration : glib-2.0/gio/gzlibcompressor.h:8</i>
	 */
	public static Pointer<GIOLibrary.GZlibCompressor > g_zlib_compressor_new(IntValuedEnum<GIOLibrary.GZlibCompressorFormat > format, int level) {
		return Pointer.pointerToAddress(g_zlib_compressor_new((int)format.value(), level), GIOLibrary.GZlibCompressor.class);
	}
	@Ptr 
	protected native static long g_zlib_compressor_new(int format, int level);
	/**
	 * Original signature : <code>GFileInfo* g_zlib_compressor_get_file_info(GZlibCompressor*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gzlibcompressor.h:10</i>
	 */
	public static Pointer<GIOLibrary.GFileInfo > g_zlib_compressor_get_file_info(Pointer<GIOLibrary.GZlibCompressor > compressor) {
		return Pointer.pointerToAddress(g_zlib_compressor_get_file_info(Pointer.getPeer(compressor)), GIOLibrary.GFileInfo.class);
	}
	@Ptr 
	protected native static long g_zlib_compressor_get_file_info(@Ptr long compressor);
	/**
	 * Original signature : <code>void g_zlib_compressor_set_file_info(GZlibCompressor*, GFileInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gzlibcompressor.h:12</i>
	 */
	public static void g_zlib_compressor_set_file_info(Pointer<GIOLibrary.GZlibCompressor > compressor, Pointer<GIOLibrary.GFileInfo > file_info) {
		g_zlib_compressor_set_file_info(Pointer.getPeer(compressor), Pointer.getPeer(file_info));
	}
	protected native static void g_zlib_compressor_set_file_info(@Ptr long compressor, @Ptr long file_info);
	/**
	 * Original signature : <code>GType g_zlib_decompressor_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gzlibdecompressor.h:6</i>
	 */
	public static native GIOLibrary.GType g_zlib_decompressor_get_type();
	/**
	 * Original signature : <code>GZlibDecompressor* g_zlib_decompressor_new(GZlibCompressorFormat)</code><br>
	 * <i>native declaration : glib-2.0/gio/gzlibdecompressor.h:8</i>
	 */
	public static Pointer<GIOLibrary.GZlibDecompressor > g_zlib_decompressor_new(IntValuedEnum<GIOLibrary.GZlibCompressorFormat > format) {
		return Pointer.pointerToAddress(g_zlib_decompressor_new((int)format.value()), GIOLibrary.GZlibDecompressor.class);
	}
	@Ptr 
	protected native static long g_zlib_decompressor_new(int format);
	/**
	 * Original signature : <code>GFileInfo* g_zlib_decompressor_get_file_info(GZlibDecompressor*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gzlibdecompressor.h:10</i>
	 */
	public static Pointer<GIOLibrary.GFileInfo > g_zlib_decompressor_get_file_info(Pointer<GIOLibrary.GZlibDecompressor > decompressor) {
		return Pointer.pointerToAddress(g_zlib_decompressor_get_file_info(Pointer.getPeer(decompressor)), GIOLibrary.GFileInfo.class);
	}
	@Ptr 
	protected native static long g_zlib_decompressor_get_file_info(@Ptr long decompressor);
	/**
	 * Original signature : <code>GType g_dbus_interface_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterface.h:25</i>
	 */
	public static native GIOLibrary.GType g_dbus_interface_get_type();
	/**
	 * Original signature : <code>GDBusInterfaceInfo* g_dbus_interface_get_info(GDBusInterface*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterface.h:27</i>
	 */
	public static Pointer<GDBusInterfaceInfo > g_dbus_interface_get_info(Pointer<GIOLibrary.GDBusInterface > interface_) {
		return Pointer.pointerToAddress(g_dbus_interface_get_info(Pointer.getPeer(interface_)), GDBusInterfaceInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_interface_get_info(@Ptr long interface_);
	/**
	 * Original signature : <code>GDBusObject* g_dbus_interface_get_object(GDBusInterface*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterface.h:29</i>
	 */
	public static Pointer<GIOLibrary.GDBusObject > g_dbus_interface_get_object(Pointer<GIOLibrary.GDBusInterface > interface_) {
		return Pointer.pointerToAddress(g_dbus_interface_get_object(Pointer.getPeer(interface_)), GIOLibrary.GDBusObject.class);
	}
	@Ptr 
	protected native static long g_dbus_interface_get_object(@Ptr long interface_);
	/**
	 * Original signature : <code>void g_dbus_interface_set_object(GDBusInterface*, GDBusObject*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterface.h:31</i>
	 */
	public static void g_dbus_interface_set_object(Pointer<GIOLibrary.GDBusInterface > interface_, Pointer<GIOLibrary.GDBusObject > object) {
		g_dbus_interface_set_object(Pointer.getPeer(interface_), Pointer.getPeer(object));
	}
	protected native static void g_dbus_interface_set_object(@Ptr long interface_, @Ptr long object);
	/**
	 * Original signature : <code>GDBusObject* g_dbus_interface_dup_object(GDBusInterface*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterface.h:33</i>
	 */
	public static Pointer<GIOLibrary.GDBusObject > g_dbus_interface_dup_object(Pointer<GIOLibrary.GDBusInterface > interface_) {
		return Pointer.pointerToAddress(g_dbus_interface_dup_object(Pointer.getPeer(interface_)), GIOLibrary.GDBusObject.class);
	}
	@Ptr 
	protected native static long g_dbus_interface_dup_object(@Ptr long interface_);
	/**
	 * Original signature : <code>GType g_dbus_interface_skeleton_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterfaceskeleton.h:48</i>
	 */
	public static native GIOLibrary.GType g_dbus_interface_skeleton_get_type();
	/**
	 * Original signature : <code>GDBusInterfaceSkeletonFlags g_dbus_interface_skeleton_get_flags(GDBusInterfaceSkeleton*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterfaceskeleton.h:50</i>
	 */
	public static IntValuedEnum<GIOLibrary.GDBusInterfaceSkeletonFlags > g_dbus_interface_skeleton_get_flags(Pointer<GDBusInterfaceSkeleton > interface_) {
		return FlagSet.fromValue(g_dbus_interface_skeleton_get_flags(Pointer.getPeer(interface_)), GIOLibrary.GDBusInterfaceSkeletonFlags.class);
	}
	protected native static int g_dbus_interface_skeleton_get_flags(@Ptr long interface_);
	/**
	 * Original signature : <code>void g_dbus_interface_skeleton_set_flags(GDBusInterfaceSkeleton*, GDBusInterfaceSkeletonFlags)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterfaceskeleton.h:52</i>
	 */
	public static void g_dbus_interface_skeleton_set_flags(Pointer<GDBusInterfaceSkeleton > interface_, IntValuedEnum<GIOLibrary.GDBusInterfaceSkeletonFlags > flags) {
		g_dbus_interface_skeleton_set_flags(Pointer.getPeer(interface_), (int)flags.value());
	}
	protected native static void g_dbus_interface_skeleton_set_flags(@Ptr long interface_, int flags);
	/**
	 * Original signature : <code>GDBusInterfaceInfo* g_dbus_interface_skeleton_get_info(GDBusInterfaceSkeleton*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterfaceskeleton.h:54</i>
	 */
	public static Pointer<GDBusInterfaceInfo > g_dbus_interface_skeleton_get_info(Pointer<GDBusInterfaceSkeleton > interface_) {
		return Pointer.pointerToAddress(g_dbus_interface_skeleton_get_info(Pointer.getPeer(interface_)), GDBusInterfaceInfo.class);
	}
	@Ptr 
	protected native static long g_dbus_interface_skeleton_get_info(@Ptr long interface_);
	/**
	 * Original signature : <code>GDBusInterfaceVTable* g_dbus_interface_skeleton_get_vtable(GDBusInterfaceSkeleton*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterfaceskeleton.h:56</i>
	 */
	public static Pointer<GDBusInterfaceVTable > g_dbus_interface_skeleton_get_vtable(Pointer<GDBusInterfaceSkeleton > interface_) {
		return Pointer.pointerToAddress(g_dbus_interface_skeleton_get_vtable(Pointer.getPeer(interface_)), GDBusInterfaceVTable.class);
	}
	@Ptr 
	protected native static long g_dbus_interface_skeleton_get_vtable(@Ptr long interface_);
	/**
	 * Original signature : <code>GVariant* g_dbus_interface_skeleton_get_properties(GDBusInterfaceSkeleton*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterfaceskeleton.h:58</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_dbus_interface_skeleton_get_properties(Pointer<GDBusInterfaceSkeleton > interface_) {
		return Pointer.pointerToAddress(g_dbus_interface_skeleton_get_properties(Pointer.getPeer(interface_)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_dbus_interface_skeleton_get_properties(@Ptr long interface_);
	/**
	 * Original signature : <code>void g_dbus_interface_skeleton_flush(GDBusInterfaceSkeleton*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterfaceskeleton.h:60</i>
	 */
	public static void g_dbus_interface_skeleton_flush(Pointer<GDBusInterfaceSkeleton > interface_) {
		g_dbus_interface_skeleton_flush(Pointer.getPeer(interface_));
	}
	protected native static void g_dbus_interface_skeleton_flush(@Ptr long interface_);
	/**
	 * Original signature : <code>gboolean g_dbus_interface_skeleton_export(GDBusInterfaceSkeleton*, GDBusConnection*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterfaceskeleton.h:62</i>
	 */
	public static GIOLibrary.gboolean g_dbus_interface_skeleton_export(Pointer<GDBusInterfaceSkeleton > interface_, Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > object_path, Pointer<Pointer > error) {
		return g_dbus_interface_skeleton_export(Pointer.getPeer(interface_), Pointer.getPeer(connection), Pointer.getPeer(object_path), Pointer.getPeer(error));
	}
	protected native static GIOLibrary.gboolean g_dbus_interface_skeleton_export(@Ptr long interface_, @Ptr long connection, @Ptr long object_path, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_interface_skeleton_unexport(GDBusInterfaceSkeleton*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterfaceskeleton.h:64</i>
	 */
	public static void g_dbus_interface_skeleton_unexport(Pointer<GDBusInterfaceSkeleton > interface_) {
		g_dbus_interface_skeleton_unexport(Pointer.getPeer(interface_));
	}
	protected native static void g_dbus_interface_skeleton_unexport(@Ptr long interface_);
	/**
	 * Original signature : <code>void g_dbus_interface_skeleton_unexport_from_connection(GDBusInterfaceSkeleton*, GDBusConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterfaceskeleton.h:66</i>
	 */
	public static void g_dbus_interface_skeleton_unexport_from_connection(Pointer<GDBusInterfaceSkeleton > interface_, Pointer<GIOLibrary.GDBusConnection > connection) {
		g_dbus_interface_skeleton_unexport_from_connection(Pointer.getPeer(interface_), Pointer.getPeer(connection));
	}
	protected native static void g_dbus_interface_skeleton_unexport_from_connection(@Ptr long interface_, @Ptr long connection);
	/**
	 * Original signature : <code>GDBusConnection* g_dbus_interface_skeleton_get_connection(GDBusInterfaceSkeleton*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterfaceskeleton.h:68</i>
	 */
	public static Pointer<GIOLibrary.GDBusConnection > g_dbus_interface_skeleton_get_connection(Pointer<GDBusInterfaceSkeleton > interface_) {
		return Pointer.pointerToAddress(g_dbus_interface_skeleton_get_connection(Pointer.getPeer(interface_)), GIOLibrary.GDBusConnection.class);
	}
	@Ptr 
	protected native static long g_dbus_interface_skeleton_get_connection(@Ptr long interface_);
	/**
	 * Original signature : <code>GList* g_dbus_interface_skeleton_get_connections(GDBusInterfaceSkeleton*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterfaceskeleton.h:70</i>
	 */
	public static Pointer g_dbus_interface_skeleton_get_connections(Pointer<GDBusInterfaceSkeleton > interface_) {
		return Pointer.pointerToAddress(g_dbus_interface_skeleton_get_connections(Pointer.getPeer(interface_)));
	}
	@Ptr 
	protected native static long g_dbus_interface_skeleton_get_connections(@Ptr long interface_);
	/**
	 * Original signature : <code>gboolean g_dbus_interface_skeleton_has_connection(GDBusInterfaceSkeleton*, GDBusConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterfaceskeleton.h:72</i>
	 */
	public static GIOLibrary.gboolean g_dbus_interface_skeleton_has_connection(Pointer<GDBusInterfaceSkeleton > interface_, Pointer<GIOLibrary.GDBusConnection > connection) {
		return g_dbus_interface_skeleton_has_connection(Pointer.getPeer(interface_), Pointer.getPeer(connection));
	}
	protected native static GIOLibrary.gboolean g_dbus_interface_skeleton_has_connection(@Ptr long interface_, @Ptr long connection);
	/**
	 * Original signature : <code>gchar* g_dbus_interface_skeleton_get_object_path(GDBusInterfaceSkeleton*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusinterfaceskeleton.h:74</i>
	 */
	public static Pointer<Byte > g_dbus_interface_skeleton_get_object_path(Pointer<GDBusInterfaceSkeleton > interface_) {
		return Pointer.pointerToAddress(g_dbus_interface_skeleton_get_object_path(Pointer.getPeer(interface_)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_interface_skeleton_get_object_path(@Ptr long interface_);
	/**
	 * Original signature : <code>GType g_dbus_object_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobject.h:29</i>
	 */
	public static native GIOLibrary.GType g_dbus_object_get_type();
	/**
	 * Original signature : <code>gchar* g_dbus_object_get_object_path(GDBusObject*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobject.h:31</i>
	 */
	public static Pointer<Byte > g_dbus_object_get_object_path(Pointer<GIOLibrary.GDBusObject > object) {
		return Pointer.pointerToAddress(g_dbus_object_get_object_path(Pointer.getPeer(object)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_object_get_object_path(@Ptr long object);
	/**
	 * Original signature : <code>GList* g_dbus_object_get_interfaces(GDBusObject*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobject.h:33</i>
	 */
	public static Pointer g_dbus_object_get_interfaces(Pointer<GIOLibrary.GDBusObject > object) {
		return Pointer.pointerToAddress(g_dbus_object_get_interfaces(Pointer.getPeer(object)));
	}
	@Ptr 
	protected native static long g_dbus_object_get_interfaces(@Ptr long object);
	/**
	 * Original signature : <code>GDBusInterface* g_dbus_object_get_interface(GDBusObject*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobject.h:35</i>
	 */
	public static Pointer<GIOLibrary.GDBusInterface > g_dbus_object_get_interface(Pointer<GIOLibrary.GDBusObject > object, Pointer<Byte > interface_name) {
		return Pointer.pointerToAddress(g_dbus_object_get_interface(Pointer.getPeer(object), Pointer.getPeer(interface_name)), GIOLibrary.GDBusInterface.class);
	}
	@Ptr 
	protected native static long g_dbus_object_get_interface(@Ptr long object, @Ptr long interface_name);
	/**
	 * Original signature : <code>GType g_dbus_object_skeleton_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectskeleton.h:33</i>
	 */
	public static native GIOLibrary.GType g_dbus_object_skeleton_get_type();
	/**
	 * Original signature : <code>GDBusObjectSkeleton* g_dbus_object_skeleton_new(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectskeleton.h:35</i>
	 */
	public static Pointer<GDBusObjectSkeleton > g_dbus_object_skeleton_new(Pointer<Byte > object_path) {
		return Pointer.pointerToAddress(g_dbus_object_skeleton_new(Pointer.getPeer(object_path)), GDBusObjectSkeleton.class);
	}
	@Ptr 
	protected native static long g_dbus_object_skeleton_new(@Ptr long object_path);
	/**
	 * Original signature : <code>void g_dbus_object_skeleton_flush(GDBusObjectSkeleton*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectskeleton.h:37</i>
	 */
	public static void g_dbus_object_skeleton_flush(Pointer<GDBusObjectSkeleton > object) {
		g_dbus_object_skeleton_flush(Pointer.getPeer(object));
	}
	protected native static void g_dbus_object_skeleton_flush(@Ptr long object);
	/**
	 * Original signature : <code>void g_dbus_object_skeleton_add_interface(GDBusObjectSkeleton*, GDBusInterfaceSkeleton*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectskeleton.h:39</i>
	 */
	public static void g_dbus_object_skeleton_add_interface(Pointer<GDBusObjectSkeleton > object, Pointer<GDBusInterfaceSkeleton > interface_) {
		g_dbus_object_skeleton_add_interface(Pointer.getPeer(object), Pointer.getPeer(interface_));
	}
	protected native static void g_dbus_object_skeleton_add_interface(@Ptr long object, @Ptr long interface_);
	/**
	 * Original signature : <code>void g_dbus_object_skeleton_remove_interface(GDBusObjectSkeleton*, GDBusInterfaceSkeleton*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectskeleton.h:41</i>
	 */
	public static void g_dbus_object_skeleton_remove_interface(Pointer<GDBusObjectSkeleton > object, Pointer<GDBusInterfaceSkeleton > interface_) {
		g_dbus_object_skeleton_remove_interface(Pointer.getPeer(object), Pointer.getPeer(interface_));
	}
	protected native static void g_dbus_object_skeleton_remove_interface(@Ptr long object, @Ptr long interface_);
	/**
	 * Original signature : <code>void g_dbus_object_skeleton_remove_interface_by_name(GDBusObjectSkeleton*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectskeleton.h:43</i>
	 */
	public static void g_dbus_object_skeleton_remove_interface_by_name(Pointer<GDBusObjectSkeleton > object, Pointer<Byte > interface_name) {
		g_dbus_object_skeleton_remove_interface_by_name(Pointer.getPeer(object), Pointer.getPeer(interface_name));
	}
	protected native static void g_dbus_object_skeleton_remove_interface_by_name(@Ptr long object, @Ptr long interface_name);
	/**
	 * Original signature : <code>void g_dbus_object_skeleton_set_object_path(GDBusObjectSkeleton*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectskeleton.h:45</i>
	 */
	public static void g_dbus_object_skeleton_set_object_path(Pointer<GDBusObjectSkeleton > object, Pointer<Byte > object_path) {
		g_dbus_object_skeleton_set_object_path(Pointer.getPeer(object), Pointer.getPeer(object_path));
	}
	protected native static void g_dbus_object_skeleton_set_object_path(@Ptr long object, @Ptr long object_path);
	/**
	 * Original signature : <code>GType g_dbus_object_proxy_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectproxy.h:26</i>
	 */
	public static native GIOLibrary.GType g_dbus_object_proxy_get_type();
	/**
	 * Original signature : <code>GDBusObjectProxy* g_dbus_object_proxy_new(GDBusConnection*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectproxy.h:28</i>
	 */
	public static Pointer<GDBusObjectProxy > g_dbus_object_proxy_new(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > object_path) {
		return Pointer.pointerToAddress(g_dbus_object_proxy_new(Pointer.getPeer(connection), Pointer.getPeer(object_path)), GDBusObjectProxy.class);
	}
	@Ptr 
	protected native static long g_dbus_object_proxy_new(@Ptr long connection, @Ptr long object_path);
	/**
	 * Original signature : <code>GDBusConnection* g_dbus_object_proxy_get_connection(GDBusObjectProxy*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectproxy.h:30</i>
	 */
	public static Pointer<GIOLibrary.GDBusConnection > g_dbus_object_proxy_get_connection(Pointer<GDBusObjectProxy > proxy) {
		return Pointer.pointerToAddress(g_dbus_object_proxy_get_connection(Pointer.getPeer(proxy)), GIOLibrary.GDBusConnection.class);
	}
	@Ptr 
	protected native static long g_dbus_object_proxy_get_connection(@Ptr long proxy);
	/**
	 * Original signature : <code>GType g_dbus_object_manager_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanager.h:38</i>
	 */
	public static native GIOLibrary.GType g_dbus_object_manager_get_type();
	/**
	 * Original signature : <code>gchar* g_dbus_object_manager_get_object_path(GDBusObjectManager*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanager.h:40</i>
	 */
	public static Pointer<Byte > g_dbus_object_manager_get_object_path(Pointer<GIOLibrary.GDBusObjectManager > manager) {
		return Pointer.pointerToAddress(g_dbus_object_manager_get_object_path(Pointer.getPeer(manager)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_object_manager_get_object_path(@Ptr long manager);
	/**
	 * Original signature : <code>GList* g_dbus_object_manager_get_objects(GDBusObjectManager*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanager.h:42</i>
	 */
	public static Pointer g_dbus_object_manager_get_objects(Pointer<GIOLibrary.GDBusObjectManager > manager) {
		return Pointer.pointerToAddress(g_dbus_object_manager_get_objects(Pointer.getPeer(manager)));
	}
	@Ptr 
	protected native static long g_dbus_object_manager_get_objects(@Ptr long manager);
	/**
	 * Original signature : <code>GDBusObject* g_dbus_object_manager_get_object(GDBusObjectManager*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanager.h:44</i>
	 */
	public static Pointer<GIOLibrary.GDBusObject > g_dbus_object_manager_get_object(Pointer<GIOLibrary.GDBusObjectManager > manager, Pointer<Byte > object_path) {
		return Pointer.pointerToAddress(g_dbus_object_manager_get_object(Pointer.getPeer(manager), Pointer.getPeer(object_path)), GIOLibrary.GDBusObject.class);
	}
	@Ptr 
	protected native static long g_dbus_object_manager_get_object(@Ptr long manager, @Ptr long object_path);
	/**
	 * Original signature : <code>GDBusInterface* g_dbus_object_manager_get_interface(GDBusObjectManager*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanager.h:46</i>
	 */
	public static Pointer<GIOLibrary.GDBusInterface > g_dbus_object_manager_get_interface(Pointer<GIOLibrary.GDBusObjectManager > manager, Pointer<Byte > object_path, Pointer<Byte > interface_name) {
		return Pointer.pointerToAddress(g_dbus_object_manager_get_interface(Pointer.getPeer(manager), Pointer.getPeer(object_path), Pointer.getPeer(interface_name)), GIOLibrary.GDBusInterface.class);
	}
	@Ptr 
	protected native static long g_dbus_object_manager_get_interface(@Ptr long manager, @Ptr long object_path, @Ptr long interface_name);
	/**
	 * Original signature : <code>GType g_dbus_object_manager_client_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerclient.h:33</i>
	 */
	public static native GIOLibrary.GType g_dbus_object_manager_client_get_type();
	/**
	 * Original signature : <code>void g_dbus_object_manager_client_new(GDBusConnection*, GDBusObjectManagerClientFlags, const gchar*, const gchar*, GDBusProxyTypeFunc, gpointer, GDestroyNotify, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerclient.h:35</i>
	 */
	public static void g_dbus_object_manager_client_new(Pointer<GIOLibrary.GDBusConnection > connection, IntValuedEnum<GIOLibrary.GDBusObjectManagerClientFlags > flags, Pointer<Byte > name, Pointer<Byte > object_path, GIOLibrary.GDBusProxyTypeFunc get_proxy_type_func, GIOLibrary.gpointer get_proxy_type_user_data, GIOLibrary.GDestroyNotify get_proxy_type_destroy_notify, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_dbus_object_manager_client_new(Pointer.getPeer(connection), (int)flags.value(), Pointer.getPeer(name), Pointer.getPeer(object_path), Pointer.getPeer(get_proxy_type_func), get_proxy_type_user_data, Pointer.getPeer(get_proxy_type_destroy_notify), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_dbus_object_manager_client_new(@Ptr long connection, int flags, @Ptr long name, @Ptr long object_path, @Ptr long get_proxy_type_func, GIOLibrary.gpointer get_proxy_type_user_data, @Ptr long get_proxy_type_destroy_notify, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GDBusObjectManager* g_dbus_object_manager_client_new_finish(GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerclient.h:37</i>
	 */
	public static Pointer<GIOLibrary.GDBusObjectManager > g_dbus_object_manager_client_new_finish(Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_object_manager_client_new_finish(Pointer.getPeer(res), Pointer.getPeer(error)), GIOLibrary.GDBusObjectManager.class);
	}
	@Ptr 
	protected native static long g_dbus_object_manager_client_new_finish(@Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>GDBusObjectManager* g_dbus_object_manager_client_new_sync(GDBusConnection*, GDBusObjectManagerClientFlags, const gchar*, const gchar*, GDBusProxyTypeFunc, gpointer, GDestroyNotify, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerclient.h:39</i>
	 */
	public static Pointer<GIOLibrary.GDBusObjectManager > g_dbus_object_manager_client_new_sync(Pointer<GIOLibrary.GDBusConnection > connection, IntValuedEnum<GIOLibrary.GDBusObjectManagerClientFlags > flags, Pointer<Byte > name, Pointer<Byte > object_path, GIOLibrary.GDBusProxyTypeFunc get_proxy_type_func, GIOLibrary.gpointer get_proxy_type_user_data, GIOLibrary.GDestroyNotify get_proxy_type_destroy_notify, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_object_manager_client_new_sync(Pointer.getPeer(connection), (int)flags.value(), Pointer.getPeer(name), Pointer.getPeer(object_path), Pointer.getPeer(get_proxy_type_func), get_proxy_type_user_data, Pointer.getPeer(get_proxy_type_destroy_notify), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GDBusObjectManager.class);
	}
	@Ptr 
	protected native static long g_dbus_object_manager_client_new_sync(@Ptr long connection, int flags, @Ptr long name, @Ptr long object_path, @Ptr long get_proxy_type_func, GIOLibrary.gpointer get_proxy_type_user_data, @Ptr long get_proxy_type_destroy_notify, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_object_manager_client_new_for_bus(GBusType, GDBusObjectManagerClientFlags, const gchar*, const gchar*, GDBusProxyTypeFunc, gpointer, GDestroyNotify, GCancellable*, GAsyncReadyCallback, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerclient.h:41</i>
	 */
	public static void g_dbus_object_manager_client_new_for_bus(IntValuedEnum<GIOLibrary.GBusType > bus_type, IntValuedEnum<GIOLibrary.GDBusObjectManagerClientFlags > flags, Pointer<Byte > name, Pointer<Byte > object_path, GIOLibrary.GDBusProxyTypeFunc get_proxy_type_func, GIOLibrary.gpointer get_proxy_type_user_data, GIOLibrary.GDestroyNotify get_proxy_type_destroy_notify, Pointer<GCancellable > cancellable, Pointer<GIOLibrary.GAsyncReadyCallback > callback, GIOLibrary.gpointer user_data) {
		g_dbus_object_manager_client_new_for_bus((int)bus_type.value(), (int)flags.value(), Pointer.getPeer(name), Pointer.getPeer(object_path), Pointer.getPeer(get_proxy_type_func), get_proxy_type_user_data, Pointer.getPeer(get_proxy_type_destroy_notify), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
	}
	protected native static void g_dbus_object_manager_client_new_for_bus(int bus_type, int flags, @Ptr long name, @Ptr long object_path, @Ptr long get_proxy_type_func, GIOLibrary.gpointer get_proxy_type_user_data, @Ptr long get_proxy_type_destroy_notify, @Ptr long cancellable, @Ptr long callback, GIOLibrary.gpointer user_data);
	/**
	 * Original signature : <code>GDBusObjectManager* g_dbus_object_manager_client_new_for_bus_finish(GAsyncResult*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerclient.h:43</i>
	 */
	public static Pointer<GIOLibrary.GDBusObjectManager > g_dbus_object_manager_client_new_for_bus_finish(Pointer<GIOLibrary.GAsyncResult > res, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_object_manager_client_new_for_bus_finish(Pointer.getPeer(res), Pointer.getPeer(error)), GIOLibrary.GDBusObjectManager.class);
	}
	@Ptr 
	protected native static long g_dbus_object_manager_client_new_for_bus_finish(@Ptr long res, @Ptr long error);
	/**
	 * Original signature : <code>GDBusObjectManager* g_dbus_object_manager_client_new_for_bus_sync(GBusType, GDBusObjectManagerClientFlags, const gchar*, const gchar*, GDBusProxyTypeFunc, gpointer, GDestroyNotify, GCancellable*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerclient.h:45</i>
	 */
	public static Pointer<GIOLibrary.GDBusObjectManager > g_dbus_object_manager_client_new_for_bus_sync(IntValuedEnum<GIOLibrary.GBusType > bus_type, IntValuedEnum<GIOLibrary.GDBusObjectManagerClientFlags > flags, Pointer<Byte > name, Pointer<Byte > object_path, GIOLibrary.GDBusProxyTypeFunc get_proxy_type_func, GIOLibrary.gpointer get_proxy_type_user_data, GIOLibrary.GDestroyNotify get_proxy_type_destroy_notify, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
		return Pointer.pointerToAddress(g_dbus_object_manager_client_new_for_bus_sync((int)bus_type.value(), (int)flags.value(), Pointer.getPeer(name), Pointer.getPeer(object_path), Pointer.getPeer(get_proxy_type_func), get_proxy_type_user_data, Pointer.getPeer(get_proxy_type_destroy_notify), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOLibrary.GDBusObjectManager.class);
	}
	@Ptr 
	protected native static long g_dbus_object_manager_client_new_for_bus_sync(int bus_type, int flags, @Ptr long name, @Ptr long object_path, @Ptr long get_proxy_type_func, GIOLibrary.gpointer get_proxy_type_user_data, @Ptr long get_proxy_type_destroy_notify, @Ptr long cancellable, @Ptr long error);
	/**
	 * Original signature : <code>GDBusConnection* g_dbus_object_manager_client_get_connection(GDBusObjectManagerClient*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerclient.h:47</i>
	 */
	public static Pointer<GIOLibrary.GDBusConnection > g_dbus_object_manager_client_get_connection(Pointer<GDBusObjectManagerClient > manager) {
		return Pointer.pointerToAddress(g_dbus_object_manager_client_get_connection(Pointer.getPeer(manager)), GIOLibrary.GDBusConnection.class);
	}
	@Ptr 
	protected native static long g_dbus_object_manager_client_get_connection(@Ptr long manager);
	/**
	 * Original signature : <code>GDBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags(GDBusObjectManagerClient*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerclient.h:49</i>
	 */
	public static IntValuedEnum<GIOLibrary.GDBusObjectManagerClientFlags > g_dbus_object_manager_client_get_flags(Pointer<GDBusObjectManagerClient > manager) {
		return FlagSet.fromValue(g_dbus_object_manager_client_get_flags(Pointer.getPeer(manager)), GIOLibrary.GDBusObjectManagerClientFlags.class);
	}
	protected native static int g_dbus_object_manager_client_get_flags(@Ptr long manager);
	/**
	 * Original signature : <code>gchar* g_dbus_object_manager_client_get_name(GDBusObjectManagerClient*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerclient.h:51</i>
	 */
	public static Pointer<Byte > g_dbus_object_manager_client_get_name(Pointer<GDBusObjectManagerClient > manager) {
		return Pointer.pointerToAddress(g_dbus_object_manager_client_get_name(Pointer.getPeer(manager)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_object_manager_client_get_name(@Ptr long manager);
	/**
	 * Original signature : <code>gchar* g_dbus_object_manager_client_get_name_owner(GDBusObjectManagerClient*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerclient.h:53</i>
	 */
	public static Pointer<Byte > g_dbus_object_manager_client_get_name_owner(Pointer<GDBusObjectManagerClient > manager) {
		return Pointer.pointerToAddress(g_dbus_object_manager_client_get_name_owner(Pointer.getPeer(manager)), Byte.class);
	}
	@Ptr 
	protected native static long g_dbus_object_manager_client_get_name_owner(@Ptr long manager);
	/**
	 * Original signature : <code>GType g_dbus_object_manager_server_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerserver.h:26</i>
	 */
	public static native GIOLibrary.GType g_dbus_object_manager_server_get_type();
	/**
	 * Original signature : <code>GDBusObjectManagerServer* g_dbus_object_manager_server_new(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerserver.h:28</i>
	 */
	public static Pointer<GDBusObjectManagerServer > g_dbus_object_manager_server_new(Pointer<Byte > object_path) {
		return Pointer.pointerToAddress(g_dbus_object_manager_server_new(Pointer.getPeer(object_path)), GDBusObjectManagerServer.class);
	}
	@Ptr 
	protected native static long g_dbus_object_manager_server_new(@Ptr long object_path);
	/**
	 * Original signature : <code>GDBusConnection* g_dbus_object_manager_server_get_connection(GDBusObjectManagerServer*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerserver.h:30</i>
	 */
	public static Pointer<GIOLibrary.GDBusConnection > g_dbus_object_manager_server_get_connection(Pointer<GDBusObjectManagerServer > manager) {
		return Pointer.pointerToAddress(g_dbus_object_manager_server_get_connection(Pointer.getPeer(manager)), GIOLibrary.GDBusConnection.class);
	}
	@Ptr 
	protected native static long g_dbus_object_manager_server_get_connection(@Ptr long manager);
	/**
	 * Original signature : <code>void g_dbus_object_manager_server_set_connection(GDBusObjectManagerServer*, GDBusConnection*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerserver.h:32</i>
	 */
	public static void g_dbus_object_manager_server_set_connection(Pointer<GDBusObjectManagerServer > manager, Pointer<GIOLibrary.GDBusConnection > connection) {
		g_dbus_object_manager_server_set_connection(Pointer.getPeer(manager), Pointer.getPeer(connection));
	}
	protected native static void g_dbus_object_manager_server_set_connection(@Ptr long manager, @Ptr long connection);
	/**
	 * Original signature : <code>void g_dbus_object_manager_server_export(GDBusObjectManagerServer*, GDBusObjectSkeleton*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerserver.h:34</i>
	 */
	public static void g_dbus_object_manager_server_export(Pointer<GDBusObjectManagerServer > manager, Pointer<GDBusObjectSkeleton > object) {
		g_dbus_object_manager_server_export(Pointer.getPeer(manager), Pointer.getPeer(object));
	}
	protected native static void g_dbus_object_manager_server_export(@Ptr long manager, @Ptr long object);
	/**
	 * Original signature : <code>void g_dbus_object_manager_server_export_uniquely(GDBusObjectManagerServer*, GDBusObjectSkeleton*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerserver.h:36</i>
	 */
	public static void g_dbus_object_manager_server_export_uniquely(Pointer<GDBusObjectManagerServer > manager, Pointer<GDBusObjectSkeleton > object) {
		g_dbus_object_manager_server_export_uniquely(Pointer.getPeer(manager), Pointer.getPeer(object));
	}
	protected native static void g_dbus_object_manager_server_export_uniquely(@Ptr long manager, @Ptr long object);
	/**
	 * Original signature : <code>gboolean g_dbus_object_manager_server_is_exported(GDBusObjectManagerServer*, GDBusObjectSkeleton*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerserver.h:38</i>
	 */
	public static GIOLibrary.gboolean g_dbus_object_manager_server_is_exported(Pointer<GDBusObjectManagerServer > manager, Pointer<GDBusObjectSkeleton > object) {
		return g_dbus_object_manager_server_is_exported(Pointer.getPeer(manager), Pointer.getPeer(object));
	}
	protected native static GIOLibrary.gboolean g_dbus_object_manager_server_is_exported(@Ptr long manager, @Ptr long object);
	/**
	 * Original signature : <code>gboolean g_dbus_object_manager_server_unexport(GDBusObjectManagerServer*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusobjectmanagerserver.h:40</i>
	 */
	public static GIOLibrary.gboolean g_dbus_object_manager_server_unexport(Pointer<GDBusObjectManagerServer > manager, Pointer<Byte > object_path) {
		return g_dbus_object_manager_server_unexport(Pointer.getPeer(manager), Pointer.getPeer(object_path));
	}
	protected native static GIOLibrary.gboolean g_dbus_object_manager_server_unexport(@Ptr long manager, @Ptr long object_path);
	/**
	 * Original signature : <code>GType g_dbus_action_group_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusactiongroup.h:2</i>
	 */
	public static native GIOLibrary.GType g_dbus_action_group_get_type();
	/**
	 * Original signature : <code>GDBusActionGroup* g_dbus_action_group_get(GDBusConnection*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusactiongroup.h:4</i>
	 */
	public static Pointer<GIOLibrary.GDBusActionGroup > g_dbus_action_group_get(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > bus_name, Pointer<Byte > object_path) {
		return Pointer.pointerToAddress(g_dbus_action_group_get(Pointer.getPeer(connection), Pointer.getPeer(bus_name), Pointer.getPeer(object_path)), GIOLibrary.GDBusActionGroup.class);
	}
	@Ptr 
	protected native static long g_dbus_action_group_get(@Ptr long connection, @Ptr long bus_name, @Ptr long object_path);
	/**
	 * Original signature : <code>GType g_remote_action_group_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gremoteactiongroup.h:10</i>
	 */
	public static native GIOLibrary.GType g_remote_action_group_get_type();
	/**
	 * Original signature : <code>void g_remote_action_group_activate_action_full(GRemoteActionGroup*, const gchar*, GVariant*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gremoteactiongroup.h:12</i>
	 */
	public static void g_remote_action_group_activate_action_full(Pointer<GIOLibrary.GRemoteActionGroup > remote, Pointer<Byte > action_name, Pointer<GIOLibrary.GVariant > parameter, Pointer<GIOLibrary.GVariant > platform_data) {
		g_remote_action_group_activate_action_full(Pointer.getPeer(remote), Pointer.getPeer(action_name), Pointer.getPeer(parameter), Pointer.getPeer(platform_data));
	}
	protected native static void g_remote_action_group_activate_action_full(@Ptr long remote, @Ptr long action_name, @Ptr long parameter, @Ptr long platform_data);
	/**
	 * Original signature : <code>void g_remote_action_group_change_action_state_full(GRemoteActionGroup*, const gchar*, GVariant*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gremoteactiongroup.h:14</i>
	 */
	public static void g_remote_action_group_change_action_state_full(Pointer<GIOLibrary.GRemoteActionGroup > remote, Pointer<Byte > action_name, Pointer<GIOLibrary.GVariant > value, Pointer<GIOLibrary.GVariant > platform_data) {
		g_remote_action_group_change_action_state_full(Pointer.getPeer(remote), Pointer.getPeer(action_name), Pointer.getPeer(value), Pointer.getPeer(platform_data));
	}
	protected native static void g_remote_action_group_change_action_state_full(@Ptr long remote, @Ptr long action_name, @Ptr long value, @Ptr long platform_data);
	/**
	 * Original signature : <code>GType g_menu_model_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:41</i>
	 */
	public static native GIOLibrary.GType g_menu_model_get_type();
	/**
	 * Original signature : <code>gboolean g_menu_model_is_mutable(GMenuModel*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:43</i>
	 */
	public static GIOLibrary.gboolean g_menu_model_is_mutable(Pointer<GMenuModel > model) {
		return g_menu_model_is_mutable(Pointer.getPeer(model));
	}
	protected native static GIOLibrary.gboolean g_menu_model_is_mutable(@Ptr long model);
	/**
	 * Original signature : <code>gint g_menu_model_get_n_items(GMenuModel*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:45</i>
	 */
	public static int g_menu_model_get_n_items(Pointer<GMenuModel > model) {
		return g_menu_model_get_n_items(Pointer.getPeer(model));
	}
	protected native static int g_menu_model_get_n_items(@Ptr long model);
	/**
	 * Original signature : <code>GMenuAttributeIter* g_menu_model_iterate_item_attributes(GMenuModel*, gint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:47</i>
	 */
	public static Pointer<GMenuAttributeIter > g_menu_model_iterate_item_attributes(Pointer<GMenuModel > model, int item_index) {
		return Pointer.pointerToAddress(g_menu_model_iterate_item_attributes(Pointer.getPeer(model), item_index), GMenuAttributeIter.class);
	}
	@Ptr 
	protected native static long g_menu_model_iterate_item_attributes(@Ptr long model, int item_index);
	/**
	 * Original signature : <code>GVariant* g_menu_model_get_item_attribute_value(GMenuModel*, gint, const gchar*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:49</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_menu_model_get_item_attribute_value(Pointer<GMenuModel > model, int item_index, Pointer<Byte > attribute, Pointer<GIOLibrary.GVariantType > expected_type) {
		return Pointer.pointerToAddress(g_menu_model_get_item_attribute_value(Pointer.getPeer(model), item_index, Pointer.getPeer(attribute), Pointer.getPeer(expected_type)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_menu_model_get_item_attribute_value(@Ptr long model, int item_index, @Ptr long attribute, @Ptr long expected_type);
	/**
	 * Original signature : <code>gboolean g_menu_model_get_item_attribute(GMenuModel*, gint, const gchar*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:51</i>
	 */
	public static GIOLibrary.gboolean g_menu_model_get_item_attribute(Pointer<GMenuModel > model, int item_index, Pointer<Byte > attribute, Pointer<Byte > format_string, Object... varArgs1) {
		return g_menu_model_get_item_attribute(Pointer.getPeer(model), item_index, Pointer.getPeer(attribute), Pointer.getPeer(format_string), varArgs1);
	}
	protected native static GIOLibrary.gboolean g_menu_model_get_item_attribute(@Ptr long model, int item_index, @Ptr long attribute, @Ptr long format_string, Object... varArgs1);
	/**
	 * Original signature : <code>GMenuLinkIter* g_menu_model_iterate_item_links(GMenuModel*, gint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:53</i>
	 */
	public static Pointer<GMenuLinkIter > g_menu_model_iterate_item_links(Pointer<GMenuModel > model, int item_index) {
		return Pointer.pointerToAddress(g_menu_model_iterate_item_links(Pointer.getPeer(model), item_index), GMenuLinkIter.class);
	}
	@Ptr 
	protected native static long g_menu_model_iterate_item_links(@Ptr long model, int item_index);
	/**
	 * Original signature : <code>GMenuModel* g_menu_model_get_item_link(GMenuModel*, gint, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:55</i>
	 */
	public static Pointer<GMenuModel > g_menu_model_get_item_link(Pointer<GMenuModel > model, int item_index, Pointer<Byte > link) {
		return Pointer.pointerToAddress(g_menu_model_get_item_link(Pointer.getPeer(model), item_index, Pointer.getPeer(link)), GMenuModel.class);
	}
	@Ptr 
	protected native static long g_menu_model_get_item_link(@Ptr long model, int item_index, @Ptr long link);
	/**
	 * Original signature : <code>void g_menu_model_items_changed(GMenuModel*, gint, gint, gint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:57</i>
	 */
	public static void g_menu_model_items_changed(Pointer<GMenuModel > model, int position, int removed, int added) {
		g_menu_model_items_changed(Pointer.getPeer(model), position, removed, added);
	}
	protected native static void g_menu_model_items_changed(@Ptr long model, int position, int removed, int added);
	/**
	 * Original signature : <code>GType g_menu_attribute_iter_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:69</i>
	 */
	public static native GIOLibrary.GType g_menu_attribute_iter_get_type();
	/**
	 * Original signature : <code>gboolean g_menu_attribute_iter_get_next(GMenuAttributeIter*, const gchar**, GVariant**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:71</i>
	 */
	public static GIOLibrary.gboolean g_menu_attribute_iter_get_next(Pointer<GMenuAttributeIter > iter, Pointer<Pointer<Byte > > out_name, Pointer<Pointer<GIOLibrary.GVariant > > value) {
		return g_menu_attribute_iter_get_next(Pointer.getPeer(iter), Pointer.getPeer(out_name), Pointer.getPeer(value));
	}
	protected native static GIOLibrary.gboolean g_menu_attribute_iter_get_next(@Ptr long iter, @Ptr long out_name, @Ptr long value);
	/**
	 * Original signature : <code>gboolean g_menu_attribute_iter_next(GMenuAttributeIter*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:73</i>
	 */
	public static GIOLibrary.gboolean g_menu_attribute_iter_next(Pointer<GMenuAttributeIter > iter) {
		return g_menu_attribute_iter_next(Pointer.getPeer(iter));
	}
	protected native static GIOLibrary.gboolean g_menu_attribute_iter_next(@Ptr long iter);
	/**
	 * Original signature : <code>gchar* g_menu_attribute_iter_get_name(GMenuAttributeIter*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:75</i>
	 */
	public static Pointer<Byte > g_menu_attribute_iter_get_name(Pointer<GMenuAttributeIter > iter) {
		return Pointer.pointerToAddress(g_menu_attribute_iter_get_name(Pointer.getPeer(iter)), Byte.class);
	}
	@Ptr 
	protected native static long g_menu_attribute_iter_get_name(@Ptr long iter);
	/**
	 * Original signature : <code>GVariant* g_menu_attribute_iter_get_value(GMenuAttributeIter*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:77</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_menu_attribute_iter_get_value(Pointer<GMenuAttributeIter > iter) {
		return Pointer.pointerToAddress(g_menu_attribute_iter_get_value(Pointer.getPeer(iter)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_menu_attribute_iter_get_value(@Ptr long iter);
	/**
	 * Original signature : <code>GType g_menu_link_iter_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:89</i>
	 */
	public static native GIOLibrary.GType g_menu_link_iter_get_type();
	/**
	 * Original signature : <code>gboolean g_menu_link_iter_get_next(GMenuLinkIter*, const gchar**, GMenuModel**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:91</i>
	 */
	public static GIOLibrary.gboolean g_menu_link_iter_get_next(Pointer<GMenuLinkIter > iter, Pointer<Pointer<Byte > > out_link, Pointer<Pointer<GMenuModel > > value) {
		return g_menu_link_iter_get_next(Pointer.getPeer(iter), Pointer.getPeer(out_link), Pointer.getPeer(value));
	}
	protected native static GIOLibrary.gboolean g_menu_link_iter_get_next(@Ptr long iter, @Ptr long out_link, @Ptr long value);
	/**
	 * Original signature : <code>gboolean g_menu_link_iter_next(GMenuLinkIter*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:93</i>
	 */
	public static GIOLibrary.gboolean g_menu_link_iter_next(Pointer<GMenuLinkIter > iter) {
		return g_menu_link_iter_next(Pointer.getPeer(iter));
	}
	protected native static GIOLibrary.gboolean g_menu_link_iter_next(@Ptr long iter);
	/**
	 * Original signature : <code>gchar* g_menu_link_iter_get_name(GMenuLinkIter*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:95</i>
	 */
	public static Pointer<Byte > g_menu_link_iter_get_name(Pointer<GMenuLinkIter > iter) {
		return Pointer.pointerToAddress(g_menu_link_iter_get_name(Pointer.getPeer(iter)), Byte.class);
	}
	@Ptr 
	protected native static long g_menu_link_iter_get_name(@Ptr long iter);
	/**
	 * Original signature : <code>GMenuModel* g_menu_link_iter_get_value(GMenuLinkIter*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenumodel.h:97</i>
	 */
	public static Pointer<GMenuModel > g_menu_link_iter_get_value(Pointer<GMenuLinkIter > iter) {
		return Pointer.pointerToAddress(g_menu_link_iter_get_value(Pointer.getPeer(iter)), GMenuModel.class);
	}
	@Ptr 
	protected native static long g_menu_link_iter_get_value(@Ptr long iter);
	/**
	 * Original signature : <code>GType g_menu_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:4</i>
	 */
	public static native GIOLibrary.GType g_menu_get_type();
	/**
	 * Original signature : <code>GMenu* g_menu_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:6</i>
	 */
	public static Pointer<GIOLibrary.GMenu > g_menu_new() {
		return Pointer.pointerToAddress(g_menu_new$2(), GIOLibrary.GMenu.class);
	}
	@Ptr 
	protected native static long g_menu_new$2();
	/**
	 * Original signature : <code>void g_menu_freeze(GMenu*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:8</i>
	 */
	public static void g_menu_freeze(Pointer<GIOLibrary.GMenu > menu) {
		g_menu_freeze(Pointer.getPeer(menu));
	}
	protected native static void g_menu_freeze(@Ptr long menu);
	/**
	 * Original signature : <code>void g_menu_insert_item(GMenu*, gint, GMenuItem*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:10</i>
	 */
	public static void g_menu_insert_item(Pointer<GIOLibrary.GMenu > menu, int position, Pointer<GIOLibrary.GMenuItem > item) {
		g_menu_insert_item(Pointer.getPeer(menu), position, Pointer.getPeer(item));
	}
	protected native static void g_menu_insert_item(@Ptr long menu, int position, @Ptr long item);
	/**
	 * Original signature : <code>void g_menu_prepend_item(GMenu*, GMenuItem*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:12</i>
	 */
	public static void g_menu_prepend_item(Pointer<GIOLibrary.GMenu > menu, Pointer<GIOLibrary.GMenuItem > item) {
		g_menu_prepend_item(Pointer.getPeer(menu), Pointer.getPeer(item));
	}
	protected native static void g_menu_prepend_item(@Ptr long menu, @Ptr long item);
	/**
	 * Original signature : <code>void g_menu_append_item(GMenu*, GMenuItem*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:14</i>
	 */
	public static void g_menu_append_item(Pointer<GIOLibrary.GMenu > menu, Pointer<GIOLibrary.GMenuItem > item) {
		g_menu_append_item(Pointer.getPeer(menu), Pointer.getPeer(item));
	}
	protected native static void g_menu_append_item(@Ptr long menu, @Ptr long item);
	/**
	 * Original signature : <code>void g_menu_remove(GMenu*, gint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:16</i>
	 */
	public static void g_menu_remove(Pointer<GIOLibrary.GMenu > menu, int position) {
		g_menu_remove(Pointer.getPeer(menu), position);
	}
	protected native static void g_menu_remove(@Ptr long menu, int position);
	/**
	 * Original signature : <code>void g_menu_remove_all(GMenu*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:18</i>
	 */
	public static void g_menu_remove_all(Pointer<GIOLibrary.GMenu > menu) {
		g_menu_remove_all(Pointer.getPeer(menu));
	}
	protected native static void g_menu_remove_all(@Ptr long menu);
	/**
	 * Original signature : <code>void g_menu_insert(GMenu*, gint, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:20</i>
	 */
	public static void g_menu_insert(Pointer<GIOLibrary.GMenu > menu, int position, Pointer<Byte > label, Pointer<Byte > detailed_action) {
		g_menu_insert(Pointer.getPeer(menu), position, Pointer.getPeer(label), Pointer.getPeer(detailed_action));
	}
	protected native static void g_menu_insert(@Ptr long menu, int position, @Ptr long label, @Ptr long detailed_action);
	/**
	 * Original signature : <code>void g_menu_prepend(GMenu*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:22</i>
	 */
	public static void g_menu_prepend(Pointer<GIOLibrary.GMenu > menu, Pointer<Byte > label, Pointer<Byte > detailed_action) {
		g_menu_prepend(Pointer.getPeer(menu), Pointer.getPeer(label), Pointer.getPeer(detailed_action));
	}
	protected native static void g_menu_prepend(@Ptr long menu, @Ptr long label, @Ptr long detailed_action);
	/**
	 * Original signature : <code>void g_menu_append(GMenu*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:24</i>
	 */
	public static void g_menu_append(Pointer<GIOLibrary.GMenu > menu, Pointer<Byte > label, Pointer<Byte > detailed_action) {
		g_menu_append(Pointer.getPeer(menu), Pointer.getPeer(label), Pointer.getPeer(detailed_action));
	}
	protected native static void g_menu_append(@Ptr long menu, @Ptr long label, @Ptr long detailed_action);
	/**
	 * Original signature : <code>void g_menu_insert_section(GMenu*, gint, const gchar*, GMenuModel*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:26</i>
	 */
	public static void g_menu_insert_section(Pointer<GIOLibrary.GMenu > menu, int position, Pointer<Byte > label, Pointer<GMenuModel > section) {
		g_menu_insert_section(Pointer.getPeer(menu), position, Pointer.getPeer(label), Pointer.getPeer(section));
	}
	protected native static void g_menu_insert_section(@Ptr long menu, int position, @Ptr long label, @Ptr long section);
	/**
	 * Original signature : <code>void g_menu_prepend_section(GMenu*, const gchar*, GMenuModel*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:28</i>
	 */
	public static void g_menu_prepend_section(Pointer<GIOLibrary.GMenu > menu, Pointer<Byte > label, Pointer<GMenuModel > section) {
		g_menu_prepend_section(Pointer.getPeer(menu), Pointer.getPeer(label), Pointer.getPeer(section));
	}
	protected native static void g_menu_prepend_section(@Ptr long menu, @Ptr long label, @Ptr long section);
	/**
	 * Original signature : <code>void g_menu_append_section(GMenu*, const gchar*, GMenuModel*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:30</i>
	 */
	public static void g_menu_append_section(Pointer<GIOLibrary.GMenu > menu, Pointer<Byte > label, Pointer<GMenuModel > section) {
		g_menu_append_section(Pointer.getPeer(menu), Pointer.getPeer(label), Pointer.getPeer(section));
	}
	protected native static void g_menu_append_section(@Ptr long menu, @Ptr long label, @Ptr long section);
	/**
	 * Original signature : <code>void g_menu_insert_submenu(GMenu*, gint, const gchar*, GMenuModel*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:32</i>
	 */
	public static void g_menu_insert_submenu(Pointer<GIOLibrary.GMenu > menu, int position, Pointer<Byte > label, Pointer<GMenuModel > submenu) {
		g_menu_insert_submenu(Pointer.getPeer(menu), position, Pointer.getPeer(label), Pointer.getPeer(submenu));
	}
	protected native static void g_menu_insert_submenu(@Ptr long menu, int position, @Ptr long label, @Ptr long submenu);
	/**
	 * Original signature : <code>void g_menu_prepend_submenu(GMenu*, const gchar*, GMenuModel*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:34</i>
	 */
	public static void g_menu_prepend_submenu(Pointer<GIOLibrary.GMenu > menu, Pointer<Byte > label, Pointer<GMenuModel > submenu) {
		g_menu_prepend_submenu(Pointer.getPeer(menu), Pointer.getPeer(label), Pointer.getPeer(submenu));
	}
	protected native static void g_menu_prepend_submenu(@Ptr long menu, @Ptr long label, @Ptr long submenu);
	/**
	 * Original signature : <code>void g_menu_append_submenu(GMenu*, const gchar*, GMenuModel*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:36</i>
	 */
	public static void g_menu_append_submenu(Pointer<GIOLibrary.GMenu > menu, Pointer<Byte > label, Pointer<GMenuModel > submenu) {
		g_menu_append_submenu(Pointer.getPeer(menu), Pointer.getPeer(label), Pointer.getPeer(submenu));
	}
	protected native static void g_menu_append_submenu(@Ptr long menu, @Ptr long label, @Ptr long submenu);
	/**
	 * Original signature : <code>GType g_menu_item_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:38</i>
	 */
	public static native GIOLibrary.GType g_menu_item_get_type();
	/**
	 * Original signature : <code>GMenuItem* g_menu_item_new(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:40</i>
	 */
	public static Pointer<GIOLibrary.GMenuItem > g_menu_item_new(Pointer<Byte > label, Pointer<Byte > detailed_action) {
		return Pointer.pointerToAddress(g_menu_item_new(Pointer.getPeer(label), Pointer.getPeer(detailed_action)), GIOLibrary.GMenuItem.class);
	}
	@Ptr 
	protected native static long g_menu_item_new(@Ptr long label, @Ptr long detailed_action);
	/**
	 * Original signature : <code>GMenuItem* g_menu_item_new_from_model(GMenuModel*, gint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:42</i>
	 */
	public static Pointer<GIOLibrary.GMenuItem > g_menu_item_new_from_model(Pointer<GMenuModel > model, int item_index) {
		return Pointer.pointerToAddress(g_menu_item_new_from_model(Pointer.getPeer(model), item_index), GIOLibrary.GMenuItem.class);
	}
	@Ptr 
	protected native static long g_menu_item_new_from_model(@Ptr long model, int item_index);
	/**
	 * Original signature : <code>GMenuItem* g_menu_item_new_submenu(const gchar*, GMenuModel*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:44</i>
	 */
	public static Pointer<GIOLibrary.GMenuItem > g_menu_item_new_submenu(Pointer<Byte > label, Pointer<GMenuModel > submenu) {
		return Pointer.pointerToAddress(g_menu_item_new_submenu(Pointer.getPeer(label), Pointer.getPeer(submenu)), GIOLibrary.GMenuItem.class);
	}
	@Ptr 
	protected native static long g_menu_item_new_submenu(@Ptr long label, @Ptr long submenu);
	/**
	 * Original signature : <code>GMenuItem* g_menu_item_new_section(const gchar*, GMenuModel*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:46</i>
	 */
	public static Pointer<GIOLibrary.GMenuItem > g_menu_item_new_section(Pointer<Byte > label, Pointer<GMenuModel > section) {
		return Pointer.pointerToAddress(g_menu_item_new_section(Pointer.getPeer(label), Pointer.getPeer(section)), GIOLibrary.GMenuItem.class);
	}
	@Ptr 
	protected native static long g_menu_item_new_section(@Ptr long label, @Ptr long section);
	/**
	 * Original signature : <code>GVariant* g_menu_item_get_attribute_value(GMenuItem*, const gchar*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:48</i>
	 */
	public static Pointer<GIOLibrary.GVariant > g_menu_item_get_attribute_value(Pointer<GIOLibrary.GMenuItem > menu_item, Pointer<Byte > attribute, Pointer<GIOLibrary.GVariantType > expected_type) {
		return Pointer.pointerToAddress(g_menu_item_get_attribute_value(Pointer.getPeer(menu_item), Pointer.getPeer(attribute), Pointer.getPeer(expected_type)), GIOLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_menu_item_get_attribute_value(@Ptr long menu_item, @Ptr long attribute, @Ptr long expected_type);
	/**
	 * Original signature : <code>gboolean g_menu_item_get_attribute(GMenuItem*, const gchar*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:50</i>
	 */
	public static GIOLibrary.gboolean g_menu_item_get_attribute(Pointer<GIOLibrary.GMenuItem > menu_item, Pointer<Byte > attribute, Pointer<Byte > format_string, Object... varArgs1) {
		return g_menu_item_get_attribute(Pointer.getPeer(menu_item), Pointer.getPeer(attribute), Pointer.getPeer(format_string), varArgs1);
	}
	protected native static GIOLibrary.gboolean g_menu_item_get_attribute(@Ptr long menu_item, @Ptr long attribute, @Ptr long format_string, Object... varArgs1);
	/**
	 * Original signature : <code>GMenuModel* g_menu_item_get_link(GMenuItem*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:52</i>
	 */
	public static Pointer<GMenuModel > g_menu_item_get_link(Pointer<GIOLibrary.GMenuItem > menu_item, Pointer<Byte > link) {
		return Pointer.pointerToAddress(g_menu_item_get_link(Pointer.getPeer(menu_item), Pointer.getPeer(link)), GMenuModel.class);
	}
	@Ptr 
	protected native static long g_menu_item_get_link(@Ptr long menu_item, @Ptr long link);
	/**
	 * Original signature : <code>void g_menu_item_set_attribute_value(GMenuItem*, const gchar*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:54</i>
	 */
	public static void g_menu_item_set_attribute_value(Pointer<GIOLibrary.GMenuItem > menu_item, Pointer<Byte > attribute, Pointer<GIOLibrary.GVariant > value) {
		g_menu_item_set_attribute_value(Pointer.getPeer(menu_item), Pointer.getPeer(attribute), Pointer.getPeer(value));
	}
	protected native static void g_menu_item_set_attribute_value(@Ptr long menu_item, @Ptr long attribute, @Ptr long value);
	/**
	 * Original signature : <code>void g_menu_item_set_attribute(GMenuItem*, const gchar*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:56</i>
	 */
	public static void g_menu_item_set_attribute(Pointer<GIOLibrary.GMenuItem > menu_item, Pointer<Byte > attribute, Pointer<Byte > format_string, Object... varArgs1) {
		g_menu_item_set_attribute(Pointer.getPeer(menu_item), Pointer.getPeer(attribute), Pointer.getPeer(format_string), varArgs1);
	}
	protected native static void g_menu_item_set_attribute(@Ptr long menu_item, @Ptr long attribute, @Ptr long format_string, Object... varArgs1);
	/**
	 * Original signature : <code>void g_menu_item_set_link(GMenuItem*, const gchar*, GMenuModel*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:58</i>
	 */
	public static void g_menu_item_set_link(Pointer<GIOLibrary.GMenuItem > menu_item, Pointer<Byte > link, Pointer<GMenuModel > model) {
		g_menu_item_set_link(Pointer.getPeer(menu_item), Pointer.getPeer(link), Pointer.getPeer(model));
	}
	protected native static void g_menu_item_set_link(@Ptr long menu_item, @Ptr long link, @Ptr long model);
	/**
	 * Original signature : <code>void g_menu_item_set_label(GMenuItem*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:60</i>
	 */
	public static void g_menu_item_set_label(Pointer<GIOLibrary.GMenuItem > menu_item, Pointer<Byte > label) {
		g_menu_item_set_label(Pointer.getPeer(menu_item), Pointer.getPeer(label));
	}
	protected native static void g_menu_item_set_label(@Ptr long menu_item, @Ptr long label);
	/**
	 * Original signature : <code>void g_menu_item_set_submenu(GMenuItem*, GMenuModel*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:62</i>
	 */
	public static void g_menu_item_set_submenu(Pointer<GIOLibrary.GMenuItem > menu_item, Pointer<GMenuModel > submenu) {
		g_menu_item_set_submenu(Pointer.getPeer(menu_item), Pointer.getPeer(submenu));
	}
	protected native static void g_menu_item_set_submenu(@Ptr long menu_item, @Ptr long submenu);
	/**
	 * Original signature : <code>void g_menu_item_set_section(GMenuItem*, GMenuModel*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:64</i>
	 */
	public static void g_menu_item_set_section(Pointer<GIOLibrary.GMenuItem > menu_item, Pointer<GMenuModel > section) {
		g_menu_item_set_section(Pointer.getPeer(menu_item), Pointer.getPeer(section));
	}
	protected native static void g_menu_item_set_section(@Ptr long menu_item, @Ptr long section);
	/**
	 * Original signature : <code>void g_menu_item_set_action_and_target_value(GMenuItem*, const gchar*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:66</i>
	 */
	public static void g_menu_item_set_action_and_target_value(Pointer<GIOLibrary.GMenuItem > menu_item, Pointer<Byte > action, Pointer<GIOLibrary.GVariant > target_value) {
		g_menu_item_set_action_and_target_value(Pointer.getPeer(menu_item), Pointer.getPeer(action), Pointer.getPeer(target_value));
	}
	protected native static void g_menu_item_set_action_and_target_value(@Ptr long menu_item, @Ptr long action, @Ptr long target_value);
	/**
	 * Original signature : <code>void g_menu_item_set_action_and_target(GMenuItem*, const gchar*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:68</i>
	 */
	public static void g_menu_item_set_action_and_target(Pointer<GIOLibrary.GMenuItem > menu_item, Pointer<Byte > action, Pointer<Byte > format_string, Object... varArgs1) {
		g_menu_item_set_action_and_target(Pointer.getPeer(menu_item), Pointer.getPeer(action), Pointer.getPeer(format_string), varArgs1);
	}
	protected native static void g_menu_item_set_action_and_target(@Ptr long menu_item, @Ptr long action, @Ptr long format_string, Object... varArgs1);
	/**
	 * Original signature : <code>void g_menu_item_set_detailed_action(GMenuItem*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:70</i>
	 */
	public static void g_menu_item_set_detailed_action(Pointer<GIOLibrary.GMenuItem > menu_item, Pointer<Byte > detailed_action) {
		g_menu_item_set_detailed_action(Pointer.getPeer(menu_item), Pointer.getPeer(detailed_action));
	}
	protected native static void g_menu_item_set_detailed_action(@Ptr long menu_item, @Ptr long detailed_action);
	/**
	 * Original signature : <code>void g_menu_item_set_icon(GMenuItem*, GIcon*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenu.h:72</i>
	 */
	public static void g_menu_item_set_icon(Pointer<GIOLibrary.GMenuItem > menu_item, Pointer<GIOLibrary.GIcon > icon) {
		g_menu_item_set_icon(Pointer.getPeer(menu_item), Pointer.getPeer(icon));
	}
	protected native static void g_menu_item_set_icon(@Ptr long menu_item, @Ptr long icon);
	/**
	 * Original signature : <code>guint g_dbus_connection_export_menu_model(GDBusConnection*, const gchar*, GMenuModel*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenuexporter.h:2</i>
	 */
	public static int g_dbus_connection_export_menu_model(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > object_path, Pointer<GMenuModel > menu, Pointer<Pointer > error) {
		return g_dbus_connection_export_menu_model(Pointer.getPeer(connection), Pointer.getPeer(object_path), Pointer.getPeer(menu), Pointer.getPeer(error));
	}
	protected native static int g_dbus_connection_export_menu_model(@Ptr long connection, @Ptr long object_path, @Ptr long menu, @Ptr long error);
	/**
	 * Original signature : <code>void g_dbus_connection_unexport_menu_model(GDBusConnection*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gio/gmenuexporter.h:4</i>
	 */
	public static void g_dbus_connection_unexport_menu_model(Pointer<GIOLibrary.GDBusConnection > connection, int export_id) {
		g_dbus_connection_unexport_menu_model(Pointer.getPeer(connection), export_id);
	}
	protected native static void g_dbus_connection_unexport_menu_model(@Ptr long connection, int export_id);
	/**
	 * Original signature : <code>GType g_dbus_menu_model_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmenumodel.h:3</i>
	 */
	public static native GIOLibrary.GType g_dbus_menu_model_get_type();
	/**
	 * Original signature : <code>GDBusMenuModel* g_dbus_menu_model_get(GDBusConnection*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gdbusmenumodel.h:5</i>
	 */
	public static Pointer<GIOLibrary.GDBusMenuModel > g_dbus_menu_model_get(Pointer<GIOLibrary.GDBusConnection > connection, Pointer<Byte > bus_name, Pointer<Byte > object_path) {
		return Pointer.pointerToAddress(g_dbus_menu_model_get(Pointer.getPeer(connection), Pointer.getPeer(bus_name), Pointer.getPeer(object_path)), GIOLibrary.GDBusMenuModel.class);
	}
	@Ptr 
	protected native static long g_dbus_menu_model_get(@Ptr long connection, @Ptr long bus_name, @Ptr long object_path);
	/**
	 * Original signature : <code>void g_networking_init()</code><br>
	 * <i>native declaration : glib-2.0/gio/gnetworking.h:2</i>
	 */
	public static native void g_networking_init();
	/**
	 * Original signature : <code>GType g_settings_backend_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsbackend.h:35</i>
	 */
	public static native GIOLibrary.GType g_settings_backend_get_type();
	/**
	 * Original signature : <code>void g_settings_backend_changed(GSettingsBackend*, const gchar*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsbackend.h:37</i>
	 */
	public static void g_settings_backend_changed(Pointer<GSettingsBackend > backend, Pointer<Byte > key, GIOLibrary.gpointer origin_tag) {
		g_settings_backend_changed(Pointer.getPeer(backend), Pointer.getPeer(key), origin_tag);
	}
	protected native static void g_settings_backend_changed(@Ptr long backend, @Ptr long key, GIOLibrary.gpointer origin_tag);
	/**
	 * Original signature : <code>void g_settings_backend_path_changed(GSettingsBackend*, const gchar*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsbackend.h:39</i>
	 */
	public static void g_settings_backend_path_changed(Pointer<GSettingsBackend > backend, Pointer<Byte > path, GIOLibrary.gpointer origin_tag) {
		g_settings_backend_path_changed(Pointer.getPeer(backend), Pointer.getPeer(path), origin_tag);
	}
	protected native static void g_settings_backend_path_changed(@Ptr long backend, @Ptr long path, GIOLibrary.gpointer origin_tag);
	/**
	 * Original signature : <code>void g_settings_backend_flatten_tree(GTree*, gchar**, const gchar***, GVariant***)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsbackend.h:41</i>
	 */
	public static void g_settings_backend_flatten_tree(Pointer<GIOLibrary.GTree > tree, Pointer<Pointer<Byte > > path, Pointer<Pointer<Pointer<Byte > > > keys, Pointer<Pointer<Pointer<GIOLibrary.GVariant > > > values) {
		g_settings_backend_flatten_tree(Pointer.getPeer(tree), Pointer.getPeer(path), Pointer.getPeer(keys), Pointer.getPeer(values));
	}
	protected native static void g_settings_backend_flatten_tree(@Ptr long tree, @Ptr long path, @Ptr long keys, @Ptr long values);
	/**
	 * Original signature : <code>void g_settings_backend_keys_changed(GSettingsBackend*, const gchar*, const const gchar**, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsbackend.h:43</i>
	 */
	public static void g_settings_backend_keys_changed(Pointer<GSettingsBackend > backend, Pointer<Byte > path, Pointer<Pointer<Byte > > items, GIOLibrary.gpointer origin_tag) {
		g_settings_backend_keys_changed(Pointer.getPeer(backend), Pointer.getPeer(path), Pointer.getPeer(items), origin_tag);
	}
	protected native static void g_settings_backend_keys_changed(@Ptr long backend, @Ptr long path, @Ptr long items, GIOLibrary.gpointer origin_tag);
	/**
	 * Original signature : <code>void g_settings_backend_path_writable_changed(GSettingsBackend*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsbackend.h:45</i>
	 */
	public static void g_settings_backend_path_writable_changed(Pointer<GSettingsBackend > backend, Pointer<Byte > path) {
		g_settings_backend_path_writable_changed(Pointer.getPeer(backend), Pointer.getPeer(path));
	}
	protected native static void g_settings_backend_path_writable_changed(@Ptr long backend, @Ptr long path);
	/**
	 * Original signature : <code>void g_settings_backend_writable_changed(GSettingsBackend*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsbackend.h:47</i>
	 */
	public static void g_settings_backend_writable_changed(Pointer<GSettingsBackend > backend, Pointer<Byte > key) {
		g_settings_backend_writable_changed(Pointer.getPeer(backend), Pointer.getPeer(key));
	}
	protected native static void g_settings_backend_writable_changed(@Ptr long backend, @Ptr long key);
	/**
	 * Original signature : <code>void g_settings_backend_changed_tree(GSettingsBackend*, GTree*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsbackend.h:49</i>
	 */
	public static void g_settings_backend_changed_tree(Pointer<GSettingsBackend > backend, Pointer<GIOLibrary.GTree > tree, GIOLibrary.gpointer origin_tag) {
		g_settings_backend_changed_tree(Pointer.getPeer(backend), Pointer.getPeer(tree), origin_tag);
	}
	protected native static void g_settings_backend_changed_tree(@Ptr long backend, @Ptr long tree, GIOLibrary.gpointer origin_tag);
	/**
	 * Original signature : <code>GSettingsBackend* g_settings_backend_get_default()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsbackend.h:51</i>
	 */
	public static Pointer<GSettingsBackend > g_settings_backend_get_default() {
		return Pointer.pointerToAddress(g_settings_backend_get_default$2(), GSettingsBackend.class);
	}
	@Ptr 
	protected native static long g_settings_backend_get_default$2();
	/**
	 * Original signature : <code>GSettingsBackend* g_keyfile_settings_backend_new(const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsbackend.h:53</i>
	 */
	public static Pointer<GSettingsBackend > g_keyfile_settings_backend_new(Pointer<Byte > filename, Pointer<Byte > root_path, Pointer<Byte > root_group) {
		return Pointer.pointerToAddress(g_keyfile_settings_backend_new(Pointer.getPeer(filename), Pointer.getPeer(root_path), Pointer.getPeer(root_group)), GSettingsBackend.class);
	}
	@Ptr 
	protected native static long g_keyfile_settings_backend_new(@Ptr long filename, @Ptr long root_path, @Ptr long root_group);
	/**
	 * Original signature : <code>GSettingsBackend* g_null_settings_backend_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsbackend.h:55</i>
	 */
	public static Pointer<GSettingsBackend > g_null_settings_backend_new() {
		return Pointer.pointerToAddress(g_null_settings_backend_new$2(), GSettingsBackend.class);
	}
	@Ptr 
	protected native static long g_null_settings_backend_new$2();
	/**
	 * Original signature : <code>GSettingsBackend* g_memory_settings_backend_new()</code><br>
	 * <i>native declaration : glib-2.0/gio/gsettingsbackend.h:57</i>
	 */
	public static Pointer<GSettingsBackend > g_memory_settings_backend_new() {
		return Pointer.pointerToAddress(g_memory_settings_backend_new$2(), GSettingsBackend.class);
	}
	@Ptr 
	protected native static long g_memory_settings_backend_new$2();
	public static class GDestroyNotify extends TypedPointer {
		public GDestroyNotify(long address) {
			super(address);
		}
		public GDestroyNotify(Pointer address) {
			super(address);
		}
	};
	public static class GCallback extends TypedPointer {
		public GCallback(long address) {
			super(address);
		}
		public GCallback(Pointer address) {
			super(address);
		}
	};
	/** Undefined type */
	public static interface GAppLaunchContextPrivate {
		
	};
	/** Undefined type */
	public static interface GTask {
		
	};
	/** Undefined type */
	public static interface GSettingsSchema {
		
	};
	/** Undefined type */
	public static interface GDBusInterfaceSkeletonPrivate {
		
	};
	/** Undefined type */
	public static interface GIOStreamPrivate {
		
	};
	/** Undefined type */
	public static interface GFile {
		
	};
	/** Undefined type */
	public static interface GFileEnumeratorPrivate {
		
	};
	/** Undefined type */
	public static interface GDBusAuthObserver {
		
	};
	/** Undefined type */
	public static interface GCharsetConverter {
		
	};
	/** Undefined type */
	public static interface GDBusInterface {
		
	};
	/** Undefined type */
	public static interface GDBusMessage {
		
	};
	/** Undefined type */
	public static interface GSettingsSchemaSource {
		
	};
	/** Undefined type */
	public static interface GBytesIcon {
		
	};
	/** Undefined type */
	public static interface GIcon {
		
	};
	/** Undefined type */
	public static interface GDBusProxyPrivate {
		
	};
	/** Undefined type */
	public static interface GProxyResolver {
		
	};
	/** Undefined type */
	public static interface GDBusServer {
		
	};
	/** Undefined type */
	public static interface GInputStreamPrivate {
		
	};
	/** Undefined type */
	public static interface GRemoteActionGroup {
		
	};
	/** Undefined type */
	public static interface GTlsClientConnection {
		
	};
	/** Undefined type */
	public static interface GDateTime {
		
	};
	/** Undefined type */
	public static interface GMemoryInputStreamPrivate {
		
	};
	/** Undefined type */
	public static interface GInetAddressMaskPrivate {
		
	};
	/** Undefined type */
	public static interface GPollableInputStream {
		
	};
	/** Undefined type */
	public static interface GVolume {
		
	};
	/** Undefined type */
	public static interface GMountOperationPrivate {
		
	};
	/** Undefined type */
	public static interface GNetworkAddressPrivate {
		
	};
	/** Undefined type */
	public static interface GApplicationPrivate {
		
	};
	/** Undefined type */
	public static interface GThreadedSocketServicePrivate {
		
	};
	/** Undefined type */
	public static interface GResource {
		
	};
	/** Undefined type */
	public static interface GMenuItem {
		
	};
	/** Undefined type */
	public static interface GIOExtension {
		
	};
	/** Undefined type */
	public static interface GInitable {
		
	};
	/** Undefined type */
	public static interface GSocketListenerPrivate {
		
	};
	/** Undefined type */
	public static interface GPollableOutputStream {
		
	};
	/** Undefined type */
	public static interface GDBusObjectSkeletonPrivate {
		
	};
	/** Undefined type */
	public static interface GTestDBus {
		
	};
	/** Undefined type */
	public static interface GSimpleActionGroupPrivate {
		
	};
	/** Undefined type */
	public static interface GTcpWrapperConnectionPrivate {
		
	};
	/** Undefined type */
	public static interface GZlibCompressor {
		
	};
	/** Undefined type */
	public static interface GTree {
		
	};
	/** Undefined type */
	public static interface GLoadableIcon {
		
	};
	/** Undefined type */
	public static interface GOutputStreamPrivate {
		
	};
	/** Undefined type */
	public static interface GTlsConnectionPrivate {
		
	};
	/** Undefined type */
	public static interface GCredentials {
		
	};
	/** Undefined type */
	public static interface GSocketPrivate {
		
	};
	/** Undefined type */
	public static interface GActionMap {
		
	};
	/** Undefined type */
	public static interface GDBusActionGroup {
		
	};
	/** Undefined type */
	public static interface GFileOutputStreamPrivate {
		
	};
	/** Undefined type */
	public static interface GConverterOutputStreamPrivate {
		
	};
	/** Undefined type */
	public static interface GInetSocketAddressPrivate {
		
	};
	/** Undefined type */
	public static interface GDBusInterfaceSetPropertyFunc {
		
	};
	/** Undefined type */
	public static interface GSimpleAction {
		
	};
	/** Undefined type */
	public static interface GDBusObject {
		
	};
	/** Undefined type */
	public static interface GFileIcon {
		
	};
	/** Undefined type */
	public static interface GFilenameCompleter {
		
	};
	/** Undefined type */
	public static interface GSettingsPrivate {
		
	};
	/** Undefined type */
	public static interface GTlsCertificatePrivate {
		
	};
	/** Undefined type */
	public static interface GProxyAddressPrivate {
		
	};
	/** Undefined type */
	public static interface GMemoryOutputStreamPrivate {
		
	};
	/** Undefined type */
	public static interface GSourceFunc {
		
	};
	/** Undefined type */
	public static interface GEmblem {
		
	};
	/** Undefined type */
	public static interface GActionGroup {
		
	};
	/** Undefined type */
	public static interface GDBusMethodInvocation {
		
	};
	/** Undefined type */
	public static interface GFileMonitorPrivate {
		
	};
	/** Undefined type */
	public static interface GSocketConnectionPrivate {
		
	};
	/** Undefined type */
	public static interface GDataInputStreamPrivate {
		
	};
	/** Undefined type */
	public static interface GEmblemedIconPrivate {
		
	};
	/** Undefined type */
	public static interface GSocketConnectable {
		
	};
	/** Undefined type */
	public static interface GDrive {
		
	};
	/** Undefined type */
	public static interface GBufferedOutputStreamPrivate {
		
	};
	/** Undefined type */
	public static interface GDBusObjectManagerServerPrivate {
		
	};
	/** Undefined type */
	public static interface GUnixFDList {
		
	};
	/** Undefined type */
	public static interface GVariantType {
		
	};
	/** Undefined type */
	public static interface GSimpleAsyncResult {
		
	};
	/** Undefined type */
	public static interface GDBusObjectManagerClientPrivate {
		
	};
	/** Undefined type */
	public static interface GReallocFunc {
		
	};
	/** Undefined type */
	public static interface GApplicationCommandLinePrivate {
		
	};
	/** Undefined type */
	public static interface GDBusObjectManager {
		
	};
	/** Undefined type */
	public static interface GIOSchedulerJob {
		
	};
	/** Undefined type */
	public static interface GCancellablePrivate {
		
	};
	/** Undefined type */
	public static interface GTlsPasswordPrivate {
		
	};
	/** Undefined type */
	public static interface GZlibDecompressor {
		
	};
	/** Undefined type */
	public static interface GFileAttributeMatcher {
		
	};
	/** Undefined type */
	public static interface GIOExtensionPoint {
		
	};
	/** Undefined type */
	public static interface GConverterInputStreamPrivate {
		
	};
	/** Undefined type */
	public static interface GMenu {
		
	};
	/** Undefined type */
	public static interface GHashTable {
		
	};
	/** Undefined type */
	public static interface GSettingsBackendPrivate {
		
	};
	/** Undefined type */
	public static interface GSocketServicePrivate {
		
	};
	/** Undefined type */
	public static interface GVariant {
		
	};
	/** Undefined type */
	public static interface GSettingsBindGetMapping {
		
	};
	/** Undefined type */
	public static interface GConverter {
		
	};
	/** Undefined type */
	public static interface GMainContext {
		
	};
	/** Undefined type */
	public static interface GProxyAddressEnumeratorPrivate {
		
	};
	/** Undefined type */
	public static interface GIOModuleScope {
		
	};
	/** Undefined type */
	public static interface GSocketClientPrivate {
		
	};
	/** Undefined type */
	public static interface GDataOutputStreamPrivate {
		
	};
	/** Undefined type */
	public static interface GProxy {
		
	};
	/** Undefined type */
	public static interface GBytes {
		
	};
	/** Undefined type */
	public static interface GMount {
		
	};
	/** Undefined type */
	public static interface GSeekable {
		
	};
	/** Undefined type */
	public static interface GSimpleProxyResolverPrivate {
		
	};
	/** Undefined type */
	public static interface GTcpConnectionPrivate {
		
	};
	/** Undefined type */
	public static interface GFileInputStreamPrivate {
		
	};
	/** Undefined type */
	public static interface GAsyncResult {
		
	};
	/** Undefined type */
	public static interface GTlsInteractionPrivate {
		
	};
	/** Undefined type */
	public static interface GDBusObjectProxyPrivate {
		
	};
	/** Undefined type */
	public static interface GAsyncInitable {
		
	};
	/** Undefined type */
	public static interface GMenuLinkIterPrivate {
		
	};
	/** Undefined type */
	public static interface GDBusMenuModel {
		
	};
	/** Undefined type */
	public static interface GNetworkServicePrivate {
		
	};
	/** Undefined type */
	public static interface GAction {
		
	};
	/** Undefined type */
	public static interface GPermissionPrivate {
		
	};
	/** Undefined type */
	public static interface GDBusProxyTypeFunc {
		
	};
	/** Undefined type */
	public static interface GSrvTarget {
		
	};
	/** Undefined type */
	public static interface GIOModule {
		
	};
	/** Undefined type */
	public static interface GInetAddressPrivate {
		
	};
	/** Undefined type */
	public static interface GTlsDatabasePrivate {
		
	};
	/** Undefined type */
	public static interface GTlsBackend {
		
	};
	/** Undefined type */
	public static interface GAppInfo {
		
	};
	/** Undefined type */
	public static interface GMenuAttributeIterPrivate {
		
	};
	/** Undefined type */
	public static interface GPropertyAction {
		
	};
	/** Undefined type */
	public static interface GSocketControlMessagePrivate {
		
	};
	/** Undefined type */
	public static interface GFileIOStreamPrivate {
		
	};
	/** Undefined type */
	public static interface GNetworkMonitor {
		
	};
	/** Undefined type */
	public static interface GResolverPrivate {
		
	};
	/** Undefined type */
	public static interface GThemedIcon {
		
	};
	/** Undefined type */
	public static interface GBufferedInputStreamPrivate {
		
	};
	/** Undefined type */
	public static interface GFileInfo {
		
	};
	/** Undefined type */
	public static interface GMenuModelPrivate {
		
	};
	/** Undefined type */
	public static interface GDBusConnection {
		
	};
}
