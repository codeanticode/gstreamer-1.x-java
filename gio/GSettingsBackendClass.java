package gio;
import gio.GIOLibrary.GTree;
import gio.GIOLibrary.GVariant;
import gio.GIOLibrary.GVariantType;
import gio.GIOLibrary.gboolean;
import gio.GIOLibrary.gpointer;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * <i>native declaration : glib-2.0/gio/gsettingsbackend.h:28</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GSettingsBackendClass extends StructObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GObjectClass (Unsupported type) */
	/** C type : read_callback* */
	@Field(1) 
	public Pointer<GSettingsBackendClass.read_callback > read() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : read_callback* */
	@Field(1) 
	public GSettingsBackendClass read(Pointer<GSettingsBackendClass.read_callback > read) {
		this.io.setPointerField(this, 1, read);
		return this;
	}
	/** C type : get_writable_callback* */
	@Field(2) 
	public Pointer<GSettingsBackendClass.get_writable_callback > get_writable() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : get_writable_callback* */
	@Field(2) 
	public GSettingsBackendClass get_writable(Pointer<GSettingsBackendClass.get_writable_callback > get_writable) {
		this.io.setPointerField(this, 2, get_writable);
		return this;
	}
	/** C type : write_callback* */
	@Field(3) 
	public Pointer<GSettingsBackendClass.write_callback > write() {
		return this.io.getPointerField(this, 3);
	}
	/** C type : write_callback* */
	@Field(3) 
	public GSettingsBackendClass write(Pointer<GSettingsBackendClass.write_callback > write) {
		this.io.setPointerField(this, 3, write);
		return this;
	}
	/** C type : write_tree_callback* */
	@Field(4) 
	public Pointer<GSettingsBackendClass.write_tree_callback > write_tree() {
		return this.io.getPointerField(this, 4);
	}
	/** C type : write_tree_callback* */
	@Field(4) 
	public GSettingsBackendClass write_tree(Pointer<GSettingsBackendClass.write_tree_callback > write_tree) {
		this.io.setPointerField(this, 4, write_tree);
		return this;
	}
	/** C type : reset_callback* */
	@Field(5) 
	public Pointer<GSettingsBackendClass.reset_callback > reset() {
		return this.io.getPointerField(this, 5);
	}
	/** C type : reset_callback* */
	@Field(5) 
	public GSettingsBackendClass reset(Pointer<GSettingsBackendClass.reset_callback > reset) {
		this.io.setPointerField(this, 5, reset);
		return this;
	}
	/** C type : subscribe_callback* */
	@Field(6) 
	public Pointer<GSettingsBackendClass.subscribe_callback > subscribe() {
		return this.io.getPointerField(this, 6);
	}
	/** C type : subscribe_callback* */
	@Field(6) 
	public GSettingsBackendClass subscribe(Pointer<GSettingsBackendClass.subscribe_callback > subscribe) {
		this.io.setPointerField(this, 6, subscribe);
		return this;
	}
	/** C type : unsubscribe_callback* */
	@Field(7) 
	public Pointer<GSettingsBackendClass.unsubscribe_callback > unsubscribe() {
		return this.io.getPointerField(this, 7);
	}
	/** C type : unsubscribe_callback* */
	@Field(7) 
	public GSettingsBackendClass unsubscribe(Pointer<GSettingsBackendClass.unsubscribe_callback > unsubscribe) {
		this.io.setPointerField(this, 7, unsubscribe);
		return this;
	}
	/** C type : sync_callback* */
	@Field(8) 
	public Pointer<GSettingsBackendClass.sync_callback > sync() {
		return this.io.getPointerField(this, 8);
	}
	/** C type : sync_callback* */
	@Field(8) 
	public GSettingsBackendClass sync(Pointer<GSettingsBackendClass.sync_callback > sync) {
		this.io.setPointerField(this, 8, sync);
		return this;
	}
	/** C type : get_permission_callback* */
	@Field(9) 
	public Pointer<GSettingsBackendClass.get_permission_callback > get_permission() {
		return this.io.getPointerField(this, 9);
	}
	/** C type : get_permission_callback* */
	@Field(9) 
	public GSettingsBackendClass get_permission(Pointer<GSettingsBackendClass.get_permission_callback > get_permission) {
		this.io.setPointerField(this, 9, get_permission);
		return this;
	}
	/** C type : gpointer[24] */
	@Array({24}) 
	@Field(10) 
	public Pointer<gpointer > padding() {
		return this.io.getPointerField(this, 10);
	}
	/** <i>native declaration : glib-2.0/gio/gsettingsbackend.h:19</i> */
	public static abstract class read_callback extends Callback<read_callback > {
		public final Pointer<GVariant > apply(Pointer<GSettingsBackend > backend, Pointer<Byte > key, Pointer<GVariantType > expected_type, gboolean default_value) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(backend), Pointer.getPeer(key), Pointer.getPeer(expected_type), default_value), GVariant.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long backend, @Ptr long key, @Ptr long expected_type, gboolean default_value);
	};
	/** <i>native declaration : glib-2.0/gio/gsettingsbackend.h:20</i> */
	public static abstract class get_writable_callback extends Callback<get_writable_callback > {
		public final gboolean apply(Pointer<GSettingsBackend > backend, Pointer<Byte > key) {
			return apply(Pointer.getPeer(backend), Pointer.getPeer(key));
		}
		public abstract gboolean apply(@Ptr long backend, @Ptr long key);
	};
	/** <i>native declaration : glib-2.0/gio/gsettingsbackend.h:21</i> */
	public static abstract class write_callback extends Callback<write_callback > {
		public final gboolean apply(Pointer<GSettingsBackend > backend, Pointer<Byte > key, Pointer<GVariant > value, gpointer origin_tag) {
			return apply(Pointer.getPeer(backend), Pointer.getPeer(key), Pointer.getPeer(value), origin_tag);
		}
		public abstract gboolean apply(@Ptr long backend, @Ptr long key, @Ptr long value, gpointer origin_tag);
	};
	/** <i>native declaration : glib-2.0/gio/gsettingsbackend.h:22</i> */
	public static abstract class write_tree_callback extends Callback<write_tree_callback > {
		public final gboolean apply(Pointer<GSettingsBackend > backend, Pointer<GTree > tree, gpointer origin_tag) {
			return apply(Pointer.getPeer(backend), Pointer.getPeer(tree), origin_tag);
		}
		public abstract gboolean apply(@Ptr long backend, @Ptr long tree, gpointer origin_tag);
	};
	/** <i>native declaration : glib-2.0/gio/gsettingsbackend.h:23</i> */
	public static abstract class reset_callback extends Callback<reset_callback > {
		public final void apply(Pointer<GSettingsBackend > backend, Pointer<Byte > key, gpointer origin_tag) {
			apply(Pointer.getPeer(backend), Pointer.getPeer(key), origin_tag);
		}
		public abstract void apply(@Ptr long backend, @Ptr long key, gpointer origin_tag);
	};
	/** <i>native declaration : glib-2.0/gio/gsettingsbackend.h:24</i> */
	public static abstract class subscribe_callback extends Callback<subscribe_callback > {
		public final void apply(Pointer<GSettingsBackend > backend, Pointer<Byte > name) {
			apply(Pointer.getPeer(backend), Pointer.getPeer(name));
		}
		public abstract void apply(@Ptr long backend, @Ptr long name);
	};
	/** <i>native declaration : glib-2.0/gio/gsettingsbackend.h:25</i> */
	public static abstract class unsubscribe_callback extends Callback<unsubscribe_callback > {
		public final void apply(Pointer<GSettingsBackend > backend, Pointer<Byte > name) {
			apply(Pointer.getPeer(backend), Pointer.getPeer(name));
		}
		public abstract void apply(@Ptr long backend, @Ptr long name);
	};
	/** <i>native declaration : glib-2.0/gio/gsettingsbackend.h:26</i> */
	public static abstract class sync_callback extends Callback<sync_callback > {
		public final void apply(Pointer<GSettingsBackend > backend) {
			apply(Pointer.getPeer(backend));
		}
		public abstract void apply(@Ptr long backend);
	};
	/** <i>native declaration : glib-2.0/gio/gsettingsbackend.h:27</i> */
	public static abstract class get_permission_callback extends Callback<get_permission_callback > {
		public final Pointer<GPermission > apply(Pointer<GSettingsBackend > backend, Pointer<Byte > path) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(backend), Pointer.getPeer(path)), GPermission.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long backend, @Ptr long path);
	};
}
