package gio;
import gio.GIOLibrary.GDBusInterface;
import gio.GIOLibrary.GDBusObject;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * GDBusInterfaceIface:<br>
 * @parent_iface: The parent interface.<br>
 * @get_info: Returns a #GDBusInterfaceInfo. See g_dbus_interface_get_info().<br>
 * @get_object: Gets the enclosing #GDBusObject. See g_dbus_interface_get_object().<br>
 * @set_object: Sets the enclosing #GDBusObject. See g_dbus_interface_set_object().<br>
 * @dup_object: Gets a reference to the enclosing #GDBusObject. See g_dbus_interface_dup_object(). Added in 2.32.<br>
 * * Base type for D-Bus interfaces.<br>
 * * Since: 2.30<br>
 * <i>native declaration : glib-2.0/gio/gdbusinterface.h:23</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GDBusInterfaceIface extends StructObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GTypeInterface (Unsupported type) */
	/**
	 * Virtual Functions<br>
	 * C type : get_info_callback*
	 */
	@Field(1) 
	public Pointer<gio.GDBusInterfaceSkeletonClass.get_info_callback > get_info() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * Virtual Functions<br>
	 * C type : get_info_callback*
	 */
	@Field(1) 
	public GDBusInterfaceIface get_info(Pointer<gio.GDBusInterfaceSkeletonClass.get_info_callback > get_info) {
		this.io.setPointerField(this, 1, get_info);
		return this;
	}
	/** C type : get_object_callback* */
	@Field(2) 
	public Pointer<gio.GDBusObjectManagerIface.get_object_callback > get_object() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : get_object_callback* */
	@Field(2) 
	public GDBusInterfaceIface get_object(Pointer<gio.GDBusObjectManagerIface.get_object_callback > get_object) {
		this.io.setPointerField(this, 2, get_object);
		return this;
	}
	/** C type : set_object_callback* */
	@Field(3) 
	public Pointer<GDBusInterfaceIface.set_object_callback > set_object() {
		return this.io.getPointerField(this, 3);
	}
	/** C type : set_object_callback* */
	@Field(3) 
	public GDBusInterfaceIface set_object(Pointer<GDBusInterfaceIface.set_object_callback > set_object) {
		this.io.setPointerField(this, 3, set_object);
		return this;
	}
	/** C type : dup_object_callback* */
	@Field(4) 
	public Pointer<GDBusInterfaceIface.dup_object_callback > dup_object() {
		return this.io.getPointerField(this, 4);
	}
	/** C type : dup_object_callback* */
	@Field(4) 
	public GDBusInterfaceIface dup_object(Pointer<GDBusInterfaceIface.dup_object_callback > dup_object) {
		this.io.setPointerField(this, 4, dup_object);
		return this;
	}
	/** <i>native declaration : glib-2.0/gio/gdbusinterface.h:19</i> */
	public static abstract class get_info_callback extends Callback<get_info_callback > {
		public final Pointer<GDBusInterfaceInfo > apply(Pointer<GDBusInterface > interface_) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(interface_)), GDBusInterfaceInfo.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long interface_);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusinterface.h:20</i> */
	public static abstract class get_object_callback extends Callback<get_object_callback > {
		public final Pointer<GDBusObject > apply(Pointer<GDBusInterface > interface_) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(interface_)), GDBusObject.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long interface_);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusinterface.h:21</i> */
	public static abstract class set_object_callback extends Callback<set_object_callback > {
		public final void apply(Pointer<GDBusInterface > interface_, Pointer<GDBusObject > object) {
			apply(Pointer.getPeer(interface_), Pointer.getPeer(object));
		}
		public abstract void apply(@Ptr long interface_, @Ptr long object);
	};
	/** <i>native declaration : glib-2.0/gio/gdbusinterface.h:22</i> */
	public static abstract class dup_object_callback extends Callback<dup_object_callback > {
		public final Pointer<GDBusObject > apply(Pointer<GDBusInterface > interface_) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(interface_)), GDBusObject.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long interface_);
	};
}
