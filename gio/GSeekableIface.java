package gio;
import gio.GIOLibrary.GSeekable;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
/**
 * GSeekableIface:<br>
 * @g_iface: The parent interface.<br>
 * @tell: Tells the current location within a stream.<br>
 * @can_seek: Checks if seeking is supported by the stream.<br>
 * @seek: Seeks to a location within a stream.<br>
 * @can_truncate: Checks if truncation is supported by the stream.<br>
 * @truncate_fn: Truncates a stream.<br>
 * * Provides an interface for implementing seekable functionality on I/O Streams.<br>
 * <i>native declaration : glib-2.0/gio/gseekable.h:33</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GSeekableIface extends CPPObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GTypeInterface (Unsupported type) */
	/** <i>native declaration : glib-2.0/gio/gseekable.h:28</i> */
	public static abstract class goffset_callback extends Callback<goffset_callback > {
		public final void apply(Pointer<GSeekable > seekable) {
			apply(Pointer.getPeer(seekable));
		}
		public abstract void apply(@Ptr long seekable);
	};
	/** <i>native declaration : glib-2.0/gio/gseekable.h:29</i> */
	public static abstract class gboolean_callback extends Callback<gboolean_callback > {
		public final void apply(Pointer<GSeekable > seekable) {
			apply(Pointer.getPeer(seekable));
		}
		public abstract void apply(@Ptr long seekable);
	};
	/** <i>native declaration : glib-2.0/gio/gseekable.h:30</i> */
	public static abstract class gboolean_callback2 extends Callback<gboolean_callback2 > {
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/gio/gseekable.h:20</i><br>
		 * gboolean_callback(GSeekable* seekable, goffset offset, GSeekType type, GCancellable* cancellable, GError** error);<br>
		 * Conversion Error : GSeekType (Unsupported type)
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : glib-2.0/gio/gseekable.h:20</i><br>
		 * gboolean_callback(GSeekable* seekable, goffset offset, GSeekType type, GCancellable* cancellable, GError** error);<br>
		 * Conversion Error : GSeekType (Unsupported type)
		 */
	};
	/** <i>native declaration : glib-2.0/gio/gseekable.h:31</i> */
	public static abstract class gboolean_callback3 extends Callback<gboolean_callback3 > {
		public final void apply(Pointer<GSeekable > seekable) {
			apply(Pointer.getPeer(seekable));
		}
		public abstract void apply(@Ptr long seekable);
	};
	/** <i>native declaration : glib-2.0/gio/gseekable.h:32</i> */
	public static abstract class gboolean_callback4 extends Callback<gboolean_callback4 > {
		public final void apply(Pointer<GSeekable > seekable, long offset, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
			apply(Pointer.getPeer(seekable), offset, Pointer.getPeer(cancellable), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long seekable, long offset, @Ptr long cancellable, @Ptr long error);
	};
}
