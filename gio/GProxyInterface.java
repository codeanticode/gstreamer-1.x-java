package gio;
import gio.GIOLibrary.GAsyncReadyCallback;
import gio.GIOLibrary.GAsyncResult;
import gio.GIOLibrary.GProxy;
import gio.GIOLibrary.gpointer;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
/**
 * GProxyInterface:<br>
 * @g_iface: The parent interface.<br>
 * @connect: Connect to proxy server and wrap (if required) the #connection<br>
 *           to handle payload.<br>
 * @connect_async: Same as connect() but asynchronous.<br>
 * @connect_finish: Returns the result of connect_async()<br>
 * @supports_hostname: Returns whether the proxy supports hostname lookups.<br>
 * * Provides an interface for handling proxy connection and payload.<br>
 * * Since: 2.26<br>
 * <i>native declaration : glib-2.0/gio/gproxy.h:29</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GProxyInterface extends CPPObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GTypeInterface (Unsupported type) */
	/** C type : connect_callback* */
	@Field(1) 
	public Pointer<GProxyInterface.connect_callback > connect() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : connect_callback* */
	@Field(1) 
	public GProxyInterface connect(Pointer<GProxyInterface.connect_callback > connect) {
		this.io.setPointerField(this, 1, connect);
		return this;
	}
	/** C type : connect_async_callback* */
	@Field(2) 
	public Pointer<GProxyInterface.connect_async_callback > connect_async() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : connect_async_callback* */
	@Field(2) 
	public GProxyInterface connect_async(Pointer<GProxyInterface.connect_async_callback > connect_async) {
		this.io.setPointerField(this, 2, connect_async);
		return this;
	}
	/** C type : connect_finish_callback* */
	@Field(3) 
	public Pointer<GProxyInterface.connect_finish_callback > connect_finish() {
		return this.io.getPointerField(this, 3);
	}
	/** C type : connect_finish_callback* */
	@Field(3) 
	public GProxyInterface connect_finish(Pointer<GProxyInterface.connect_finish_callback > connect_finish) {
		this.io.setPointerField(this, 3, connect_finish);
		return this;
	}
	/** <i>native declaration : glib-2.0/gio/gproxy.h:25</i> */
	public static abstract class connect_callback extends Callback<connect_callback > {
		public final Pointer<GIOStream > apply(Pointer<GProxy > proxy, Pointer<GIOStream > connection, Pointer<GProxyAddress > proxy_address, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(proxy), Pointer.getPeer(connection), Pointer.getPeer(proxy_address), Pointer.getPeer(cancellable), Pointer.getPeer(error)), GIOStream.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long proxy, @Ptr long connection, @Ptr long proxy_address, @Ptr long cancellable, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gproxy.h:26</i> */
	public static abstract class connect_async_callback extends Callback<connect_async_callback > {
		public final void apply(Pointer<GProxy > proxy, Pointer<GIOStream > connection, Pointer<GProxyAddress > proxy_address, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(proxy), Pointer.getPeer(connection), Pointer.getPeer(proxy_address), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long proxy, @Ptr long connection, @Ptr long proxy_address, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gproxy.h:27</i> */
	public static abstract class connect_finish_callback extends Callback<connect_finish_callback > {
		public final Pointer<GIOStream > apply(Pointer<GProxy > proxy, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(proxy), Pointer.getPeer(result), Pointer.getPeer(error)), GIOStream.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long proxy, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gproxy.h:28</i> */
	public static abstract class gboolean_callback extends Callback<gboolean_callback > {
		public final void apply(Pointer<GProxy > proxy) {
			apply(Pointer.getPeer(proxy));
		}
		public abstract void apply(@Ptr long proxy);
	};
}
