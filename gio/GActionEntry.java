package gio;
import gio.GIOLibrary.GSimpleAction;
import gio.GIOLibrary.GVariant;
import gio.GIOLibrary.gpointer;
import org.bridj.BridJ;
import org.bridj.CLong;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * <i>native declaration : glib-2.0/gio/gactionmap.h:22</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public class GActionEntry extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : const gchar* */
	@Field(0) 
	public Pointer<Byte > name() {
		return this.io.getPointerField(this, 0);
	}
	/** C type : const gchar* */
	@Field(0) 
	public GActionEntry name(Pointer<Byte > name) {
		this.io.setPointerField(this, 0, name);
		return this;
	}
	/** C type : activate_callback* */
	@Field(1) 
	public Pointer<gio.GApplicationClass.activate_callback > activate() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : activate_callback* */
	@Field(1) 
	public GActionEntry activate(Pointer<gio.GApplicationClass.activate_callback > activate) {
		this.io.setPointerField(this, 1, activate);
		return this;
	}
	/** C type : const gchar* */
	@Field(2) 
	public Pointer<Byte > parameter_type() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : const gchar* */
	@Field(2) 
	public GActionEntry parameter_type(Pointer<Byte > parameter_type) {
		this.io.setPointerField(this, 2, parameter_type);
		return this;
	}
	/** C type : const gchar* */
	@Field(3) 
	public Pointer<Byte > state() {
		return this.io.getPointerField(this, 3);
	}
	/** C type : const gchar* */
	@Field(3) 
	public GActionEntry state(Pointer<Byte > state) {
		this.io.setPointerField(this, 3, state);
		return this;
	}
	/** C type : change_state_callback* */
	@Field(4) 
	public Pointer<GActionEntry.change_state_callback > change_state() {
		return this.io.getPointerField(this, 4);
	}
	/** C type : change_state_callback* */
	@Field(4) 
	public GActionEntry change_state(Pointer<GActionEntry.change_state_callback > change_state) {
		this.io.setPointerField(this, 4, change_state);
		return this;
	}
	/**
	 * < private ><br>
	 * C type : gsize[3]
	 */
	@Array({3}) 
	@Field(5) 
	public Pointer<CLong > padding() {
		return this.io.getPointerField(this, 5);
	}
	/** <i>native declaration : glib-2.0/gio/gactionmap.h:20</i> */
	public static abstract class activate_callback extends Callback<activate_callback > {
		public final void apply(Pointer<GSimpleAction > action, Pointer<GVariant > parameter, gpointer user_data) {
			apply(Pointer.getPeer(action), Pointer.getPeer(parameter), user_data);
		}
		public abstract void apply(@Ptr long action, @Ptr long parameter, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gactionmap.h:21</i> */
	public static abstract class change_state_callback extends Callback<change_state_callback > {
		public final void apply(Pointer<GSimpleAction > action, Pointer<GVariant > value, gpointer user_data) {
			apply(Pointer.getPeer(action), Pointer.getPeer(value), user_data);
		}
		public abstract void apply(@Ptr long action, @Ptr long value, gpointer user_data);
	};
	public GActionEntry() {
		super();
	}
	public GActionEntry(Pointer pointer) {
		super(pointer);
	}
}
