package gio;
import gio.GIOLibrary.GAppInfo;
import gio.GIOLibrary.GIcon;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
import org.bridj.util.DefaultParameterizedType;
/**
 * <i>native declaration : glib-2.0/gio/gappinfo.h:98</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GAppInfoIface extends CPPObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GTypeInterface (Unsupported type) */
	/** C type : dup_callback* */
	@Field(1) 
	public Pointer<GAppInfoIface.dup_callback > dup() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : dup_callback* */
	@Field(1) 
	public GAppInfoIface dup(Pointer<GAppInfoIface.dup_callback > dup) {
		this.io.setPointerField(this, 1, dup);
		return this;
	}
	/** C type : get_id_callback* */
	@Field(2) 
	public Pointer<GAppInfoIface.get_id_callback > get_id() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : get_id_callback* */
	@Field(2) 
	public GAppInfoIface get_id(Pointer<GAppInfoIface.get_id_callback > get_id) {
		this.io.setPointerField(this, 2, get_id);
		return this;
	}
	/** C type : get_name_callback* */
	@Field(3) 
	public Pointer<gio.GVolumeIface.get_name_callback > get_name() {
		return this.io.getPointerField(this, 3);
	}
	/** C type : get_name_callback* */
	@Field(3) 
	public GAppInfoIface get_name(Pointer<gio.GVolumeIface.get_name_callback > get_name) {
		this.io.setPointerField(this, 3, get_name);
		return this;
	}
	/** C type : get_description_callback* */
	@Field(4) 
	public Pointer<GAppInfoIface.get_description_callback > get_description() {
		return this.io.getPointerField(this, 4);
	}
	/** C type : get_description_callback* */
	@Field(4) 
	public GAppInfoIface get_description(Pointer<GAppInfoIface.get_description_callback > get_description) {
		this.io.setPointerField(this, 4, get_description);
		return this;
	}
	/** C type : get_executable_callback* */
	@Field(5) 
	public Pointer<GAppInfoIface.get_executable_callback > get_executable() {
		return this.io.getPointerField(this, 5);
	}
	/** C type : get_executable_callback* */
	@Field(5) 
	public GAppInfoIface get_executable(Pointer<GAppInfoIface.get_executable_callback > get_executable) {
		this.io.setPointerField(this, 5, get_executable);
		return this;
	}
	/** C type : get_icon_callback* */
	@Field(6) 
	public Pointer<gio.GVolumeIface.get_icon_callback > get_icon() {
		return this.io.getPointerField(this, 6);
	}
	/** C type : get_icon_callback* */
	@Field(6) 
	public GAppInfoIface get_icon(Pointer<gio.GVolumeIface.get_icon_callback > get_icon) {
		this.io.setPointerField(this, 6, get_icon);
		return this;
	}
	/** C type : get_commandline_callback* */
	@Field(7) 
	public Pointer<GAppInfoIface.get_commandline_callback > get_commandline() {
		return this.io.getPointerField(this, 7);
	}
	/** C type : get_commandline_callback* */
	@Field(7) 
	public GAppInfoIface get_commandline(Pointer<GAppInfoIface.get_commandline_callback > get_commandline) {
		this.io.setPointerField(this, 7, get_commandline);
		return this;
	}
	/** C type : get_display_name_callback* */
	@Field(8) 
	public Pointer<GAppInfoIface.get_display_name_callback > get_display_name() {
		return this.io.getPointerField(this, 8);
	}
	/** C type : get_display_name_callback* */
	@Field(8) 
	public GAppInfoIface get_display_name(Pointer<GAppInfoIface.get_display_name_callback > get_display_name) {
		this.io.setPointerField(this, 8, get_display_name);
		return this;
	}
	/** C type : get_supported_types_callback* */
	@Field(9) 
	public Pointer<GAppInfoIface.get_supported_types_callback > get_supported_types() {
		return this.io.getPointerField(this, 9);
	}
	/** C type : get_supported_types_callback* */
	@Field(9) 
	public GAppInfoIface get_supported_types(Pointer<GAppInfoIface.get_supported_types_callback > get_supported_types) {
		this.io.setPointerField(this, 9, get_supported_types);
		return this;
	}
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:75</i> */
	public static abstract class dup_callback extends Callback<dup_callback > {
		public final Pointer<GAppInfo > apply(Pointer<GAppInfo > appinfo) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(appinfo)), GAppInfo.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long appinfo);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:76</i> */
	public static abstract class gboolean_callback extends Callback<gboolean_callback > {
		public final void apply(Pointer<GAppInfo > appinfo1, Pointer<GAppInfo > appinfo2) {
			apply(Pointer.getPeer(appinfo1), Pointer.getPeer(appinfo2));
		}
		public abstract void apply(@Ptr long appinfo1, @Ptr long appinfo2);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:77</i> */
	public static abstract class get_id_callback extends Callback<get_id_callback > {
		public final Pointer<Byte > apply(Pointer<GAppInfo > appinfo) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(appinfo)), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long appinfo);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:78</i> */
	public static abstract class get_name_callback extends Callback<get_name_callback > {
		public final Pointer<Byte > apply(Pointer<GAppInfo > appinfo) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(appinfo)), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long appinfo);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:79</i> */
	public static abstract class get_description_callback extends Callback<get_description_callback > {
		public final Pointer<Byte > apply(Pointer<GAppInfo > appinfo) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(appinfo)), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long appinfo);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:80</i> */
	public static abstract class get_executable_callback extends Callback<get_executable_callback > {
		public final Pointer<Byte > apply(Pointer<GAppInfo > appinfo) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(appinfo)), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long appinfo);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:81</i> */
	public static abstract class get_icon_callback extends Callback<get_icon_callback > {
		public final Pointer<GIcon > apply(Pointer<GAppInfo > appinfo) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(appinfo)), GIcon.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long appinfo);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:82</i> */
	public static abstract class gboolean_callback2 extends Callback<gboolean_callback2 > {
		public final void apply(Pointer<GAppInfo > appinfo, Pointer files, Pointer<GAppLaunchContext > launch_context, Pointer<Pointer > error) {
			apply(Pointer.getPeer(appinfo), Pointer.getPeer(files), Pointer.getPeer(launch_context), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long appinfo, @Ptr long files, @Ptr long launch_context, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:83</i> */
	public static abstract class gboolean_callback3 extends Callback<gboolean_callback3 > {
		public final void apply(Pointer<GAppInfo > appinfo) {
			apply(Pointer.getPeer(appinfo));
		}
		public abstract void apply(@Ptr long appinfo);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:84</i> */
	public static abstract class gboolean_callback4 extends Callback<gboolean_callback4 > {
		public final void apply(Pointer<GAppInfo > appinfo) {
			apply(Pointer.getPeer(appinfo));
		}
		public abstract void apply(@Ptr long appinfo);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:85</i> */
	public static abstract class gboolean_callback5 extends Callback<gboolean_callback5 > {
		public final void apply(Pointer<GAppInfo > appinfo, Pointer uris, Pointer<GAppLaunchContext > launch_context, Pointer<Pointer > error) {
			apply(Pointer.getPeer(appinfo), Pointer.getPeer(uris), Pointer.getPeer(launch_context), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long appinfo, @Ptr long uris, @Ptr long launch_context, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:86</i> */
	public static abstract class gboolean_callback6 extends Callback<gboolean_callback6 > {
		public final void apply(Pointer<GAppInfo > appinfo) {
			apply(Pointer.getPeer(appinfo));
		}
		public abstract void apply(@Ptr long appinfo);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:87</i> */
	public static abstract class gboolean_callback7 extends Callback<gboolean_callback7 > {
		public final void apply(Pointer<GAppInfo > appinfo, Pointer<Byte > content_type, Pointer<Pointer > error) {
			apply(Pointer.getPeer(appinfo), Pointer.getPeer(content_type), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long appinfo, @Ptr long content_type, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:88</i> */
	public static abstract class gboolean_callback8 extends Callback<gboolean_callback8 > {
		public final void apply(Pointer<GAppInfo > appinfo, Pointer<Byte > extension, Pointer<Pointer > error) {
			apply(Pointer.getPeer(appinfo), Pointer.getPeer(extension), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long appinfo, @Ptr long extension, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:89</i> */
	public static abstract class gboolean_callback9 extends Callback<gboolean_callback9 > {
		public final void apply(Pointer<GAppInfo > appinfo, Pointer<Byte > content_type, Pointer<Pointer > error) {
			apply(Pointer.getPeer(appinfo), Pointer.getPeer(content_type), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long appinfo, @Ptr long content_type, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:90</i> */
	public static abstract class gboolean_callback10 extends Callback<gboolean_callback10 > {
		public final void apply(Pointer<GAppInfo > appinfo) {
			apply(Pointer.getPeer(appinfo));
		}
		public abstract void apply(@Ptr long appinfo);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:91</i> */
	public static abstract class gboolean_callback11 extends Callback<gboolean_callback11 > {
		public final void apply(Pointer<GAppInfo > appinfo, Pointer<Byte > content_type, Pointer<Pointer > error) {
			apply(Pointer.getPeer(appinfo), Pointer.getPeer(content_type), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long appinfo, @Ptr long content_type, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:92</i> */
	public static abstract class gboolean_callback12 extends Callback<gboolean_callback12 > {
		public final void apply(Pointer<GAppInfo > appinfo) {
			apply(Pointer.getPeer(appinfo));
		}
		public abstract void apply(@Ptr long appinfo);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:93</i> */
	public static abstract class gboolean_callback13 extends Callback<gboolean_callback13 > {
		public final void apply(Pointer<GAppInfo > appinfo) {
			apply(Pointer.getPeer(appinfo));
		}
		public abstract void apply(@Ptr long appinfo);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:94</i> */
	public static abstract class get_commandline_callback extends Callback<get_commandline_callback > {
		public final Pointer<Byte > apply(Pointer<GAppInfo > appinfo) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(appinfo)), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long appinfo);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:95</i> */
	public static abstract class get_display_name_callback extends Callback<get_display_name_callback > {
		public final Pointer<Byte > apply(Pointer<GAppInfo > appinfo) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(appinfo)), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long appinfo);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:96</i> */
	public static abstract class gboolean_callback14 extends Callback<gboolean_callback14 > {
		public final void apply(Pointer<GAppInfo > appinfo, Pointer<Byte > content_type, Pointer<Pointer > error) {
			apply(Pointer.getPeer(appinfo), Pointer.getPeer(content_type), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long appinfo, @Ptr long content_type, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gappinfo.h:97</i> */
	public static abstract class get_supported_types_callback extends Callback<get_supported_types_callback > {
		public final Pointer<Pointer<Byte > > apply(Pointer<GAppInfo > appinfo) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(appinfo)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
		}
		@Ptr 
		public abstract long apply(@Ptr long appinfo);
	};
}
