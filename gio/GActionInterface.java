package gio;
import gio.GIOLibrary.GAction;
import gio.GIOLibrary.GVariant;
import gio.GIOLibrary.GVariantType;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
/**
 * <i>native declaration : glib-2.0/gio/gaction.h:22</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GActionInterface extends CPPObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GTypeInterface (Unsupported type) */
	/**
	 * virtual functions<br>
	 * C type : get_name_callback*
	 */
	@Field(1) 
	public Pointer<gio.GVolumeIface.get_name_callback > get_name() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * virtual functions<br>
	 * C type : get_name_callback*
	 */
	@Field(1) 
	public GActionInterface get_name(Pointer<gio.GVolumeIface.get_name_callback > get_name) {
		this.io.setPointerField(this, 1, get_name);
		return this;
	}
	/** C type : get_parameter_type_callback* */
	@Field(2) 
	public Pointer<GActionInterface.get_parameter_type_callback > get_parameter_type() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : get_parameter_type_callback* */
	@Field(2) 
	public GActionInterface get_parameter_type(Pointer<GActionInterface.get_parameter_type_callback > get_parameter_type) {
		this.io.setPointerField(this, 2, get_parameter_type);
		return this;
	}
	/** C type : get_state_type_callback* */
	@Field(3) 
	public Pointer<GActionInterface.get_state_type_callback > get_state_type() {
		return this.io.getPointerField(this, 3);
	}
	/** C type : get_state_type_callback* */
	@Field(3) 
	public GActionInterface get_state_type(Pointer<GActionInterface.get_state_type_callback > get_state_type) {
		this.io.setPointerField(this, 3, get_state_type);
		return this;
	}
	/** C type : get_state_hint_callback* */
	@Field(4) 
	public Pointer<GActionInterface.get_state_hint_callback > get_state_hint() {
		return this.io.getPointerField(this, 4);
	}
	/** C type : get_state_hint_callback* */
	@Field(4) 
	public GActionInterface get_state_hint(Pointer<GActionInterface.get_state_hint_callback > get_state_hint) {
		this.io.setPointerField(this, 4, get_state_hint);
		return this;
	}
	/** C type : get_state_callback* */
	@Field(5) 
	public Pointer<GActionInterface.get_state_callback > get_state() {
		return this.io.getPointerField(this, 5);
	}
	/** C type : get_state_callback* */
	@Field(5) 
	public GActionInterface get_state(Pointer<GActionInterface.get_state_callback > get_state) {
		this.io.setPointerField(this, 5, get_state);
		return this;
	}
	/** C type : change_state_callback* */
	@Field(6) 
	public Pointer<gio.GActionEntry.change_state_callback > change_state() {
		return this.io.getPointerField(this, 6);
	}
	/** C type : change_state_callback* */
	@Field(6) 
	public GActionInterface change_state(Pointer<gio.GActionEntry.change_state_callback > change_state) {
		this.io.setPointerField(this, 6, change_state);
		return this;
	}
	/** C type : activate_callback* */
	@Field(7) 
	public Pointer<gio.GApplicationClass.activate_callback > activate() {
		return this.io.getPointerField(this, 7);
	}
	/** C type : activate_callback* */
	@Field(7) 
	public GActionInterface activate(Pointer<gio.GApplicationClass.activate_callback > activate) {
		this.io.setPointerField(this, 7, activate);
		return this;
	}
	/** <i>native declaration : glib-2.0/gio/gaction.h:14</i> */
	public static abstract class get_name_callback extends Callback<get_name_callback > {
		public final Pointer<Byte > apply(Pointer<GAction > action) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(action)), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long action);
	};
	/** <i>native declaration : glib-2.0/gio/gaction.h:15</i> */
	public static abstract class get_parameter_type_callback extends Callback<get_parameter_type_callback > {
		public final Pointer<GVariantType > apply(Pointer<GAction > action) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(action)), GVariantType.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long action);
	};
	/** <i>native declaration : glib-2.0/gio/gaction.h:16</i> */
	public static abstract class get_state_type_callback extends Callback<get_state_type_callback > {
		public final Pointer<GVariantType > apply(Pointer<GAction > action) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(action)), GVariantType.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long action);
	};
	/** <i>native declaration : glib-2.0/gio/gaction.h:17</i> */
	public static abstract class get_state_hint_callback extends Callback<get_state_hint_callback > {
		public final Pointer<GVariant > apply(Pointer<GAction > action) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(action)), GVariant.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long action);
	};
	/** <i>native declaration : glib-2.0/gio/gaction.h:18</i> */
	public static abstract class gboolean_callback extends Callback<gboolean_callback > {
		public final void apply(Pointer<GAction > action) {
			apply(Pointer.getPeer(action));
		}
		public abstract void apply(@Ptr long action);
	};
	/** <i>native declaration : glib-2.0/gio/gaction.h:19</i> */
	public static abstract class get_state_callback extends Callback<get_state_callback > {
		public final Pointer<GVariant > apply(Pointer<GAction > action) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(action)), GVariant.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long action);
	};
	/** <i>native declaration : glib-2.0/gio/gaction.h:20</i> */
	public static abstract class change_state_callback extends Callback<change_state_callback > {
		public final void apply(Pointer<GAction > action, Pointer<GVariant > value) {
			apply(Pointer.getPeer(action), Pointer.getPeer(value));
		}
		public abstract void apply(@Ptr long action, @Ptr long value);
	};
	/** <i>native declaration : glib-2.0/gio/gaction.h:21</i> */
	public static abstract class activate_callback extends Callback<activate_callback > {
		public final void apply(Pointer<GAction > action, Pointer<GVariant > parameter) {
			apply(Pointer.getPeer(action), Pointer.getPeer(parameter));
		}
		public abstract void apply(@Ptr long action, @Ptr long parameter);
	};
}
