package gio;
import gio.GIOLibrary.GTlsBackend;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
/**
 * GTlsBackendInterface:<br>
 * @g_iface: The parent interface.<br>
 * @supports_tls: returns whether the backend supports TLS.<br>
 * @get_default_database: returns a default #GTlsDatabase instance.<br>
 * @get_certificate_type: returns the #GTlsCertificate implementation type<br>
 * @get_client_connection_type: returns the #GTlsClientConnection implementation type<br>
 * @get_server_connection_type: returns the #GTlsServerConnection implementation type<br>
 * @get_file_database_type: returns the #GTlsFileDatabase implementation type.<br>
 * * Provides an interface for describing TLS-related types.<br>
 * * Since: 2.28<br>
 * <i>native declaration : glib-2.0/gio/gtlsbackend.h:37</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GTlsBackendInterface extends CPPObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GTypeInterface (Unsupported type) */
	/** C type : get_default_database_callback* */
	@Field(1) 
	public Pointer<GTlsBackendInterface.get_default_database_callback > get_default_database() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : get_default_database_callback* */
	@Field(1) 
	public GTlsBackendInterface get_default_database(Pointer<GTlsBackendInterface.get_default_database_callback > get_default_database) {
		this.io.setPointerField(this, 1, get_default_database);
		return this;
	}
	/** <i>native declaration : glib-2.0/gio/gtlsbackend.h:31</i> */
	public static abstract class gboolean_callback extends Callback<gboolean_callback > {
		public final void apply(Pointer<GTlsBackend > backend) {
			apply(Pointer.getPeer(backend));
		}
		public abstract void apply(@Ptr long backend);
	};
	/** <i>native declaration : glib-2.0/gio/gtlsbackend.h:32</i> */
	public static abstract class GType_callback extends Callback<GType_callback > {
		public abstract void apply();
	};
	/** <i>native declaration : glib-2.0/gio/gtlsbackend.h:33</i> */
	public static abstract class GType_callback2 extends Callback<GType_callback2 > {
		public abstract void apply();
	};
	/** <i>native declaration : glib-2.0/gio/gtlsbackend.h:34</i> */
	public static abstract class GType_callback3 extends Callback<GType_callback3 > {
		public abstract void apply();
	};
	/** <i>native declaration : glib-2.0/gio/gtlsbackend.h:35</i> */
	public static abstract class GType_callback4 extends Callback<GType_callback4 > {
		public abstract void apply();
	};
	/** <i>native declaration : glib-2.0/gio/gtlsbackend.h:36</i> */
	public static abstract class get_default_database_callback extends Callback<get_default_database_callback > {
		public final Pointer<GTlsDatabase > apply(Pointer<GTlsBackend > backend) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(backend)), GTlsDatabase.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long backend);
	};
}
