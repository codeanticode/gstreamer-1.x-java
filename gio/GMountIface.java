package gio;
import gio.GIOLibrary.GAsyncReadyCallback;
import gio.GIOLibrary.GAsyncResult;
import gio.GIOLibrary.GDrive;
import gio.GIOLibrary.GFile;
import gio.GIOLibrary.GIcon;
import gio.GIOLibrary.GMount;
import gio.GIOLibrary.GMountMountFlags;
import gio.GIOLibrary.GMountUnmountFlags;
import gio.GIOLibrary.GVolume;
import gio.GIOLibrary.gboolean;
import gio.GIOLibrary.gpointer;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
import org.bridj.util.DefaultParameterizedType;
/**
 * GMountIface:<br>
 * @g_iface: The parent interface.<br>
 * @changed: Changed signal that is emitted when the mount's state has changed.<br>
 * @unmounted: The unmounted signal that is emitted when the #GMount have been unmounted. If the recipient is holding references to the object they should release them so the object can be finalized.<br>
 * @pre_unmount: The ::pre-unmount signal that is emitted when the #GMount will soon be emitted. If the recipient is somehow holding the mount open by keeping an open file on it it should close the file.<br>
 * @get_root: Gets a #GFile to the root directory of the #GMount.<br>
 * @get_name: Gets a string containing the name of the #GMount.<br>
 * @get_icon: Gets a #GIcon for the #GMount.<br>
 * @get_uuid: Gets the UUID for the #GMount. The reference is typically based on the file system UUID for the mount in question and should be considered an opaque string. Returns %NULL if there is no UUID available.<br>
 * @get_volume: Gets a #GVolume the mount is located on. Returns %NULL if the #GMount is not associated with a #GVolume.<br>
 * @get_drive: Gets a #GDrive the volume of the mount is located on. Returns %NULL if the #GMount is not associated with a #GDrive or a #GVolume. This is convenience method for getting the #GVolume and using that to get the #GDrive.<br>
 * @can_unmount: Checks if a #GMount can be unmounted.<br>
 * @can_eject: Checks if a #GMount can be ejected.<br>
 * @unmount: Starts unmounting a #GMount.<br>
 * @unmount_finish: Finishes an unmounting operation.<br>
 * @eject: Starts ejecting a #GMount.<br>
 * @eject_finish: Finishes an eject operation.<br>
 * @remount: Starts remounting a #GMount.<br>
 * @remount_finish: Finishes a remounting operation.<br>
 * @guess_content_type: Starts guessing the type of the content of a #GMount.<br>
 *     See g_mount_guess_content_type() for more information on content<br>
 *     type guessing. This operation was added in 2.18.<br>
 * @guess_content_type_finish: Finishes a content type guessing operation. Added in 2.18.<br>
 * @guess_content_type_sync: Synchronous variant of @guess_content_type. Added in 2.18<br>
 * @unmount_with_operation: Starts unmounting a #GMount using a #GMountOperation. Since 2.22.<br>
 * @unmount_with_operation_finish: Finishes an unmounting operation using a #GMountOperation. Since 2.22.<br>
 * @eject_with_operation: Starts ejecting a #GMount using a #GMountOperation. Since 2.22.<br>
 * @eject_with_operation_finish: Finishes an eject operation using a #GMountOperation. Since 2.22.<br>
 * @get_default_location: Gets a #GFile indication a start location that can be use as the entry point for this mount. Since 2.24.<br>
 * @get_sort_key: Gets a key used for sorting #GMount instance or %NULL if no such key exists. Since 2.32.<br>
 * @get_symbolic_icon: Gets a symbolic #GIcon for the #GMount. Since 2.34.<br>
 * * Interface for implementing operations for mounts.<br>
 * <i>native declaration : glib-2.0/gio/gmount.h:98</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GIO") 
public abstract class GMountIface extends CPPObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : GTypeInterface (Unsupported type) */
	/** C type : changed_callback* */
	@Field(1) 
	public Pointer<gio.GVolumeIface.changed_callback > changed() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : changed_callback* */
	@Field(1) 
	public GMountIface changed(Pointer<gio.GVolumeIface.changed_callback > changed) {
		this.io.setPointerField(this, 1, changed);
		return this;
	}
	/** C type : unmounted_callback* */
	@Field(2) 
	public Pointer<GMountIface.unmounted_callback > unmounted() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : unmounted_callback* */
	@Field(2) 
	public GMountIface unmounted(Pointer<GMountIface.unmounted_callback > unmounted) {
		this.io.setPointerField(this, 2, unmounted);
		return this;
	}
	/** C type : get_root_callback* */
	@Field(3) 
	public Pointer<GMountIface.get_root_callback > get_root() {
		return this.io.getPointerField(this, 3);
	}
	/** C type : get_root_callback* */
	@Field(3) 
	public GMountIface get_root(Pointer<GMountIface.get_root_callback > get_root) {
		this.io.setPointerField(this, 3, get_root);
		return this;
	}
	/** C type : get_name_callback* */
	@Field(4) 
	public Pointer<gio.GVolumeIface.get_name_callback > get_name() {
		return this.io.getPointerField(this, 4);
	}
	/** C type : get_name_callback* */
	@Field(4) 
	public GMountIface get_name(Pointer<gio.GVolumeIface.get_name_callback > get_name) {
		this.io.setPointerField(this, 4, get_name);
		return this;
	}
	/** C type : get_icon_callback* */
	@Field(5) 
	public Pointer<gio.GVolumeIface.get_icon_callback > get_icon() {
		return this.io.getPointerField(this, 5);
	}
	/** C type : get_icon_callback* */
	@Field(5) 
	public GMountIface get_icon(Pointer<gio.GVolumeIface.get_icon_callback > get_icon) {
		this.io.setPointerField(this, 5, get_icon);
		return this;
	}
	/** C type : get_uuid_callback* */
	@Field(6) 
	public Pointer<gio.GVolumeIface.get_uuid_callback > get_uuid() {
		return this.io.getPointerField(this, 6);
	}
	/** C type : get_uuid_callback* */
	@Field(6) 
	public GMountIface get_uuid(Pointer<gio.GVolumeIface.get_uuid_callback > get_uuid) {
		this.io.setPointerField(this, 6, get_uuid);
		return this;
	}
	/** C type : get_volume_callback* */
	@Field(7) 
	public Pointer<GMountIface.get_volume_callback > get_volume() {
		return this.io.getPointerField(this, 7);
	}
	/** C type : get_volume_callback* */
	@Field(7) 
	public GMountIface get_volume(Pointer<GMountIface.get_volume_callback > get_volume) {
		this.io.setPointerField(this, 7, get_volume);
		return this;
	}
	/** C type : get_drive_callback* */
	@Field(8) 
	public Pointer<gio.GVolumeIface.get_drive_callback > get_drive() {
		return this.io.getPointerField(this, 8);
	}
	/** C type : get_drive_callback* */
	@Field(8) 
	public GMountIface get_drive(Pointer<gio.GVolumeIface.get_drive_callback > get_drive) {
		this.io.setPointerField(this, 8, get_drive);
		return this;
	}
	/** C type : unmount_callback* */
	@Field(9) 
	public Pointer<GMountIface.unmount_callback > unmount() {
		return this.io.getPointerField(this, 9);
	}
	/** C type : unmount_callback* */
	@Field(9) 
	public GMountIface unmount(Pointer<GMountIface.unmount_callback > unmount) {
		this.io.setPointerField(this, 9, unmount);
		return this;
	}
	/** C type : eject_callback* */
	@Field(10) 
	public Pointer<gio.GVolumeIface.eject_callback > eject() {
		return this.io.getPointerField(this, 10);
	}
	/** C type : eject_callback* */
	@Field(10) 
	public GMountIface eject(Pointer<gio.GVolumeIface.eject_callback > eject) {
		this.io.setPointerField(this, 10, eject);
		return this;
	}
	/** C type : remount_callback* */
	@Field(11) 
	public Pointer<GMountIface.remount_callback > remount() {
		return this.io.getPointerField(this, 11);
	}
	/** C type : remount_callback* */
	@Field(11) 
	public GMountIface remount(Pointer<GMountIface.remount_callback > remount) {
		this.io.setPointerField(this, 11, remount);
		return this;
	}
	/** C type : guess_content_type_callback* */
	@Field(12) 
	public Pointer<GMountIface.guess_content_type_callback > guess_content_type() {
		return this.io.getPointerField(this, 12);
	}
	/** C type : guess_content_type_callback* */
	@Field(12) 
	public GMountIface guess_content_type(Pointer<GMountIface.guess_content_type_callback > guess_content_type) {
		this.io.setPointerField(this, 12, guess_content_type);
		return this;
	}
	/** C type : guess_content_type_finish_callback* */
	@Field(13) 
	public Pointer<GMountIface.guess_content_type_finish_callback > guess_content_type_finish() {
		return this.io.getPointerField(this, 13);
	}
	/** C type : guess_content_type_finish_callback* */
	@Field(13) 
	public GMountIface guess_content_type_finish(Pointer<GMountIface.guess_content_type_finish_callback > guess_content_type_finish) {
		this.io.setPointerField(this, 13, guess_content_type_finish);
		return this;
	}
	/** C type : guess_content_type_sync_callback* */
	@Field(14) 
	public Pointer<GMountIface.guess_content_type_sync_callback > guess_content_type_sync() {
		return this.io.getPointerField(this, 14);
	}
	/** C type : guess_content_type_sync_callback* */
	@Field(14) 
	public GMountIface guess_content_type_sync(Pointer<GMountIface.guess_content_type_sync_callback > guess_content_type_sync) {
		this.io.setPointerField(this, 14, guess_content_type_sync);
		return this;
	}
	/**
	 * Signal, not VFunc<br>
	 * C type : pre_unmount_callback*
	 */
	@Field(15) 
	public Pointer<GMountIface.pre_unmount_callback > pre_unmount() {
		return this.io.getPointerField(this, 15);
	}
	/**
	 * Signal, not VFunc<br>
	 * C type : pre_unmount_callback*
	 */
	@Field(15) 
	public GMountIface pre_unmount(Pointer<GMountIface.pre_unmount_callback > pre_unmount) {
		this.io.setPointerField(this, 15, pre_unmount);
		return this;
	}
	/** C type : unmount_with_operation_callback* */
	@Field(16) 
	public Pointer<GMountIface.unmount_with_operation_callback > unmount_with_operation() {
		return this.io.getPointerField(this, 16);
	}
	/** C type : unmount_with_operation_callback* */
	@Field(16) 
	public GMountIface unmount_with_operation(Pointer<GMountIface.unmount_with_operation_callback > unmount_with_operation) {
		this.io.setPointerField(this, 16, unmount_with_operation);
		return this;
	}
	/** C type : unmount_with_operation_finish_callback* */
	@Field(17) 
	public Pointer<GMountIface.unmount_with_operation_finish_callback > unmount_with_operation_finish() {
		return this.io.getPointerField(this, 17);
	}
	/** C type : unmount_with_operation_finish_callback* */
	@Field(17) 
	public GMountIface unmount_with_operation_finish(Pointer<GMountIface.unmount_with_operation_finish_callback > unmount_with_operation_finish) {
		this.io.setPointerField(this, 17, unmount_with_operation_finish);
		return this;
	}
	/** C type : eject_with_operation_callback* */
	@Field(18) 
	public Pointer<gio.GVolumeIface.eject_with_operation_callback > eject_with_operation() {
		return this.io.getPointerField(this, 18);
	}
	/** C type : eject_with_operation_callback* */
	@Field(18) 
	public GMountIface eject_with_operation(Pointer<gio.GVolumeIface.eject_with_operation_callback > eject_with_operation) {
		this.io.setPointerField(this, 18, eject_with_operation);
		return this;
	}
	/** C type : eject_with_operation_finish_callback* */
	@Field(19) 
	public Pointer<GMountIface.eject_with_operation_finish_callback > eject_with_operation_finish() {
		return this.io.getPointerField(this, 19);
	}
	/** C type : eject_with_operation_finish_callback* */
	@Field(19) 
	public GMountIface eject_with_operation_finish(Pointer<GMountIface.eject_with_operation_finish_callback > eject_with_operation_finish) {
		this.io.setPointerField(this, 19, eject_with_operation_finish);
		return this;
	}
	/** C type : get_default_location_callback* */
	@Field(20) 
	public Pointer<GMountIface.get_default_location_callback > get_default_location() {
		return this.io.getPointerField(this, 20);
	}
	/** C type : get_default_location_callback* */
	@Field(20) 
	public GMountIface get_default_location(Pointer<GMountIface.get_default_location_callback > get_default_location) {
		this.io.setPointerField(this, 20, get_default_location);
		return this;
	}
	/** C type : get_sort_key_callback* */
	@Field(21) 
	public Pointer<gio.GVolumeIface.get_sort_key_callback > get_sort_key() {
		return this.io.getPointerField(this, 21);
	}
	/** C type : get_sort_key_callback* */
	@Field(21) 
	public GMountIface get_sort_key(Pointer<gio.GVolumeIface.get_sort_key_callback > get_sort_key) {
		this.io.setPointerField(this, 21, get_sort_key);
		return this;
	}
	/** C type : get_symbolic_icon_callback* */
	@Field(22) 
	public Pointer<gio.GVolumeIface.get_symbolic_icon_callback > get_symbolic_icon() {
		return this.io.getPointerField(this, 22);
	}
	/** C type : get_symbolic_icon_callback* */
	@Field(22) 
	public GMountIface get_symbolic_icon(Pointer<gio.GVolumeIface.get_symbolic_icon_callback > get_symbolic_icon) {
		this.io.setPointerField(this, 22, get_symbolic_icon);
		return this;
	}
	/** <i>native declaration : glib-2.0/gio/gmount.h:71</i> */
	public static abstract class changed_callback extends Callback<changed_callback > {
		public final void apply(Pointer<GMount > mount) {
			apply(Pointer.getPeer(mount));
		}
		public abstract void apply(@Ptr long mount);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:72</i> */
	public static abstract class unmounted_callback extends Callback<unmounted_callback > {
		public final void apply(Pointer<GMount > mount) {
			apply(Pointer.getPeer(mount));
		}
		public abstract void apply(@Ptr long mount);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:73</i> */
	public static abstract class get_root_callback extends Callback<get_root_callback > {
		public final Pointer<GFile > apply(Pointer<GMount > mount) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(mount)), GFile.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long mount);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:74</i> */
	public static abstract class get_name_callback extends Callback<get_name_callback > {
		public final Pointer<Byte > apply(Pointer<GMount > mount) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(mount)), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long mount);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:75</i> */
	public static abstract class get_icon_callback extends Callback<get_icon_callback > {
		public final Pointer<GIcon > apply(Pointer<GMount > mount) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(mount)), GIcon.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long mount);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:76</i> */
	public static abstract class get_uuid_callback extends Callback<get_uuid_callback > {
		public final Pointer<Byte > apply(Pointer<GMount > mount) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(mount)), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long mount);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:77</i> */
	public static abstract class get_volume_callback extends Callback<get_volume_callback > {
		public final Pointer<GVolume > apply(Pointer<GMount > mount) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(mount)), GVolume.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long mount);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:78</i> */
	public static abstract class get_drive_callback extends Callback<get_drive_callback > {
		public final Pointer<GDrive > apply(Pointer<GMount > mount) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(mount)), GDrive.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long mount);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:79</i> */
	public static abstract class gboolean_callback extends Callback<gboolean_callback > {
		public final void apply(Pointer<GMount > mount) {
			apply(Pointer.getPeer(mount));
		}
		public abstract void apply(@Ptr long mount);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:80</i> */
	public static abstract class gboolean_callback2 extends Callback<gboolean_callback2 > {
		public final void apply(Pointer<GMount > mount) {
			apply(Pointer.getPeer(mount));
		}
		public abstract void apply(@Ptr long mount);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:81</i> */
	public static abstract class unmount_callback extends Callback<unmount_callback > {
		public final void apply(Pointer<GMount > mount, IntValuedEnum<GMountUnmountFlags > flags, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(mount), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long mount, int flags, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:82</i> */
	public static abstract class gboolean_callback3 extends Callback<gboolean_callback3 > {
		public final void apply(Pointer<GMount > mount, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			apply(Pointer.getPeer(mount), Pointer.getPeer(result), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long mount, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:83</i> */
	public static abstract class eject_callback extends Callback<eject_callback > {
		public final void apply(Pointer<GMount > mount, IntValuedEnum<GMountUnmountFlags > flags, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(mount), (int)flags.value(), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long mount, int flags, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:84</i> */
	public static abstract class gboolean_callback4 extends Callback<gboolean_callback4 > {
		public final void apply(Pointer<GMount > mount, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			apply(Pointer.getPeer(mount), Pointer.getPeer(result), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long mount, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:85</i> */
	public static abstract class remount_callback extends Callback<remount_callback > {
		public final void apply(Pointer<GMount > mount, IntValuedEnum<GMountMountFlags > flags, Pointer<GMountOperation > mount_operation, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(mount), (int)flags.value(), Pointer.getPeer(mount_operation), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long mount, int flags, @Ptr long mount_operation, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:86</i> */
	public static abstract class gboolean_callback5 extends Callback<gboolean_callback5 > {
		public final void apply(Pointer<GMount > mount, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			apply(Pointer.getPeer(mount), Pointer.getPeer(result), Pointer.getPeer(error));
		}
		public abstract void apply(@Ptr long mount, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:87</i> */
	public static abstract class guess_content_type_callback extends Callback<guess_content_type_callback > {
		public final void apply(Pointer<GMount > mount, gboolean force_rescan, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(mount), force_rescan, Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long mount, gboolean force_rescan, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:88</i> */
	public static abstract class guess_content_type_finish_callback extends Callback<guess_content_type_finish_callback > {
		public final Pointer<Pointer<Byte > > apply(Pointer<GMount > mount, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(mount), Pointer.getPeer(result), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
		}
		@Ptr 
		public abstract long apply(@Ptr long mount, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:89</i> */
	public static abstract class guess_content_type_sync_callback extends Callback<guess_content_type_sync_callback > {
		public final Pointer<Pointer<Byte > > apply(Pointer<GMount > mount, gboolean force_rescan, Pointer<GCancellable > cancellable, Pointer<Pointer > error) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(mount), force_rescan, Pointer.getPeer(cancellable), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
		}
		@Ptr 
		public abstract long apply(@Ptr long mount, gboolean force_rescan, @Ptr long cancellable, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:90</i> */
	public static abstract class pre_unmount_callback extends Callback<pre_unmount_callback > {
		public final void apply(Pointer<GMount > mount) {
			apply(Pointer.getPeer(mount));
		}
		public abstract void apply(@Ptr long mount);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:91</i> */
	public static abstract class unmount_with_operation_callback extends Callback<unmount_with_operation_callback > {
		public final void apply(Pointer<GMount > mount, IntValuedEnum<GMountUnmountFlags > flags, Pointer<GMountOperation > mount_operation, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(mount), (int)flags.value(), Pointer.getPeer(mount_operation), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long mount, int flags, @Ptr long mount_operation, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:92</i> */
	public static abstract class unmount_with_operation_finish_callback extends Callback<unmount_with_operation_finish_callback > {
		public final gboolean apply(Pointer<GMount > mount, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			return apply(Pointer.getPeer(mount), Pointer.getPeer(result), Pointer.getPeer(error));
		}
		public abstract gboolean apply(@Ptr long mount, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:93</i> */
	public static abstract class eject_with_operation_callback extends Callback<eject_with_operation_callback > {
		public final void apply(Pointer<GMount > mount, IntValuedEnum<GMountUnmountFlags > flags, Pointer<GMountOperation > mount_operation, Pointer<GCancellable > cancellable, Pointer<GAsyncReadyCallback > callback, gpointer user_data) {
			apply(Pointer.getPeer(mount), (int)flags.value(), Pointer.getPeer(mount_operation), Pointer.getPeer(cancellable), Pointer.getPeer(callback), user_data);
		}
		public abstract void apply(@Ptr long mount, int flags, @Ptr long mount_operation, @Ptr long cancellable, @Ptr long callback, gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:94</i> */
	public static abstract class eject_with_operation_finish_callback extends Callback<eject_with_operation_finish_callback > {
		public final gboolean apply(Pointer<GMount > mount, Pointer<GAsyncResult > result, Pointer<Pointer > error) {
			return apply(Pointer.getPeer(mount), Pointer.getPeer(result), Pointer.getPeer(error));
		}
		public abstract gboolean apply(@Ptr long mount, @Ptr long result, @Ptr long error);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:95</i> */
	public static abstract class get_default_location_callback extends Callback<get_default_location_callback > {
		public final Pointer<GFile > apply(Pointer<GMount > mount) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(mount)), GFile.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long mount);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:96</i> */
	public static abstract class get_sort_key_callback extends Callback<get_sort_key_callback > {
		public final Pointer<Byte > apply(Pointer<GMount > mount) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(mount)), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long mount);
	};
	/** <i>native declaration : glib-2.0/gio/gmount.h:97</i> */
	public static abstract class get_symbolic_icon_callback extends Callback<get_symbolic_icon_callback > {
		public final Pointer<GIcon > apply(Pointer<GMount > mount) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(mount)), GIcon.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long mount);
	};
}
