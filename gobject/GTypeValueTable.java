package gobject;
import gobject.GObjectLibrary.gpointer;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * <i>native declaration : glib-2.0/gobject/gtype.h:456</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GObject") 
public class GTypeValueTable extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : value_init_callback* */
	@Field(0) 
	public Pointer<GTypeValueTable.value_init_callback > value_init() {
		return this.io.getPointerField(this, 0);
	}
	/** C type : value_init_callback* */
	@Field(0) 
	public GTypeValueTable value_init(Pointer<GTypeValueTable.value_init_callback > value_init) {
		this.io.setPointerField(this, 0, value_init);
		return this;
	}
	/** C type : value_free_callback* */
	@Field(1) 
	public Pointer<GTypeValueTable.value_free_callback > value_free() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : value_free_callback* */
	@Field(1) 
	public GTypeValueTable value_free(Pointer<GTypeValueTable.value_free_callback > value_free) {
		this.io.setPointerField(this, 1, value_free);
		return this;
	}
	/** C type : value_copy_callback* */
	@Field(2) 
	public Pointer<GTypeValueTable.value_copy_callback > value_copy() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : value_copy_callback* */
	@Field(2) 
	public GTypeValueTable value_copy(Pointer<GTypeValueTable.value_copy_callback > value_copy) {
		this.io.setPointerField(this, 2, value_copy);
		return this;
	}
	/**
	 * varargs functionality (optional)<br>
	 * C type : value_peek_pointer_callback*
	 */
	@Field(3) 
	public Pointer<GTypeValueTable.value_peek_pointer_callback > value_peek_pointer() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * varargs functionality (optional)<br>
	 * C type : value_peek_pointer_callback*
	 */
	@Field(3) 
	public GTypeValueTable value_peek_pointer(Pointer<GTypeValueTable.value_peek_pointer_callback > value_peek_pointer) {
		this.io.setPointerField(this, 3, value_peek_pointer);
		return this;
	}
	/** C type : const gchar* */
	@Field(4) 
	public Pointer<Byte > collect_format() {
		return this.io.getPointerField(this, 4);
	}
	/** C type : const gchar* */
	@Field(4) 
	public GTypeValueTable collect_format(Pointer<Byte > collect_format) {
		this.io.setPointerField(this, 4, collect_format);
		return this;
	}
	/** C type : collect_value_callback* */
	@Field(5) 
	public Pointer<GTypeValueTable.collect_value_callback > collect_value() {
		return this.io.getPointerField(this, 5);
	}
	/** C type : collect_value_callback* */
	@Field(5) 
	public GTypeValueTable collect_value(Pointer<GTypeValueTable.collect_value_callback > collect_value) {
		this.io.setPointerField(this, 5, collect_value);
		return this;
	}
	/** C type : const gchar* */
	@Field(6) 
	public Pointer<Byte > lcopy_format() {
		return this.io.getPointerField(this, 6);
	}
	/** C type : const gchar* */
	@Field(6) 
	public GTypeValueTable lcopy_format(Pointer<Byte > lcopy_format) {
		this.io.setPointerField(this, 6, lcopy_format);
		return this;
	}
	/** C type : lcopy_value_callback* */
	@Field(7) 
	public Pointer<GTypeValueTable.lcopy_value_callback > lcopy_value() {
		return this.io.getPointerField(this, 7);
	}
	/** C type : lcopy_value_callback* */
	@Field(7) 
	public GTypeValueTable lcopy_value(Pointer<GTypeValueTable.lcopy_value_callback > lcopy_value) {
		this.io.setPointerField(this, 7, lcopy_value);
		return this;
	}
	/** <i>native declaration : glib-2.0/gobject/gtype.h:450</i> */
	public static abstract class value_init_callback extends Callback<value_init_callback > {
		public final void apply(Pointer<GValue > value) {
			apply(Pointer.getPeer(value));
		}
		public abstract void apply(@Ptr long value);
	};
	/** <i>native declaration : glib-2.0/gobject/gtype.h:451</i> */
	public static abstract class value_free_callback extends Callback<value_free_callback > {
		public final void apply(Pointer<GValue > value) {
			apply(Pointer.getPeer(value));
		}
		public abstract void apply(@Ptr long value);
	};
	/** <i>native declaration : glib-2.0/gobject/gtype.h:452</i> */
	public static abstract class value_copy_callback extends Callback<value_copy_callback > {
		public final void apply(Pointer<GValue > src_value, Pointer<GValue > dest_value) {
			apply(Pointer.getPeer(src_value), Pointer.getPeer(dest_value));
		}
		public abstract void apply(@Ptr long src_value, @Ptr long dest_value);
	};
	/** <i>native declaration : glib-2.0/gobject/gtype.h:453</i> */
	public static abstract class value_peek_pointer_callback extends Callback<value_peek_pointer_callback > {
		public final gpointer apply(Pointer<GValue > value) {
			return apply(Pointer.getPeer(value));
		}
		public abstract gpointer apply(@Ptr long value);
	};
	/** <i>native declaration : glib-2.0/gobject/gtype.h:454</i> */
	public static abstract class collect_value_callback extends Callback<collect_value_callback > {
		public final Pointer<Byte > apply(Pointer<GValue > value, int n_collect_values, Pointer<GTypeCValue > collect_values, int collect_flags) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(value), n_collect_values, Pointer.getPeer(collect_values), collect_flags), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long value, int n_collect_values, @Ptr long collect_values, int collect_flags);
	};
	/** <i>native declaration : glib-2.0/gobject/gtype.h:455</i> */
	public static abstract class lcopy_value_callback extends Callback<lcopy_value_callback > {
		public final Pointer<Byte > apply(Pointer<GValue > value, int n_collect_values, Pointer<GTypeCValue > collect_values, int collect_flags) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(value), n_collect_values, Pointer.getPeer(collect_values), collect_flags), Byte.class);
		}
		@Ptr 
		public abstract long apply(@Ptr long value, int n_collect_values, @Ptr long collect_values, int collect_flags);
	};
	public GTypeValueTable() {
		super();
	}
	public GTypeValueTable(Pointer pointer) {
		super(pointer);
	}
}
