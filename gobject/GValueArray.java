package gobject;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * GValueArray:<br>
 * @n_values: number of values contained in the array<br>
 * @values: array of values<br>
 * <br>
 * A #GValueArray contains an array of #GValue elements.<br>
 * <i>native declaration : glib-2.0/gobject/gvaluearray.h:15</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GObject") 
public class GValueArray extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : guint */
	@Field(0) 
	public int n_values() {
		return this.io.getIntField(this, 0);
	}
	/** C type : guint */
	@Field(0) 
	public GValueArray n_values(int n_values) {
		this.io.setIntField(this, 0, n_values);
		return this;
	}
	/** C type : GValue* */
	@Field(1) 
	public Pointer<GValue > values() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : GValue* */
	@Field(1) 
	public GValueArray values(Pointer<GValue > values) {
		this.io.setPointerField(this, 1, values);
		return this;
	}
	/**
	 * < private ><br>
	 * C type : guint
	 */
	@Field(2) 
	public int n_prealloced() {
		return this.io.getIntField(this, 2);
	}
	/**
	 * < private ><br>
	 * C type : guint
	 */
	@Field(2) 
	public GValueArray n_prealloced(int n_prealloced) {
		this.io.setIntField(this, 2, n_prealloced);
		return this;
	}
	public GValueArray() {
		super();
	}
	public GValueArray(Pointer pointer) {
		super(pointer);
	}
}
