package gobject;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * GParameter:<br>
 * @name: the parameter name<br>
 * @value: the parameter value<br>
 * <br>
 * The <structname>GParameter</structname> struct is an auxiliary structure used<br>
 * to hand parameter name/value pairs to g_object_newv().<br>
 * auxiliary structure for _setv() variants<br>
 * <i>native declaration : glib-2.0/gobject/gparam.h:119</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GObject") 
public class GParameter extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : const gchar* */
	@Field(0) 
	public Pointer<Byte > name() {
		return this.io.getPointerField(this, 0);
	}
	/** C type : const gchar* */
	@Field(0) 
	public GParameter name(Pointer<Byte > name) {
		this.io.setPointerField(this, 0, name);
		return this;
	}
	/** C type : GValue */
	@Field(1) 
	public GValue value() {
		return this.io.getNativeObjectField(this, 1);
	}
	/** C type : GValue */
	@Field(1) 
	public GParameter value(GValue value) {
		this.io.setNativeObjectField(this, 1, value);
		return this;
	}
	public GParameter() {
		super();
	}
	public GParameter(Pointer pointer) {
		super(pointer);
	}
}
