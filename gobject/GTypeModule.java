package gobject;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * GTypeModule:<br>
 * @name: the name of the module<br>
 * <br>
 * The members of the <structname>GTypeModule</structname> structure should not <br>
 * be accessed directly, except for the @name field.<br>
 * <i>native declaration : glib-2.0/gobject/gtypemodule.h:17</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GObject") 
public class GTypeModule extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : GObject */
	@Field(0) 
	public GObject parent_instance() {
		return this.io.getNativeObjectField(this, 0);
	}
	/** C type : GObject */
	@Field(0) 
	public GTypeModule parent_instance(GObject parent_instance) {
		this.io.setNativeObjectField(this, 0, parent_instance);
		return this;
	}
	/** C type : guint */
	@Field(1) 
	public int use_count() {
		return this.io.getIntField(this, 1);
	}
	/** C type : guint */
	@Field(1) 
	public GTypeModule use_count(int use_count) {
		this.io.setIntField(this, 1, use_count);
		return this;
	}
	/**
	 * Failed to convert value type_infos of type GSList*<br>
	 * C type : GSList*
	 */
	/**
	 * Failed to convert value interface_infos of type GSList*<br>
	 * C type : GSList*
	 */
	/**
	 * < public ><br>
	 * C type : gchar*
	 */
	@Field(4) 
	public Pointer<Byte > name() {
		return this.io.getPointerField(this, 4);
	}
	/**
	 * < public ><br>
	 * C type : gchar*
	 */
	@Field(4) 
	public GTypeModule name(Pointer<Byte > name) {
		this.io.setPointerField(this, 4, name);
		return this;
	}
	public GTypeModule() {
		super();
	}
	public GTypeModule(Pointer pointer) {
		super(pointer);
	}
}
