package gobject;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.TypedPointer;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.cpp.CPPRuntime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>GObject</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GObject") 
@Runtime(CPPRuntime.class) 
public class GObjectLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:74</i>
	 */
	public enum GTypeDebugFlags implements IntValuedEnum<GTypeDebugFlags > {
		G_TYPE_DEBUG_NONE(0),
		G_TYPE_DEBUG_OBJECTS(1 << 0),
		G_TYPE_DEBUG_SIGNALS(1 << 1),
		G_TYPE_DEBUG_MASK(0x03);
		GTypeDebugFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTypeDebugFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTypeDebugFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:355</i>
	 */
	public enum GTypeFundamentalFlags implements IntValuedEnum<GTypeFundamentalFlags > {
		G_TYPE_FLAG_CLASSED((1 << 0)),
		G_TYPE_FLAG_INSTANTIATABLE((1 << 1)),
		G_TYPE_FLAG_DERIVABLE((1 << 2)),
		G_TYPE_FLAG_DEEP_DERIVABLE((1 << 3));
		GTypeFundamentalFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTypeFundamentalFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTypeFundamentalFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:369</i>
	 */
	public enum GTypeFlags implements IntValuedEnum<GTypeFlags > {
		G_TYPE_FLAG_ABSTRACT((1 << 4)),
		G_TYPE_FLAG_VALUE_ABSTRACT((1 << 5));
		GTypeFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GTypeFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GTypeFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:42</i>
	 */
	public enum GParamFlags implements IntValuedEnum<GParamFlags > {
		G_PARAM_READABLE(1 << 0),
		G_PARAM_WRITABLE(1 << 1),
		G_PARAM_CONSTRUCT(1 << 2),
		G_PARAM_CONSTRUCT_ONLY(1 << 3),
		G_PARAM_LAX_VALIDATION(1 << 4),
		G_PARAM_STATIC_NAME(1 << 5),
		G_PARAM_PRIVATE(1 << 5),
		G_PARAM_STATIC_NICK(1 << 6),
		G_PARAM_STATIC_BLURB(1 << 7),
		/** User defined flags go up to 30 */
		G_PARAM_DEPRECATED(1 << 31);
		GParamFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GParamFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GParamFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:98</i>
	 */
	public enum GSignalFlags implements IntValuedEnum<GSignalFlags > {
		G_SIGNAL_RUN_FIRST(1 << 0),
		G_SIGNAL_RUN_LAST(1 << 1),
		G_SIGNAL_RUN_CLEANUP(1 << 2),
		G_SIGNAL_NO_RECURSE(1 << 3),
		G_SIGNAL_DETAILED(1 << 4),
		G_SIGNAL_ACTION(1 << 5),
		G_SIGNAL_NO_HOOKS(1 << 6),
		G_SIGNAL_MUST_COLLECT(1 << 7),
		G_SIGNAL_DEPRECATED(1 << 8);
		GSignalFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GSignalFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GSignalFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:112</i>
	 */
	public enum GConnectFlags implements IntValuedEnum<GConnectFlags > {
		G_CONNECT_AFTER(1 << 0),
		G_CONNECT_SWAPPED(1 << 1);
		GConnectFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GConnectFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GConnectFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:133</i>
	 */
	public enum GSignalMatchType implements IntValuedEnum<GSignalMatchType > {
		G_SIGNAL_MATCH_ID(1 << 0),
		G_SIGNAL_MATCH_DETAIL(1 << 1),
		G_SIGNAL_MATCH_CLOSURE(1 << 2),
		G_SIGNAL_MATCH_FUNC(1 << 3),
		G_SIGNAL_MATCH_DATA(1 << 4),
		G_SIGNAL_MATCH_UNBLOCKED(1 << 5);
		GSignalMatchType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GSignalMatchType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GSignalMatchType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : glib-2.0/gobject/gbinding.h:50</i>
	 */
	public enum GBindingFlags implements IntValuedEnum<GBindingFlags > {
		G_BINDING_DEFAULT(0),
		G_BINDING_BIDIRECTIONAL(1 << 0),
		G_BINDING_SYNC_CREATE(1 << 1),
		G_BINDING_INVERT_BOOLEAN(1 << 2);
		GBindingFlags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GBindingFlags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<GBindingFlags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public static final char G_VALUE_COLLECT_INT = 'i';
	public static final char G_VALUE_COLLECT_LONG = 'l';
	public static final char G_VALUE_COLLECT_INT64 = 'q';
	public static final char G_VALUE_COLLECT_DOUBLE = 'd';
	public static final char G_VALUE_COLLECT_POINTER = 'p';
	/** <i>native declaration : glib-2.0/gobject/gtype.h</i> */
	public static final int G_TYPE_RESERVED_GLIB_LAST = (int)(31);
	/** <i>native declaration : glib-2.0/gobject/gtype.h</i> */
	public static final int G_TYPE_RESERVED_USER_FIRST = (int)(49);
	/** <i>native declaration : glib-2.0/gobject/gtype.h</i> */
	public static final int G_TYPE_FUNDAMENTAL_MAX = (int)(255 << (2));
	/** <i>native declaration : glib-2.0/gobject/gtype.h</i> */
	public static final int G_TYPE_RESERVED_BSE_FIRST = (int)(32);
	/** <i>native declaration : glib-2.0/gobject/gsignal.h</i> */
	public static final int G_SIGNAL_MATCH_MASK = (int)0x3f;
	/** <i>native declaration : glib-2.0/gobject/gvalue.h</i> */
	public static final int G_VALUE_NOCOPY_CONTENTS = (int)(1 << 27);
	/** <i>native declaration : glib-2.0/gobject/gtype.h</i> */
	public static final int G_TYPE_RESERVED_GLIB_FIRST = (int)(22);
	/** <i>native declaration : glib-2.0/gobject/gsignal.h</i> */
	public static final int G_SIGNAL_FLAGS_MASK = (int)0x1ff;
	/** <i>native declaration : glib-2.0/gobject/gtype.h</i> */
	public static final int G_TYPE_RESERVED_BSE_LAST = (int)(48);
	/** <i>native declaration : glib-2.0/gobject/gvaluecollector.h</i> */
	public static final int G_VALUE_COLLECT_FORMAT_MAX_LENGTH = (int)(8);
	/** <i>native declaration : glib-2.0/gobject/gparam.h</i> */
	public static final int G_PARAM_MASK = (int)(0x000000ff);
	/**
	 * define<br>
	 * Conversion Error : { 0, { { 0 } } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : glib-2.0/gobject/gvalue.h:0</i><br>
	 * { 0, { { 0 } } }
	 */
	/** <i>native declaration : glib-2.0/gobject/gtype.h</i> */
	public static final int G_TYPE_FUNDAMENTAL_SHIFT = (int)(2);
	/** <i>native declaration : glib-2.0/gobject/gparam.h</i> */
	public static final int G_PARAM_USER_SHIFT = (int)(8);
	/** <i>native declaration : glib-2.0/gobject/gtype.h:145</i> */
	public static abstract class GBaseInitFunc extends Callback<GBaseInitFunc > {
		public abstract void apply(GObjectLibrary.gpointer g_class);
	};
	/** <i>native declaration : glib-2.0/gobject/gtype.h:156</i> */
	public static abstract class GBaseFinalizeFunc extends Callback<GBaseFinalizeFunc > {
		public abstract void apply(GObjectLibrary.gpointer g_class);
	};
	/** <i>native declaration : glib-2.0/gobject/gtype.h:261</i> */
	public static abstract class GClassInitFunc extends Callback<GClassInitFunc > {
		public abstract void apply(GObjectLibrary.gpointer g_class, GObjectLibrary.gpointer class_data);
	};
	/** <i>native declaration : glib-2.0/gobject/gtype.h:275</i> */
	public static abstract class GClassFinalizeFunc extends Callback<GClassFinalizeFunc > {
		public abstract void apply(GObjectLibrary.gpointer g_class, GObjectLibrary.gpointer class_data);
	};
	/** <i>native declaration : glib-2.0/gobject/gtype.h:289</i> */
	public static abstract class GInstanceInitFunc extends Callback<GInstanceInitFunc > {
		public final void apply(Pointer<GTypeInstance > instance, GObjectLibrary.gpointer g_class) {
			apply(Pointer.getPeer(instance), g_class);
		}
		public abstract void apply(@Ptr long instance, GObjectLibrary.gpointer g_class);
	};
	/** <i>native declaration : glib-2.0/gobject/gtype.h:299</i> */
	public static abstract class GInterfaceInitFunc extends Callback<GInterfaceInitFunc > {
		public abstract void apply(GObjectLibrary.gpointer g_iface, GObjectLibrary.gpointer iface_data);
	};
	/** <i>native declaration : glib-2.0/gobject/gtype.h:309</i> */
	public static abstract class GInterfaceFinalizeFunc extends Callback<GInterfaceFinalizeFunc > {
		public abstract void apply(GObjectLibrary.gpointer g_iface, GObjectLibrary.gpointer iface_data);
	};
	/**
	 * GTypeClassCacheFunc:<br>
	 * @cache_data: data that was given to the g_type_add_class_cache_func() call<br>
	 * @g_class: The #GTypeClass structure which is unreferenced<br>
	 * <br>
	 * A callback function which is called when the reference count of a class <br>
	 * drops to zero. It may use g_type_class_ref() to prevent the class from<br>
	 * being freed. You should not call g_type_class_unref() from a <br>
	 * #GTypeClassCacheFunc function to prevent infinite recursion, use <br>
	 * g_type_class_unref_uncached() instead.<br>
	 * <br>
	 * The functions have to check the class id passed in to figure <br>
	 * whether they actually want to cache the class of this type, since all<br>
	 * classes are routed through the same #GTypeClassCacheFunc chain.<br>
	 * <br>
	 * Returns: %TRUE to stop further #GTypeClassCacheFunc<!-- -->s from being <br>
	 *  called, %FALSE to continue.<br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:328</i>
	 */
	public static abstract class gboolean extends Callback<gboolean > {
		public final gobject.GTypeModuleClass.gboolean_callback apply(Pointer<? > GTypeClassCacheFunc) {
			return apply(Pointer.getPeer(GTypeClassCacheFunc));
		}
		public abstract gobject.GTypeModuleClass.gboolean_callback apply(@Ptr long GTypeClassCacheFunc);
	};
	/** <i>native declaration : glib-2.0/gobject/gtype.h:339</i> */
	public static abstract class GTypeInterfaceCheckFunc extends Callback<GTypeInterfaceCheckFunc > {
		public abstract void apply(GObjectLibrary.gpointer check_data, GObjectLibrary.gpointer g_iface);
	};
	/** <i>native declaration : glib-2.0/gobject/gtype.h:547</i> */
	public static abstract class gboolean_callback extends Callback<gboolean_callback > {
		public final int apply(GObjectLibrary.gpointer cache_data, Pointer<GTypeClass > g_class) {
			return apply(cache_data, Pointer.getPeer(g_class));
		}
		public abstract int apply(GObjectLibrary.gpointer cache_data, @Ptr long g_class);
	};
	/** <i>native declaration : glib-2.0/gobject/gvalue.h:9</i> */
	public static abstract class GValueTransform extends Callback<GValueTransform > {
		public final void apply(Pointer<GValue > src_value, Pointer<GValue > dest_value) {
			apply(Pointer.getPeer(src_value), Pointer.getPeer(dest_value));
		}
		public abstract void apply(@Ptr long src_value, @Ptr long dest_value);
	};
	/** <i>native declaration : glib-2.0/gobject/gclosure.h:13</i> */
	public static abstract class GCallback extends Callback<GCallback > {
		public abstract void apply();
	};
	/** <i>native declaration : glib-2.0/gobject/gclosure.h:22</i> */
	public static abstract class GClosureNotify extends Callback<GClosureNotify > {
		public final void apply(GObjectLibrary.gpointer data, Pointer<GClosure > closure) {
			apply(data, Pointer.getPeer(closure));
		}
		public abstract void apply(GObjectLibrary.gpointer data, @Ptr long closure);
	};
	/** <i>native declaration : glib-2.0/gobject/gclosure.h:41</i> */
	public static abstract class GClosureMarshal extends Callback<GClosureMarshal > {
		public final void apply(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
			apply(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
		}
		public abstract void apply(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	};
	/** <i>native declaration : glib-2.0/gobject/gclosure.h:42</i> */
	public static abstract class GVaClosureMarshal extends Callback<GVaClosureMarshal > {
		public final void apply(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
			apply(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
		}
		public abstract void apply(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	};
	/**
	 * GSignalEmissionHook:<br>
	 * @ihint: Signal invocation hint, see #GSignalInvocationHint.<br>
	 * @n_param_values: the number of parameters to the function, including<br>
	 *  the instance on which the signal was emitted.<br>
	 * @param_values: (array length=n_param_values): the instance on which<br>
	 *  the signal was emitted, followed by the parameters of the emission.<br>
	 * @data: user data associated with the hook.<br>
	 * <br>
	 * A simple function pointer to get invoked when the signal is emitted. This <br>
	 * allows you to tie a hook to the signal type, so that it will trap all <br>
	 * emissions of that signal, from any object.<br>
	 * <br>
	 * You may not attach these to signals created with the #G_SIGNAL_NO_HOOKS flag.<br>
	 * <br>
	 * Returns: whether it wants to stay connected. If it returns %FALSE, the signal <br>
	 *  hook is disconnected (and destroyed).<br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:40</i>
	 */
	public static abstract class gboolean2 extends Callback<gboolean2 > {
		public final gobject.GTypeModuleClass.gboolean_callback apply(Pointer<? > GSignalEmissionHook) {
			return apply(Pointer.getPeer(GSignalEmissionHook));
		}
		public abstract gobject.GTypeModuleClass.gboolean_callback apply(@Ptr long GSignalEmissionHook);
	};
	/** <i>native declaration : glib-2.0/gobject/gsignal.h:60</i> */
	public static abstract class GSignalAccumulator extends Callback<GSignalAccumulator > {
		public final GObjectLibrary.gboolean apply(Pointer<GSignalInvocationHint > ihint, Pointer<GValue > return_accu, Pointer<GValue > handler_return, GObjectLibrary.gpointer data) {
			return apply(Pointer.getPeer(ihint), Pointer.getPeer(return_accu), Pointer.getPeer(handler_return), data);
		}
		public abstract GObjectLibrary.gboolean apply(@Ptr long ihint, @Ptr long return_accu, @Ptr long handler_return, GObjectLibrary.gpointer data);
	};
	/** <i>native declaration : glib-2.0/gobject/gsignal.h:272</i> */
	public static abstract class gboolean_callback2 extends Callback<gboolean_callback2 > {
		public final int apply(Pointer<GSignalInvocationHint > ihint, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer data) {
			return apply(Pointer.getPeer(ihint), n_param_values, Pointer.getPeer(param_values), data);
		}
		public abstract int apply(@Ptr long ihint, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer data);
	};
	/**
	 * GBoxedCopyFunc:<br>
	 * @boxed: The boxed structure to be copied.<br>
	 * * This function is provided by the user and should produce a copy<br>
	 * of the passed in boxed structure.<br>
	 * * Returns: The newly created copy of the boxed structure.<br>
	 * <i>native declaration : glib-2.0/gobject/gboxed.h:8</i>
	 */
	public static abstract class gpointer extends Callback<gpointer > {
		public final GObjectLibrary.gpointer_callback apply(Pointer<? > GBoxedCopyFunc) {
			return apply(Pointer.getPeer(GBoxedCopyFunc));
		}
		public abstract GObjectLibrary.gpointer_callback apply(@Ptr long GBoxedCopyFunc);
	};
	/** <i>native declaration : glib-2.0/gobject/gboxed.h:15</i> */
	public static abstract class GBoxedFreeFunc extends Callback<GBoxedFreeFunc > {
		public abstract void apply(GObjectLibrary.gpointer boxed);
	};
	/** <i>native declaration : glib-2.0/gobject/gboxed.h:44</i> */
	public static abstract class gpointer_callback extends Callback<gpointer_callback > {
		public abstract int apply(GObjectLibrary.gpointer boxed);
	};
	/** <i>native declaration : glib-2.0/gobject/gobject.h:17</i> */
	public static abstract class GObjectGetPropertyFunc extends Callback<GObjectGetPropertyFunc > {
		public final void apply(Pointer<GObject > object, int property_id, Pointer<GValue > value, Pointer<GParamSpec > pspec) {
			apply(Pointer.getPeer(object), property_id, Pointer.getPeer(value), Pointer.getPeer(pspec));
		}
		public abstract void apply(@Ptr long object, int property_id, @Ptr long value, @Ptr long pspec);
	};
	/** <i>native declaration : glib-2.0/gobject/gobject.h:28</i> */
	public static abstract class GObjectSetPropertyFunc extends Callback<GObjectSetPropertyFunc > {
		public final void apply(Pointer<GObject > object, int property_id, Pointer<GValue > value, Pointer<GParamSpec > pspec) {
			apply(Pointer.getPeer(object), property_id, Pointer.getPeer(value), Pointer.getPeer(pspec));
		}
		public abstract void apply(@Ptr long object, int property_id, @Ptr long value, @Ptr long pspec);
	};
	/** <i>native declaration : glib-2.0/gobject/gobject.h:35</i> */
	public static abstract class GObjectFinalizeFunc extends Callback<GObjectFinalizeFunc > {
		public final void apply(Pointer<GObject > object) {
			apply(Pointer.getPeer(object));
		}
		public abstract void apply(@Ptr long object);
	};
	/** <i>native declaration : glib-2.0/gobject/gobject.h:46</i> */
	public static abstract class GWeakNotify extends Callback<GWeakNotify > {
		public final void apply(GObjectLibrary.gpointer data, Pointer<GObject > where_the_object_was) {
			apply(data, Pointer.getPeer(where_the_object_was));
		}
		public abstract void apply(GObjectLibrary.gpointer data, @Ptr long where_the_object_was);
	};
	/** <i>native declaration : glib-2.0/gobject/gobject.h:246</i> */
	public static abstract class GToggleNotify extends Callback<GToggleNotify > {
		public final void apply(GObjectLibrary.gpointer data, Pointer<GObject > object, GObjectLibrary.gboolean is_last_ref) {
			apply(data, Pointer.getPeer(object), is_last_ref);
		}
		public abstract void apply(GObjectLibrary.gpointer data, @Ptr long object, GObjectLibrary.gboolean is_last_ref);
	};
	/**
	 * GBindingTransformFunc:<br>
	 * @binding: a #GBinding<br>
	 * @from_value: the #GValue containing the value to transform<br>
	 * @to_value: the #GValue in which to store the transformed value<br>
	 * @user_data: data passed to the transform function<br>
	 * * A function to be called to transform @from_value to @to_value. If<br>
	 * this is the @transform_to function of a binding, then @from_value<br>
	 * is the @source_property on the @source object, and @to_value is the<br>
	 * @target_property on the @target object. If this is the<br>
	 * @transform_from function of a %G_BINDING_BIDIRECTIONAL binding,<br>
	 * then those roles are reversed.<br>
	 * * Return value: %TRUE if the transformation was successful, and %FALSE<br>
	 *   otherwise<br>
	 * * Since: 2.26<br>
	 * <i>native declaration : glib-2.0/gobject/gbinding.h:24</i>
	 */
	public static abstract class gboolean3 extends Callback<gboolean3 > {
		public final gobject.GTypeModuleClass.gboolean_callback apply(Pointer<? > GBindingTransformFunc) {
			return apply(Pointer.getPeer(GBindingTransformFunc));
		}
		public abstract gobject.GTypeModuleClass.gboolean_callback apply(@Ptr long GBindingTransformFunc);
	};
	/** <i>native declaration : glib-2.0/gobject/gbinding.h:73</i> */
	public static abstract class gboolean_callback3 extends Callback<gboolean_callback3 > {
		public final int apply(Pointer<GObjectLibrary.GBinding > binding, Pointer<GValue > from_value, Pointer<GValue > to_value, GObjectLibrary.gpointer user_data) {
			return apply(Pointer.getPeer(binding), Pointer.getPeer(from_value), Pointer.getPeer(to_value), user_data);
		}
		public abstract int apply(@Ptr long binding, @Ptr long from_value, @Ptr long to_value, GObjectLibrary.gpointer user_data);
	};
	/** <i>native declaration : glib-2.0/gobject/gtypeplugin.h:10</i> */
	public static abstract class GTypePluginUse extends Callback<GTypePluginUse > {
		public final void apply(Pointer<GObjectLibrary.GTypePlugin > plugin) {
			apply(Pointer.getPeer(plugin));
		}
		public abstract void apply(@Ptr long plugin);
	};
	/** <i>native declaration : glib-2.0/gobject/gtypeplugin.h:17</i> */
	public static abstract class GTypePluginUnuse extends Callback<GTypePluginUnuse > {
		public final void apply(Pointer<GObjectLibrary.GTypePlugin > plugin) {
			apply(Pointer.getPeer(plugin));
		}
		public abstract void apply(@Ptr long plugin);
	};
	/** <i>native declaration : glib-2.0/gobject/gtypeplugin.h:27</i> */
	public static abstract class GTypePluginCompleteTypeInfo extends Callback<GTypePluginCompleteTypeInfo > {
		public final void apply(Pointer<GObjectLibrary.GTypePlugin > plugin, @org.bridj.ann.CLong long g_type, Pointer<GTypeInfo > info, Pointer<GTypeValueTable > value_table) {
			apply(Pointer.getPeer(plugin), g_type, Pointer.getPeer(info), Pointer.getPeer(value_table));
		}
		public abstract void apply(@Ptr long plugin, @org.bridj.ann.CLong long g_type, @Ptr long info, @Ptr long value_table);
	};
	/** <i>native declaration : glib-2.0/gobject/gtypeplugin.h:38</i> */
	public static abstract class GTypePluginCompleteInterfaceInfo extends Callback<GTypePluginCompleteInterfaceInfo > {
		public final void apply(Pointer<GObjectLibrary.GTypePlugin > plugin, @org.bridj.ann.CLong long instance_type, @org.bridj.ann.CLong long interface_type, Pointer<GInterfaceInfo > info) {
			apply(Pointer.getPeer(plugin), instance_type, interface_type, Pointer.getPeer(info));
		}
		public abstract void apply(@Ptr long plugin, @org.bridj.ann.CLong long instance_type, @org.bridj.ann.CLong long interface_type, @Ptr long info);
	};
	/**
	 * --- prototypes ---<br>
	 * Original signature : <code>void g_type_init()</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:79</i>
	 */
	public static native void g_type_init();
	/**
	 * Original signature : <code>void g_type_init_with_debug_flags(GTypeDebugFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:81</i>
	 */
	public static void g_type_init_with_debug_flags(IntValuedEnum<GObjectLibrary.GTypeDebugFlags > debug_flags) {
		g_type_init_with_debug_flags((int)debug_flags.value());
	}
	protected native static void g_type_init_with_debug_flags(int debug_flags);
	/**
	 * Original signature : <code>gchar* g_type_name(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:83</i>
	 */
	public static Pointer<Byte > g_type_name(@org.bridj.ann.CLong long type) {
		return Pointer.pointerToAddress(g_type_name$2(type), Byte.class);
	}
	@Ptr 
	protected native static long g_type_name$2(@org.bridj.ann.CLong long type);
	/**
	 * Original signature : <code>GQuark g_type_qname(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:85</i>
	 */
	public static native int g_type_qname(@org.bridj.ann.CLong long type);
	/**
	 * Original signature : <code>GType g_type_from_name(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:87</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_type_from_name(Pointer<Byte > name) {
		return g_type_from_name(Pointer.getPeer(name));
	}
	@org.bridj.ann.CLong 
	protected native static long g_type_from_name(@Ptr long name);
	/**
	 * Original signature : <code>GType g_type_parent(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:89</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_type_parent(@org.bridj.ann.CLong long type);
	/**
	 * Original signature : <code>guint g_type_depth(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:91</i>
	 */
	public static native int g_type_depth(@org.bridj.ann.CLong long type);
	/**
	 * Original signature : <code>GType g_type_next_base(GType, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:93</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_type_next_base(@org.bridj.ann.CLong long leaf_type, @org.bridj.ann.CLong long root_type);
	/**
	 * Original signature : <code>gboolean g_type_is_a(GType, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:95</i>
	 */
	public static native GObjectLibrary.gboolean g_type_is_a(@org.bridj.ann.CLong long type, @org.bridj.ann.CLong long is_a_type);
	/**
	 * Original signature : <code>gpointer g_type_class_ref(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:97</i>
	 */
	public static native GObjectLibrary.gpointer g_type_class_ref(@org.bridj.ann.CLong long type);
	/**
	 * Original signature : <code>gpointer g_type_class_peek(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:99</i>
	 */
	public static native GObjectLibrary.gpointer g_type_class_peek(@org.bridj.ann.CLong long type);
	/**
	 * Original signature : <code>gpointer g_type_class_peek_static(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:101</i>
	 */
	public static native GObjectLibrary.gpointer g_type_class_peek_static(@org.bridj.ann.CLong long type);
	/**
	 * Original signature : <code>void g_type_class_unref(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:103</i>
	 */
	public static native void g_type_class_unref(GObjectLibrary.gpointer g_class);
	/**
	 * Original signature : <code>gpointer g_type_class_peek_parent(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:105</i>
	 */
	public static native GObjectLibrary.gpointer g_type_class_peek_parent(GObjectLibrary.gpointer g_class);
	/**
	 * Original signature : <code>gpointer g_type_interface_peek(gpointer, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:107</i>
	 */
	public static native GObjectLibrary.gpointer g_type_interface_peek(GObjectLibrary.gpointer instance_class, @org.bridj.ann.CLong long iface_type);
	/**
	 * Original signature : <code>gpointer g_type_interface_peek_parent(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:109</i>
	 */
	public static native GObjectLibrary.gpointer g_type_interface_peek_parent(GObjectLibrary.gpointer g_iface);
	/**
	 * Original signature : <code>gpointer g_type_default_interface_ref(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:111</i>
	 */
	public static native GObjectLibrary.gpointer g_type_default_interface_ref(@org.bridj.ann.CLong long g_type);
	/**
	 * Original signature : <code>gpointer g_type_default_interface_peek(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:113</i>
	 */
	public static native GObjectLibrary.gpointer g_type_default_interface_peek(@org.bridj.ann.CLong long g_type);
	/**
	 * Original signature : <code>void g_type_default_interface_unref(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:115</i>
	 */
	public static native void g_type_default_interface_unref(GObjectLibrary.gpointer g_iface);
	/**
	 * g_free() the returned arrays<br>
	 * Original signature : <code>GType* g_type_children(GType, guint*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:120</i>
	 */
	public static Pointer<org.bridj.CLong > g_type_children(@org.bridj.ann.CLong long type, Pointer<Integer > n_children) {
		return Pointer.pointerToAddress(g_type_children(type, Pointer.getPeer(n_children)), org.bridj.CLong.class);
	}
	@Ptr 
	protected native static long g_type_children(@org.bridj.ann.CLong long type, @Ptr long n_children);
	/**
	 * Original signature : <code>GType* g_type_interfaces(GType, guint*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:122</i>
	 */
	public static Pointer<org.bridj.CLong > g_type_interfaces(@org.bridj.ann.CLong long type, Pointer<Integer > n_interfaces) {
		return Pointer.pointerToAddress(g_type_interfaces(type, Pointer.getPeer(n_interfaces)), org.bridj.CLong.class);
	}
	@Ptr 
	protected native static long g_type_interfaces(@org.bridj.ann.CLong long type, @Ptr long n_interfaces);
	/**
	 * per-type _static_ data<br>
	 * Original signature : <code>void g_type_set_qdata(GType, GQuark, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:127</i>
	 */
	public static native void g_type_set_qdata(@org.bridj.ann.CLong long type, int quark, GObjectLibrary.gpointer data);
	/**
	 * Original signature : <code>gpointer g_type_get_qdata(GType, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:129</i>
	 */
	public static native GObjectLibrary.gpointer g_type_get_qdata(@org.bridj.ann.CLong long type, int quark);
	/**
	 * Original signature : <code>void g_type_query(GType, GTypeQuery*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:131</i>
	 */
	public static void g_type_query(@org.bridj.ann.CLong long type, Pointer<GTypeQuery > query) {
		g_type_query(type, Pointer.getPeer(query));
	}
	protected native static void g_type_query(@org.bridj.ann.CLong long type, @Ptr long query);
	/**
	 * Original signature : <code>GType g_type_register_static(GType, const gchar*, const GTypeInfo*, GTypeFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:458</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_type_register_static(@org.bridj.ann.CLong long parent_type, Pointer<Byte > type_name, Pointer<GTypeInfo > info, IntValuedEnum<GObjectLibrary.GTypeFlags > flags) {
		return g_type_register_static(parent_type, Pointer.getPeer(type_name), Pointer.getPeer(info), (int)flags.value());
	}
	@org.bridj.ann.CLong 
	protected native static long g_type_register_static(@org.bridj.ann.CLong long parent_type, @Ptr long type_name, @Ptr long info, int flags);
	/**
	 * Original signature : <code>GType g_type_register_static_simple(GType, const gchar*, guint, GClassInitFunc, guint, GInstanceInitFunc, GTypeFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:460</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_type_register_static_simple(@org.bridj.ann.CLong long parent_type, Pointer<Byte > type_name, int class_size, Pointer<GObjectLibrary.GClassInitFunc > class_init, int instance_size, Pointer<GObjectLibrary.GInstanceInitFunc > instance_init, IntValuedEnum<GObjectLibrary.GTypeFlags > flags) {
		return g_type_register_static_simple(parent_type, Pointer.getPeer(type_name), class_size, Pointer.getPeer(class_init), instance_size, Pointer.getPeer(instance_init), (int)flags.value());
	}
	@org.bridj.ann.CLong 
	protected native static long g_type_register_static_simple(@org.bridj.ann.CLong long parent_type, @Ptr long type_name, int class_size, @Ptr long class_init, int instance_size, @Ptr long instance_init, int flags);
	/**
	 * Original signature : <code>GType g_type_register_dynamic(GType, const gchar*, GTypePlugin*, GTypeFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:462</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_type_register_dynamic(@org.bridj.ann.CLong long parent_type, Pointer<Byte > type_name, Pointer<GObjectLibrary.GTypePlugin > plugin, IntValuedEnum<GObjectLibrary.GTypeFlags > flags) {
		return g_type_register_dynamic(parent_type, Pointer.getPeer(type_name), Pointer.getPeer(plugin), (int)flags.value());
	}
	@org.bridj.ann.CLong 
	protected native static long g_type_register_dynamic(@org.bridj.ann.CLong long parent_type, @Ptr long type_name, @Ptr long plugin, int flags);
	/**
	 * Original signature : <code>GType g_type_register_fundamental(GType, const gchar*, const GTypeInfo*, const GTypeFundamentalInfo*, GTypeFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:464</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_type_register_fundamental(@org.bridj.ann.CLong long type_id, Pointer<Byte > type_name, Pointer<GTypeInfo > info, Pointer<GTypeFundamentalInfo > finfo, IntValuedEnum<GObjectLibrary.GTypeFlags > flags) {
		return g_type_register_fundamental(type_id, Pointer.getPeer(type_name), Pointer.getPeer(info), Pointer.getPeer(finfo), (int)flags.value());
	}
	@org.bridj.ann.CLong 
	protected native static long g_type_register_fundamental(@org.bridj.ann.CLong long type_id, @Ptr long type_name, @Ptr long info, @Ptr long finfo, int flags);
	/**
	 * Original signature : <code>void g_type_add_interface_static(GType, GType, const GInterfaceInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:466</i>
	 */
	public static void g_type_add_interface_static(@org.bridj.ann.CLong long instance_type, @org.bridj.ann.CLong long interface_type, Pointer<GInterfaceInfo > info) {
		g_type_add_interface_static(instance_type, interface_type, Pointer.getPeer(info));
	}
	protected native static void g_type_add_interface_static(@org.bridj.ann.CLong long instance_type, @org.bridj.ann.CLong long interface_type, @Ptr long info);
	/**
	 * Original signature : <code>void g_type_add_interface_dynamic(GType, GType, GTypePlugin*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:468</i>
	 */
	public static void g_type_add_interface_dynamic(@org.bridj.ann.CLong long instance_type, @org.bridj.ann.CLong long interface_type, Pointer<GObjectLibrary.GTypePlugin > plugin) {
		g_type_add_interface_dynamic(instance_type, interface_type, Pointer.getPeer(plugin));
	}
	protected native static void g_type_add_interface_dynamic(@org.bridj.ann.CLong long instance_type, @org.bridj.ann.CLong long interface_type, @Ptr long plugin);
	/**
	 * Original signature : <code>void g_type_interface_add_prerequisite(GType, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:470</i>
	 */
	public static native void g_type_interface_add_prerequisite(@org.bridj.ann.CLong long interface_type, @org.bridj.ann.CLong long prerequisite_type);
	/**
	 * Original signature : <code>GType* g_type_interface_prerequisites(GType, guint*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:472</i>
	 */
	public static Pointer<org.bridj.CLong > g_type_interface_prerequisites(@org.bridj.ann.CLong long interface_type, Pointer<Integer > n_prerequisites) {
		return Pointer.pointerToAddress(g_type_interface_prerequisites(interface_type, Pointer.getPeer(n_prerequisites)), org.bridj.CLong.class);
	}
	@Ptr 
	protected native static long g_type_interface_prerequisites(@org.bridj.ann.CLong long interface_type, @Ptr long n_prerequisites);
	/**
	 * Original signature : <code>void g_type_class_add_private(gpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:474</i>
	 */
	public static native void g_type_class_add_private(GObjectLibrary.gpointer g_class, @org.bridj.ann.CLong long private_size);
	/**
	 * Original signature : <code>gint g_type_add_instance_private(GType, gsize)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:476</i>
	 */
	public static native int g_type_add_instance_private(@org.bridj.ann.CLong long class_type, @org.bridj.ann.CLong long private_size);
	/**
	 * Original signature : <code>gpointer g_type_instance_get_private(GTypeInstance*, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:478</i>
	 */
	public static GObjectLibrary.gpointer g_type_instance_get_private(Pointer<GTypeInstance > instance, @org.bridj.ann.CLong long private_type) {
		return g_type_instance_get_private(Pointer.getPeer(instance), private_type);
	}
	protected native static GObjectLibrary.gpointer g_type_instance_get_private(@Ptr long instance, @org.bridj.ann.CLong long private_type);
	/**
	 * Original signature : <code>void g_type_class_adjust_private_offset(gpointer, gint*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:480</i>
	 */
	public static void g_type_class_adjust_private_offset(GObjectLibrary.gpointer g_class, Pointer<Integer > private_size_or_offset) {
		g_type_class_adjust_private_offset(g_class, Pointer.getPeer(private_size_or_offset));
	}
	protected native static void g_type_class_adjust_private_offset(GObjectLibrary.gpointer g_class, @Ptr long private_size_or_offset);
	/**
	 * Original signature : <code>void g_type_add_class_private(GType, gsize)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:482</i>
	 */
	public static native void g_type_add_class_private(@org.bridj.ann.CLong long class_type, @org.bridj.ann.CLong long private_size);
	/**
	 * Original signature : <code>gpointer g_type_class_get_private(GTypeClass*, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:484</i>
	 */
	public static GObjectLibrary.gpointer g_type_class_get_private(Pointer<GTypeClass > klass, @org.bridj.ann.CLong long private_type) {
		return g_type_class_get_private(Pointer.getPeer(klass), private_type);
	}
	protected native static GObjectLibrary.gpointer g_type_class_get_private(@Ptr long klass, @org.bridj.ann.CLong long private_type);
	/**
	 * Original signature : <code>gint g_type_class_get_instance_private_offset(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:486</i>
	 */
	public static native int g_type_class_get_instance_private_offset(GObjectLibrary.gpointer g_class);
	/**
	 * Original signature : <code>void g_type_ensure(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:488</i>
	 */
	public static native void g_type_ensure(@org.bridj.ann.CLong long type);
	/**
	 * Original signature : <code>guint g_type_get_type_registration_serial()</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:490</i>
	 */
	public static native int g_type_get_type_registration_serial();
	/**
	 * --- protected (for fundamental type implementations) ---<br>
	 * Original signature : <code>GTypePlugin* g_type_get_plugin(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:495</i>
	 */
	public static Pointer<GObjectLibrary.GTypePlugin > g_type_get_plugin(@org.bridj.ann.CLong long type) {
		return Pointer.pointerToAddress(g_type_get_plugin$2(type), GObjectLibrary.GTypePlugin.class);
	}
	@Ptr 
	protected native static long g_type_get_plugin$2(@org.bridj.ann.CLong long type);
	/**
	 * Original signature : <code>GTypePlugin* g_type_interface_get_plugin(GType, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:497</i>
	 */
	public static Pointer<GObjectLibrary.GTypePlugin > g_type_interface_get_plugin(@org.bridj.ann.CLong long instance_type, @org.bridj.ann.CLong long interface_type) {
		return Pointer.pointerToAddress(g_type_interface_get_plugin$2(instance_type, interface_type), GObjectLibrary.GTypePlugin.class);
	}
	@Ptr 
	protected native static long g_type_interface_get_plugin$2(@org.bridj.ann.CLong long instance_type, @org.bridj.ann.CLong long interface_type);
	/**
	 * Original signature : <code>GType g_type_fundamental_next()</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:499</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_type_fundamental_next();
	/**
	 * Original signature : <code>GType g_type_fundamental(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:501</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_type_fundamental(@org.bridj.ann.CLong long type_id);
	/**
	 * Original signature : <code>GTypeInstance* g_type_create_instance(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:503</i>
	 */
	public static Pointer<GTypeInstance > g_type_create_instance(@org.bridj.ann.CLong long type) {
		return Pointer.pointerToAddress(g_type_create_instance$2(type), GTypeInstance.class);
	}
	@Ptr 
	protected native static long g_type_create_instance$2(@org.bridj.ann.CLong long type);
	/**
	 * Original signature : <code>void g_type_free_instance(GTypeInstance*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:505</i>
	 */
	public static void g_type_free_instance(Pointer<GTypeInstance > instance) {
		g_type_free_instance(Pointer.getPeer(instance));
	}
	protected native static void g_type_free_instance(@Ptr long instance);
	/**
	 * Original signature : <code>void g_type_add_class_cache_func(gpointer, GTypeClassCacheFunc)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:507</i>
	 */
	public static void g_type_add_class_cache_func(GObjectLibrary.gpointer cache_data, GObjectLibrary.GTypeClassCacheFunc cache_func) {
		g_type_add_class_cache_func(cache_data, Pointer.getPeer(cache_func));
	}
	protected native static void g_type_add_class_cache_func(GObjectLibrary.gpointer cache_data, @Ptr long cache_func);
	/**
	 * Original signature : <code>void g_type_remove_class_cache_func(gpointer, GTypeClassCacheFunc)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:509</i>
	 */
	public static void g_type_remove_class_cache_func(GObjectLibrary.gpointer cache_data, GObjectLibrary.GTypeClassCacheFunc cache_func) {
		g_type_remove_class_cache_func(cache_data, Pointer.getPeer(cache_func));
	}
	protected native static void g_type_remove_class_cache_func(GObjectLibrary.gpointer cache_data, @Ptr long cache_func);
	/**
	 * Original signature : <code>void g_type_class_unref_uncached(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:511</i>
	 */
	public static native void g_type_class_unref_uncached(GObjectLibrary.gpointer g_class);
	/**
	 * Original signature : <code>void g_type_add_interface_check(gpointer, GTypeInterfaceCheckFunc)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:513</i>
	 */
	public static void g_type_add_interface_check(GObjectLibrary.gpointer check_data, Pointer<GObjectLibrary.GTypeInterfaceCheckFunc > check_func) {
		g_type_add_interface_check(check_data, Pointer.getPeer(check_func));
	}
	protected native static void g_type_add_interface_check(GObjectLibrary.gpointer check_data, @Ptr long check_func);
	/**
	 * Original signature : <code>void g_type_remove_interface_check(gpointer, GTypeInterfaceCheckFunc)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:515</i>
	 */
	public static void g_type_remove_interface_check(GObjectLibrary.gpointer check_data, Pointer<GObjectLibrary.GTypeInterfaceCheckFunc > check_func) {
		g_type_remove_interface_check(check_data, Pointer.getPeer(check_func));
	}
	protected native static void g_type_remove_interface_check(GObjectLibrary.gpointer check_data, @Ptr long check_func);
	/**
	 * Original signature : <code>GTypeValueTable* g_type_value_table_peek(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:517</i>
	 */
	public static Pointer<GTypeValueTable > g_type_value_table_peek(@org.bridj.ann.CLong long type) {
		return Pointer.pointerToAddress(g_type_value_table_peek$2(type), GTypeValueTable.class);
	}
	@Ptr 
	protected native static long g_type_value_table_peek$2(@org.bridj.ann.CLong long type);
	/**
	 * < private ><br>
	 * Original signature : <code>gboolean g_type_check_instance(GTypeInstance*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:522</i>
	 */
	public static GObjectLibrary.gboolean g_type_check_instance(Pointer<GTypeInstance > instance) {
		return g_type_check_instance(Pointer.getPeer(instance));
	}
	protected native static GObjectLibrary.gboolean g_type_check_instance(@Ptr long instance);
	/**
	 * Original signature : <code>GTypeInstance* g_type_check_instance_cast(GTypeInstance*, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:524</i>
	 */
	public static Pointer<GTypeInstance > g_type_check_instance_cast(Pointer<GTypeInstance > instance, @org.bridj.ann.CLong long iface_type) {
		return Pointer.pointerToAddress(g_type_check_instance_cast(Pointer.getPeer(instance), iface_type), GTypeInstance.class);
	}
	@Ptr 
	protected native static long g_type_check_instance_cast(@Ptr long instance, @org.bridj.ann.CLong long iface_type);
	/**
	 * Original signature : <code>gboolean g_type_check_instance_is_a(GTypeInstance*, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:526</i>
	 */
	public static GObjectLibrary.gboolean g_type_check_instance_is_a(Pointer<GTypeInstance > instance, @org.bridj.ann.CLong long iface_type) {
		return g_type_check_instance_is_a(Pointer.getPeer(instance), iface_type);
	}
	protected native static GObjectLibrary.gboolean g_type_check_instance_is_a(@Ptr long instance, @org.bridj.ann.CLong long iface_type);
	/**
	 * Original signature : <code>GTypeClass* g_type_check_class_cast(GTypeClass*, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:528</i>
	 */
	public static Pointer<GTypeClass > g_type_check_class_cast(Pointer<GTypeClass > g_class, @org.bridj.ann.CLong long is_a_type) {
		return Pointer.pointerToAddress(g_type_check_class_cast(Pointer.getPeer(g_class), is_a_type), GTypeClass.class);
	}
	@Ptr 
	protected native static long g_type_check_class_cast(@Ptr long g_class, @org.bridj.ann.CLong long is_a_type);
	/**
	 * Original signature : <code>gboolean g_type_check_class_is_a(GTypeClass*, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:530</i>
	 */
	public static GObjectLibrary.gboolean g_type_check_class_is_a(Pointer<GTypeClass > g_class, @org.bridj.ann.CLong long is_a_type) {
		return g_type_check_class_is_a(Pointer.getPeer(g_class), is_a_type);
	}
	protected native static GObjectLibrary.gboolean g_type_check_class_is_a(@Ptr long g_class, @org.bridj.ann.CLong long is_a_type);
	/**
	 * Original signature : <code>gboolean g_type_check_is_value_type(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:532</i>
	 */
	public static native GObjectLibrary.gboolean g_type_check_is_value_type(@org.bridj.ann.CLong long type);
	/**
	 * Original signature : <code>gboolean g_type_check_value(GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:534</i>
	 */
	public static GObjectLibrary.gboolean g_type_check_value(Pointer<GValue > value) {
		return g_type_check_value(Pointer.getPeer(value));
	}
	protected native static GObjectLibrary.gboolean g_type_check_value(@Ptr long value);
	/**
	 * Original signature : <code>gboolean g_type_check_value_holds(GValue*, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:536</i>
	 */
	public static GObjectLibrary.gboolean g_type_check_value_holds(Pointer<GValue > value, @org.bridj.ann.CLong long type) {
		return g_type_check_value_holds(Pointer.getPeer(value), type);
	}
	protected native static GObjectLibrary.gboolean g_type_check_value_holds(@Ptr long value, @org.bridj.ann.CLong long type);
	/**
	 * Original signature : <code>gboolean g_type_test_flags(GType, guint)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:538</i>
	 */
	public static native GObjectLibrary.gboolean g_type_test_flags(@org.bridj.ann.CLong long type, int flags);
	/**
	 * --- debugging functions ---<br>
	 * Original signature : <code>gchar* g_type_name_from_instance(GTypeInstance*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:543</i>
	 */
	public static Pointer<Byte > g_type_name_from_instance(Pointer<GTypeInstance > instance) {
		return Pointer.pointerToAddress(g_type_name_from_instance(Pointer.getPeer(instance)), Byte.class);
	}
	@Ptr 
	protected native static long g_type_name_from_instance(@Ptr long instance);
	/**
	 * Original signature : <code>gchar* g_type_name_from_class(GTypeClass*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtype.h:545</i>
	 */
	public static Pointer<Byte > g_type_name_from_class(Pointer<GTypeClass > g_class) {
		return Pointer.pointerToAddress(g_type_name_from_class(Pointer.getPeer(g_class)), Byte.class);
	}
	@Ptr 
	protected native static long g_type_name_from_class(@Ptr long g_class);
	/**
	 * --- prototypes ---<br>
	 * Original signature : <code>GValue* g_value_init(GValue*, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvalue.h:43</i>
	 */
	public static Pointer<GValue > g_value_init(Pointer<GValue > value, @org.bridj.ann.CLong long g_type) {
		return Pointer.pointerToAddress(g_value_init(Pointer.getPeer(value), g_type), GValue.class);
	}
	@Ptr 
	protected native static long g_value_init(@Ptr long value, @org.bridj.ann.CLong long g_type);
	/**
	 * Original signature : <code>void g_value_copy(const GValue*, GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvalue.h:45</i>
	 */
	public static void g_value_copy(Pointer<GValue > src_value, Pointer<GValue > dest_value) {
		g_value_copy(Pointer.getPeer(src_value), Pointer.getPeer(dest_value));
	}
	protected native static void g_value_copy(@Ptr long src_value, @Ptr long dest_value);
	/**
	 * Original signature : <code>GValue* g_value_reset(GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvalue.h:47</i>
	 */
	public static Pointer<GValue > g_value_reset(Pointer<GValue > value) {
		return Pointer.pointerToAddress(g_value_reset(Pointer.getPeer(value)), GValue.class);
	}
	@Ptr 
	protected native static long g_value_reset(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_unset(GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvalue.h:49</i>
	 */
	public static void g_value_unset(Pointer<GValue > value) {
		g_value_unset(Pointer.getPeer(value));
	}
	protected native static void g_value_unset(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_instance(GValue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvalue.h:51</i>
	 */
	public static void g_value_set_instance(Pointer<GValue > value, GObjectLibrary.gpointer instance) {
		g_value_set_instance(Pointer.getPeer(value), instance);
	}
	protected native static void g_value_set_instance(@Ptr long value, GObjectLibrary.gpointer instance);
	/**
	 * --- private ---<br>
	 * Original signature : <code>gboolean g_value_fits_pointer(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvalue.h:56</i>
	 */
	public static GObjectLibrary.gboolean g_value_fits_pointer(Pointer<GValue > value) {
		return g_value_fits_pointer(Pointer.getPeer(value));
	}
	protected native static GObjectLibrary.gboolean g_value_fits_pointer(@Ptr long value);
	/**
	 * Original signature : <code>gpointer g_value_peek_pointer(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvalue.h:58</i>
	 */
	public static GObjectLibrary.gpointer g_value_peek_pointer(Pointer<GValue > value) {
		return g_value_peek_pointer(Pointer.getPeer(value));
	}
	protected native static GObjectLibrary.gpointer g_value_peek_pointer(@Ptr long value);
	/**
	 * --- implementation details ---<br>
	 * Original signature : <code>gboolean g_value_type_compatible(GType, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvalue.h:63</i>
	 */
	public static native GObjectLibrary.gboolean g_value_type_compatible(@org.bridj.ann.CLong long src_type, @org.bridj.ann.CLong long dest_type);
	/**
	 * Original signature : <code>gboolean g_value_type_transformable(GType, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvalue.h:65</i>
	 */
	public static native GObjectLibrary.gboolean g_value_type_transformable(@org.bridj.ann.CLong long src_type, @org.bridj.ann.CLong long dest_type);
	/**
	 * Original signature : <code>gboolean g_value_transform(const GValue*, GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvalue.h:67</i>
	 */
	public static GObjectLibrary.gboolean g_value_transform(Pointer<GValue > src_value, Pointer<GValue > dest_value) {
		return g_value_transform(Pointer.getPeer(src_value), Pointer.getPeer(dest_value));
	}
	protected native static GObjectLibrary.gboolean g_value_transform(@Ptr long src_value, @Ptr long dest_value);
	/**
	 * Original signature : <code>void g_value_register_transform_func(GType, GType, GValueTransform)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvalue.h:69</i>
	 */
	public static void g_value_register_transform_func(@org.bridj.ann.CLong long src_type, @org.bridj.ann.CLong long dest_type, Pointer<GObjectLibrary.GValueTransform > transform_func) {
		g_value_register_transform_func(src_type, dest_type, Pointer.getPeer(transform_func));
	}
	protected native static void g_value_register_transform_func(@org.bridj.ann.CLong long src_type, @org.bridj.ann.CLong long dest_type, @Ptr long transform_func);
	/**
	 * --- prototypes ---<br>
	 * Original signature : <code>GParamSpec* g_param_spec_ref(GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:124</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_ref(Pointer<GParamSpec > pspec) {
		return Pointer.pointerToAddress(g_param_spec_ref(Pointer.getPeer(pspec)), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_ref(@Ptr long pspec);
	/**
	 * Original signature : <code>void g_param_spec_unref(GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:126</i>
	 */
	public static void g_param_spec_unref(Pointer<GParamSpec > pspec) {
		g_param_spec_unref(Pointer.getPeer(pspec));
	}
	protected native static void g_param_spec_unref(@Ptr long pspec);
	/**
	 * Original signature : <code>void g_param_spec_sink(GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:128</i>
	 */
	public static void g_param_spec_sink(Pointer<GParamSpec > pspec) {
		g_param_spec_sink(Pointer.getPeer(pspec));
	}
	protected native static void g_param_spec_sink(@Ptr long pspec);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_ref_sink(GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:130</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_ref_sink(Pointer<GParamSpec > pspec) {
		return Pointer.pointerToAddress(g_param_spec_ref_sink(Pointer.getPeer(pspec)), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_ref_sink(@Ptr long pspec);
	/**
	 * Original signature : <code>gpointer g_param_spec_get_qdata(GParamSpec*, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:132</i>
	 */
	public static GObjectLibrary.gpointer g_param_spec_get_qdata(Pointer<GParamSpec > pspec, int quark) {
		return g_param_spec_get_qdata(Pointer.getPeer(pspec), quark);
	}
	protected native static GObjectLibrary.gpointer g_param_spec_get_qdata(@Ptr long pspec, int quark);
	/**
	 * Original signature : <code>void g_param_spec_set_qdata(GParamSpec*, GQuark, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:134</i>
	 */
	public static void g_param_spec_set_qdata(Pointer<GParamSpec > pspec, int quark, GObjectLibrary.gpointer data) {
		g_param_spec_set_qdata(Pointer.getPeer(pspec), quark, data);
	}
	protected native static void g_param_spec_set_qdata(@Ptr long pspec, int quark, GObjectLibrary.gpointer data);
	/**
	 * Original signature : <code>void g_param_spec_set_qdata_full(GParamSpec*, GQuark, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:136</i>
	 */
	public static void g_param_spec_set_qdata_full(Pointer<GParamSpec > pspec, int quark, GObjectLibrary.gpointer data, GObjectLibrary.GDestroyNotify destroy) {
		g_param_spec_set_qdata_full(Pointer.getPeer(pspec), quark, data, Pointer.getPeer(destroy));
	}
	protected native static void g_param_spec_set_qdata_full(@Ptr long pspec, int quark, GObjectLibrary.gpointer data, @Ptr long destroy);
	/**
	 * Original signature : <code>gpointer g_param_spec_steal_qdata(GParamSpec*, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:138</i>
	 */
	public static GObjectLibrary.gpointer g_param_spec_steal_qdata(Pointer<GParamSpec > pspec, int quark) {
		return g_param_spec_steal_qdata(Pointer.getPeer(pspec), quark);
	}
	protected native static GObjectLibrary.gpointer g_param_spec_steal_qdata(@Ptr long pspec, int quark);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_get_redirect_target(GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:140</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_get_redirect_target(Pointer<GParamSpec > pspec) {
		return Pointer.pointerToAddress(g_param_spec_get_redirect_target(Pointer.getPeer(pspec)), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_get_redirect_target(@Ptr long pspec);
	/**
	 * Original signature : <code>void g_param_value_set_default(GParamSpec*, GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:142</i>
	 */
	public static void g_param_value_set_default(Pointer<GParamSpec > pspec, Pointer<GValue > value) {
		g_param_value_set_default(Pointer.getPeer(pspec), Pointer.getPeer(value));
	}
	protected native static void g_param_value_set_default(@Ptr long pspec, @Ptr long value);
	/**
	 * Original signature : <code>gboolean g_param_value_defaults(GParamSpec*, GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:144</i>
	 */
	public static GObjectLibrary.gboolean g_param_value_defaults(Pointer<GParamSpec > pspec, Pointer<GValue > value) {
		return g_param_value_defaults(Pointer.getPeer(pspec), Pointer.getPeer(value));
	}
	protected native static GObjectLibrary.gboolean g_param_value_defaults(@Ptr long pspec, @Ptr long value);
	/**
	 * Original signature : <code>gboolean g_param_value_validate(GParamSpec*, GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:146</i>
	 */
	public static GObjectLibrary.gboolean g_param_value_validate(Pointer<GParamSpec > pspec, Pointer<GValue > value) {
		return g_param_value_validate(Pointer.getPeer(pspec), Pointer.getPeer(value));
	}
	protected native static GObjectLibrary.gboolean g_param_value_validate(@Ptr long pspec, @Ptr long value);
	/**
	 * Original signature : <code>gboolean g_param_value_convert(GParamSpec*, const GValue*, GValue*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:148</i>
	 */
	public static GObjectLibrary.gboolean g_param_value_convert(Pointer<GParamSpec > pspec, Pointer<GValue > src_value, Pointer<GValue > dest_value, GObjectLibrary.gboolean strict_validation) {
		return g_param_value_convert(Pointer.getPeer(pspec), Pointer.getPeer(src_value), Pointer.getPeer(dest_value), strict_validation);
	}
	protected native static GObjectLibrary.gboolean g_param_value_convert(@Ptr long pspec, @Ptr long src_value, @Ptr long dest_value, GObjectLibrary.gboolean strict_validation);
	/**
	 * Original signature : <code>gint g_param_values_cmp(GParamSpec*, const GValue*, const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:150</i>
	 */
	public static int g_param_values_cmp(Pointer<GParamSpec > pspec, Pointer<GValue > value1, Pointer<GValue > value2) {
		return g_param_values_cmp(Pointer.getPeer(pspec), Pointer.getPeer(value1), Pointer.getPeer(value2));
	}
	protected native static int g_param_values_cmp(@Ptr long pspec, @Ptr long value1, @Ptr long value2);
	/**
	 * Original signature : <code>gchar* g_param_spec_get_name(GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:152</i>
	 */
	public static Pointer<Byte > g_param_spec_get_name(Pointer<GParamSpec > pspec) {
		return Pointer.pointerToAddress(g_param_spec_get_name(Pointer.getPeer(pspec)), Byte.class);
	}
	@Ptr 
	protected native static long g_param_spec_get_name(@Ptr long pspec);
	/**
	 * Original signature : <code>gchar* g_param_spec_get_nick(GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:154</i>
	 */
	public static Pointer<Byte > g_param_spec_get_nick(Pointer<GParamSpec > pspec) {
		return Pointer.pointerToAddress(g_param_spec_get_nick(Pointer.getPeer(pspec)), Byte.class);
	}
	@Ptr 
	protected native static long g_param_spec_get_nick(@Ptr long pspec);
	/**
	 * Original signature : <code>gchar* g_param_spec_get_blurb(GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:156</i>
	 */
	public static Pointer<Byte > g_param_spec_get_blurb(Pointer<GParamSpec > pspec) {
		return Pointer.pointerToAddress(g_param_spec_get_blurb(Pointer.getPeer(pspec)), Byte.class);
	}
	@Ptr 
	protected native static long g_param_spec_get_blurb(@Ptr long pspec);
	/**
	 * Original signature : <code>void g_value_set_param(GValue*, GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:158</i>
	 */
	public static void g_value_set_param(Pointer<GValue > value, Pointer<GParamSpec > param) {
		g_value_set_param(Pointer.getPeer(value), Pointer.getPeer(param));
	}
	protected native static void g_value_set_param(@Ptr long value, @Ptr long param);
	/**
	 * Original signature : <code>GParamSpec* g_value_get_param(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:160</i>
	 */
	public static Pointer<GParamSpec > g_value_get_param(Pointer<GValue > value) {
		return Pointer.pointerToAddress(g_value_get_param(Pointer.getPeer(value)), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_value_get_param(@Ptr long value);
	/**
	 * Original signature : <code>GParamSpec* g_value_dup_param(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:162</i>
	 */
	public static Pointer<GParamSpec > g_value_dup_param(Pointer<GValue > value) {
		return Pointer.pointerToAddress(g_value_dup_param(Pointer.getPeer(value)), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_value_dup_param(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_take_param(GValue*, GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:164</i>
	 */
	public static void g_value_take_param(Pointer<GValue > value, Pointer<GParamSpec > param) {
		g_value_take_param(Pointer.getPeer(value), Pointer.getPeer(param));
	}
	protected native static void g_value_take_param(@Ptr long value, @Ptr long param);
	/**
	 * Original signature : <code>void g_value_set_param_take_ownership(GValue*, GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:166</i>
	 */
	public static void g_value_set_param_take_ownership(Pointer<GValue > value, Pointer<GParamSpec > param) {
		g_value_set_param_take_ownership(Pointer.getPeer(value), Pointer.getPeer(param));
	}
	protected native static void g_value_set_param_take_ownership(@Ptr long value, @Ptr long param);
	/**
	 * Original signature : <code>GValue* g_param_spec_get_default_value(GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:168</i>
	 */
	public static Pointer<GValue > g_param_spec_get_default_value(Pointer<GParamSpec > param) {
		return Pointer.pointerToAddress(g_param_spec_get_default_value(Pointer.getPeer(param)), GValue.class);
	}
	@Ptr 
	protected native static long g_param_spec_get_default_value(@Ptr long param);
	/**
	 * Original signature : <code>GType g_param_type_register_static(const gchar*, const GParamSpecTypeInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:217</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_param_type_register_static(Pointer<Byte > name, Pointer<GParamSpecTypeInfo > pspec_info) {
		return g_param_type_register_static(Pointer.getPeer(name), Pointer.getPeer(pspec_info));
	}
	@org.bridj.ann.CLong 
	protected native static long g_param_type_register_static(@Ptr long name, @Ptr long pspec_info);
	/**
	 * For registering builting types<br>
	 * Original signature : <code>GType _g_param_type_register_static_constant(const gchar*, const GParamSpecTypeInfo*, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:222</i>
	 */
	@org.bridj.ann.CLong 
	public static long _g_param_type_register_static_constant(Pointer<Byte > name, Pointer<GParamSpecTypeInfo > pspec_info, @org.bridj.ann.CLong long opt_type) {
		return _g_param_type_register_static_constant(Pointer.getPeer(name), Pointer.getPeer(pspec_info), opt_type);
	}
	@org.bridj.ann.CLong 
	protected native static long _g_param_type_register_static_constant(@Ptr long name, @Ptr long pspec_info, @org.bridj.ann.CLong long opt_type);
	/**
	 * --- protected ---<br>
	 * Original signature : <code>gpointer g_param_spec_internal(GType, const gchar*, const gchar*, const gchar*, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:227</i>
	 */
	public static GObjectLibrary.gpointer g_param_spec_internal(@org.bridj.ann.CLong long param_type, Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return g_param_spec_internal(param_type, Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), (int)flags.value());
	}
	protected native static GObjectLibrary.gpointer g_param_spec_internal(@org.bridj.ann.CLong long param_type, @Ptr long name, @Ptr long nick, @Ptr long blurb, int flags);
	/**
	 * Original signature : <code>GParamSpecPool* g_param_spec_pool_new(gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:229</i>
	 */
	public static Pointer<GObjectLibrary.GParamSpecPool > g_param_spec_pool_new(GObjectLibrary.gboolean type_prefixing) {
		return Pointer.pointerToAddress(g_param_spec_pool_new$2(type_prefixing), GObjectLibrary.GParamSpecPool.class);
	}
	@Ptr 
	protected native static long g_param_spec_pool_new$2(GObjectLibrary.gboolean type_prefixing);
	/**
	 * Original signature : <code>void g_param_spec_pool_insert(GParamSpecPool*, GParamSpec*, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:231</i>
	 */
	public static void g_param_spec_pool_insert(Pointer<GObjectLibrary.GParamSpecPool > pool, Pointer<GParamSpec > pspec, @org.bridj.ann.CLong long owner_type) {
		g_param_spec_pool_insert(Pointer.getPeer(pool), Pointer.getPeer(pspec), owner_type);
	}
	protected native static void g_param_spec_pool_insert(@Ptr long pool, @Ptr long pspec, @org.bridj.ann.CLong long owner_type);
	/**
	 * Original signature : <code>void g_param_spec_pool_remove(GParamSpecPool*, GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:233</i>
	 */
	public static void g_param_spec_pool_remove(Pointer<GObjectLibrary.GParamSpecPool > pool, Pointer<GParamSpec > pspec) {
		g_param_spec_pool_remove(Pointer.getPeer(pool), Pointer.getPeer(pspec));
	}
	protected native static void g_param_spec_pool_remove(@Ptr long pool, @Ptr long pspec);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_pool_lookup(GParamSpecPool*, const gchar*, GType, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:235</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_pool_lookup(Pointer<GObjectLibrary.GParamSpecPool > pool, Pointer<Byte > param_name, @org.bridj.ann.CLong long owner_type, GObjectLibrary.gboolean walk_ancestors) {
		return Pointer.pointerToAddress(g_param_spec_pool_lookup(Pointer.getPeer(pool), Pointer.getPeer(param_name), owner_type, walk_ancestors), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_pool_lookup(@Ptr long pool, @Ptr long param_name, @org.bridj.ann.CLong long owner_type, GObjectLibrary.gboolean walk_ancestors);
	/**
	 * Original signature : <code>GList* g_param_spec_pool_list_owned(GParamSpecPool*, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:237</i>
	 */
	public static Pointer g_param_spec_pool_list_owned(Pointer<GObjectLibrary.GParamSpecPool > pool, @org.bridj.ann.CLong long owner_type) {
		return Pointer.pointerToAddress(g_param_spec_pool_list_owned(Pointer.getPeer(pool), owner_type));
	}
	@Ptr 
	protected native static long g_param_spec_pool_list_owned(@Ptr long pool, @org.bridj.ann.CLong long owner_type);
	/**
	 * Original signature : <code>GParamSpec** g_param_spec_pool_list(GParamSpecPool*, GType, guint*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparam.h:239</i>
	 */
	public static Pointer<Pointer<GParamSpec > > g_param_spec_pool_list(Pointer<GObjectLibrary.GParamSpecPool > pool, @org.bridj.ann.CLong long owner_type, Pointer<Integer > n_pspecs_p) {
		return Pointer.pointerToAddress(g_param_spec_pool_list(Pointer.getPeer(pool), owner_type, Pointer.getPeer(n_pspecs_p)), DefaultParameterizedType.paramType(Pointer.class, GParamSpec.class));
	}
	@Ptr 
	protected native static long g_param_spec_pool_list(@Ptr long pool, @org.bridj.ann.CLong long owner_type, @Ptr long n_pspecs_p);
	/**
	 * --- prototypes ---<br>
	 * Original signature : <code>GClosure* g_cclosure_new(GCallback, gpointer, GClosureNotify)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:100</i>
	 */
	public static Pointer<GClosure > g_cclosure_new(Pointer<GObjectLibrary.GCallback > callback_func, GObjectLibrary.gpointer user_data, Pointer<GObjectLibrary.GClosureNotify > destroy_data) {
		return Pointer.pointerToAddress(g_cclosure_new(Pointer.getPeer(callback_func), user_data, Pointer.getPeer(destroy_data)), GClosure.class);
	}
	@Ptr 
	protected native static long g_cclosure_new(@Ptr long callback_func, GObjectLibrary.gpointer user_data, @Ptr long destroy_data);
	/**
	 * Original signature : <code>GClosure* g_cclosure_new_swap(GCallback, gpointer, GClosureNotify)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:102</i>
	 */
	public static Pointer<GClosure > g_cclosure_new_swap(Pointer<GObjectLibrary.GCallback > callback_func, GObjectLibrary.gpointer user_data, Pointer<GObjectLibrary.GClosureNotify > destroy_data) {
		return Pointer.pointerToAddress(g_cclosure_new_swap(Pointer.getPeer(callback_func), user_data, Pointer.getPeer(destroy_data)), GClosure.class);
	}
	@Ptr 
	protected native static long g_cclosure_new_swap(@Ptr long callback_func, GObjectLibrary.gpointer user_data, @Ptr long destroy_data);
	/**
	 * Original signature : <code>GClosure* g_signal_type_cclosure_new(GType, guint)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:104</i>
	 */
	public static Pointer<GClosure > g_signal_type_cclosure_new(@org.bridj.ann.CLong long itype, int struct_offset) {
		return Pointer.pointerToAddress(g_signal_type_cclosure_new$2(itype, struct_offset), GClosure.class);
	}
	@Ptr 
	protected native static long g_signal_type_cclosure_new$2(@org.bridj.ann.CLong long itype, int struct_offset);
	/**
	 * --- prototypes ---<br>
	 * Original signature : <code>GClosure* g_closure_ref(GClosure*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:109</i>
	 */
	public static Pointer<GClosure > g_closure_ref(Pointer<GClosure > closure) {
		return Pointer.pointerToAddress(g_closure_ref(Pointer.getPeer(closure)), GClosure.class);
	}
	@Ptr 
	protected native static long g_closure_ref(@Ptr long closure);
	/**
	 * Original signature : <code>void g_closure_sink(GClosure*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:111</i>
	 */
	public static void g_closure_sink(Pointer<GClosure > closure) {
		g_closure_sink(Pointer.getPeer(closure));
	}
	protected native static void g_closure_sink(@Ptr long closure);
	/**
	 * Original signature : <code>void g_closure_unref(GClosure*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:113</i>
	 */
	public static void g_closure_unref(Pointer<GClosure > closure) {
		g_closure_unref(Pointer.getPeer(closure));
	}
	protected native static void g_closure_unref(@Ptr long closure);
	/**
	 * intimidating<br>
	 * Original signature : <code>GClosure* g_closure_new_simple(guint, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:118</i>
	 */
	public static Pointer<GClosure > g_closure_new_simple(int sizeof_closure, GObjectLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_closure_new_simple$2(sizeof_closure, data), GClosure.class);
	}
	@Ptr 
	protected native static long g_closure_new_simple$2(int sizeof_closure, GObjectLibrary.gpointer data);
	/**
	 * Original signature : <code>void g_closure_add_finalize_notifier(GClosure*, gpointer, GClosureNotify)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:120</i>
	 */
	public static void g_closure_add_finalize_notifier(Pointer<GClosure > closure, GObjectLibrary.gpointer notify_data, Pointer<GObjectLibrary.GClosureNotify > notify_func) {
		g_closure_add_finalize_notifier(Pointer.getPeer(closure), notify_data, Pointer.getPeer(notify_func));
	}
	protected native static void g_closure_add_finalize_notifier(@Ptr long closure, GObjectLibrary.gpointer notify_data, @Ptr long notify_func);
	/**
	 * Original signature : <code>void g_closure_remove_finalize_notifier(GClosure*, gpointer, GClosureNotify)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:122</i>
	 */
	public static void g_closure_remove_finalize_notifier(Pointer<GClosure > closure, GObjectLibrary.gpointer notify_data, Pointer<GObjectLibrary.GClosureNotify > notify_func) {
		g_closure_remove_finalize_notifier(Pointer.getPeer(closure), notify_data, Pointer.getPeer(notify_func));
	}
	protected native static void g_closure_remove_finalize_notifier(@Ptr long closure, GObjectLibrary.gpointer notify_data, @Ptr long notify_func);
	/**
	 * Original signature : <code>void g_closure_add_invalidate_notifier(GClosure*, gpointer, GClosureNotify)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:124</i>
	 */
	public static void g_closure_add_invalidate_notifier(Pointer<GClosure > closure, GObjectLibrary.gpointer notify_data, Pointer<GObjectLibrary.GClosureNotify > notify_func) {
		g_closure_add_invalidate_notifier(Pointer.getPeer(closure), notify_data, Pointer.getPeer(notify_func));
	}
	protected native static void g_closure_add_invalidate_notifier(@Ptr long closure, GObjectLibrary.gpointer notify_data, @Ptr long notify_func);
	/**
	 * Original signature : <code>void g_closure_remove_invalidate_notifier(GClosure*, gpointer, GClosureNotify)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:126</i>
	 */
	public static void g_closure_remove_invalidate_notifier(Pointer<GClosure > closure, GObjectLibrary.gpointer notify_data, Pointer<GObjectLibrary.GClosureNotify > notify_func) {
		g_closure_remove_invalidate_notifier(Pointer.getPeer(closure), notify_data, Pointer.getPeer(notify_func));
	}
	protected native static void g_closure_remove_invalidate_notifier(@Ptr long closure, GObjectLibrary.gpointer notify_data, @Ptr long notify_func);
	/**
	 * Original signature : <code>void g_closure_add_marshal_guards(GClosure*, gpointer, GClosureNotify, gpointer, GClosureNotify)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:128</i>
	 */
	public static void g_closure_add_marshal_guards(Pointer<GClosure > closure, GObjectLibrary.gpointer pre_marshal_data, Pointer<GObjectLibrary.GClosureNotify > pre_marshal_notify, GObjectLibrary.gpointer post_marshal_data, Pointer<GObjectLibrary.GClosureNotify > post_marshal_notify) {
		g_closure_add_marshal_guards(Pointer.getPeer(closure), pre_marshal_data, Pointer.getPeer(pre_marshal_notify), post_marshal_data, Pointer.getPeer(post_marshal_notify));
	}
	protected native static void g_closure_add_marshal_guards(@Ptr long closure, GObjectLibrary.gpointer pre_marshal_data, @Ptr long pre_marshal_notify, GObjectLibrary.gpointer post_marshal_data, @Ptr long post_marshal_notify);
	/**
	 * Original signature : <code>void g_closure_set_marshal(GClosure*, GClosureMarshal)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:130</i>
	 */
	public static void g_closure_set_marshal(Pointer<GClosure > closure, Pointer<GObjectLibrary.GClosureMarshal > marshal) {
		g_closure_set_marshal(Pointer.getPeer(closure), Pointer.getPeer(marshal));
	}
	protected native static void g_closure_set_marshal(@Ptr long closure, @Ptr long marshal);
	/**
	 * Original signature : <code>void g_closure_set_meta_marshal(GClosure*, gpointer, GClosureMarshal)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:132</i>
	 */
	public static void g_closure_set_meta_marshal(Pointer<GClosure > closure, GObjectLibrary.gpointer marshal_data, Pointer<GObjectLibrary.GClosureMarshal > meta_marshal) {
		g_closure_set_meta_marshal(Pointer.getPeer(closure), marshal_data, Pointer.getPeer(meta_marshal));
	}
	protected native static void g_closure_set_meta_marshal(@Ptr long closure, GObjectLibrary.gpointer marshal_data, @Ptr long meta_marshal);
	/**
	 * Original signature : <code>void g_closure_invalidate(GClosure*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:134</i>
	 */
	public static void g_closure_invalidate(Pointer<GClosure > closure) {
		g_closure_invalidate(Pointer.getPeer(closure));
	}
	protected native static void g_closure_invalidate(@Ptr long closure);
	/**
	 * Original signature : <code>void g_closure_invoke(GClosure*, GValue*, guint, const GValue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:136</i>
	 */
	public static void g_closure_invoke(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint) {
		g_closure_invoke(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint);
	}
	protected native static void g_closure_invoke(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint);
	/**
	 * Original signature : <code>void g_cclosure_marshal_generic(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:138</i>
	 */
	public static void g_cclosure_marshal_generic(Pointer<GClosure > closure, Pointer<GValue > return_gvalue, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_generic(Pointer.getPeer(closure), Pointer.getPeer(return_gvalue), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_generic(@Ptr long closure, @Ptr long return_gvalue, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_generic_va(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gclosure.h:140</i>
	 */
	public static void g_cclosure_marshal_generic_va(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args_list, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args_list) {
		g_cclosure_marshal_generic_va(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args_list, marshal_data, Pointer.getPeer(n_params), args_list);
	}
	protected native static void g_cclosure_marshal_generic_va(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args_list, int marshal_data, @Ptr long n_params, Object... args_list);
	/**
	 * VOID:VOID (./gmarshal.list:6)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__VOID(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:5</i>
	 */
	public static void g_cclosure_marshal_VOID__VOID(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__VOID(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__VOID(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__VOIDv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:7</i>
	 */
	public static void g_cclosure_marshal_VOID__VOIDv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__VOIDv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__VOIDv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:BOOLEAN (./gmarshal.list:7)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__BOOLEAN(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:12</i>
	 */
	public static void g_cclosure_marshal_VOID__BOOLEAN(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__BOOLEAN(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__BOOLEAN(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__BOOLEANv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:14</i>
	 */
	public static void g_cclosure_marshal_VOID__BOOLEANv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__BOOLEANv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__BOOLEANv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:CHAR (./gmarshal.list:8)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__CHAR(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:19</i>
	 */
	public static void g_cclosure_marshal_VOID__CHAR(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__CHAR(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__CHAR(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__CHARv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:21</i>
	 */
	public static void g_cclosure_marshal_VOID__CHARv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__CHARv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__CHARv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:UCHAR (./gmarshal.list:9)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__UCHAR(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:26</i>
	 */
	public static void g_cclosure_marshal_VOID__UCHAR(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__UCHAR(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__UCHAR(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__UCHARv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:28</i>
	 */
	public static void g_cclosure_marshal_VOID__UCHARv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__UCHARv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__UCHARv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:INT (./gmarshal.list:10)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__INT(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:33</i>
	 */
	public static void g_cclosure_marshal_VOID__INT(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__INT(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__INT(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__INTv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:35</i>
	 */
	public static void g_cclosure_marshal_VOID__INTv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__INTv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__INTv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:UINT (./gmarshal.list:11)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__UINT(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:40</i>
	 */
	public static void g_cclosure_marshal_VOID__UINT(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__UINT(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__UINT(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__UINTv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:42</i>
	 */
	public static void g_cclosure_marshal_VOID__UINTv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__UINTv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__UINTv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:LONG (./gmarshal.list:12)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__LONG(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:47</i>
	 */
	public static void g_cclosure_marshal_VOID__LONG(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__LONG(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__LONG(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__LONGv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:49</i>
	 */
	public static void g_cclosure_marshal_VOID__LONGv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__LONGv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__LONGv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:ULONG (./gmarshal.list:13)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__ULONG(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:54</i>
	 */
	public static void g_cclosure_marshal_VOID__ULONG(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__ULONG(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__ULONG(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__ULONGv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:56</i>
	 */
	public static void g_cclosure_marshal_VOID__ULONGv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__ULONGv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__ULONGv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:ENUM (./gmarshal.list:14)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__ENUM(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:61</i>
	 */
	public static void g_cclosure_marshal_VOID__ENUM(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__ENUM(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__ENUM(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__ENUMv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:63</i>
	 */
	public static void g_cclosure_marshal_VOID__ENUMv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__ENUMv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__ENUMv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:FLAGS (./gmarshal.list:15)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__FLAGS(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:68</i>
	 */
	public static void g_cclosure_marshal_VOID__FLAGS(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__FLAGS(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__FLAGS(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__FLAGSv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:70</i>
	 */
	public static void g_cclosure_marshal_VOID__FLAGSv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__FLAGSv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__FLAGSv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:FLOAT (./gmarshal.list:16)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__FLOAT(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:75</i>
	 */
	public static void g_cclosure_marshal_VOID__FLOAT(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__FLOAT(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__FLOAT(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__FLOATv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:77</i>
	 */
	public static void g_cclosure_marshal_VOID__FLOATv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__FLOATv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__FLOATv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:DOUBLE (./gmarshal.list:17)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__DOUBLE(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:82</i>
	 */
	public static void g_cclosure_marshal_VOID__DOUBLE(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__DOUBLE(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__DOUBLE(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__DOUBLEv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:84</i>
	 */
	public static void g_cclosure_marshal_VOID__DOUBLEv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__DOUBLEv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__DOUBLEv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:STRING (./gmarshal.list:18)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__STRING(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:89</i>
	 */
	public static void g_cclosure_marshal_VOID__STRING(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__STRING(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__STRING(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__STRINGv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:91</i>
	 */
	public static void g_cclosure_marshal_VOID__STRINGv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__STRINGv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__STRINGv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:PARAM (./gmarshal.list:19)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__PARAM(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:96</i>
	 */
	public static void g_cclosure_marshal_VOID__PARAM(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__PARAM(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__PARAM(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__PARAMv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:98</i>
	 */
	public static void g_cclosure_marshal_VOID__PARAMv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__PARAMv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__PARAMv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:BOXED (./gmarshal.list:20)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__BOXED(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:103</i>
	 */
	public static void g_cclosure_marshal_VOID__BOXED(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__BOXED(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__BOXED(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__BOXEDv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:105</i>
	 */
	public static void g_cclosure_marshal_VOID__BOXEDv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__BOXEDv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__BOXEDv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:POINTER (./gmarshal.list:21)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__POINTER(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:110</i>
	 */
	public static void g_cclosure_marshal_VOID__POINTER(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__POINTER(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__POINTER(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__POINTERv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:112</i>
	 */
	public static void g_cclosure_marshal_VOID__POINTERv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__POINTERv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__POINTERv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:OBJECT (./gmarshal.list:22)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__OBJECT(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:117</i>
	 */
	public static void g_cclosure_marshal_VOID__OBJECT(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__OBJECT(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__OBJECT(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__OBJECTv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:119</i>
	 */
	public static void g_cclosure_marshal_VOID__OBJECTv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__OBJECTv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__OBJECTv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:VARIANT (./gmarshal.list:23)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__VARIANT(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:124</i>
	 */
	public static void g_cclosure_marshal_VOID__VARIANT(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__VARIANT(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__VARIANT(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__VARIANTv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:126</i>
	 */
	public static void g_cclosure_marshal_VOID__VARIANTv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__VARIANTv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__VARIANTv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * VOID:UINT,POINTER (./gmarshal.list:26)<br>
	 * Original signature : <code>void g_cclosure_marshal_VOID__UINT_POINTER(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:131</i>
	 */
	public static void g_cclosure_marshal_VOID__UINT_POINTER(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_VOID__UINT_POINTER(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_VOID__UINT_POINTER(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_VOID__UINT_POINTERv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:133</i>
	 */
	public static void g_cclosure_marshal_VOID__UINT_POINTERv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_VOID__UINT_POINTERv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_VOID__UINT_POINTERv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * BOOL:FLAGS (./gmarshal.list:27)<br>
	 * Original signature : <code>void g_cclosure_marshal_BOOLEAN__FLAGS(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:138</i>
	 */
	public static void g_cclosure_marshal_BOOLEAN__FLAGS(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_BOOLEAN__FLAGS(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_BOOLEAN__FLAGS(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_BOOLEAN__FLAGSv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:140</i>
	 */
	public static void g_cclosure_marshal_BOOLEAN__FLAGSv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_BOOLEAN__FLAGSv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_BOOLEAN__FLAGSv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * STRING:OBJECT,POINTER (./gmarshal.list:28)<br>
	 * Original signature : <code>void g_cclosure_marshal_STRING__OBJECT_POINTER(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:145</i>
	 */
	public static void g_cclosure_marshal_STRING__OBJECT_POINTER(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_STRING__OBJECT_POINTER(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_STRING__OBJECT_POINTER(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_STRING__OBJECT_POINTERv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:147</i>
	 */
	public static void g_cclosure_marshal_STRING__OBJECT_POINTERv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_STRING__OBJECT_POINTERv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_STRING__OBJECT_POINTERv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * BOOL:BOXED,BOXED (./gmarshal.list:29)<br>
	 * Original signature : <code>void g_cclosure_marshal_BOOLEAN__BOXED_BOXED(GClosure*, GValue*, guint, const GValue*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:152</i>
	 */
	public static void g_cclosure_marshal_BOOLEAN__BOXED_BOXED(Pointer<GClosure > closure, Pointer<GValue > return_value, int n_param_values, Pointer<GValue > param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data) {
		g_cclosure_marshal_BOOLEAN__BOXED_BOXED(Pointer.getPeer(closure), Pointer.getPeer(return_value), n_param_values, Pointer.getPeer(param_values), invocation_hint, marshal_data);
	}
	protected native static void g_cclosure_marshal_BOOLEAN__BOXED_BOXED(@Ptr long closure, @Ptr long return_value, int n_param_values, @Ptr long param_values, GObjectLibrary.gpointer invocation_hint, GObjectLibrary.gpointer marshal_data);
	/**
	 * Original signature : <code>void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(GClosure*, GValue*, gpointer, va_list, gpointer, int, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gmarshal.h:154</i>
	 */
	public static void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(Pointer<GClosure > closure, Pointer<GValue > return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, Pointer<org.bridj.CLong > n_params, Object... args) {
		g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(Pointer.getPeer(closure), Pointer.getPeer(return_value), instance, args, marshal_data, Pointer.getPeer(n_params), args);
	}
	protected native static void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(@Ptr long closure, @Ptr long return_value, GObjectLibrary.gpointer instance, GObjectLibrary.gpointer args, int marshal_data, @Ptr long n_params, Object... args);
	/**
	 * --- signals ---<br>
	 * Original signature : <code>guint g_signal_newv(const gchar*, GType, GSignalFlags, GClosure*, GSignalAccumulator, gpointer, GSignalCMarshaller, GType, guint, GType*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:183</i>
	 */
	public static int g_signal_newv(Pointer<Byte > signal_name, @org.bridj.ann.CLong long itype, IntValuedEnum<GObjectLibrary.GSignalFlags > signal_flags, Pointer<GClosure > class_closure, Pointer<GObjectLibrary.GSignalAccumulator > accumulator, GObjectLibrary.gpointer accu_data, Pointer<GObjectLibrary.GClosureMarshal > c_marshaller, @org.bridj.ann.CLong long return_type, int n_params, Pointer<org.bridj.CLong > param_types) {
		return g_signal_newv(Pointer.getPeer(signal_name), itype, (int)signal_flags.value(), Pointer.getPeer(class_closure), Pointer.getPeer(accumulator), accu_data, Pointer.getPeer(c_marshaller), return_type, n_params, Pointer.getPeer(param_types));
	}
	protected native static int g_signal_newv(@Ptr long signal_name, @org.bridj.ann.CLong long itype, int signal_flags, @Ptr long class_closure, @Ptr long accumulator, GObjectLibrary.gpointer accu_data, @Ptr long c_marshaller, @org.bridj.ann.CLong long return_type, int n_params, @Ptr long param_types);
	/**
	 * Original signature : <code>guint g_signal_new_valist(const gchar*, GType, GSignalFlags, GClosure*, GSignalAccumulator, gpointer, GSignalCMarshaller, GType, guint, va_list)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:185</i>
	 */
	public static int g_signal_new_valist(Pointer<Byte > signal_name, @org.bridj.ann.CLong long itype, IntValuedEnum<GObjectLibrary.GSignalFlags > signal_flags, Pointer<GClosure > class_closure, Pointer<GObjectLibrary.GSignalAccumulator > accumulator, GObjectLibrary.gpointer accu_data, Pointer<GObjectLibrary.GClosureMarshal > c_marshaller, @org.bridj.ann.CLong long return_type, int n_params, Object... args) {
		return g_signal_new_valist(Pointer.getPeer(signal_name), itype, (int)signal_flags.value(), Pointer.getPeer(class_closure), Pointer.getPeer(accumulator), accu_data, Pointer.getPeer(c_marshaller), return_type, n_params, args);
	}
	protected native static int g_signal_new_valist(@Ptr long signal_name, @org.bridj.ann.CLong long itype, int signal_flags, @Ptr long class_closure, @Ptr long accumulator, GObjectLibrary.gpointer accu_data, @Ptr long c_marshaller, @org.bridj.ann.CLong long return_type, int n_params, Object... args);
	/**
	 * Original signature : <code>guint g_signal_new(const gchar*, GType, GSignalFlags, guint, GSignalAccumulator, gpointer, GSignalCMarshaller, GType, guint, null)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:187</i>
	 */
	public static int g_signal_new(Pointer<Byte > signal_name, @org.bridj.ann.CLong long itype, IntValuedEnum<GObjectLibrary.GSignalFlags > signal_flags, int class_offset, Pointer<GObjectLibrary.GSignalAccumulator > accumulator, GObjectLibrary.gpointer accu_data, Pointer<GObjectLibrary.GClosureMarshal > c_marshaller, @org.bridj.ann.CLong long return_type, int n_params, Object... varArgs1) {
		return g_signal_new(Pointer.getPeer(signal_name), itype, (int)signal_flags.value(), class_offset, Pointer.getPeer(accumulator), accu_data, Pointer.getPeer(c_marshaller), return_type, n_params, varArgs1);
	}
	protected native static int g_signal_new(@Ptr long signal_name, @org.bridj.ann.CLong long itype, int signal_flags, int class_offset, @Ptr long accumulator, GObjectLibrary.gpointer accu_data, @Ptr long c_marshaller, @org.bridj.ann.CLong long return_type, int n_params, Object... varArgs1);
	/**
	 * Original signature : <code>guint g_signal_new_class_handler(const gchar*, GType, GSignalFlags, GCallback, GSignalAccumulator, gpointer, GSignalCMarshaller, GType, guint, null)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:189</i>
	 */
	public static int g_signal_new_class_handler(Pointer<Byte > signal_name, @org.bridj.ann.CLong long itype, IntValuedEnum<GObjectLibrary.GSignalFlags > signal_flags, Pointer<GObjectLibrary.GCallback > class_handler, Pointer<GObjectLibrary.GSignalAccumulator > accumulator, GObjectLibrary.gpointer accu_data, Pointer<GObjectLibrary.GClosureMarshal > c_marshaller, @org.bridj.ann.CLong long return_type, int n_params, Object... varArgs1) {
		return g_signal_new_class_handler(Pointer.getPeer(signal_name), itype, (int)signal_flags.value(), Pointer.getPeer(class_handler), Pointer.getPeer(accumulator), accu_data, Pointer.getPeer(c_marshaller), return_type, n_params, varArgs1);
	}
	protected native static int g_signal_new_class_handler(@Ptr long signal_name, @org.bridj.ann.CLong long itype, int signal_flags, @Ptr long class_handler, @Ptr long accumulator, GObjectLibrary.gpointer accu_data, @Ptr long c_marshaller, @org.bridj.ann.CLong long return_type, int n_params, Object... varArgs1);
	/**
	 * Original signature : <code>void g_signal_set_va_marshaller(guint, GType, GSignalCVaMarshaller)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:191</i>
	 */
	public static void g_signal_set_va_marshaller(int signal_id, @org.bridj.ann.CLong long instance_type, Pointer<GObjectLibrary.GVaClosureMarshal > va_marshaller) {
		g_signal_set_va_marshaller(signal_id, instance_type, Pointer.getPeer(va_marshaller));
	}
	protected native static void g_signal_set_va_marshaller(int signal_id, @org.bridj.ann.CLong long instance_type, @Ptr long va_marshaller);
	/**
	 * Original signature : <code>void g_signal_emitv(const GValue*, guint, GQuark, GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:193</i>
	 */
	public static void g_signal_emitv(Pointer<GValue > instance_and_params, int signal_id, int detail, Pointer<GValue > return_value) {
		g_signal_emitv(Pointer.getPeer(instance_and_params), signal_id, detail, Pointer.getPeer(return_value));
	}
	protected native static void g_signal_emitv(@Ptr long instance_and_params, int signal_id, int detail, @Ptr long return_value);
	/**
	 * Original signature : <code>void g_signal_emit_valist(gpointer, guint, GQuark, va_list)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:195</i>
	 */
	public static native void g_signal_emit_valist(GObjectLibrary.gpointer instance, int signal_id, int detail, Object... var_args);
	/**
	 * Original signature : <code>void g_signal_emit(gpointer, guint, GQuark, null)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:197</i>
	 */
	public static native void g_signal_emit(GObjectLibrary.gpointer instance, int signal_id, int detail, Object... varArgs1);
	/**
	 * Original signature : <code>void g_signal_emit_by_name(gpointer, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:199</i>
	 */
	public static void g_signal_emit_by_name(GObjectLibrary.gpointer instance, Pointer<Byte > detailed_signal, Object... varArgs1) {
		g_signal_emit_by_name(instance, Pointer.getPeer(detailed_signal), varArgs1);
	}
	protected native static void g_signal_emit_by_name(GObjectLibrary.gpointer instance, @Ptr long detailed_signal, Object... varArgs1);
	/**
	 * Original signature : <code>guint g_signal_lookup(const gchar*, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:201</i>
	 */
	public static int g_signal_lookup(Pointer<Byte > name, @org.bridj.ann.CLong long itype) {
		return g_signal_lookup(Pointer.getPeer(name), itype);
	}
	protected native static int g_signal_lookup(@Ptr long name, @org.bridj.ann.CLong long itype);
	/**
	 * Original signature : <code>gchar* g_signal_name(guint)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:203</i>
	 */
	public static Pointer<Byte > g_signal_name(int signal_id) {
		return Pointer.pointerToAddress(g_signal_name$2(signal_id), Byte.class);
	}
	@Ptr 
	protected native static long g_signal_name$2(int signal_id);
	/**
	 * Original signature : <code>void g_signal_query(guint, GSignalQuery*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:205</i>
	 */
	public static void g_signal_query(int signal_id, Pointer<GSignalQuery > query) {
		g_signal_query(signal_id, Pointer.getPeer(query));
	}
	protected native static void g_signal_query(int signal_id, @Ptr long query);
	/**
	 * Original signature : <code>guint* g_signal_list_ids(GType, guint*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:207</i>
	 */
	public static Pointer<Integer > g_signal_list_ids(@org.bridj.ann.CLong long itype, Pointer<Integer > n_ids) {
		return Pointer.pointerToAddress(g_signal_list_ids(itype, Pointer.getPeer(n_ids)), Integer.class);
	}
	@Ptr 
	protected native static long g_signal_list_ids(@org.bridj.ann.CLong long itype, @Ptr long n_ids);
	/**
	 * Original signature : <code>gboolean g_signal_parse_name(const gchar*, GType, guint*, GQuark*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:209</i>
	 */
	public static GObjectLibrary.gboolean g_signal_parse_name(Pointer<Byte > detailed_signal, @org.bridj.ann.CLong long itype, Pointer<Integer > signal_id_p, Pointer<Integer > detail_p, GObjectLibrary.gboolean force_detail_quark) {
		return g_signal_parse_name(Pointer.getPeer(detailed_signal), itype, Pointer.getPeer(signal_id_p), Pointer.getPeer(detail_p), force_detail_quark);
	}
	protected native static GObjectLibrary.gboolean g_signal_parse_name(@Ptr long detailed_signal, @org.bridj.ann.CLong long itype, @Ptr long signal_id_p, @Ptr long detail_p, GObjectLibrary.gboolean force_detail_quark);
	/**
	 * Original signature : <code>GSignalInvocationHint* g_signal_get_invocation_hint(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:211</i>
	 */
	public static Pointer<GSignalInvocationHint > g_signal_get_invocation_hint(GObjectLibrary.gpointer instance) {
		return Pointer.pointerToAddress(g_signal_get_invocation_hint$2(instance), GSignalInvocationHint.class);
	}
	@Ptr 
	protected native static long g_signal_get_invocation_hint$2(GObjectLibrary.gpointer instance);
	/**
	 * --- signal emissions ---<br>
	 * Original signature : <code>void g_signal_stop_emission(gpointer, guint, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:216</i>
	 */
	public static native void g_signal_stop_emission(GObjectLibrary.gpointer instance, int signal_id, int detail);
	/**
	 * Original signature : <code>void g_signal_stop_emission_by_name(gpointer, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:218</i>
	 */
	public static void g_signal_stop_emission_by_name(GObjectLibrary.gpointer instance, Pointer<Byte > detailed_signal) {
		g_signal_stop_emission_by_name(instance, Pointer.getPeer(detailed_signal));
	}
	protected native static void g_signal_stop_emission_by_name(GObjectLibrary.gpointer instance, @Ptr long detailed_signal);
	/**
	 * Original signature : <code>gulong g_signal_add_emission_hook(guint, GQuark, GSignalEmissionHook, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:220</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_signal_add_emission_hook(int signal_id, int detail, GObjectLibrary.GSignalEmissionHook hook_func, GObjectLibrary.gpointer hook_data, GObjectLibrary.GDestroyNotify data_destroy) {
		return g_signal_add_emission_hook(signal_id, detail, Pointer.getPeer(hook_func), hook_data, Pointer.getPeer(data_destroy));
	}
	@org.bridj.ann.CLong 
	protected native static long g_signal_add_emission_hook(int signal_id, int detail, @Ptr long hook_func, GObjectLibrary.gpointer hook_data, @Ptr long data_destroy);
	/**
	 * Original signature : <code>void g_signal_remove_emission_hook(guint, gulong)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:222</i>
	 */
	public static native void g_signal_remove_emission_hook(int signal_id, @org.bridj.ann.CLong long hook_id);
	/**
	 * --- signal handlers ---<br>
	 * Original signature : <code>gboolean g_signal_has_handler_pending(gpointer, guint, GQuark, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:227</i>
	 */
	public static native GObjectLibrary.gboolean g_signal_has_handler_pending(GObjectLibrary.gpointer instance, int signal_id, int detail, GObjectLibrary.gboolean may_be_blocked);
	/**
	 * Original signature : <code>gulong g_signal_connect_closure_by_id(gpointer, guint, GQuark, GClosure*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:229</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_signal_connect_closure_by_id(GObjectLibrary.gpointer instance, int signal_id, int detail, Pointer<GClosure > closure, GObjectLibrary.gboolean after) {
		return g_signal_connect_closure_by_id(instance, signal_id, detail, Pointer.getPeer(closure), after);
	}
	@org.bridj.ann.CLong 
	protected native static long g_signal_connect_closure_by_id(GObjectLibrary.gpointer instance, int signal_id, int detail, @Ptr long closure, GObjectLibrary.gboolean after);
	/**
	 * Original signature : <code>gulong g_signal_connect_closure(gpointer, const gchar*, GClosure*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:231</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_signal_connect_closure(GObjectLibrary.gpointer instance, Pointer<Byte > detailed_signal, Pointer<GClosure > closure, GObjectLibrary.gboolean after) {
		return g_signal_connect_closure(instance, Pointer.getPeer(detailed_signal), Pointer.getPeer(closure), after);
	}
	@org.bridj.ann.CLong 
	protected native static long g_signal_connect_closure(GObjectLibrary.gpointer instance, @Ptr long detailed_signal, @Ptr long closure, GObjectLibrary.gboolean after);
	/**
	 * Original signature : <code>gulong g_signal_connect_data(gpointer, const gchar*, GCallback, gpointer, GClosureNotify, GConnectFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:233</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_signal_connect_data(GObjectLibrary.gpointer instance, Pointer<Byte > detailed_signal, Pointer<GObjectLibrary.GCallback > c_handler, GObjectLibrary.gpointer data, Pointer<GObjectLibrary.GClosureNotify > destroy_data, IntValuedEnum<GObjectLibrary.GConnectFlags > connect_flags) {
		return g_signal_connect_data(instance, Pointer.getPeer(detailed_signal), Pointer.getPeer(c_handler), data, Pointer.getPeer(destroy_data), (int)connect_flags.value());
	}
	@org.bridj.ann.CLong 
	protected native static long g_signal_connect_data(GObjectLibrary.gpointer instance, @Ptr long detailed_signal, @Ptr long c_handler, GObjectLibrary.gpointer data, @Ptr long destroy_data, int connect_flags);
	/**
	 * Original signature : <code>void g_signal_handler_block(gpointer, gulong)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:235</i>
	 */
	public static native void g_signal_handler_block(GObjectLibrary.gpointer instance, @org.bridj.ann.CLong long handler_id);
	/**
	 * Original signature : <code>void g_signal_handler_unblock(gpointer, gulong)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:237</i>
	 */
	public static native void g_signal_handler_unblock(GObjectLibrary.gpointer instance, @org.bridj.ann.CLong long handler_id);
	/**
	 * Original signature : <code>void g_signal_handler_disconnect(gpointer, gulong)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:239</i>
	 */
	public static native void g_signal_handler_disconnect(GObjectLibrary.gpointer instance, @org.bridj.ann.CLong long handler_id);
	/**
	 * Original signature : <code>gboolean g_signal_handler_is_connected(gpointer, gulong)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:241</i>
	 */
	public static native GObjectLibrary.gboolean g_signal_handler_is_connected(GObjectLibrary.gpointer instance, @org.bridj.ann.CLong long handler_id);
	/**
	 * Original signature : <code>gulong g_signal_handler_find(gpointer, GSignalMatchType, guint, GQuark, GClosure*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:243</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_signal_handler_find(GObjectLibrary.gpointer instance, IntValuedEnum<GObjectLibrary.GSignalMatchType > mask, int signal_id, int detail, Pointer<GClosure > closure, GObjectLibrary.gpointer func, GObjectLibrary.gpointer data) {
		return g_signal_handler_find(instance, (int)mask.value(), signal_id, detail, Pointer.getPeer(closure), func, data);
	}
	@org.bridj.ann.CLong 
	protected native static long g_signal_handler_find(GObjectLibrary.gpointer instance, int mask, int signal_id, int detail, @Ptr long closure, GObjectLibrary.gpointer func, GObjectLibrary.gpointer data);
	/**
	 * Original signature : <code>guint g_signal_handlers_block_matched(gpointer, GSignalMatchType, guint, GQuark, GClosure*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:245</i>
	 */
	public static int g_signal_handlers_block_matched(GObjectLibrary.gpointer instance, IntValuedEnum<GObjectLibrary.GSignalMatchType > mask, int signal_id, int detail, Pointer<GClosure > closure, GObjectLibrary.gpointer func, GObjectLibrary.gpointer data) {
		return g_signal_handlers_block_matched(instance, (int)mask.value(), signal_id, detail, Pointer.getPeer(closure), func, data);
	}
	protected native static int g_signal_handlers_block_matched(GObjectLibrary.gpointer instance, int mask, int signal_id, int detail, @Ptr long closure, GObjectLibrary.gpointer func, GObjectLibrary.gpointer data);
	/**
	 * Original signature : <code>guint g_signal_handlers_unblock_matched(gpointer, GSignalMatchType, guint, GQuark, GClosure*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:247</i>
	 */
	public static int g_signal_handlers_unblock_matched(GObjectLibrary.gpointer instance, IntValuedEnum<GObjectLibrary.GSignalMatchType > mask, int signal_id, int detail, Pointer<GClosure > closure, GObjectLibrary.gpointer func, GObjectLibrary.gpointer data) {
		return g_signal_handlers_unblock_matched(instance, (int)mask.value(), signal_id, detail, Pointer.getPeer(closure), func, data);
	}
	protected native static int g_signal_handlers_unblock_matched(GObjectLibrary.gpointer instance, int mask, int signal_id, int detail, @Ptr long closure, GObjectLibrary.gpointer func, GObjectLibrary.gpointer data);
	/**
	 * Original signature : <code>guint g_signal_handlers_disconnect_matched(gpointer, GSignalMatchType, guint, GQuark, GClosure*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:249</i>
	 */
	public static int g_signal_handlers_disconnect_matched(GObjectLibrary.gpointer instance, IntValuedEnum<GObjectLibrary.GSignalMatchType > mask, int signal_id, int detail, Pointer<GClosure > closure, GObjectLibrary.gpointer func, GObjectLibrary.gpointer data) {
		return g_signal_handlers_disconnect_matched(instance, (int)mask.value(), signal_id, detail, Pointer.getPeer(closure), func, data);
	}
	protected native static int g_signal_handlers_disconnect_matched(GObjectLibrary.gpointer instance, int mask, int signal_id, int detail, @Ptr long closure, GObjectLibrary.gpointer func, GObjectLibrary.gpointer data);
	/**
	 * --- overriding and chaining ---<br>
	 * Original signature : <code>void g_signal_override_class_closure(guint, GType, GClosure*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:254</i>
	 */
	public static void g_signal_override_class_closure(int signal_id, @org.bridj.ann.CLong long instance_type, Pointer<GClosure > class_closure) {
		g_signal_override_class_closure(signal_id, instance_type, Pointer.getPeer(class_closure));
	}
	protected native static void g_signal_override_class_closure(int signal_id, @org.bridj.ann.CLong long instance_type, @Ptr long class_closure);
	/**
	 * Original signature : <code>void g_signal_override_class_handler(const gchar*, GType, GCallback)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:256</i>
	 */
	public static void g_signal_override_class_handler(Pointer<Byte > signal_name, @org.bridj.ann.CLong long instance_type, Pointer<GObjectLibrary.GCallback > class_handler) {
		g_signal_override_class_handler(Pointer.getPeer(signal_name), instance_type, Pointer.getPeer(class_handler));
	}
	protected native static void g_signal_override_class_handler(@Ptr long signal_name, @org.bridj.ann.CLong long instance_type, @Ptr long class_handler);
	/**
	 * Original signature : <code>void g_signal_chain_from_overridden(const GValue*, GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:258</i>
	 */
	public static void g_signal_chain_from_overridden(Pointer<GValue > instance_and_params, Pointer<GValue > return_value) {
		g_signal_chain_from_overridden(Pointer.getPeer(instance_and_params), Pointer.getPeer(return_value));
	}
	protected native static void g_signal_chain_from_overridden(@Ptr long instance_and_params, @Ptr long return_value);
	/**
	 * Original signature : <code>void g_signal_chain_from_overridden_handler(gpointer, null)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:260</i>
	 */
	public static native void g_signal_chain_from_overridden_handler(GObjectLibrary.gpointer instance, Object... varArgs1);
	/**
	 * Original signature : <code>gboolean g_signal_accumulator_true_handled(GSignalInvocationHint*, GValue*, const GValue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:262</i>
	 */
	public static GObjectLibrary.gboolean g_signal_accumulator_true_handled(Pointer<GSignalInvocationHint > ihint, Pointer<GValue > return_accu, Pointer<GValue > handler_return, GObjectLibrary.gpointer dummy) {
		return g_signal_accumulator_true_handled(Pointer.getPeer(ihint), Pointer.getPeer(return_accu), Pointer.getPeer(handler_return), dummy);
	}
	protected native static GObjectLibrary.gboolean g_signal_accumulator_true_handled(@Ptr long ihint, @Ptr long return_accu, @Ptr long handler_return, GObjectLibrary.gpointer dummy);
	/**
	 * Original signature : <code>gboolean g_signal_accumulator_first_wins(GSignalInvocationHint*, GValue*, const GValue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:264</i>
	 */
	public static GObjectLibrary.gboolean g_signal_accumulator_first_wins(Pointer<GSignalInvocationHint > ihint, Pointer<GValue > return_accu, Pointer<GValue > handler_return, GObjectLibrary.gpointer dummy) {
		return g_signal_accumulator_first_wins(Pointer.getPeer(ihint), Pointer.getPeer(return_accu), Pointer.getPeer(handler_return), dummy);
	}
	protected native static GObjectLibrary.gboolean g_signal_accumulator_first_wins(@Ptr long ihint, @Ptr long return_accu, @Ptr long handler_return, GObjectLibrary.gpointer dummy);
	/**
	 * < private ><br>
	 * Original signature : <code>void g_signal_handlers_destroy(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:269</i>
	 */
	public static native void g_signal_handlers_destroy(GObjectLibrary.gpointer instance);
	/**
	 * Original signature : <code>void _g_signals_destroy(GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsignal.h:271</i>
	 */
	public static native void _g_signals_destroy(@org.bridj.ann.CLong long itype);
	/**
	 * Original signature : <code>GType g_date_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:2</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_date_get_type();
	/**
	 * Original signature : <code>GType g_strv_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:4</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_strv_get_type();
	/**
	 * Original signature : <code>GType g_gstring_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:6</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_gstring_get_type();
	/**
	 * Original signature : <code>GType g_hash_table_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:8</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_hash_table_get_type();
	/**
	 * Original signature : <code>GType g_array_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:10</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_array_get_type();
	/**
	 * Original signature : <code>GType g_byte_array_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:12</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_byte_array_get_type();
	/**
	 * Original signature : <code>GType g_ptr_array_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:14</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_ptr_array_get_type();
	/**
	 * Original signature : <code>GType g_bytes_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:16</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_bytes_get_type();
	/**
	 * Original signature : <code>GType g_variant_type_get_gtype()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:18</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_variant_type_get_gtype();
	/**
	 * Original signature : <code>GType g_regex_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:20</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_regex_get_type();
	/**
	 * Original signature : <code>GType g_match_info_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:22</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_match_info_get_type();
	/**
	 * Original signature : <code>GType g_error_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:24</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_error_get_type();
	/**
	 * Original signature : <code>GType g_date_time_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:26</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_date_time_get_type();
	/**
	 * Original signature : <code>GType g_time_zone_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:28</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_time_zone_get_type();
	/**
	 * Original signature : <code>GType g_io_channel_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:30</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_io_channel_get_type();
	/**
	 * Original signature : <code>GType g_io_condition_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:32</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_io_condition_get_type();
	/**
	 * Original signature : <code>GType g_variant_builder_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:34</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_variant_builder_get_type();
	/**
	 * Original signature : <code>GType g_key_file_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:36</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_key_file_get_type();
	/**
	 * Original signature : <code>GType g_main_loop_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:38</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_main_loop_get_type();
	/**
	 * Original signature : <code>GType g_main_context_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:40</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_main_context_get_type();
	/**
	 * Original signature : <code>GType g_source_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:42</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_source_get_type();
	/**
	 * Original signature : <code>GType g_pollfd_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:44</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_pollfd_get_type();
	/**
	 * Original signature : <code>GType g_thread_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:46</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_thread_get_type();
	/**
	 * Original signature : <code>GType g_checksum_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:48</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_checksum_get_type();
	/**
	 * Original signature : <code>GType g_markup_parse_context_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:50</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_markup_parse_context_get_type();
	/**
	 * Original signature : <code>GType g_variant_get_gtype()</code><br>
	 * <i>native declaration : glib-2.0/gobject/glib-types.h:52</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_variant_get_gtype();
	/**
	 * --- prototypes ---<br>
	 * Original signature : <code>gpointer g_boxed_copy(GType, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gboxed.h:20</i>
	 */
	public static GObjectLibrary.gpointer g_boxed_copy(@org.bridj.ann.CLong long boxed_type, Pointer<? > src_boxed) {
		return g_boxed_copy(boxed_type, Pointer.getPeer(src_boxed));
	}
	protected native static GObjectLibrary.gpointer g_boxed_copy(@org.bridj.ann.CLong long boxed_type, @Ptr long src_boxed);
	/**
	 * Original signature : <code>void g_boxed_free(GType, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gboxed.h:22</i>
	 */
	public static native void g_boxed_free(@org.bridj.ann.CLong long boxed_type, GObjectLibrary.gpointer boxed);
	/**
	 * Original signature : <code>void g_value_set_boxed(GValue*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gboxed.h:24</i>
	 */
	public static void g_value_set_boxed(Pointer<GValue > value, Pointer<? > v_boxed) {
		g_value_set_boxed(Pointer.getPeer(value), Pointer.getPeer(v_boxed));
	}
	protected native static void g_value_set_boxed(@Ptr long value, @Ptr long v_boxed);
	/**
	 * Original signature : <code>void g_value_set_static_boxed(GValue*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gboxed.h:26</i>
	 */
	public static void g_value_set_static_boxed(Pointer<GValue > value, Pointer<? > v_boxed) {
		g_value_set_static_boxed(Pointer.getPeer(value), Pointer.getPeer(v_boxed));
	}
	protected native static void g_value_set_static_boxed(@Ptr long value, @Ptr long v_boxed);
	/**
	 * Original signature : <code>void g_value_take_boxed(GValue*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gboxed.h:28</i>
	 */
	public static void g_value_take_boxed(Pointer<GValue > value, Pointer<? > v_boxed) {
		g_value_take_boxed(Pointer.getPeer(value), Pointer.getPeer(v_boxed));
	}
	protected native static void g_value_take_boxed(@Ptr long value, @Ptr long v_boxed);
	/**
	 * Original signature : <code>void g_value_set_boxed_take_ownership(GValue*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gboxed.h:30</i>
	 */
	public static void g_value_set_boxed_take_ownership(Pointer<GValue > value, Pointer<? > v_boxed) {
		g_value_set_boxed_take_ownership(Pointer.getPeer(value), Pointer.getPeer(v_boxed));
	}
	protected native static void g_value_set_boxed_take_ownership(@Ptr long value, @Ptr long v_boxed);
	/**
	 * Original signature : <code>gpointer g_value_get_boxed(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gboxed.h:32</i>
	 */
	public static GObjectLibrary.gpointer g_value_get_boxed(Pointer<GValue > value) {
		return g_value_get_boxed(Pointer.getPeer(value));
	}
	protected native static GObjectLibrary.gpointer g_value_get_boxed(@Ptr long value);
	/**
	 * Original signature : <code>gpointer g_value_dup_boxed(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gboxed.h:34</i>
	 */
	public static GObjectLibrary.gpointer g_value_dup_boxed(Pointer<GValue > value) {
		return g_value_dup_boxed(Pointer.getPeer(value));
	}
	protected native static GObjectLibrary.gpointer g_value_dup_boxed(@Ptr long value);
	/**
	 * --- convenience ---<br>
	 * Original signature : <code>GType g_boxed_type_register_static(const gchar*, GBoxedCopyFunc, GBoxedFreeFunc)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gboxed.h:39</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_boxed_type_register_static(Pointer<Byte > name, GObjectLibrary.GBoxedCopyFunc boxed_copy, Pointer<GObjectLibrary.GBoxedFreeFunc > boxed_free) {
		return g_boxed_type_register_static(Pointer.getPeer(name), Pointer.getPeer(boxed_copy), Pointer.getPeer(boxed_free));
	}
	@org.bridj.ann.CLong 
	protected native static long g_boxed_type_register_static(@Ptr long name, @Ptr long boxed_copy, @Ptr long boxed_free);
	/**
	 * Original signature : <code>GType g_closure_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/gboxed.h:41</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_closure_get_type();
	/**
	 * Original signature : <code>GType g_value_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/gboxed.h:43</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_value_get_type();
	/**
	 * --- prototypes ---<br>
	 * Original signature : <code>GType g_initially_unowned_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:169</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_initially_unowned_get_type();
	/**
	 * Original signature : <code>void g_object_class_install_property(GObjectClass*, guint, GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:171</i>
	 */
	public static void g_object_class_install_property(Pointer<GObjectClass > oclass, int property_id, Pointer<GParamSpec > pspec) {
		g_object_class_install_property(Pointer.getPeer(oclass), property_id, Pointer.getPeer(pspec));
	}
	protected native static void g_object_class_install_property(@Ptr long oclass, int property_id, @Ptr long pspec);
	/**
	 * Original signature : <code>GParamSpec* g_object_class_find_property(GObjectClass*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:173</i>
	 */
	public static Pointer<GParamSpec > g_object_class_find_property(Pointer<GObjectClass > oclass, Pointer<Byte > property_name) {
		return Pointer.pointerToAddress(g_object_class_find_property(Pointer.getPeer(oclass), Pointer.getPeer(property_name)), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_object_class_find_property(@Ptr long oclass, @Ptr long property_name);
	/**
	 * Original signature : <code>GParamSpec** g_object_class_list_properties(GObjectClass*, guint*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:175</i>
	 */
	public static Pointer<Pointer<GParamSpec > > g_object_class_list_properties(Pointer<GObjectClass > oclass, Pointer<Integer > n_properties) {
		return Pointer.pointerToAddress(g_object_class_list_properties(Pointer.getPeer(oclass), Pointer.getPeer(n_properties)), DefaultParameterizedType.paramType(Pointer.class, GParamSpec.class));
	}
	@Ptr 
	protected native static long g_object_class_list_properties(@Ptr long oclass, @Ptr long n_properties);
	/**
	 * Original signature : <code>void g_object_class_override_property(GObjectClass*, guint, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:177</i>
	 */
	public static void g_object_class_override_property(Pointer<GObjectClass > oclass, int property_id, Pointer<Byte > name) {
		g_object_class_override_property(Pointer.getPeer(oclass), property_id, Pointer.getPeer(name));
	}
	protected native static void g_object_class_override_property(@Ptr long oclass, int property_id, @Ptr long name);
	/**
	 * Original signature : <code>void g_object_class_install_properties(GObjectClass*, guint, GParamSpec**)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:179</i>
	 */
	public static void g_object_class_install_properties(Pointer<GObjectClass > oclass, int n_pspecs, Pointer<Pointer<GParamSpec > > pspecs) {
		g_object_class_install_properties(Pointer.getPeer(oclass), n_pspecs, Pointer.getPeer(pspecs));
	}
	protected native static void g_object_class_install_properties(@Ptr long oclass, int n_pspecs, @Ptr long pspecs);
	/**
	 * Original signature : <code>void g_object_interface_install_property(gpointer, GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:181</i>
	 */
	public static void g_object_interface_install_property(GObjectLibrary.gpointer g_iface, Pointer<GParamSpec > pspec) {
		g_object_interface_install_property(g_iface, Pointer.getPeer(pspec));
	}
	protected native static void g_object_interface_install_property(GObjectLibrary.gpointer g_iface, @Ptr long pspec);
	/**
	 * Original signature : <code>GParamSpec* g_object_interface_find_property(gpointer, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:183</i>
	 */
	public static Pointer<GParamSpec > g_object_interface_find_property(GObjectLibrary.gpointer g_iface, Pointer<Byte > property_name) {
		return Pointer.pointerToAddress(g_object_interface_find_property(g_iface, Pointer.getPeer(property_name)), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_object_interface_find_property(GObjectLibrary.gpointer g_iface, @Ptr long property_name);
	/**
	 * Original signature : <code>GParamSpec** g_object_interface_list_properties(gpointer, guint*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:185</i>
	 */
	public static Pointer<Pointer<GParamSpec > > g_object_interface_list_properties(GObjectLibrary.gpointer g_iface, Pointer<Integer > n_properties_p) {
		return Pointer.pointerToAddress(g_object_interface_list_properties(g_iface, Pointer.getPeer(n_properties_p)), DefaultParameterizedType.paramType(Pointer.class, GParamSpec.class));
	}
	@Ptr 
	protected native static long g_object_interface_list_properties(GObjectLibrary.gpointer g_iface, @Ptr long n_properties_p);
	/**
	 * Original signature : <code>GType g_object_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:187</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_object_get_type();
	/**
	 * Original signature : <code>gpointer g_object_new(GType, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:189</i>
	 */
	public static GObjectLibrary.gpointer g_object_new(@org.bridj.ann.CLong long object_type, Pointer<Byte > first_property_name, Object... varArgs1) {
		return g_object_new(object_type, Pointer.getPeer(first_property_name), varArgs1);
	}
	protected native static GObjectLibrary.gpointer g_object_new(@org.bridj.ann.CLong long object_type, @Ptr long first_property_name, Object... varArgs1);
	/**
	 * Original signature : <code>gpointer g_object_newv(GType, guint, GParameter*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:191</i>
	 */
	public static GObjectLibrary.gpointer g_object_newv(@org.bridj.ann.CLong long object_type, int n_parameters, Pointer<GParameter > parameters) {
		return g_object_newv(object_type, n_parameters, Pointer.getPeer(parameters));
	}
	protected native static GObjectLibrary.gpointer g_object_newv(@org.bridj.ann.CLong long object_type, int n_parameters, @Ptr long parameters);
	/**
	 * Original signature : <code>GObject* g_object_new_valist(GType, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:193</i>
	 */
	public static Pointer<GObject > g_object_new_valist(@org.bridj.ann.CLong long object_type, Pointer<Byte > first_property_name, Object... var_args) {
		return Pointer.pointerToAddress(g_object_new_valist(object_type, Pointer.getPeer(first_property_name), var_args), GObject.class);
	}
	@Ptr 
	protected native static long g_object_new_valist(@org.bridj.ann.CLong long object_type, @Ptr long first_property_name, Object... var_args);
	/**
	 * Original signature : <code>void g_object_set(gpointer, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:195</i>
	 */
	public static void g_object_set(GObjectLibrary.gpointer object, Pointer<Byte > first_property_name, Object... varArgs1) {
		g_object_set(object, Pointer.getPeer(first_property_name), varArgs1);
	}
	protected native static void g_object_set(GObjectLibrary.gpointer object, @Ptr long first_property_name, Object... varArgs1);
	/**
	 * Original signature : <code>void g_object_get(gpointer, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:197</i>
	 */
	public static void g_object_get(GObjectLibrary.gpointer object, Pointer<Byte > first_property_name, Object... varArgs1) {
		g_object_get(object, Pointer.getPeer(first_property_name), varArgs1);
	}
	protected native static void g_object_get(GObjectLibrary.gpointer object, @Ptr long first_property_name, Object... varArgs1);
	/**
	 * Original signature : <code>gpointer g_object_connect(gpointer, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:199</i>
	 */
	public static GObjectLibrary.gpointer g_object_connect(GObjectLibrary.gpointer object, Pointer<Byte > signal_spec, Object... varArgs1) {
		return g_object_connect(object, Pointer.getPeer(signal_spec), varArgs1);
	}
	protected native static GObjectLibrary.gpointer g_object_connect(GObjectLibrary.gpointer object, @Ptr long signal_spec, Object... varArgs1);
	/**
	 * Original signature : <code>void g_object_disconnect(gpointer, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:201</i>
	 */
	public static void g_object_disconnect(GObjectLibrary.gpointer object, Pointer<Byte > signal_spec, Object... varArgs1) {
		g_object_disconnect(object, Pointer.getPeer(signal_spec), varArgs1);
	}
	protected native static void g_object_disconnect(GObjectLibrary.gpointer object, @Ptr long signal_spec, Object... varArgs1);
	/**
	 * Original signature : <code>void g_object_set_valist(GObject*, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:203</i>
	 */
	public static void g_object_set_valist(Pointer<GObject > object, Pointer<Byte > first_property_name, Object... var_args) {
		g_object_set_valist(Pointer.getPeer(object), Pointer.getPeer(first_property_name), var_args);
	}
	protected native static void g_object_set_valist(@Ptr long object, @Ptr long first_property_name, Object... var_args);
	/**
	 * Original signature : <code>void g_object_get_valist(GObject*, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:205</i>
	 */
	public static void g_object_get_valist(Pointer<GObject > object, Pointer<Byte > first_property_name, Object... var_args) {
		g_object_get_valist(Pointer.getPeer(object), Pointer.getPeer(first_property_name), var_args);
	}
	protected native static void g_object_get_valist(@Ptr long object, @Ptr long first_property_name, Object... var_args);
	/**
	 * Original signature : <code>void g_object_set_property(GObject*, const gchar*, const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:207</i>
	 */
	public static void g_object_set_property(Pointer<GObject > object, Pointer<Byte > property_name, Pointer<GValue > value) {
		g_object_set_property(Pointer.getPeer(object), Pointer.getPeer(property_name), Pointer.getPeer(value));
	}
	protected native static void g_object_set_property(@Ptr long object, @Ptr long property_name, @Ptr long value);
	/**
	 * Original signature : <code>void g_object_get_property(GObject*, const gchar*, GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:209</i>
	 */
	public static void g_object_get_property(Pointer<GObject > object, Pointer<Byte > property_name, Pointer<GValue > value) {
		g_object_get_property(Pointer.getPeer(object), Pointer.getPeer(property_name), Pointer.getPeer(value));
	}
	protected native static void g_object_get_property(@Ptr long object, @Ptr long property_name, @Ptr long value);
	/**
	 * Original signature : <code>void g_object_freeze_notify(GObject*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:211</i>
	 */
	public static void g_object_freeze_notify(Pointer<GObject > object) {
		g_object_freeze_notify(Pointer.getPeer(object));
	}
	protected native static void g_object_freeze_notify(@Ptr long object);
	/**
	 * Original signature : <code>void g_object_notify(GObject*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:213</i>
	 */
	public static void g_object_notify(Pointer<GObject > object, Pointer<Byte > property_name) {
		g_object_notify(Pointer.getPeer(object), Pointer.getPeer(property_name));
	}
	protected native static void g_object_notify(@Ptr long object, @Ptr long property_name);
	/**
	 * Original signature : <code>void g_object_notify_by_pspec(GObject*, GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:215</i>
	 */
	public static void g_object_notify_by_pspec(Pointer<GObject > object, Pointer<GParamSpec > pspec) {
		g_object_notify_by_pspec(Pointer.getPeer(object), Pointer.getPeer(pspec));
	}
	protected native static void g_object_notify_by_pspec(@Ptr long object, @Ptr long pspec);
	/**
	 * Original signature : <code>void g_object_thaw_notify(GObject*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:217</i>
	 */
	public static void g_object_thaw_notify(Pointer<GObject > object) {
		g_object_thaw_notify(Pointer.getPeer(object));
	}
	protected native static void g_object_thaw_notify(@Ptr long object);
	/**
	 * Original signature : <code>gboolean g_object_is_floating(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:219</i>
	 */
	public static native GObjectLibrary.gboolean g_object_is_floating(GObjectLibrary.gpointer object);
	/**
	 * Original signature : <code>gpointer g_object_ref_sink(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:221</i>
	 */
	public static native GObjectLibrary.gpointer g_object_ref_sink(GObjectLibrary.gpointer object);
	/**
	 * Original signature : <code>gpointer g_object_ref(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:223</i>
	 */
	public static native GObjectLibrary.gpointer g_object_ref(GObjectLibrary.gpointer object);
	/**
	 * Original signature : <code>void g_object_unref(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:225</i>
	 */
	public static native void g_object_unref(GObjectLibrary.gpointer object);
	/**
	 * Original signature : <code>void g_object_weak_ref(GObject*, GWeakNotify, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:227</i>
	 */
	public static void g_object_weak_ref(Pointer<GObject > object, Pointer<GObjectLibrary.GWeakNotify > notify$, GObjectLibrary.gpointer data) {
		g_object_weak_ref(Pointer.getPeer(object), Pointer.getPeer(notify$), data);
	}
	protected native static void g_object_weak_ref(@Ptr long object, @Ptr long notify$, GObjectLibrary.gpointer data);
	/**
	 * Original signature : <code>void g_object_weak_unref(GObject*, GWeakNotify, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:229</i>
	 */
	public static void g_object_weak_unref(Pointer<GObject > object, Pointer<GObjectLibrary.GWeakNotify > notify$, GObjectLibrary.gpointer data) {
		g_object_weak_unref(Pointer.getPeer(object), Pointer.getPeer(notify$), data);
	}
	protected native static void g_object_weak_unref(@Ptr long object, @Ptr long notify$, GObjectLibrary.gpointer data);
	/**
	 * Original signature : <code>void g_object_add_weak_pointer(GObject*, gpointer*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:231</i>
	 */
	public static void g_object_add_weak_pointer(Pointer<GObject > object, Pointer<GObjectLibrary.gpointer > weak_pointer_location) {
		g_object_add_weak_pointer(Pointer.getPeer(object), Pointer.getPeer(weak_pointer_location));
	}
	protected native static void g_object_add_weak_pointer(@Ptr long object, @Ptr long weak_pointer_location);
	/**
	 * Original signature : <code>void g_object_remove_weak_pointer(GObject*, gpointer*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:233</i>
	 */
	public static void g_object_remove_weak_pointer(Pointer<GObject > object, Pointer<GObjectLibrary.gpointer > weak_pointer_location) {
		g_object_remove_weak_pointer(Pointer.getPeer(object), Pointer.getPeer(weak_pointer_location));
	}
	protected native static void g_object_remove_weak_pointer(@Ptr long object, @Ptr long weak_pointer_location);
	/**
	 * Original signature : <code>void g_object_add_toggle_ref(GObject*, GToggleNotify, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:248</i>
	 */
	public static void g_object_add_toggle_ref(Pointer<GObject > object, Pointer<GObjectLibrary.GToggleNotify > notify$, GObjectLibrary.gpointer data) {
		g_object_add_toggle_ref(Pointer.getPeer(object), Pointer.getPeer(notify$), data);
	}
	protected native static void g_object_add_toggle_ref(@Ptr long object, @Ptr long notify$, GObjectLibrary.gpointer data);
	/**
	 * Original signature : <code>void g_object_remove_toggle_ref(GObject*, GToggleNotify, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:250</i>
	 */
	public static void g_object_remove_toggle_ref(Pointer<GObject > object, Pointer<GObjectLibrary.GToggleNotify > notify$, GObjectLibrary.gpointer data) {
		g_object_remove_toggle_ref(Pointer.getPeer(object), Pointer.getPeer(notify$), data);
	}
	protected native static void g_object_remove_toggle_ref(@Ptr long object, @Ptr long notify$, GObjectLibrary.gpointer data);
	/**
	 * Original signature : <code>gpointer g_object_get_qdata(GObject*, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:252</i>
	 */
	public static GObjectLibrary.gpointer g_object_get_qdata(Pointer<GObject > object, int quark) {
		return g_object_get_qdata(Pointer.getPeer(object), quark);
	}
	protected native static GObjectLibrary.gpointer g_object_get_qdata(@Ptr long object, int quark);
	/**
	 * Original signature : <code>void g_object_set_qdata(GObject*, GQuark, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:254</i>
	 */
	public static void g_object_set_qdata(Pointer<GObject > object, int quark, GObjectLibrary.gpointer data) {
		g_object_set_qdata(Pointer.getPeer(object), quark, data);
	}
	protected native static void g_object_set_qdata(@Ptr long object, int quark, GObjectLibrary.gpointer data);
	/**
	 * Original signature : <code>void g_object_set_qdata_full(GObject*, GQuark, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:256</i>
	 */
	public static void g_object_set_qdata_full(Pointer<GObject > object, int quark, GObjectLibrary.gpointer data, GObjectLibrary.GDestroyNotify destroy) {
		g_object_set_qdata_full(Pointer.getPeer(object), quark, data, Pointer.getPeer(destroy));
	}
	protected native static void g_object_set_qdata_full(@Ptr long object, int quark, GObjectLibrary.gpointer data, @Ptr long destroy);
	/**
	 * Original signature : <code>gpointer g_object_steal_qdata(GObject*, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:258</i>
	 */
	public static GObjectLibrary.gpointer g_object_steal_qdata(Pointer<GObject > object, int quark) {
		return g_object_steal_qdata(Pointer.getPeer(object), quark);
	}
	protected native static GObjectLibrary.gpointer g_object_steal_qdata(@Ptr long object, int quark);
	/**
	 * Original signature : <code>gpointer g_object_dup_qdata(GObject*, GQuark, GDuplicateFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:260</i>
	 */
	public static GObjectLibrary.gpointer g_object_dup_qdata(Pointer<GObject > object, int quark, GObjectLibrary.GDuplicateFunc dup_func, GObjectLibrary.gpointer user_data) {
		return g_object_dup_qdata(Pointer.getPeer(object), quark, Pointer.getPeer(dup_func), user_data);
	}
	protected native static GObjectLibrary.gpointer g_object_dup_qdata(@Ptr long object, int quark, @Ptr long dup_func, GObjectLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_object_replace_qdata(GObject*, GQuark, gpointer, gpointer, GDestroyNotify, GDestroyNotify*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:262</i>
	 */
	public static GObjectLibrary.gboolean g_object_replace_qdata(Pointer<GObject > object, int quark, GObjectLibrary.gpointer oldval, GObjectLibrary.gpointer newval, GObjectLibrary.GDestroyNotify destroy, Pointer<GObjectLibrary.GDestroyNotify > old_destroy) {
		return g_object_replace_qdata(Pointer.getPeer(object), quark, oldval, newval, Pointer.getPeer(destroy), Pointer.getPeer(old_destroy));
	}
	protected native static GObjectLibrary.gboolean g_object_replace_qdata(@Ptr long object, int quark, GObjectLibrary.gpointer oldval, GObjectLibrary.gpointer newval, @Ptr long destroy, @Ptr long old_destroy);
	/**
	 * Original signature : <code>gpointer g_object_get_data(GObject*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:264</i>
	 */
	public static GObjectLibrary.gpointer g_object_get_data(Pointer<GObject > object, Pointer<Byte > key) {
		return g_object_get_data(Pointer.getPeer(object), Pointer.getPeer(key));
	}
	protected native static GObjectLibrary.gpointer g_object_get_data(@Ptr long object, @Ptr long key);
	/**
	 * Original signature : <code>void g_object_set_data(GObject*, const gchar*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:266</i>
	 */
	public static void g_object_set_data(Pointer<GObject > object, Pointer<Byte > key, GObjectLibrary.gpointer data) {
		g_object_set_data(Pointer.getPeer(object), Pointer.getPeer(key), data);
	}
	protected native static void g_object_set_data(@Ptr long object, @Ptr long key, GObjectLibrary.gpointer data);
	/**
	 * Original signature : <code>void g_object_set_data_full(GObject*, const gchar*, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:268</i>
	 */
	public static void g_object_set_data_full(Pointer<GObject > object, Pointer<Byte > key, GObjectLibrary.gpointer data, GObjectLibrary.GDestroyNotify destroy) {
		g_object_set_data_full(Pointer.getPeer(object), Pointer.getPeer(key), data, Pointer.getPeer(destroy));
	}
	protected native static void g_object_set_data_full(@Ptr long object, @Ptr long key, GObjectLibrary.gpointer data, @Ptr long destroy);
	/**
	 * Original signature : <code>gpointer g_object_steal_data(GObject*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:270</i>
	 */
	public static GObjectLibrary.gpointer g_object_steal_data(Pointer<GObject > object, Pointer<Byte > key) {
		return g_object_steal_data(Pointer.getPeer(object), Pointer.getPeer(key));
	}
	protected native static GObjectLibrary.gpointer g_object_steal_data(@Ptr long object, @Ptr long key);
	/**
	 * Original signature : <code>gpointer g_object_dup_data(GObject*, const gchar*, GDuplicateFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:272</i>
	 */
	public static GObjectLibrary.gpointer g_object_dup_data(Pointer<GObject > object, Pointer<Byte > key, GObjectLibrary.GDuplicateFunc dup_func, GObjectLibrary.gpointer user_data) {
		return g_object_dup_data(Pointer.getPeer(object), Pointer.getPeer(key), Pointer.getPeer(dup_func), user_data);
	}
	protected native static GObjectLibrary.gpointer g_object_dup_data(@Ptr long object, @Ptr long key, @Ptr long dup_func, GObjectLibrary.gpointer user_data);
	/**
	 * Original signature : <code>gboolean g_object_replace_data(GObject*, const gchar*, gpointer, gpointer, GDestroyNotify, GDestroyNotify*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:274</i>
	 */
	public static GObjectLibrary.gboolean g_object_replace_data(Pointer<GObject > object, Pointer<Byte > key, GObjectLibrary.gpointer oldval, GObjectLibrary.gpointer newval, GObjectLibrary.GDestroyNotify destroy, Pointer<GObjectLibrary.GDestroyNotify > old_destroy) {
		return g_object_replace_data(Pointer.getPeer(object), Pointer.getPeer(key), oldval, newval, Pointer.getPeer(destroy), Pointer.getPeer(old_destroy));
	}
	protected native static GObjectLibrary.gboolean g_object_replace_data(@Ptr long object, @Ptr long key, GObjectLibrary.gpointer oldval, GObjectLibrary.gpointer newval, @Ptr long destroy, @Ptr long old_destroy);
	/**
	 * Original signature : <code>void g_object_watch_closure(GObject*, GClosure*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:276</i>
	 */
	public static void g_object_watch_closure(Pointer<GObject > object, Pointer<GClosure > closure) {
		g_object_watch_closure(Pointer.getPeer(object), Pointer.getPeer(closure));
	}
	protected native static void g_object_watch_closure(@Ptr long object, @Ptr long closure);
	/**
	 * Original signature : <code>GClosure* g_cclosure_new_object(GCallback, GObject*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:278</i>
	 */
	public static Pointer<GClosure > g_cclosure_new_object(Pointer<GObjectLibrary.GCallback > callback_func, Pointer<GObject > object) {
		return Pointer.pointerToAddress(g_cclosure_new_object(Pointer.getPeer(callback_func), Pointer.getPeer(object)), GClosure.class);
	}
	@Ptr 
	protected native static long g_cclosure_new_object(@Ptr long callback_func, @Ptr long object);
	/**
	 * Original signature : <code>GClosure* g_cclosure_new_object_swap(GCallback, GObject*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:280</i>
	 */
	public static Pointer<GClosure > g_cclosure_new_object_swap(Pointer<GObjectLibrary.GCallback > callback_func, Pointer<GObject > object) {
		return Pointer.pointerToAddress(g_cclosure_new_object_swap(Pointer.getPeer(callback_func), Pointer.getPeer(object)), GClosure.class);
	}
	@Ptr 
	protected native static long g_cclosure_new_object_swap(@Ptr long callback_func, @Ptr long object);
	/**
	 * Original signature : <code>GClosure* g_closure_new_object(guint, GObject*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:282</i>
	 */
	public static Pointer<GClosure > g_closure_new_object(int sizeof_closure, Pointer<GObject > object) {
		return Pointer.pointerToAddress(g_closure_new_object(sizeof_closure, Pointer.getPeer(object)), GClosure.class);
	}
	@Ptr 
	protected native static long g_closure_new_object(int sizeof_closure, @Ptr long object);
	/**
	 * Original signature : <code>void g_value_set_object(GValue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:284</i>
	 */
	public static void g_value_set_object(Pointer<GValue > value, GObjectLibrary.gpointer v_object) {
		g_value_set_object(Pointer.getPeer(value), v_object);
	}
	protected native static void g_value_set_object(@Ptr long value, GObjectLibrary.gpointer v_object);
	/**
	 * Original signature : <code>gpointer g_value_get_object(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:286</i>
	 */
	public static GObjectLibrary.gpointer g_value_get_object(Pointer<GValue > value) {
		return g_value_get_object(Pointer.getPeer(value));
	}
	protected native static GObjectLibrary.gpointer g_value_get_object(@Ptr long value);
	/**
	 * Original signature : <code>gpointer g_value_dup_object(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:288</i>
	 */
	public static GObjectLibrary.gpointer g_value_dup_object(Pointer<GValue > value) {
		return g_value_dup_object(Pointer.getPeer(value));
	}
	protected native static GObjectLibrary.gpointer g_value_dup_object(@Ptr long value);
	/**
	 * Original signature : <code>gulong g_signal_connect_object(gpointer, const gchar*, GCallback, gpointer, GConnectFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:290</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_signal_connect_object(GObjectLibrary.gpointer instance, Pointer<Byte > detailed_signal, Pointer<GObjectLibrary.GCallback > c_handler, GObjectLibrary.gpointer gobject, IntValuedEnum<GObjectLibrary.GConnectFlags > connect_flags) {
		return g_signal_connect_object(instance, Pointer.getPeer(detailed_signal), Pointer.getPeer(c_handler), gobject, (int)connect_flags.value());
	}
	@org.bridj.ann.CLong 
	protected native static long g_signal_connect_object(GObjectLibrary.gpointer instance, @Ptr long detailed_signal, @Ptr long c_handler, GObjectLibrary.gpointer gobject, int connect_flags);
	/**
	 * < protected ><br>
	 * Original signature : <code>void g_object_force_floating(GObject*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:295</i>
	 */
	public static void g_object_force_floating(Pointer<GObject > object) {
		g_object_force_floating(Pointer.getPeer(object));
	}
	protected native static void g_object_force_floating(@Ptr long object);
	/**
	 * Original signature : <code>void g_object_run_dispose(GObject*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:297</i>
	 */
	public static void g_object_run_dispose(Pointer<GObject > object) {
		g_object_run_dispose(Pointer.getPeer(object));
	}
	protected native static void g_object_run_dispose(@Ptr long object);
	/**
	 * Original signature : <code>void g_value_take_object(GValue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:299</i>
	 */
	public static void g_value_take_object(Pointer<GValue > value, GObjectLibrary.gpointer v_object) {
		g_value_take_object(Pointer.getPeer(value), v_object);
	}
	protected native static void g_value_take_object(@Ptr long value, GObjectLibrary.gpointer v_object);
	/**
	 * Original signature : <code>void g_value_set_object_take_ownership(GValue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:301</i>
	 */
	public static void g_value_set_object_take_ownership(Pointer<GValue > value, GObjectLibrary.gpointer v_object) {
		g_value_set_object_take_ownership(Pointer.getPeer(value), v_object);
	}
	protected native static void g_value_set_object_take_ownership(@Ptr long value, GObjectLibrary.gpointer v_object);
	/**
	 * Original signature : <code>gsize g_object_compat_control(gsize, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:303</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_object_compat_control(@org.bridj.ann.CLong long what, GObjectLibrary.gpointer data);
	/**
	 * Original signature : <code>void g_clear_object(volatile GObject**)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:305</i>
	 */
	public static void g_clear_object(Pointer<Pointer<GObject > > object_ptr) {
		g_clear_object(Pointer.getPeer(object_ptr));
	}
	protected native static void g_clear_object(@Ptr long object_ptr);
	/**
	 * Original signature : <code>void g_weak_ref_init(GWeakRef*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:314</i>
	 */
	public static void g_weak_ref_init(Pointer<GWeakRef > weak_ref, GObjectLibrary.gpointer object) {
		g_weak_ref_init(Pointer.getPeer(weak_ref), object);
	}
	protected native static void g_weak_ref_init(@Ptr long weak_ref, GObjectLibrary.gpointer object);
	/**
	 * Original signature : <code>void g_weak_ref_clear(GWeakRef*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:316</i>
	 */
	public static void g_weak_ref_clear(Pointer<GWeakRef > weak_ref) {
		g_weak_ref_clear(Pointer.getPeer(weak_ref));
	}
	protected native static void g_weak_ref_clear(@Ptr long weak_ref);
	/**
	 * Original signature : <code>gpointer g_weak_ref_get(GWeakRef*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:318</i>
	 */
	public static GObjectLibrary.gpointer g_weak_ref_get(Pointer<GWeakRef > weak_ref) {
		return g_weak_ref_get(Pointer.getPeer(weak_ref));
	}
	protected native static GObjectLibrary.gpointer g_weak_ref_get(@Ptr long weak_ref);
	/**
	 * Original signature : <code>void g_weak_ref_set(GWeakRef*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gobject.h:320</i>
	 */
	public static void g_weak_ref_set(Pointer<GWeakRef > weak_ref, GObjectLibrary.gpointer object) {
		g_weak_ref_set(Pointer.getPeer(weak_ref), object);
	}
	protected native static void g_weak_ref_set(@Ptr long weak_ref, GObjectLibrary.gpointer object);
	/**
	 * Original signature : <code>GType g_binding_flags_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/gbinding.h:52</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_binding_flags_get_type();
	/**
	 * Original signature : <code>GType g_binding_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/gbinding.h:54</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_binding_get_type();
	/**
	 * Original signature : <code>GBindingFlags g_binding_get_flags(GBinding*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gbinding.h:56</i>
	 */
	public static IntValuedEnum<GObjectLibrary.GBindingFlags > g_binding_get_flags(Pointer<GObjectLibrary.GBinding > binding) {
		return FlagSet.fromValue(g_binding_get_flags(Pointer.getPeer(binding)), GObjectLibrary.GBindingFlags.class);
	}
	protected native static int g_binding_get_flags(@Ptr long binding);
	/**
	 * Original signature : <code>GObject* g_binding_get_source(GBinding*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gbinding.h:58</i>
	 */
	public static Pointer<GObject > g_binding_get_source(Pointer<GObjectLibrary.GBinding > binding) {
		return Pointer.pointerToAddress(g_binding_get_source(Pointer.getPeer(binding)), GObject.class);
	}
	@Ptr 
	protected native static long g_binding_get_source(@Ptr long binding);
	/**
	 * Original signature : <code>GObject* g_binding_get_target(GBinding*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gbinding.h:60</i>
	 */
	public static Pointer<GObject > g_binding_get_target(Pointer<GObjectLibrary.GBinding > binding) {
		return Pointer.pointerToAddress(g_binding_get_target(Pointer.getPeer(binding)), GObject.class);
	}
	@Ptr 
	protected native static long g_binding_get_target(@Ptr long binding);
	/**
	 * Original signature : <code>gchar* g_binding_get_source_property(GBinding*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gbinding.h:62</i>
	 */
	public static Pointer<Byte > g_binding_get_source_property(Pointer<GObjectLibrary.GBinding > binding) {
		return Pointer.pointerToAddress(g_binding_get_source_property(Pointer.getPeer(binding)), Byte.class);
	}
	@Ptr 
	protected native static long g_binding_get_source_property(@Ptr long binding);
	/**
	 * Original signature : <code>gchar* g_binding_get_target_property(GBinding*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gbinding.h:64</i>
	 */
	public static Pointer<Byte > g_binding_get_target_property(Pointer<GObjectLibrary.GBinding > binding) {
		return Pointer.pointerToAddress(g_binding_get_target_property(Pointer.getPeer(binding)), Byte.class);
	}
	@Ptr 
	protected native static long g_binding_get_target_property(@Ptr long binding);
	/**
	 * Original signature : <code>void g_binding_unbind(GBinding*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gbinding.h:66</i>
	 */
	public static void g_binding_unbind(Pointer<GObjectLibrary.GBinding > binding) {
		g_binding_unbind(Pointer.getPeer(binding));
	}
	protected native static void g_binding_unbind(@Ptr long binding);
	/**
	 * Original signature : <code>GBinding* g_object_bind_property(gpointer, const gchar*, gpointer, const gchar*, GBindingFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gbinding.h:68</i>
	 */
	public static Pointer<GObjectLibrary.GBinding > g_object_bind_property(GObjectLibrary.gpointer source, Pointer<Byte > source_property, GObjectLibrary.gpointer target, Pointer<Byte > target_property, IntValuedEnum<GObjectLibrary.GBindingFlags > flags) {
		return Pointer.pointerToAddress(g_object_bind_property(source, Pointer.getPeer(source_property), target, Pointer.getPeer(target_property), (int)flags.value()), GObjectLibrary.GBinding.class);
	}
	@Ptr 
	protected native static long g_object_bind_property(GObjectLibrary.gpointer source, @Ptr long source_property, GObjectLibrary.gpointer target, @Ptr long target_property, int flags);
	/**
	 * Original signature : <code>GBinding* g_object_bind_property_full(gpointer, const gchar*, gpointer, const gchar*, GBindingFlags, GBindingTransformFunc, GBindingTransformFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gbinding.h:70</i>
	 */
	public static Pointer<GObjectLibrary.GBinding > g_object_bind_property_full(GObjectLibrary.gpointer source, Pointer<Byte > source_property, GObjectLibrary.gpointer target, Pointer<Byte > target_property, IntValuedEnum<GObjectLibrary.GBindingFlags > flags, GObjectLibrary.GBindingTransformFunc transform_to, GObjectLibrary.GBindingTransformFunc transform_from, GObjectLibrary.gpointer user_data, GObjectLibrary.GDestroyNotify notify$) {
		return Pointer.pointerToAddress(g_object_bind_property_full(source, Pointer.getPeer(source_property), target, Pointer.getPeer(target_property), (int)flags.value(), Pointer.getPeer(transform_to), Pointer.getPeer(transform_from), user_data, Pointer.getPeer(notify$)), GObjectLibrary.GBinding.class);
	}
	@Ptr 
	protected native static long g_object_bind_property_full(GObjectLibrary.gpointer source, @Ptr long source_property, GObjectLibrary.gpointer target, @Ptr long target_property, int flags, @Ptr long transform_to, @Ptr long transform_from, GObjectLibrary.gpointer user_data, @Ptr long notify$);
	/**
	 * Original signature : <code>GBinding* g_object_bind_property_with_closures(gpointer, const gchar*, gpointer, const gchar*, GBindingFlags, GClosure*, GClosure*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gbinding.h:72</i>
	 */
	public static Pointer<GObjectLibrary.GBinding > g_object_bind_property_with_closures(GObjectLibrary.gpointer source, Pointer<Byte > source_property, GObjectLibrary.gpointer target, Pointer<Byte > target_property, IntValuedEnum<GObjectLibrary.GBindingFlags > flags, Pointer<GClosure > transform_to, Pointer<GClosure > transform_from) {
		return Pointer.pointerToAddress(g_object_bind_property_with_closures(source, Pointer.getPeer(source_property), target, Pointer.getPeer(target_property), (int)flags.value(), Pointer.getPeer(transform_to), Pointer.getPeer(transform_from)), GObjectLibrary.GBinding.class);
	}
	@Ptr 
	protected native static long g_object_bind_property_with_closures(GObjectLibrary.gpointer source, @Ptr long source_property, GObjectLibrary.gpointer target, @Ptr long target_property, int flags, @Ptr long transform_to, @Ptr long transform_from);
	/**
	 * --- prototypes ---<br>
	 * Original signature : <code>GType g_type_plugin_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtypeplugin.h:68</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_type_plugin_get_type();
	/**
	 * Original signature : <code>void g_type_plugin_use(GTypePlugin*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtypeplugin.h:70</i>
	 */
	public static void g_type_plugin_use(Pointer<GObjectLibrary.GTypePlugin > plugin) {
		g_type_plugin_use(Pointer.getPeer(plugin));
	}
	protected native static void g_type_plugin_use(@Ptr long plugin);
	/**
	 * Original signature : <code>void g_type_plugin_unuse(GTypePlugin*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtypeplugin.h:72</i>
	 */
	public static void g_type_plugin_unuse(Pointer<GObjectLibrary.GTypePlugin > plugin) {
		g_type_plugin_unuse(Pointer.getPeer(plugin));
	}
	protected native static void g_type_plugin_unuse(@Ptr long plugin);
	/**
	 * Original signature : <code>void g_type_plugin_complete_type_info(GTypePlugin*, GType, GTypeInfo*, GTypeValueTable*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtypeplugin.h:74</i>
	 */
	public static void g_type_plugin_complete_type_info(Pointer<GObjectLibrary.GTypePlugin > plugin, @org.bridj.ann.CLong long g_type, Pointer<GTypeInfo > info, Pointer<GTypeValueTable > value_table) {
		g_type_plugin_complete_type_info(Pointer.getPeer(plugin), g_type, Pointer.getPeer(info), Pointer.getPeer(value_table));
	}
	protected native static void g_type_plugin_complete_type_info(@Ptr long plugin, @org.bridj.ann.CLong long g_type, @Ptr long info, @Ptr long value_table);
	/**
	 * Original signature : <code>void g_type_plugin_complete_interface_info(GTypePlugin*, GType, GType, GInterfaceInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtypeplugin.h:76</i>
	 */
	public static void g_type_plugin_complete_interface_info(Pointer<GObjectLibrary.GTypePlugin > plugin, @org.bridj.ann.CLong long instance_type, @org.bridj.ann.CLong long interface_type, Pointer<GInterfaceInfo > info) {
		g_type_plugin_complete_interface_info(Pointer.getPeer(plugin), instance_type, interface_type, Pointer.getPeer(info));
	}
	protected native static void g_type_plugin_complete_interface_info(@Ptr long plugin, @org.bridj.ann.CLong long instance_type, @org.bridj.ann.CLong long interface_type, @Ptr long info);
	/**
	 * --- prototypes ---<br>
	 * Original signature : <code>GEnumValue* g_enum_get_value(GEnumClass*, gint)</code><br>
	 * <i>native declaration : glib-2.0/gobject/genums.h:76</i>
	 */
	public static Pointer<GEnumValue > g_enum_get_value(Pointer<GEnumClass > enum_class, int value) {
		return Pointer.pointerToAddress(g_enum_get_value(Pointer.getPeer(enum_class), value), GEnumValue.class);
	}
	@Ptr 
	protected native static long g_enum_get_value(@Ptr long enum_class, int value);
	/**
	 * Original signature : <code>GEnumValue* g_enum_get_value_by_name(GEnumClass*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/genums.h:78</i>
	 */
	public static Pointer<GEnumValue > g_enum_get_value_by_name(Pointer<GEnumClass > enum_class, Pointer<Byte > name) {
		return Pointer.pointerToAddress(g_enum_get_value_by_name(Pointer.getPeer(enum_class), Pointer.getPeer(name)), GEnumValue.class);
	}
	@Ptr 
	protected native static long g_enum_get_value_by_name(@Ptr long enum_class, @Ptr long name);
	/**
	 * Original signature : <code>GEnumValue* g_enum_get_value_by_nick(GEnumClass*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/genums.h:80</i>
	 */
	public static Pointer<GEnumValue > g_enum_get_value_by_nick(Pointer<GEnumClass > enum_class, Pointer<Byte > nick) {
		return Pointer.pointerToAddress(g_enum_get_value_by_nick(Pointer.getPeer(enum_class), Pointer.getPeer(nick)), GEnumValue.class);
	}
	@Ptr 
	protected native static long g_enum_get_value_by_nick(@Ptr long enum_class, @Ptr long nick);
	/**
	 * Original signature : <code>GFlagsValue* g_flags_get_first_value(GFlagsClass*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gobject/genums.h:82</i>
	 */
	public static Pointer<GFlagsValue > g_flags_get_first_value(Pointer<GFlagsClass > flags_class, int value) {
		return Pointer.pointerToAddress(g_flags_get_first_value(Pointer.getPeer(flags_class), value), GFlagsValue.class);
	}
	@Ptr 
	protected native static long g_flags_get_first_value(@Ptr long flags_class, int value);
	/**
	 * Original signature : <code>GFlagsValue* g_flags_get_value_by_name(GFlagsClass*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/genums.h:84</i>
	 */
	public static Pointer<GFlagsValue > g_flags_get_value_by_name(Pointer<GFlagsClass > flags_class, Pointer<Byte > name) {
		return Pointer.pointerToAddress(g_flags_get_value_by_name(Pointer.getPeer(flags_class), Pointer.getPeer(name)), GFlagsValue.class);
	}
	@Ptr 
	protected native static long g_flags_get_value_by_name(@Ptr long flags_class, @Ptr long name);
	/**
	 * Original signature : <code>GFlagsValue* g_flags_get_value_by_nick(GFlagsClass*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/genums.h:86</i>
	 */
	public static Pointer<GFlagsValue > g_flags_get_value_by_nick(Pointer<GFlagsClass > flags_class, Pointer<Byte > nick) {
		return Pointer.pointerToAddress(g_flags_get_value_by_nick(Pointer.getPeer(flags_class), Pointer.getPeer(nick)), GFlagsValue.class);
	}
	@Ptr 
	protected native static long g_flags_get_value_by_nick(@Ptr long flags_class, @Ptr long nick);
	/**
	 * Original signature : <code>void g_value_set_enum(GValue*, gint)</code><br>
	 * <i>native declaration : glib-2.0/gobject/genums.h:88</i>
	 */
	public static void g_value_set_enum(Pointer<GValue > value, int v_enum) {
		g_value_set_enum(Pointer.getPeer(value), v_enum);
	}
	protected native static void g_value_set_enum(@Ptr long value, int v_enum);
	/**
	 * Original signature : <code>gint g_value_get_enum(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/genums.h:90</i>
	 */
	public static int g_value_get_enum(Pointer<GValue > value) {
		return g_value_get_enum(Pointer.getPeer(value));
	}
	protected native static int g_value_get_enum(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_flags(GValue*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gobject/genums.h:92</i>
	 */
	public static void g_value_set_flags(Pointer<GValue > value, int v_flags) {
		g_value_set_flags(Pointer.getPeer(value), v_flags);
	}
	protected native static void g_value_set_flags(@Ptr long value, int v_flags);
	/**
	 * Original signature : <code>guint g_value_get_flags(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/genums.h:94</i>
	 */
	public static int g_value_get_flags(Pointer<GValue > value) {
		return g_value_get_flags(Pointer.getPeer(value));
	}
	protected native static int g_value_get_flags(@Ptr long value);
	/**
	 * const_static_values is a NULL terminated array of enum/flags<br>
	 * values that is taken over!<br>
	 * Original signature : <code>GType g_enum_register_static(const gchar*, const GEnumValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/genums.h:100</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_enum_register_static(Pointer<Byte > name, Pointer<GEnumValue > const_static_values) {
		return g_enum_register_static(Pointer.getPeer(name), Pointer.getPeer(const_static_values));
	}
	@org.bridj.ann.CLong 
	protected native static long g_enum_register_static(@Ptr long name, @Ptr long const_static_values);
	/**
	 * Original signature : <code>GType g_flags_register_static(const gchar*, const GFlagsValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/genums.h:102</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_flags_register_static(Pointer<Byte > name, Pointer<GFlagsValue > const_static_values) {
		return g_flags_register_static(Pointer.getPeer(name), Pointer.getPeer(const_static_values));
	}
	@org.bridj.ann.CLong 
	protected native static long g_flags_register_static(@Ptr long name, @Ptr long const_static_values);
	/**
	 * functions to complete the type information<br>
	 * for enums/flags implemented by plugins<br>
	 * Original signature : <code>void g_enum_complete_type_info(GType, GTypeInfo*, const GEnumValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/genums.h:108</i>
	 */
	public static void g_enum_complete_type_info(@org.bridj.ann.CLong long g_enum_type, Pointer<GTypeInfo > info, Pointer<GEnumValue > const_values) {
		g_enum_complete_type_info(g_enum_type, Pointer.getPeer(info), Pointer.getPeer(const_values));
	}
	protected native static void g_enum_complete_type_info(@org.bridj.ann.CLong long g_enum_type, @Ptr long info, @Ptr long const_values);
	/**
	 * Original signature : <code>void g_flags_complete_type_info(GType, GTypeInfo*, const GFlagsValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/genums.h:110</i>
	 */
	public static void g_flags_complete_type_info(@org.bridj.ann.CLong long g_flags_type, Pointer<GTypeInfo > info, Pointer<GFlagsValue > const_values) {
		g_flags_complete_type_info(g_flags_type, Pointer.getPeer(info), Pointer.getPeer(const_values));
	}
	protected native static void g_flags_complete_type_info(@org.bridj.ann.CLong long g_flags_type, @Ptr long info, @Ptr long const_values);
	/**
	 * --- GParamSpec prototypes ---<br>
	 * Original signature : <code>GParamSpec* g_param_spec_char(const gchar*, const gchar*, const gchar*, gint8, gint8, gint8, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:354</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_char(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, byte minimum, byte maximum, byte default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_char(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), minimum, maximum, default_value, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_char(@Ptr long name, @Ptr long nick, @Ptr long blurb, byte minimum, byte maximum, byte default_value, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_uchar(const gchar*, const gchar*, const gchar*, guint8, guint8, guint8, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:356</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_uchar(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, byte minimum, byte maximum, byte default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_uchar(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), minimum, maximum, default_value, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_uchar(@Ptr long name, @Ptr long nick, @Ptr long blurb, byte minimum, byte maximum, byte default_value, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_boolean(const gchar*, const gchar*, const gchar*, gboolean, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:358</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_boolean(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, GObjectLibrary.gboolean default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_boolean(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), default_value, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_boolean(@Ptr long name, @Ptr long nick, @Ptr long blurb, GObjectLibrary.gboolean default_value, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_int(const gchar*, const gchar*, const gchar*, gint, gint, gint, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:360</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_int(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, int minimum, int maximum, int default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_int(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), minimum, maximum, default_value, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_int(@Ptr long name, @Ptr long nick, @Ptr long blurb, int minimum, int maximum, int default_value, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_uint(const gchar*, const gchar*, const gchar*, guint, guint, guint, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:362</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_uint(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, int minimum, int maximum, int default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_uint(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), minimum, maximum, default_value, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_uint(@Ptr long name, @Ptr long nick, @Ptr long blurb, int minimum, int maximum, int default_value, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_long(const gchar*, const gchar*, const gchar*, glong, glong, glong, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:364</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_long(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, @org.bridj.ann.CLong long minimum, @org.bridj.ann.CLong long maximum, @org.bridj.ann.CLong long default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_long(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), minimum, maximum, default_value, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_long(@Ptr long name, @Ptr long nick, @Ptr long blurb, @org.bridj.ann.CLong long minimum, @org.bridj.ann.CLong long maximum, @org.bridj.ann.CLong long default_value, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_ulong(const gchar*, const gchar*, const gchar*, gulong, gulong, gulong, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:366</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_ulong(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, @org.bridj.ann.CLong long minimum, @org.bridj.ann.CLong long maximum, @org.bridj.ann.CLong long default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_ulong(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), minimum, maximum, default_value, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_ulong(@Ptr long name, @Ptr long nick, @Ptr long blurb, @org.bridj.ann.CLong long minimum, @org.bridj.ann.CLong long maximum, @org.bridj.ann.CLong long default_value, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_int64(const gchar*, const gchar*, const gchar*, gint64, gint64, gint64, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:368</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_int64(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, long minimum, long maximum, long default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_int64(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), minimum, maximum, default_value, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_int64(@Ptr long name, @Ptr long nick, @Ptr long blurb, long minimum, long maximum, long default_value, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_uint64(const gchar*, const gchar*, const gchar*, guint64, guint64, guint64, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:370</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_uint64(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, long minimum, long maximum, long default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_uint64(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), minimum, maximum, default_value, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_uint64(@Ptr long name, @Ptr long nick, @Ptr long blurb, long minimum, long maximum, long default_value, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_unichar(const gchar*, const gchar*, const gchar*, gunichar, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:372</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_unichar(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, int default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_unichar(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), default_value, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_unichar(@Ptr long name, @Ptr long nick, @Ptr long blurb, int default_value, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_enum(const gchar*, const gchar*, const gchar*, GType, gint, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:374</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_enum(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, @org.bridj.ann.CLong long enum_type, int default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_enum(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), enum_type, default_value, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_enum(@Ptr long name, @Ptr long nick, @Ptr long blurb, @org.bridj.ann.CLong long enum_type, int default_value, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_flags(const gchar*, const gchar*, const gchar*, GType, guint, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:376</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_flags(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, @org.bridj.ann.CLong long flags_type, int default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_flags(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), flags_type, default_value, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_flags(@Ptr long name, @Ptr long nick, @Ptr long blurb, @org.bridj.ann.CLong long flags_type, int default_value, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_float(const gchar*, const gchar*, const gchar*, gfloat, gfloat, gfloat, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:378</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_float(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, float minimum, float maximum, float default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_float(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), minimum, maximum, default_value, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_float(@Ptr long name, @Ptr long nick, @Ptr long blurb, float minimum, float maximum, float default_value, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_double(const gchar*, const gchar*, const gchar*, gdouble, gdouble, gdouble, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:380</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_double(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, double minimum, double maximum, double default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_double(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), minimum, maximum, default_value, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_double(@Ptr long name, @Ptr long nick, @Ptr long blurb, double minimum, double maximum, double default_value, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_string(const gchar*, const gchar*, const gchar*, const gchar*, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:382</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_string(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, Pointer<Byte > default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_string(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), Pointer.getPeer(default_value), (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_string(@Ptr long name, @Ptr long nick, @Ptr long blurb, @Ptr long default_value, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_param(const gchar*, const gchar*, const gchar*, GType, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:384</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_param(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, @org.bridj.ann.CLong long param_type, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_param(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), param_type, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_param(@Ptr long name, @Ptr long nick, @Ptr long blurb, @org.bridj.ann.CLong long param_type, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_boxed(const gchar*, const gchar*, const gchar*, GType, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:386</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_boxed(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, @org.bridj.ann.CLong long boxed_type, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_boxed(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), boxed_type, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_boxed(@Ptr long name, @Ptr long nick, @Ptr long blurb, @org.bridj.ann.CLong long boxed_type, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_pointer(const gchar*, const gchar*, const gchar*, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:388</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_pointer(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_pointer(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_pointer(@Ptr long name, @Ptr long nick, @Ptr long blurb, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_value_array(const gchar*, const gchar*, const gchar*, GParamSpec*, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:390</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_value_array(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, Pointer<GParamSpec > element_spec, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_value_array(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), Pointer.getPeer(element_spec), (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_value_array(@Ptr long name, @Ptr long nick, @Ptr long blurb, @Ptr long element_spec, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_object(const gchar*, const gchar*, const gchar*, GType, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:392</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_object(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, @org.bridj.ann.CLong long object_type, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_object(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), object_type, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_object(@Ptr long name, @Ptr long nick, @Ptr long blurb, @org.bridj.ann.CLong long object_type, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_override(const gchar*, GParamSpec*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:394</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_override(Pointer<Byte > name, Pointer<GParamSpec > overridden) {
		return Pointer.pointerToAddress(g_param_spec_override(Pointer.getPeer(name), Pointer.getPeer(overridden)), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_override(@Ptr long name, @Ptr long overridden);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_gtype(const gchar*, const gchar*, const gchar*, GType, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:396</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_gtype(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, @org.bridj.ann.CLong long is_a_type, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_gtype(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), is_a_type, (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_gtype(@Ptr long name, @Ptr long nick, @Ptr long blurb, @org.bridj.ann.CLong long is_a_type, int flags);
	/**
	 * Original signature : <code>GParamSpec* g_param_spec_variant(const gchar*, const gchar*, const gchar*, const GVariantType*, GVariant*, GParamFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gparamspecs.h:398</i>
	 */
	public static Pointer<GParamSpec > g_param_spec_variant(Pointer<Byte > name, Pointer<Byte > nick, Pointer<Byte > blurb, Pointer<GObjectLibrary.GVariantType > type, Pointer<GObjectLibrary.GVariant > default_value, IntValuedEnum<GObjectLibrary.GParamFlags > flags) {
		return Pointer.pointerToAddress(g_param_spec_variant(Pointer.getPeer(name), Pointer.getPeer(nick), Pointer.getPeer(blurb), Pointer.getPeer(type), Pointer.getPeer(default_value), (int)flags.value()), GParamSpec.class);
	}
	@Ptr 
	protected native static long g_param_spec_variant(@Ptr long name, @Ptr long nick, @Ptr long blurb, @Ptr long type, @Ptr long default_value, int flags);
	/**
	 * Original signature : <code>GType g_type_module_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtypemodule.h:49</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_type_module_get_type();
	/**
	 * Original signature : <code>gboolean g_type_module_use(GTypeModule*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtypemodule.h:51</i>
	 */
	public static GObjectLibrary.gboolean g_type_module_use(Pointer<GTypeModule > module) {
		return g_type_module_use(Pointer.getPeer(module));
	}
	protected native static GObjectLibrary.gboolean g_type_module_use(@Ptr long module);
	/**
	 * Original signature : <code>void g_type_module_unuse(GTypeModule*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtypemodule.h:53</i>
	 */
	public static void g_type_module_unuse(Pointer<GTypeModule > module) {
		g_type_module_unuse(Pointer.getPeer(module));
	}
	protected native static void g_type_module_unuse(@Ptr long module);
	/**
	 * Original signature : <code>void g_type_module_set_name(GTypeModule*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtypemodule.h:55</i>
	 */
	public static void g_type_module_set_name(Pointer<GTypeModule > module, Pointer<Byte > name) {
		g_type_module_set_name(Pointer.getPeer(module), Pointer.getPeer(name));
	}
	protected native static void g_type_module_set_name(@Ptr long module, @Ptr long name);
	/**
	 * Original signature : <code>GType g_type_module_register_type(GTypeModule*, GType, const gchar*, const GTypeInfo*, GTypeFlags)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtypemodule.h:57</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_type_module_register_type(Pointer<GTypeModule > module, @org.bridj.ann.CLong long parent_type, Pointer<Byte > type_name, Pointer<GTypeInfo > type_info, IntValuedEnum<GObjectLibrary.GTypeFlags > flags) {
		return g_type_module_register_type(Pointer.getPeer(module), parent_type, Pointer.getPeer(type_name), Pointer.getPeer(type_info), (int)flags.value());
	}
	@org.bridj.ann.CLong 
	protected native static long g_type_module_register_type(@Ptr long module, @org.bridj.ann.CLong long parent_type, @Ptr long type_name, @Ptr long type_info, int flags);
	/**
	 * Original signature : <code>void g_type_module_add_interface(GTypeModule*, GType, GType, const GInterfaceInfo*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtypemodule.h:59</i>
	 */
	public static void g_type_module_add_interface(Pointer<GTypeModule > module, @org.bridj.ann.CLong long instance_type, @org.bridj.ann.CLong long interface_type, Pointer<GInterfaceInfo > interface_info) {
		g_type_module_add_interface(Pointer.getPeer(module), instance_type, interface_type, Pointer.getPeer(interface_info));
	}
	protected native static void g_type_module_add_interface(@Ptr long module, @org.bridj.ann.CLong long instance_type, @org.bridj.ann.CLong long interface_type, @Ptr long interface_info);
	/**
	 * Original signature : <code>GType g_type_module_register_enum(GTypeModule*, const gchar*, const GEnumValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtypemodule.h:61</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_type_module_register_enum(Pointer<GTypeModule > module, Pointer<Byte > name, Pointer<GEnumValue > const_static_values) {
		return g_type_module_register_enum(Pointer.getPeer(module), Pointer.getPeer(name), Pointer.getPeer(const_static_values));
	}
	@org.bridj.ann.CLong 
	protected native static long g_type_module_register_enum(@Ptr long module, @Ptr long name, @Ptr long const_static_values);
	/**
	 * Original signature : <code>GType g_type_module_register_flags(GTypeModule*, const gchar*, const GFlagsValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gtypemodule.h:63</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_type_module_register_flags(Pointer<GTypeModule > module, Pointer<Byte > name, Pointer<GFlagsValue > const_static_values) {
		return g_type_module_register_flags(Pointer.getPeer(module), Pointer.getPeer(name), Pointer.getPeer(const_static_values));
	}
	@org.bridj.ann.CLong 
	protected native static long g_type_module_register_flags(@Ptr long module, @Ptr long name, @Ptr long const_static_values);
	/**
	 * Original signature : <code>void g_source_set_closure(GSource*, GClosure*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsourceclosure.h:2</i>
	 */
	public static void g_source_set_closure(Pointer source, Pointer<GClosure > closure) {
		g_source_set_closure(Pointer.getPeer(source), Pointer.getPeer(closure));
	}
	protected native static void g_source_set_closure(@Ptr long source, @Ptr long closure);
	/**
	 * Original signature : <code>void g_source_set_dummy_callback(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gsourceclosure.h:4</i>
	 */
	public static void g_source_set_dummy_callback(Pointer source) {
		g_source_set_dummy_callback(Pointer.getPeer(source));
	}
	protected native static void g_source_set_dummy_callback(@Ptr long source);
	/**
	 * --- prototypes ---<br>
	 * Original signature : <code>void g_value_set_char(GValue*, gchar)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:5</i>
	 */
	public static void g_value_set_char(Pointer<GValue > value, byte v_char) {
		g_value_set_char(Pointer.getPeer(value), v_char);
	}
	protected native static void g_value_set_char(@Ptr long value, byte v_char);
	/**
	 * Original signature : <code>gchar g_value_get_char(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:7</i>
	 */
	public static byte g_value_get_char(Pointer<GValue > value) {
		return g_value_get_char(Pointer.getPeer(value));
	}
	protected native static byte g_value_get_char(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_schar(GValue*, gint8)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:9</i>
	 */
	public static void g_value_set_schar(Pointer<GValue > value, byte v_char) {
		g_value_set_schar(Pointer.getPeer(value), v_char);
	}
	protected native static void g_value_set_schar(@Ptr long value, byte v_char);
	/**
	 * Original signature : <code>gint8 g_value_get_schar(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:11</i>
	 */
	public static byte g_value_get_schar(Pointer<GValue > value) {
		return g_value_get_schar(Pointer.getPeer(value));
	}
	protected native static byte g_value_get_schar(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_uchar(GValue*, guchar)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:13</i>
	 */
	public static void g_value_set_uchar(Pointer<GValue > value, byte v_uchar) {
		g_value_set_uchar(Pointer.getPeer(value), v_uchar);
	}
	protected native static void g_value_set_uchar(@Ptr long value, byte v_uchar);
	/**
	 * Original signature : <code>guchar g_value_get_uchar(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:15</i>
	 */
	public static byte g_value_get_uchar(Pointer<GValue > value) {
		return g_value_get_uchar(Pointer.getPeer(value));
	}
	protected native static byte g_value_get_uchar(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_boolean(GValue*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:17</i>
	 */
	public static void g_value_set_boolean(Pointer<GValue > value, GObjectLibrary.gboolean v_boolean) {
		g_value_set_boolean(Pointer.getPeer(value), v_boolean);
	}
	protected native static void g_value_set_boolean(@Ptr long value, GObjectLibrary.gboolean v_boolean);
	/**
	 * Original signature : <code>gboolean g_value_get_boolean(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:19</i>
	 */
	public static GObjectLibrary.gboolean g_value_get_boolean(Pointer<GValue > value) {
		return g_value_get_boolean(Pointer.getPeer(value));
	}
	protected native static GObjectLibrary.gboolean g_value_get_boolean(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_int(GValue*, gint)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:21</i>
	 */
	public static void g_value_set_int(Pointer<GValue > value, int v_int) {
		g_value_set_int(Pointer.getPeer(value), v_int);
	}
	protected native static void g_value_set_int(@Ptr long value, int v_int);
	/**
	 * Original signature : <code>gint g_value_get_int(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:23</i>
	 */
	public static int g_value_get_int(Pointer<GValue > value) {
		return g_value_get_int(Pointer.getPeer(value));
	}
	protected native static int g_value_get_int(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_uint(GValue*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:25</i>
	 */
	public static void g_value_set_uint(Pointer<GValue > value, int v_uint) {
		g_value_set_uint(Pointer.getPeer(value), v_uint);
	}
	protected native static void g_value_set_uint(@Ptr long value, int v_uint);
	/**
	 * Original signature : <code>guint g_value_get_uint(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:27</i>
	 */
	public static int g_value_get_uint(Pointer<GValue > value) {
		return g_value_get_uint(Pointer.getPeer(value));
	}
	protected native static int g_value_get_uint(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_long(GValue*, glong)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:29</i>
	 */
	public static void g_value_set_long(Pointer<GValue > value, @org.bridj.ann.CLong long v_long) {
		g_value_set_long(Pointer.getPeer(value), v_long);
	}
	protected native static void g_value_set_long(@Ptr long value, @org.bridj.ann.CLong long v_long);
	/**
	 * Original signature : <code>glong g_value_get_long(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:31</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_value_get_long(Pointer<GValue > value) {
		return g_value_get_long(Pointer.getPeer(value));
	}
	@org.bridj.ann.CLong 
	protected native static long g_value_get_long(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_ulong(GValue*, gulong)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:33</i>
	 */
	public static void g_value_set_ulong(Pointer<GValue > value, @org.bridj.ann.CLong long v_ulong) {
		g_value_set_ulong(Pointer.getPeer(value), v_ulong);
	}
	protected native static void g_value_set_ulong(@Ptr long value, @org.bridj.ann.CLong long v_ulong);
	/**
	 * Original signature : <code>gulong g_value_get_ulong(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:35</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_value_get_ulong(Pointer<GValue > value) {
		return g_value_get_ulong(Pointer.getPeer(value));
	}
	@org.bridj.ann.CLong 
	protected native static long g_value_get_ulong(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_int64(GValue*, gint64)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:37</i>
	 */
	public static void g_value_set_int64(Pointer<GValue > value, long v_int64) {
		g_value_set_int64(Pointer.getPeer(value), v_int64);
	}
	protected native static void g_value_set_int64(@Ptr long value, long v_int64);
	/**
	 * Original signature : <code>gint64 g_value_get_int64(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:39</i>
	 */
	public static long g_value_get_int64(Pointer<GValue > value) {
		return g_value_get_int64(Pointer.getPeer(value));
	}
	protected native static long g_value_get_int64(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_uint64(GValue*, guint64)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:41</i>
	 */
	public static void g_value_set_uint64(Pointer<GValue > value, long v_uint64) {
		g_value_set_uint64(Pointer.getPeer(value), v_uint64);
	}
	protected native static void g_value_set_uint64(@Ptr long value, long v_uint64);
	/**
	 * Original signature : <code>guint64 g_value_get_uint64(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:43</i>
	 */
	public static long g_value_get_uint64(Pointer<GValue > value) {
		return g_value_get_uint64(Pointer.getPeer(value));
	}
	protected native static long g_value_get_uint64(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_float(GValue*, gfloat)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:45</i>
	 */
	public static void g_value_set_float(Pointer<GValue > value, float v_float) {
		g_value_set_float(Pointer.getPeer(value), v_float);
	}
	protected native static void g_value_set_float(@Ptr long value, float v_float);
	/**
	 * Original signature : <code>gfloat g_value_get_float(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:47</i>
	 */
	public static float g_value_get_float(Pointer<GValue > value) {
		return g_value_get_float(Pointer.getPeer(value));
	}
	protected native static float g_value_get_float(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_double(GValue*, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:49</i>
	 */
	public static void g_value_set_double(Pointer<GValue > value, double v_double) {
		g_value_set_double(Pointer.getPeer(value), v_double);
	}
	protected native static void g_value_set_double(@Ptr long value, double v_double);
	/**
	 * Original signature : <code>gdouble g_value_get_double(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:51</i>
	 */
	public static double g_value_get_double(Pointer<GValue > value) {
		return g_value_get_double(Pointer.getPeer(value));
	}
	protected native static double g_value_get_double(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_string(GValue*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:53</i>
	 */
	public static void g_value_set_string(Pointer<GValue > value, Pointer<Byte > v_string) {
		g_value_set_string(Pointer.getPeer(value), Pointer.getPeer(v_string));
	}
	protected native static void g_value_set_string(@Ptr long value, @Ptr long v_string);
	/**
	 * Original signature : <code>void g_value_set_static_string(GValue*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:55</i>
	 */
	public static void g_value_set_static_string(Pointer<GValue > value, Pointer<Byte > v_string) {
		g_value_set_static_string(Pointer.getPeer(value), Pointer.getPeer(v_string));
	}
	protected native static void g_value_set_static_string(@Ptr long value, @Ptr long v_string);
	/**
	 * Original signature : <code>gchar* g_value_get_string(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:57</i>
	 */
	public static Pointer<Byte > g_value_get_string(Pointer<GValue > value) {
		return Pointer.pointerToAddress(g_value_get_string(Pointer.getPeer(value)), Byte.class);
	}
	@Ptr 
	protected native static long g_value_get_string(@Ptr long value);
	/**
	 * Original signature : <code>gchar* g_value_dup_string(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:59</i>
	 */
	public static Pointer<Byte > g_value_dup_string(Pointer<GValue > value) {
		return Pointer.pointerToAddress(g_value_dup_string(Pointer.getPeer(value)), Byte.class);
	}
	@Ptr 
	protected native static long g_value_dup_string(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_pointer(GValue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:61</i>
	 */
	public static void g_value_set_pointer(Pointer<GValue > value, GObjectLibrary.gpointer v_pointer) {
		g_value_set_pointer(Pointer.getPeer(value), v_pointer);
	}
	protected native static void g_value_set_pointer(@Ptr long value, GObjectLibrary.gpointer v_pointer);
	/**
	 * Original signature : <code>gpointer g_value_get_pointer(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:63</i>
	 */
	public static GObjectLibrary.gpointer g_value_get_pointer(Pointer<GValue > value) {
		return g_value_get_pointer(Pointer.getPeer(value));
	}
	protected native static GObjectLibrary.gpointer g_value_get_pointer(@Ptr long value);
	/**
	 * Original signature : <code>GType g_gtype_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:65</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_gtype_get_type();
	/**
	 * Original signature : <code>void g_value_set_gtype(GValue*, GType)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:67</i>
	 */
	public static void g_value_set_gtype(Pointer<GValue > value, @org.bridj.ann.CLong long v_gtype) {
		g_value_set_gtype(Pointer.getPeer(value), v_gtype);
	}
	protected native static void g_value_set_gtype(@Ptr long value, @org.bridj.ann.CLong long v_gtype);
	/**
	 * Original signature : <code>GType g_value_get_gtype(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:69</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_value_get_gtype(Pointer<GValue > value) {
		return g_value_get_gtype(Pointer.getPeer(value));
	}
	@org.bridj.ann.CLong 
	protected native static long g_value_get_gtype(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_set_variant(GValue*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:71</i>
	 */
	public static void g_value_set_variant(Pointer<GValue > value, Pointer<GObjectLibrary.GVariant > variant) {
		g_value_set_variant(Pointer.getPeer(value), Pointer.getPeer(variant));
	}
	protected native static void g_value_set_variant(@Ptr long value, @Ptr long variant);
	/**
	 * Original signature : <code>void g_value_take_variant(GValue*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:73</i>
	 */
	public static void g_value_take_variant(Pointer<GValue > value, Pointer<GObjectLibrary.GVariant > variant) {
		g_value_take_variant(Pointer.getPeer(value), Pointer.getPeer(variant));
	}
	protected native static void g_value_take_variant(@Ptr long value, @Ptr long variant);
	/**
	 * Original signature : <code>GVariant* g_value_get_variant(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:75</i>
	 */
	public static Pointer<GObjectLibrary.GVariant > g_value_get_variant(Pointer<GValue > value) {
		return Pointer.pointerToAddress(g_value_get_variant(Pointer.getPeer(value)), GObjectLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_value_get_variant(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_value_dup_variant(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:77</i>
	 */
	public static Pointer<GObjectLibrary.GVariant > g_value_dup_variant(Pointer<GValue > value) {
		return Pointer.pointerToAddress(g_value_dup_variant(Pointer.getPeer(value)), GObjectLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_value_dup_variant(@Ptr long value);
	/**
	 * Convenience for registering new pointer types<br>
	 * Original signature : <code>GType g_pointer_type_register_static(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:82</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_pointer_type_register_static(Pointer<Byte > name) {
		return g_pointer_type_register_static(Pointer.getPeer(name));
	}
	@org.bridj.ann.CLong 
	protected native static long g_pointer_type_register_static(@Ptr long name);
	/**
	 * debugging aid, describe value contents as string<br>
	 * Original signature : <code>gchar* g_strdup_value_contents(const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:87</i>
	 */
	public static Pointer<Byte > g_strdup_value_contents(Pointer<GValue > value) {
		return Pointer.pointerToAddress(g_strdup_value_contents(Pointer.getPeer(value)), Byte.class);
	}
	@Ptr 
	protected native static long g_strdup_value_contents(@Ptr long value);
	/**
	 * Original signature : <code>void g_value_take_string(GValue*, gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:89</i>
	 */
	public static void g_value_take_string(Pointer<GValue > value, Pointer<Byte > v_string) {
		g_value_take_string(Pointer.getPeer(value), Pointer.getPeer(v_string));
	}
	protected native static void g_value_take_string(@Ptr long value, @Ptr long v_string);
	/**
	 * Original signature : <code>void g_value_set_string_take_ownership(GValue*, gchar*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluetypes.h:91</i>
	 */
	public static void g_value_set_string_take_ownership(Pointer<GValue > value, Pointer<Byte > v_string) {
		g_value_set_string_take_ownership(Pointer.getPeer(value), Pointer.getPeer(v_string));
	}
	protected native static void g_value_set_string_take_ownership(@Ptr long value, @Ptr long v_string);
	/**
	 * --- prototypes ---<br>
	 * Original signature : <code>GType g_value_array_get_type()</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluearray.h:20</i>
	 */
	@org.bridj.ann.CLong 
	public static native long g_value_array_get_type();
	/**
	 * Original signature : <code>GValue* g_value_array_get_nth(GValueArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluearray.h:22</i>
	 */
	public static Pointer<GValue > g_value_array_get_nth(Pointer<GValueArray > value_array, int index_) {
		return Pointer.pointerToAddress(g_value_array_get_nth(Pointer.getPeer(value_array), index_), GValue.class);
	}
	@Ptr 
	protected native static long g_value_array_get_nth(@Ptr long value_array, int index_);
	/**
	 * Original signature : <code>GValueArray* g_value_array_new(guint)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluearray.h:24</i>
	 */
	public static Pointer<GValueArray > g_value_array_new(int n_prealloced) {
		return Pointer.pointerToAddress(g_value_array_new$2(n_prealloced), GValueArray.class);
	}
	@Ptr 
	protected native static long g_value_array_new$2(int n_prealloced);
	/**
	 * Original signature : <code>void g_value_array_free(GValueArray*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluearray.h:26</i>
	 */
	public static void g_value_array_free(Pointer<GValueArray > value_array) {
		g_value_array_free(Pointer.getPeer(value_array));
	}
	protected native static void g_value_array_free(@Ptr long value_array);
	/**
	 * Original signature : <code>GValueArray* g_value_array_copy(const GValueArray*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluearray.h:28</i>
	 */
	public static Pointer<GValueArray > g_value_array_copy(Pointer<GValueArray > value_array) {
		return Pointer.pointerToAddress(g_value_array_copy(Pointer.getPeer(value_array)), GValueArray.class);
	}
	@Ptr 
	protected native static long g_value_array_copy(@Ptr long value_array);
	/**
	 * Original signature : <code>GValueArray* g_value_array_prepend(GValueArray*, const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluearray.h:30</i>
	 */
	public static Pointer<GValueArray > g_value_array_prepend(Pointer<GValueArray > value_array, Pointer<GValue > value) {
		return Pointer.pointerToAddress(g_value_array_prepend(Pointer.getPeer(value_array), Pointer.getPeer(value)), GValueArray.class);
	}
	@Ptr 
	protected native static long g_value_array_prepend(@Ptr long value_array, @Ptr long value);
	/**
	 * Original signature : <code>GValueArray* g_value_array_append(GValueArray*, const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluearray.h:32</i>
	 */
	public static Pointer<GValueArray > g_value_array_append(Pointer<GValueArray > value_array, Pointer<GValue > value) {
		return Pointer.pointerToAddress(g_value_array_append(Pointer.getPeer(value_array), Pointer.getPeer(value)), GValueArray.class);
	}
	@Ptr 
	protected native static long g_value_array_append(@Ptr long value_array, @Ptr long value);
	/**
	 * Original signature : <code>GValueArray* g_value_array_insert(GValueArray*, guint, const GValue*)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluearray.h:34</i>
	 */
	public static Pointer<GValueArray > g_value_array_insert(Pointer<GValueArray > value_array, int index_, Pointer<GValue > value) {
		return Pointer.pointerToAddress(g_value_array_insert(Pointer.getPeer(value_array), index_, Pointer.getPeer(value)), GValueArray.class);
	}
	@Ptr 
	protected native static long g_value_array_insert(@Ptr long value_array, int index_, @Ptr long value);
	/**
	 * Original signature : <code>GValueArray* g_value_array_remove(GValueArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluearray.h:36</i>
	 */
	public static Pointer<GValueArray > g_value_array_remove(Pointer<GValueArray > value_array, int index_) {
		return Pointer.pointerToAddress(g_value_array_remove(Pointer.getPeer(value_array), index_), GValueArray.class);
	}
	@Ptr 
	protected native static long g_value_array_remove(@Ptr long value_array, int index_);
	/**
	 * Original signature : <code>GValueArray* g_value_array_sort(GValueArray*, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluearray.h:38</i>
	 */
	public static Pointer<GValueArray > g_value_array_sort(Pointer<GValueArray > value_array, GObjectLibrary.GCompareFunc compare_func) {
		return Pointer.pointerToAddress(g_value_array_sort(Pointer.getPeer(value_array), Pointer.getPeer(compare_func)), GValueArray.class);
	}
	@Ptr 
	protected native static long g_value_array_sort(@Ptr long value_array, @Ptr long compare_func);
	/**
	 * Original signature : <code>GValueArray* g_value_array_sort_with_data(GValueArray*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/gobject/gvaluearray.h:40</i>
	 */
	public static Pointer<GValueArray > g_value_array_sort_with_data(Pointer<GValueArray > value_array, GObjectLibrary.GCompareDataFunc compare_func, GObjectLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_value_array_sort_with_data(Pointer.getPeer(value_array), Pointer.getPeer(compare_func), user_data), GValueArray.class);
	}
	@Ptr 
	protected native static long g_value_array_sort_with_data(@Ptr long value_array, @Ptr long compare_func, GObjectLibrary.gpointer user_data);
	/** C type : extern GTypeDebugFlags */
	public IntValuedEnum<GObjectLibrary.GTypeDebugFlags > _g_type_debug_flags() {
		try {
			return (IntValuedEnum<GObjectLibrary.GTypeDebugFlags >)BridJ.getNativeLibrary("GObject").getSymbolPointer("_g_type_debug_flags").as(DefaultParameterizedType.paramType(IntValuedEnum.class, GObjectLibrary.GTypeDebugFlags.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern GTypeDebugFlags */
	public GObjectLibrary _g_type_debug_flags(IntValuedEnum<GObjectLibrary.GTypeDebugFlags > _g_type_debug_flags) {
		try {
			{
				BridJ.getNativeLibrary("GObject").getSymbolPointer("_g_type_debug_flags").as(DefaultParameterizedType.paramType(IntValuedEnum.class, GObjectLibrary.GTypeDebugFlags.class)).set(_g_type_debug_flags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern GType* */
	public Pointer<org.bridj.CLong > g_param_spec_types() {
		try {
			return (Pointer<org.bridj.CLong >)BridJ.getNativeLibrary("GObject").getSymbolPointer("g_param_spec_types").as(DefaultParameterizedType.paramType(Pointer.class, org.bridj.CLong.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern GType* */
	public GObjectLibrary g_param_spec_types(Pointer<org.bridj.CLong > g_param_spec_types) {
		try {
			{
				BridJ.getNativeLibrary("GObject").getSymbolPointer("g_param_spec_types").as(DefaultParameterizedType.paramType(Pointer.class, org.bridj.CLong.class)).set(g_param_spec_types);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public static class GCompareFunc extends TypedPointer {
		public GCompareFunc(long address) {
			super(address);
		}
		public GCompareFunc(Pointer address) {
			super(address);
		}
	};
	public static class GDestroyNotify extends TypedPointer {
		public GDestroyNotify(long address) {
			super(address);
		}
		public GDestroyNotify(Pointer address) {
			super(address);
		}
	};
	public static class GDuplicateFunc extends TypedPointer {
		public GDuplicateFunc(long address) {
			super(address);
		}
		public GDuplicateFunc(Pointer address) {
			super(address);
		}
	};
	public static class GCompareDataFunc extends TypedPointer {
		public GCompareDataFunc(long address) {
			super(address);
		}
		public GCompareDataFunc(Pointer address) {
			super(address);
		}
	};
	/** Undefined type */
	public static interface GBinding {
		
	};
	/** Undefined type */
	public static interface GTypeClassCacheFunc {
		
	};
	/** Undefined type */
	public static interface GTypePlugin {
		
	};
	/** Undefined type */
	public static interface GData {
		
	};
	/** Undefined type */
	public static interface GVariantType {
		
	};
	/** Undefined type */
	public static interface GVariant {
		
	};
	/** Undefined type */
	public static interface GParamSpecPool {
		
	};
	/** Undefined type */
	public static interface GBindingTransformFunc {
		
	};
	/** Undefined type */
	public static interface GBoxedCopyFunc {
		
	};
	/** Undefined type */
	public static interface GSignalEmissionHook {
		
	};
}
