package gobject;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.CLong;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Union;
/**
 * GValue:<br>
 * <br>
 * An opaque structure used to hold different types of values.<br>
 * The data within the structure has protected scope: it is accessible only<br>
 * to functions within a #GTypeValueTable structure, or implementations of<br>
 * the g_value_*() API. That is, code portions which implement new fundamental<br>
 * types.<br>
 * #GValue users cannot make any assumptions about how data is stored<br>
 * within the 2 element @data union, and the @g_type member should<br>
 * only be accessed through the G_VALUE_TYPE() macro.<br>
 * <i>native declaration : glib-2.0/gobject/gvalue.h:38</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GObject") 
public class GValue extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * < private ><br>
	 * C type : GType
	 */
	@CLong 
	@Field(0) 
	public long g_type() {
		return this.io.getCLongField(this, 0);
	}
	/**
	 * < private ><br>
	 * C type : GType
	 */
	@CLong 
	@Field(0) 
	public GValue g_type(long g_type) {
		this.io.setCLongField(this, 0, g_type);
		return this;
	}
	/**
	 * public for GTypeValueTable methods<br>
	 * C type : data_union[2]
	 */
	@Array({2}) 
	@Field(1) 
	public Pointer<GValue.data_union > data() {
		return this.io.getPointerField(this, 1);
	}
	/** <i>native declaration : glib-2.0/gobject/gvalue.h:37</i> */
	@Union 
	public static class data_union extends StructObject {
		static {
			BridJ.register();
		}
		/** C type : gint */
		@Field(0) 
		public int v_int() {
			return this.io.getIntField(this, 0);
		}
		/** C type : gint */
		@Field(0) 
		public data_union v_int(int v_int) {
			this.io.setIntField(this, 0, v_int);
			return this;
		}
		/** C type : guint */
		@Field(1) 
		public int v_uint() {
			return this.io.getIntField(this, 1);
		}
		/** C type : guint */
		@Field(1) 
		public data_union v_uint(int v_uint) {
			this.io.setIntField(this, 1, v_uint);
			return this;
		}
		/** C type : glong */
		@CLong 
		@Field(2) 
		public long v_long() {
			return this.io.getCLongField(this, 2);
		}
		/** C type : glong */
		@CLong 
		@Field(2) 
		public data_union v_long(long v_long) {
			this.io.setCLongField(this, 2, v_long);
			return this;
		}
		/** C type : gulong */
		@CLong 
		@Field(3) 
		public long v_ulong() {
			return this.io.getCLongField(this, 3);
		}
		/** C type : gulong */
		@CLong 
		@Field(3) 
		public data_union v_ulong(long v_ulong) {
			this.io.setCLongField(this, 3, v_ulong);
			return this;
		}
		/** C type : gint64 */
		@Field(4) 
		public long v_int64() {
			return this.io.getLongField(this, 4);
		}
		/** C type : gint64 */
		@Field(4) 
		public data_union v_int64(long v_int64) {
			this.io.setLongField(this, 4, v_int64);
			return this;
		}
		/** C type : guint64 */
		@Field(5) 
		public long v_uint64() {
			return this.io.getLongField(this, 5);
		}
		/** C type : guint64 */
		@Field(5) 
		public data_union v_uint64(long v_uint64) {
			this.io.setLongField(this, 5, v_uint64);
			return this;
		}
		/** C type : gfloat */
		@Field(6) 
		public float v_float() {
			return this.io.getFloatField(this, 6);
		}
		/** C type : gfloat */
		@Field(6) 
		public data_union v_float(float v_float) {
			this.io.setFloatField(this, 6, v_float);
			return this;
		}
		/** C type : gdouble */
		@Field(7) 
		public double v_double() {
			return this.io.getDoubleField(this, 7);
		}
		/** C type : gdouble */
		@Field(7) 
		public data_union v_double(double v_double) {
			this.io.setDoubleField(this, 7, v_double);
			return this;
		}
		/**
		 * Failed to convert value v_pointer of type gpointer<br>
		 * C type : gpointer
		 */
		public data_union() {
			super();
		}
		public data_union(Pointer pointer) {
			super(pointer);
		}
	};
	public GValue() {
		super();
	}
	public GValue(Pointer pointer) {
		super(pointer);
	}
}
