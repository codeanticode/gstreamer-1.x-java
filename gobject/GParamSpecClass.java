package gobject;
import gobject.GObjectLibrary.gpointer;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Array;
import org.bridj.ann.CLong;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
/**
 * GParamSpecClass:<br>
 * @g_type_class: the parent class<br>
 * @value_type: the #GValue type for this parameter<br>
 * @finalize: The instance finalization function (optional), should chain <br>
 *  up to the finalize method of the parent class.<br>
 * @value_set_default: Resets a @value to the default value for this type<br>
 *  (recommended, the default is g_value_reset()), see <br>
 *  g_param_value_set_default().<br>
 * @value_validate: Ensures that the contents of @value comply with the <br>
 *  specifications set out by this type (optional), see <br>
 *  g_param_value_validate().<br>
 * @values_cmp: Compares @value1 with @value2 according to this type<br>
 *  (recommended, the default is memcmp()), see g_param_values_cmp().<br>
 * <br>
 * The class structure for the <structname>GParamSpec</structname> type.<br>
 * Normally, <structname>GParamSpec</structname> classes are filled by<br>
 * g_param_type_register_static().<br>
 * <i>native declaration : glib-2.0/gobject/gparam.h:106</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GObject") 
public class GParamSpecClass extends CPPObject {
	static {
		BridJ.register();
	}
	/** C type : GTypeClass */
	@Field(0) 
	public GTypeClass g_type_class() {
		return this.io.getNativeObjectField(this, 0);
	}
	/** C type : GTypeClass */
	@Field(0) 
	public GParamSpecClass g_type_class(GTypeClass g_type_class) {
		this.io.setNativeObjectField(this, 0, g_type_class);
		return this;
	}
	/** C type : GType */
	@CLong 
	@Field(1) 
	public long value_type() {
		return this.io.getCLongField(this, 1);
	}
	/** C type : GType */
	@CLong 
	@Field(1) 
	public GParamSpecClass value_type(long value_type) {
		this.io.setCLongField(this, 1, value_type);
		return this;
	}
	/** C type : finalize_callback* */
	@Field(2) 
	public Pointer<gobject.GObjectClass.finalize_callback > finalize$() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : finalize_callback* */
	@Field(2) 
	public GParamSpecClass finalize$(Pointer<gobject.GObjectClass.finalize_callback > finalize$) {
		this.io.setPointerField(this, 2, finalize$);
		return this;
	}
	/**
	 * GParam methods<br>
	 * C type : value_set_default_callback*
	 */
	@Field(3) 
	public Pointer<gobject.GParamSpecTypeInfo.value_set_default_callback > value_set_default() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * GParam methods<br>
	 * C type : value_set_default_callback*
	 */
	@Field(3) 
	public GParamSpecClass value_set_default(Pointer<gobject.GParamSpecTypeInfo.value_set_default_callback > value_set_default) {
		this.io.setPointerField(this, 3, value_set_default);
		return this;
	}
	/** C type : values_cmp_callback* */
	@Field(4) 
	public Pointer<gobject.GParamSpecTypeInfo.values_cmp_callback > values_cmp() {
		return this.io.getPointerField(this, 4);
	}
	/** C type : values_cmp_callback* */
	@Field(4) 
	public GParamSpecClass values_cmp(Pointer<gobject.GParamSpecTypeInfo.values_cmp_callback > values_cmp) {
		this.io.setPointerField(this, 4, values_cmp);
		return this;
	}
	/**
	 * < private ><br>
	 * C type : gpointer[4]
	 */
	@Array({4}) 
	@Field(5) 
	public Pointer<gpointer > dummy() {
		return this.io.getPointerField(this, 5);
	}
	/** <i>native declaration : glib-2.0/gobject/gparam.h:102</i> */
	public static abstract class finalize_callback extends Callback<finalize_callback > {
		public final void apply(Pointer<GParamSpec > pspec) {
			apply(Pointer.getPeer(pspec));
		}
		public abstract void apply(@Ptr long pspec);
	};
	/** <i>native declaration : glib-2.0/gobject/gparam.h:103</i> */
	public static abstract class value_set_default_callback extends Callback<value_set_default_callback > {
		public final void apply(Pointer<GParamSpec > pspec, Pointer<GValue > value) {
			apply(Pointer.getPeer(pspec), Pointer.getPeer(value));
		}
		public abstract void apply(@Ptr long pspec, @Ptr long value);
	};
	/** <i>native declaration : glib-2.0/gobject/gparam.h:104</i> */
	public static abstract class gboolean_callback extends Callback<gboolean_callback > {
		public final void apply(Pointer<GParamSpec > pspec, Pointer<GValue > value) {
			apply(Pointer.getPeer(pspec), Pointer.getPeer(value));
		}
		public abstract void apply(@Ptr long pspec, @Ptr long value);
	};
	/** <i>native declaration : glib-2.0/gobject/gparam.h:105</i> */
	public static abstract class values_cmp_callback extends Callback<values_cmp_callback > {
		public final int apply(Pointer<GParamSpec > pspec, Pointer<GValue > value1, Pointer<GValue > value2) {
			return apply(Pointer.getPeer(pspec), Pointer.getPeer(value1), Pointer.getPeer(value2));
		}
		public abstract int apply(@Ptr long pspec, @Ptr long value1, @Ptr long value2);
	};
	public GParamSpecClass() {
		super();
	}
	public GParamSpecClass(Pointer pointer) {
		super(pointer);
	}
}
