package gobject;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * GEnumClass:<br>
 * @g_type_class: the parent class<br>
 * @minimum: the smallest possible value.<br>
 * @maximum: the largest possible value.<br>
 * @n_values: the number of possible values.<br>
 * @values: an array of #GEnumValue structs describing the <br>
 *  individual values.<br>
 * <br>
 * The class of an enumeration type holds information about its <br>
 * possible values.<br>
 * <i>native declaration : glib-2.0/gobject/genums.h:25</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GObject") 
public class GEnumClass extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : GTypeClass */
	@Field(0) 
	public GTypeClass g_type_class() {
		return this.io.getNativeObjectField(this, 0);
	}
	/** C type : GTypeClass */
	@Field(0) 
	public GEnumClass g_type_class(GTypeClass g_type_class) {
		this.io.setNativeObjectField(this, 0, g_type_class);
		return this;
	}
	/**
	 * < public ><br>
	 * C type : gint
	 */
	@Field(1) 
	public int minimum() {
		return this.io.getIntField(this, 1);
	}
	/**
	 * < public ><br>
	 * C type : gint
	 */
	@Field(1) 
	public GEnumClass minimum(int minimum) {
		this.io.setIntField(this, 1, minimum);
		return this;
	}
	/** C type : gint */
	@Field(2) 
	public int maximum() {
		return this.io.getIntField(this, 2);
	}
	/** C type : gint */
	@Field(2) 
	public GEnumClass maximum(int maximum) {
		this.io.setIntField(this, 2, maximum);
		return this;
	}
	/** C type : guint */
	@Field(3) 
	public int n_values() {
		return this.io.getIntField(this, 3);
	}
	/** C type : guint */
	@Field(3) 
	public GEnumClass n_values(int n_values) {
		this.io.setIntField(this, 3, n_values);
		return this;
	}
	/** C type : GEnumValue* */
	@Field(4) 
	public Pointer<GEnumValue > values() {
		return this.io.getPointerField(this, 4);
	}
	/** C type : GEnumValue* */
	@Field(4) 
	public GEnumClass values(Pointer<GEnumValue > values) {
		this.io.setPointerField(this, 4, values);
		return this;
	}
	public GEnumClass() {
		super();
	}
	public GEnumClass(Pointer pointer) {
		super(pointer);
	}
}
