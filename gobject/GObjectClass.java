package gobject;
import gobject.GObjectLibrary.gpointer;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.CLong;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * GObjectClass:<br>
 * @g_type_class: the parent class<br>
 * @constructor: the @constructor function is called by g_object_new () to <br>
 *  complete the object initialization after all the construction properties are<br>
 *  set. The first thing a @constructor implementation must do is chain up to the<br>
 *  @constructor of the parent class. Overriding @constructor should be rarely <br>
 *  needed, e.g. to handle construct properties, or to implement singletons.<br>
 * @set_property: the generic setter for all properties of this type. Should be<br>
 *  overridden for every type with properties. If implementations of<br>
 *  @set_property don't emit property change notification explicitly, this will<br>
 *  be done implicitly by the type system. However, if the notify signal is<br>
 *  emitted explicitly, the type system will not emit it a second time.<br>
 * @get_property: the generic getter for all properties of this type. Should be<br>
 *  overridden for every type with properties.<br>
 * @dispose: the @dispose function is supposed to drop all references to other <br>
 *  objects, but keep the instance otherwise intact, so that client method <br>
 *  invocations still work. It may be run multiple times (due to reference <br>
 *  loops). Before returning, @dispose should chain up to the @dispose method <br>
 *  of the parent class.<br>
 * @finalize: instance finalization function, should finish the finalization of <br>
 *  the instance begun in @dispose and chain up to the @finalize method of the <br>
 *  parent class.<br>
 * @dispatch_properties_changed: emits property change notification for a bunch<br>
 *  of properties. Overriding @dispatch_properties_changed should be rarely <br>
 *  needed.<br>
 * @notify: the class closure for the notify signal<br>
 * @constructed: the @constructed function is called by g_object_new() as the<br>
 *  final step of the object creation process.  At the point of the call, all<br>
 *  construction properties have been set on the object.  The purpose of this<br>
 *  call is to allow for object initialisation steps that can only be performed<br>
 *  after construction properties have been set.  @constructed implementors<br>
 *  should chain up to the @constructed call of their parent class to allow it<br>
 *  to complete its initialisation.<br>
 * <br>
 * The class structure for the <structname>GObject</structname> type.<br>
 * <br>
 * <example><br>
 * <title>Implementing singletons using a constructor</title><br>
 * <programlisting><br>
 * static MySingleton *the_singleton = NULL;<br>
 * <br>
 * static GObject*<br>
 * my_singleton_constructor (GType                  type,<br>
 *                           guint                  n_construct_params,<br>
 *                           GObjectConstructParam *construct_params)<br>
 * {<br>
 *   GObject *object;<br>
 *   <br>
 *   if (!the_singleton)<br>
 *     {<br>
 *       object = G_OBJECT_CLASS (parent_class)->constructor (type,<br>
 *                                                            n_construct_params,<br>
 *                                                            construct_params);<br>
 *       the_singleton = MY_SINGLETON (object);<br>
 *     }<br>
 *   else<br>
 *     object = g_object_ref (G_OBJECT (the_singleton));<br>
 * <br>
 *   return object;<br>
 * }<br>
 * </programlisting></example><br>
 * <i>native declaration : glib-2.0/gobject/gobject.h:151</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GObject") 
public class GObjectClass extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : GTypeClass */
	@Field(0) 
	public GTypeClass g_type_class() {
		return this.io.getNativeObjectField(this, 0);
	}
	/** C type : GTypeClass */
	@Field(0) 
	public GObjectClass g_type_class(GTypeClass g_type_class) {
		this.io.setNativeObjectField(this, 0, g_type_class);
		return this;
	}
	/**
	 * Failed to convert value construct_properties of type GSList*<br>
	 * C type : GSList*
	 */
	/**
	 * seldom overidden<br>
	 * C type : constructor_callback*
	 */
	@Field(2) 
	public Pointer<GObjectClass.constructor_callback > constructor() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * seldom overidden<br>
	 * C type : constructor_callback*
	 */
	@Field(2) 
	public GObjectClass constructor(Pointer<GObjectClass.constructor_callback > constructor) {
		this.io.setPointerField(this, 2, constructor);
		return this;
	}
	/**
	 * overridable methods<br>
	 * C type : set_property_callback*
	 */
	@Field(3) 
	public Pointer<GObjectClass.set_property_callback > set_property() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * overridable methods<br>
	 * C type : set_property_callback*
	 */
	@Field(3) 
	public GObjectClass set_property(Pointer<GObjectClass.set_property_callback > set_property) {
		this.io.setPointerField(this, 3, set_property);
		return this;
	}
	/** C type : get_property_callback* */
	@Field(4) 
	public Pointer<GObjectClass.get_property_callback > get_property() {
		return this.io.getPointerField(this, 4);
	}
	/** C type : get_property_callback* */
	@Field(4) 
	public GObjectClass get_property(Pointer<GObjectClass.get_property_callback > get_property) {
		this.io.setPointerField(this, 4, get_property);
		return this;
	}
	/** C type : dispose_callback* */
	@Field(5) 
	public Pointer<GObjectClass.dispose_callback > dispose() {
		return this.io.getPointerField(this, 5);
	}
	/** C type : dispose_callback* */
	@Field(5) 
	public GObjectClass dispose(Pointer<GObjectClass.dispose_callback > dispose) {
		this.io.setPointerField(this, 5, dispose);
		return this;
	}
	/** C type : finalize_callback* */
	@Field(6) 
	public Pointer<GObjectClass.finalize_callback > finalize$() {
		return this.io.getPointerField(this, 6);
	}
	/** C type : finalize_callback* */
	@Field(6) 
	public GObjectClass finalize$(Pointer<GObjectClass.finalize_callback > finalize$) {
		this.io.setPointerField(this, 6, finalize$);
		return this;
	}
	/**
	 * seldom overidden<br>
	 * C type : dispatch_properties_changed_callback*
	 */
	@Field(7) 
	public Pointer<GObjectClass.dispatch_properties_changed_callback > dispatch_properties_changed() {
		return this.io.getPointerField(this, 7);
	}
	/**
	 * seldom overidden<br>
	 * C type : dispatch_properties_changed_callback*
	 */
	@Field(7) 
	public GObjectClass dispatch_properties_changed(Pointer<GObjectClass.dispatch_properties_changed_callback > dispatch_properties_changed) {
		this.io.setPointerField(this, 7, dispatch_properties_changed);
		return this;
	}
	/**
	 * signals<br>
	 * C type : notify_callback*
	 */
	@Field(8) 
	public Pointer<GObjectClass.notify_callback > notify$() {
		return this.io.getPointerField(this, 8);
	}
	/**
	 * signals<br>
	 * C type : notify_callback*
	 */
	@Field(8) 
	public GObjectClass notify$(Pointer<GObjectClass.notify_callback > notify$) {
		this.io.setPointerField(this, 8, notify$);
		return this;
	}
	/**
	 * called when done constructing<br>
	 * C type : constructed_callback*
	 */
	@Field(9) 
	public Pointer<GObjectClass.constructed_callback > constructed() {
		return this.io.getPointerField(this, 9);
	}
	/**
	 * called when done constructing<br>
	 * C type : constructed_callback*
	 */
	@Field(9) 
	public GObjectClass constructed(Pointer<GObjectClass.constructed_callback > constructed) {
		this.io.setPointerField(this, 9, constructed);
		return this;
	}
	/**
	 * < private ><br>
	 * C type : gsize
	 */
	@CLong 
	@Field(10) 
	public long flags() {
		return this.io.getCLongField(this, 10);
	}
	/**
	 * < private ><br>
	 * C type : gsize
	 */
	@CLong 
	@Field(10) 
	public GObjectClass flags(long flags) {
		this.io.setCLongField(this, 10, flags);
		return this;
	}
	/**
	 * padding<br>
	 * C type : gpointer[6]
	 */
	@Array({6}) 
	@Field(11) 
	public Pointer<gpointer > pdummy() {
		return this.io.getPointerField(this, 11);
	}
	/** <i>native declaration : glib-2.0/gobject/gobject.h:143</i> */
	public static abstract class constructor_callback extends Callback<constructor_callback > {
		public final Pointer<GObject > apply(@CLong long type, int n_construct_properties, Pointer<GObjectConstructParam > construct_properties) {
			return Pointer.pointerToAddress(apply(type, n_construct_properties, Pointer.getPeer(construct_properties)), GObject.class);
		}
		@Ptr 
		public abstract long apply(@CLong long type, int n_construct_properties, @Ptr long construct_properties);
	};
	/** <i>native declaration : glib-2.0/gobject/gobject.h:144</i> */
	public static abstract class set_property_callback extends Callback<set_property_callback > {
		public final void apply(Pointer<GObject > object, int property_id, Pointer<GValue > value, Pointer<GParamSpec > pspec) {
			apply(Pointer.getPeer(object), property_id, Pointer.getPeer(value), Pointer.getPeer(pspec));
		}
		public abstract void apply(@Ptr long object, int property_id, @Ptr long value, @Ptr long pspec);
	};
	/** <i>native declaration : glib-2.0/gobject/gobject.h:145</i> */
	public static abstract class get_property_callback extends Callback<get_property_callback > {
		public final void apply(Pointer<GObject > object, int property_id, Pointer<GValue > value, Pointer<GParamSpec > pspec) {
			apply(Pointer.getPeer(object), property_id, Pointer.getPeer(value), Pointer.getPeer(pspec));
		}
		public abstract void apply(@Ptr long object, int property_id, @Ptr long value, @Ptr long pspec);
	};
	/** <i>native declaration : glib-2.0/gobject/gobject.h:146</i> */
	public static abstract class dispose_callback extends Callback<dispose_callback > {
		public final void apply(Pointer<GObject > object) {
			apply(Pointer.getPeer(object));
		}
		public abstract void apply(@Ptr long object);
	};
	/** <i>native declaration : glib-2.0/gobject/gobject.h:147</i> */
	public static abstract class finalize_callback extends Callback<finalize_callback > {
		public final void apply(Pointer<GObject > object) {
			apply(Pointer.getPeer(object));
		}
		public abstract void apply(@Ptr long object);
	};
	/** <i>native declaration : glib-2.0/gobject/gobject.h:148</i> */
	public static abstract class dispatch_properties_changed_callback extends Callback<dispatch_properties_changed_callback > {
		public final void apply(Pointer<GObject > object, int n_pspecs, Pointer<Pointer<GParamSpec > > pspecs) {
			apply(Pointer.getPeer(object), n_pspecs, Pointer.getPeer(pspecs));
		}
		public abstract void apply(@Ptr long object, int n_pspecs, @Ptr long pspecs);
	};
	/** <i>native declaration : glib-2.0/gobject/gobject.h:149</i> */
	public static abstract class notify_callback extends Callback<notify_callback > {
		public final void apply(Pointer<GObject > object, Pointer<GParamSpec > pspec) {
			apply(Pointer.getPeer(object), Pointer.getPeer(pspec));
		}
		public abstract void apply(@Ptr long object, @Ptr long pspec);
	};
	/** <i>native declaration : glib-2.0/gobject/gobject.h:150</i> */
	public static abstract class constructed_callback extends Callback<constructed_callback > {
		public final void apply(Pointer<GObject > object) {
			apply(Pointer.getPeer(object));
		}
		public abstract void apply(@Ptr long object);
	};
	public GObjectClass() {
		super();
	}
	public GObjectClass(Pointer pointer) {
		super(pointer);
	}
}
