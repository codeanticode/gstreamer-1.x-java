package gobject;
import gobject.GObjectLibrary.GParamFlags;
import org.bridj.BridJ;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.CLong;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * GParamSpec:<br>
 * @g_type_instance: private #GTypeInstance portion<br>
 * @name: name of this parameter: always an interned string<br>
 * @flags: #GParamFlags flags for this parameter<br>
 * @value_type: the #GValue type for this parameter<br>
 * @owner_type: #GType type that uses (introduces) this parameter<br>
 * <br>
 * All other fields of the <structname>GParamSpec</structname> struct are private and<br>
 * should not be used directly.<br>
 * <i>native declaration : glib-2.0/gobject/gparam.h:71</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GObject") 
public abstract class GParamSpec extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : GTypeInstance */
	@Field(0) 
	public GTypeInstance g_type_instance() {
		return this.io.getNativeObjectField(this, 0);
	}
	/** C type : GTypeInstance */
	@Field(0) 
	public GParamSpec g_type_instance(GTypeInstance g_type_instance) {
		this.io.setNativeObjectField(this, 0, g_type_instance);
		return this;
	}
	/**
	 * interned string<br>
	 * C type : const gchar*
	 */
	@Field(1) 
	public Pointer<Byte > name() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * interned string<br>
	 * C type : const gchar*
	 */
	@Field(1) 
	public GParamSpec name(Pointer<Byte > name) {
		this.io.setPointerField(this, 1, name);
		return this;
	}
	/** C type : GParamFlags */
	@Field(2) 
	public IntValuedEnum<GParamFlags > flags() {
		return this.io.getEnumField(this, 2);
	}
	/** C type : GParamFlags */
	@Field(2) 
	public GParamSpec flags(IntValuedEnum<GParamFlags > flags) {
		this.io.setEnumField(this, 2, flags);
		return this;
	}
	/** C type : GType */
	@CLong 
	@Field(3) 
	public long value_type() {
		return this.io.getCLongField(this, 3);
	}
	/** C type : GType */
	@CLong 
	@Field(3) 
	public GParamSpec value_type(long value_type) {
		this.io.setCLongField(this, 3, value_type);
		return this;
	}
	/**
	 * class or interface using this property<br>
	 * C type : GType
	 */
	@CLong 
	@Field(4) 
	public long owner_type() {
		return this.io.getCLongField(this, 4);
	}
	/**
	 * class or interface using this property<br>
	 * C type : GType
	 */
	@CLong 
	@Field(4) 
	public GParamSpec owner_type(long owner_type) {
		this.io.setCLongField(this, 4, owner_type);
		return this;
	}
	/**
	 * < private ><br>
	 * C type : gchar*
	 */
	@Field(5) 
	public Pointer<Byte > _nick() {
		return this.io.getPointerField(this, 5);
	}
	/**
	 * < private ><br>
	 * C type : gchar*
	 */
	@Field(5) 
	public GParamSpec _nick(Pointer<Byte > _nick) {
		this.io.setPointerField(this, 5, _nick);
		return this;
	}
	/** C type : gchar* */
	@Field(6) 
	public Pointer<Byte > _blurb() {
		return this.io.getPointerField(this, 6);
	}
	/** C type : gchar* */
	@Field(6) 
	public GParamSpec _blurb(Pointer<Byte > _blurb) {
		this.io.setPointerField(this, 6, _blurb);
		return this;
	}
	/** Conversion Error : GData* (failed to convert type to Java (undefined type)) */
	/** C type : guint */
	@Field(8) 
	public int ref_count() {
		return this.io.getIntField(this, 8);
	}
	/** C type : guint */
	@Field(8) 
	public GParamSpec ref_count(int ref_count) {
		this.io.setIntField(this, 8, ref_count);
		return this;
	}
	/**
	 * sort-criteria<br>
	 * C type : guint
	 */
	@Field(9) 
	public int param_id() {
		return this.io.getIntField(this, 9);
	}
	/**
	 * sort-criteria<br>
	 * C type : guint
	 */
	@Field(9) 
	public GParamSpec param_id(int param_id) {
		this.io.setIntField(this, 9, param_id);
		return this;
	}
}
