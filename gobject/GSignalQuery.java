package gobject;
import gobject.GObjectLibrary.GSignalFlags;
import org.bridj.BridJ;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * GSignalQuery:<br>
 * @signal_id: The signal id of the signal being queried, or 0 if the<br>
 *  signal to be queried was unknown.<br>
 * @signal_name: The signal name.<br>
 * @itype: The interface/instance type that this signal can be emitted for.<br>
 * @signal_flags: The signal flags as passed in to g_signal_new().<br>
 * @return_type: The return type for user callbacks.<br>
 * @n_params: The number of parameters that user callbacks take.<br>
 * @param_types: (array length=n_params): The individual parameter types for<br>
 *  user callbacks, note that the effective callback signature is:<br>
 *  <programlisting><br>
 *  @return_type callback (#gpointer     data1,<br>
 *  [param_types param_names,]<br>
 *  gpointer     data2);<br>
 *  </programlisting><br>
 * <br>
 * A structure holding in-depth information for a specific signal. It is<br>
 * filled in by the g_signal_query() function.<br>
 * <i>native declaration : glib-2.0/gobject/gsignal.h:178</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GObject") 
public class GSignalQuery extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : guint */
	@Field(0) 
	public int signal_id() {
		return this.io.getIntField(this, 0);
	}
	/** C type : guint */
	@Field(0) 
	public GSignalQuery signal_id(int signal_id) {
		this.io.setIntField(this, 0, signal_id);
		return this;
	}
	/** C type : const gchar* */
	@Field(1) 
	public Pointer<Byte > signal_name() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : const gchar* */
	@Field(1) 
	public GSignalQuery signal_name(Pointer<Byte > signal_name) {
		this.io.setPointerField(this, 1, signal_name);
		return this;
	}
	/** C type : GType */
	@org.bridj.ann.CLong 
	@Field(2) 
	public long itype() {
		return this.io.getCLongField(this, 2);
	}
	/** C type : GType */
	@org.bridj.ann.CLong 
	@Field(2) 
	public GSignalQuery itype(long itype) {
		this.io.setCLongField(this, 2, itype);
		return this;
	}
	/** C type : GSignalFlags */
	@Field(3) 
	public IntValuedEnum<GSignalFlags > signal_flags() {
		return this.io.getEnumField(this, 3);
	}
	/** C type : GSignalFlags */
	@Field(3) 
	public GSignalQuery signal_flags(IntValuedEnum<GSignalFlags > signal_flags) {
		this.io.setEnumField(this, 3, signal_flags);
		return this;
	}
	/**
	 * mangled with G_SIGNAL_TYPE_STATIC_SCOPE flag<br>
	 * C type : GType
	 */
	@org.bridj.ann.CLong 
	@Field(4) 
	public long return_type() {
		return this.io.getCLongField(this, 4);
	}
	/**
	 * mangled with G_SIGNAL_TYPE_STATIC_SCOPE flag<br>
	 * C type : GType
	 */
	@org.bridj.ann.CLong 
	@Field(4) 
	public GSignalQuery return_type(long return_type) {
		this.io.setCLongField(this, 4, return_type);
		return this;
	}
	/** C type : guint */
	@Field(5) 
	public int n_params() {
		return this.io.getIntField(this, 5);
	}
	/** C type : guint */
	@Field(5) 
	public GSignalQuery n_params(int n_params) {
		this.io.setIntField(this, 5, n_params);
		return this;
	}
	/**
	 * mangled with G_SIGNAL_TYPE_STATIC_SCOPE flag<br>
	 * C type : const GType*
	 */
	@Field(6) 
	public Pointer<org.bridj.CLong > param_types() {
		return this.io.getPointerField(this, 6);
	}
	/**
	 * mangled with G_SIGNAL_TYPE_STATIC_SCOPE flag<br>
	 * C type : const GType*
	 */
	@Field(6) 
	public GSignalQuery param_types(Pointer<org.bridj.CLong > param_types) {
		this.io.setPointerField(this, 6, param_types);
		return this;
	}
	public GSignalQuery() {
		super();
	}
	public GSignalQuery(Pointer pointer) {
		super(pointer);
	}
}
