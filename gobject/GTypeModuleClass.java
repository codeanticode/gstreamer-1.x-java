package gobject;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
/**
 * GTypeModuleClass:<br>
 * @parent_class: the parent class<br>
 * @load: loads the module and registers one or more types using<br>
 *  g_type_module_register_type().<br>
 * @unload: unloads the module<br>
 * <br>
 * In order to implement dynamic loading of types based on #GTypeModule, <br>
 * the @load and @unload functions in #GTypeModuleClass must be implemented.<br>
 * <i>native declaration : glib-2.0/gobject/gtypemodule.h:47</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("GObject") 
public class GTypeModuleClass extends CPPObject {
	static {
		BridJ.register();
	}
	/** C type : GObjectClass */
	@Field(0) 
	public GObjectClass parent_class() {
		return this.io.getNativeObjectField(this, 0);
	}
	/** C type : GObjectClass */
	@Field(0) 
	public GTypeModuleClass parent_class(GObjectClass parent_class) {
		this.io.setNativeObjectField(this, 0, parent_class);
		return this;
	}
	/** C type : unload_callback* */
	@Field(1) 
	public Pointer<GTypeModuleClass.unload_callback > unload() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : unload_callback* */
	@Field(1) 
	public GTypeModuleClass unload(Pointer<GTypeModuleClass.unload_callback > unload) {
		this.io.setPointerField(this, 1, unload);
		return this;
	}
	/**
	 * Padding for future expansion<br>
	 * C type : reserved1_callback*
	 */
	@Field(2) 
	public Pointer<GTypeModuleClass.reserved1_callback > reserved1() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * Padding for future expansion<br>
	 * C type : reserved1_callback*
	 */
	@Field(2) 
	public GTypeModuleClass reserved1(Pointer<GTypeModuleClass.reserved1_callback > reserved1) {
		this.io.setPointerField(this, 2, reserved1);
		return this;
	}
	/** C type : reserved2_callback* */
	@Field(3) 
	public Pointer<GTypeModuleClass.reserved2_callback > reserved2() {
		return this.io.getPointerField(this, 3);
	}
	/** C type : reserved2_callback* */
	@Field(3) 
	public GTypeModuleClass reserved2(Pointer<GTypeModuleClass.reserved2_callback > reserved2) {
		this.io.setPointerField(this, 3, reserved2);
		return this;
	}
	/** C type : reserved3_callback* */
	@Field(4) 
	public Pointer<GTypeModuleClass.reserved3_callback > reserved3() {
		return this.io.getPointerField(this, 4);
	}
	/** C type : reserved3_callback* */
	@Field(4) 
	public GTypeModuleClass reserved3(Pointer<GTypeModuleClass.reserved3_callback > reserved3) {
		this.io.setPointerField(this, 4, reserved3);
		return this;
	}
	/** C type : reserved4_callback* */
	@Field(5) 
	public Pointer<GTypeModuleClass.reserved4_callback > reserved4() {
		return this.io.getPointerField(this, 5);
	}
	/** C type : reserved4_callback* */
	@Field(5) 
	public GTypeModuleClass reserved4(Pointer<GTypeModuleClass.reserved4_callback > reserved4) {
		this.io.setPointerField(this, 5, reserved4);
		return this;
	}
	/** <i>native declaration : glib-2.0/gobject/gtypemodule.h:41</i> */
	public static abstract class gboolean_callback extends Callback<gboolean_callback > {
		public final void apply(Pointer<GTypeModule > module) {
			apply(Pointer.getPeer(module));
		}
		public abstract void apply(@Ptr long module);
	};
	/** <i>native declaration : glib-2.0/gobject/gtypemodule.h:42</i> */
	public static abstract class unload_callback extends Callback<unload_callback > {
		public final void apply(Pointer<GTypeModule > module) {
			apply(Pointer.getPeer(module));
		}
		public abstract void apply(@Ptr long module);
	};
	/** <i>native declaration : glib-2.0/gobject/gtypemodule.h:43</i> */
	public static abstract class reserved1_callback extends Callback<reserved1_callback > {
		public abstract void apply();
	};
	/** <i>native declaration : glib-2.0/gobject/gtypemodule.h:44</i> */
	public static abstract class reserved2_callback extends Callback<reserved2_callback > {
		public abstract void apply();
	};
	/** <i>native declaration : glib-2.0/gobject/gtypemodule.h:45</i> */
	public static abstract class reserved3_callback extends Callback<reserved3_callback > {
		public abstract void apply();
	};
	/** <i>native declaration : glib-2.0/gobject/gtypemodule.h:46</i> */
	public static abstract class reserved4_callback extends Callback<reserved4_callback > {
		public abstract void apply();
	};
	public GTypeModuleClass() {
		super();
	}
	public GTypeModuleClass(Pointer pointer) {
		super(pointer);
	}
}
